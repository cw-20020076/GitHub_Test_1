
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab6c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040ec  0801ae3c  0801ae3c  0002ae3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000069c  0801ef28  0801ef28  0002ef28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0801f5c4  0801f5c4  0002f5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000001c  0801f5dc  0801f5dc  0002f5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0801f5f8  0801f5f8  006d56d0  2**0
                  CONTENTS
  7 .ARM          00000000  0801f5f8  0801f5f8  006d56d0  2**0
                  CONTENTS
  8 .preinit_array 00000000  0801f5f8  0801f5f8  006d56d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0801f5f8  0801f5f8  0002f5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0801f60c  0801f60c  0002f60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  24000000  0801f614  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00006c64  24000110  0801f724  00030110  2**2
                  ALLOC
 13 ._user_heap_stack 00002004  24006d74  0801f724  00036d74  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  006d56d0  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 006956d0  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   001290a2  00000000  00000000  006d56fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001e302  00000000  00000000  007fe7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003bb0  00000000  00000000  0081caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00007620  00000000  00000000  00820658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00047efb  00000000  00000000  00827c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0006e91a  00000000  00000000  0086fb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00189e58  00000000  00000000  008de48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00a682e5  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a708  00000000  00000000  00a683b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000384d3  00000000  00000000  00a72abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000110 	.word	0x24000110
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801ae24 	.word	0x0801ae24

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000114 	.word	0x24000114
 800030c:	0801ae24 	.word	0x0801ae24

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80003b0:	4901      	ldr	r1, [pc, #4]	; (80003b8 <vApplicationIdleHook+0x8>)
 80003b2:	2000      	movs	r0, #0
 80003b4:	f00a b80c 	b.w	800a3d0 <vTaskSetApplicationTaskTag>
 80003b8:	0800154d 	.word	0x0800154d

080003bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80003be:	2064      	movs	r0, #100	; 0x64
 80003c0:	f008 fbc5 	bl	8008b4e <osDelay>
  for(;;)
 80003c4:	e7fb      	b.n	80003be <StartDefaultTask+0x2>
	...

080003c8 <SystemClock_Config>:
{
 80003c8:	b510      	push	{r4, lr}
 80003ca:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003cc:	224c      	movs	r2, #76	; 0x4c
 80003ce:	2100      	movs	r1, #0
 80003d0:	a809      	add	r0, sp, #36	; 0x24
 80003d2:	f019 fd03 	bl	8019ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d6:	2220      	movs	r2, #32
 80003d8:	2100      	movs	r1, #0
 80003da:	a801      	add	r0, sp, #4
 80003dc:	f019 fcfe 	bl	8019ddc <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003e0:	2004      	movs	r0, #4
 80003e2:	f006 ff59 	bl	8007298 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003e6:	2300      	movs	r3, #0
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <SystemClock_Config+0x9c>)
 80003ec:	699a      	ldr	r2, [r3, #24]
 80003ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80003f2:	619a      	str	r2, [r3, #24]
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	0491      	lsls	r1, r2, #18
 8000402:	d5fc      	bpl.n	80003fe <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000404:	4a18      	ldr	r2, [pc, #96]	; (8000468 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000406:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000408:	212c      	movs	r1, #44	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800040c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800040e:	f023 0303 	bic.w	r3, r3, #3
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800041e:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000420:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000424:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000426:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800042a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 800042c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000430:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000432:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000436:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043a:	f006 ff6b 	bl	8007314 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2103      	movs	r1, #3
 8000440:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000442:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000444:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800044c:	2340      	movs	r3, #64	; 0x40
 800044e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000456:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000458:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800045c:	f007 fa5a 	bl	8007914 <HAL_RCC_ClockConfig>
}
 8000460:	b01c      	add	sp, #112	; 0x70
 8000462:	bd10      	pop	{r4, pc}
 8000464:	58024800 	.word	0x58024800
 8000468:	58024400 	.word	0x58024400

0800046c <PeriphCommonClock_Config>:
{
 800046c:	b500      	push	{lr}
 800046e:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000470:	2298      	movs	r2, #152	; 0x98
 8000472:	2100      	movs	r1, #0
 8000474:	a808      	add	r0, sp, #32
 8000476:	f019 fcb1 	bl	8019ddc <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800047a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800047e:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000480:	2150      	movs	r1, #80	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000482:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000484:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000488:	2302      	movs	r3, #2
 800048a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800048e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000496:	2320      	movs	r3, #32
 8000498:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800049a:	f007 fcc1 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
}
 800049e:	b02f      	add	sp, #188	; 0xbc
 80004a0:	f85d fb04 	ldr.w	pc, [sp], #4

080004a4 <main>:
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b0a0      	sub	sp, #128	; 0x80

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004a8:	2210      	movs	r2, #16
 80004aa:	2100      	movs	r1, #0
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x24000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004ac:	f04f 5410 	mov.w	r4, #603979776	; 0x24000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004b0:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004b2:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004b4:	f019 fc92 	bl	8019ddc <memset>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80004b8:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 80004ba:	f005 f821 	bl	8005500 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004be:	4bd6      	ldr	r3, [pc, #856]	; (8000818 <main+0x374>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004c0:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004c2:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80004c6:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004c8:	e9cd 4314 	strd	r4, r3, [sp, #80]	; 0x50
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004cc:	4bd3      	ldr	r3, [pc, #844]	; (800081c <main+0x378>)
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004ce:	2400      	movs	r4, #0
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004d0:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004d2:	f005 f833 	bl	800553c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 80004d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004da:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004dc:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
  MPU_InitStruct.BaseAddress = 0x70000000;
 80004e0:	9314      	str	r3, [sp, #80]	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004e2:	f8ad 405a 	strh.w	r4, [sp, #90]	; 0x5a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80004e6:	f88d 504d 	strb.w	r5, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80004ea:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004ee:	f005 f825 	bl	800553c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004f2:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004f4:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80004f6:	f88d 6057 	strb.w	r6, [sp, #87]	; 0x57
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004fa:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80004fe:	2316      	movs	r3, #22
 8000500:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000504:	f240 1301 	movw	r3, #257	; 0x101
 8000508:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800050c:	f005 f816 	bl	800553c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000510:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000514:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000516:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
  MPU_InitStruct.BaseAddress = 0x90000000;
 800051a:	9314      	str	r3, [sp, #80]	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800051c:	f8ad 405a 	strh.w	r4, [sp, #90]	; 0x5a
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000520:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000522:	f88d 604d 	strb.w	r6, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000526:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800052a:	f005 f807 	bl	800553c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800052e:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000530:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000532:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000536:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800053a:	f88d 6057 	strb.w	r6, [sp, #87]	; 0x57
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800053e:	f88d 505a 	strb.w	r5, [sp, #90]	; 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000542:	f004 fffb 	bl	800553c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000546:	4620      	mov	r0, r4
 8000548:	f004 ffe8 	bl	800551c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800054c:	4bb4      	ldr	r3, [pc, #720]	; (8000820 <main+0x37c>)
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000554:	d111      	bne.n	800057a <main+0xd6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000556:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800055e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000566:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000570:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000572:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000576:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800057a:	4aa9      	ldr	r2, [pc, #676]	; (8000820 <main+0x37c>)
 800057c:	6953      	ldr	r3, [r2, #20]
 800057e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000582:	d123      	bne.n	80005cc <main+0x128>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000584:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000588:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800058c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000590:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000594:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000598:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800059c:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800059e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005a2:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005a8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005aa:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80005ae:	d2f9      	bcs.n	80005a4 <main+0x100>
    } while(sets-- != 0U);
 80005b0:	3b20      	subs	r3, #32
 80005b2:	f113 0f20 	cmn.w	r3, #32
 80005b6:	d1f2      	bne.n	800059e <main+0xfa>
 80005b8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005bc:	6953      	ldr	r3, [r2, #20]
 80005be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c2:	6153      	str	r3, [r2, #20]
 80005c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005c8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80005cc:	f004 fef4 	bl	80053b8 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2400      	movs	r4, #0
  SystemClock_Config();
 80005d2:	f7ff fef9 	bl	80003c8 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 80005d8:	f7ff ff48 	bl	800046c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	2214      	movs	r2, #20
 80005de:	2100      	movs	r1, #0
 80005e0:	a813      	add	r0, sp, #76	; 0x4c
 80005e2:	f019 fbfb 	bl	8019ddc <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b8f      	ldr	r3, [pc, #572]	; (8000824 <main+0x380>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80005e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ec:	488e      	ldr	r0, [pc, #568]	; (8000828 <main+0x384>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80005f2:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f6:	f04f 0803 	mov.w	r8, #3
  hltdc.Instance = LTDC;
 80005fa:	4d8c      	ldr	r5, [pc, #560]	; (800082c <main+0x388>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	f042 0202 	orr.w	r2, r2, #2
  pLayerCfg.FBStartAdress = 0x70000000;
 8000600:	f04f 0905 	mov.w	r9, #5
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000604:	f04f 0a18 	mov.w	sl, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800060c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000610:	f002 0202 	and.w	r2, r2, #2
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000618:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800061c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000620:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000624:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000628:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000630:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000634:	f042 0208 	orr.w	r2, r2, #8
 8000638:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800063c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000640:	f002 0208 	and.w	r2, r2, #8
 8000644:	9202      	str	r2, [sp, #8]
 8000646:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000648:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800064c:	f042 0210 	orr.w	r2, r2, #16
 8000650:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000654:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000658:	f002 0210 	and.w	r2, r2, #16
 800065c:	9203      	str	r2, [sp, #12]
 800065e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000664:	f042 0201 	orr.w	r2, r2, #1
 8000668:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800066c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000670:	f002 0201 	and.w	r2, r2, #1
 8000674:	9204      	str	r2, [sp, #16]
 8000676:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000678:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800067c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000680:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000684:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000688:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800068c:	9205      	str	r2, [sp, #20]
 800068e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000690:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000694:	f042 0204 	orr.w	r2, r2, #4
 8000698:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800069c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006a0:	f002 0204 	and.w	r2, r2, #4
 80006a4:	9206      	str	r2, [sp, #24]
 80006a6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006ac:	f042 0220 	orr.w	r2, r2, #32
 80006b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0320 	and.w	r3, r3, #32
 80006be:	9307      	str	r3, [sp, #28]
 80006c0:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006c2:	f005 fa17 	bl	8005af4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	4858      	ldr	r0, [pc, #352]	; (8000830 <main+0x38c>)
 80006ce:	f005 fa11 	bl	8005af4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	210c      	movs	r1, #12
 80006d6:	4857      	ldr	r0, [pc, #348]	; (8000834 <main+0x390>)
 80006d8:	f005 fa0c 	bl	8005af4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80006e0:	a913      	add	r1, sp, #76	; 0x4c
 80006e2:	4851      	ldr	r0, [pc, #324]	; (8000828 <main+0x384>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f005 f87a 	bl	80057e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80006f0:	a913      	add	r1, sp, #76	; 0x4c
 80006f2:	484f      	ldr	r0, [pc, #316]	; (8000830 <main+0x38c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f005 f872 	bl	80057e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8000700:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	a913      	add	r1, sp, #76	; 0x4c
 8000704:	484b      	ldr	r0, [pc, #300]	; (8000834 <main+0x390>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000706:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000708:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	f005 f868 	bl	80057e4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000714:	4848      	ldr	r0, [pc, #288]	; (8000838 <main+0x394>)
 8000716:	4b49      	ldr	r3, [pc, #292]	; (800083c <main+0x398>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000718:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 800071a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800071c:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800071e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000722:	f004 ff37 	bl	8005594 <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000726:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance = DMA2D;
 800072a:	4845      	ldr	r0, [pc, #276]	; (8000840 <main+0x39c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800072c:	4a45      	ldr	r2, [pc, #276]	; (8000844 <main+0x3a0>)
  hdma2d.Init.OutputOffset = 0;
 800072e:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000732:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000736:	f004 ff8b 	bl	8005650 <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	4621      	mov	r1, r4
 800073e:	a813      	add	r0, sp, #76	; 0x4c
 8000740:	f019 fb4c 	bl	8019ddc <memset>
  hltdc.Instance = LTDC;
 8000744:	4b40      	ldr	r3, [pc, #256]	; (8000848 <main+0x3a4>)
  hltdc.Init.VerticalSync = 9;
 8000746:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000748:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 800074a:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 800074e:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8000752:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000754:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000756:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800075a:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 800075e:	2309      	movs	r3, #9
 8000760:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000764:	230b      	movs	r3, #11
 8000766:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 800076a:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800076e:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000770:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8000774:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000778:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 800077c:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000780:	f005 fe0c 	bl	800639c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000784:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowY1 = 272;
 8000786:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX1 = 480;
 800078a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800078e:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000790:	971a      	str	r7, [sp, #104]	; 0x68
  pLayerCfg.WindowX0 = 0;
 8000792:	9413      	str	r4, [sp, #76]	; 0x4c
  hospi1.Init.ChipSelectHighTime = 2;
 8000794:	2702      	movs	r7, #2
  pLayerCfg.Backcolor.Blue = 0;
 8000796:	f8ad 407c 	strh.w	r4, [sp, #124]	; 0x7c
  pLayerCfg.Backcolor.Red = 0;
 800079a:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
  hospi1.Instance = OCTOSPI1;
 800079e:	4d2b      	ldr	r5, [pc, #172]	; (800084c <main+0x3a8>)
  pLayerCfg.Alpha0 = 0;
 80007a0:	e9cd 1418 	strd	r1, r4, [sp, #96]	; 0x60
  pLayerCfg.FBStartAdress = 0x70000000;
 80007a4:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 80007a8:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
  pLayerCfg.FBStartAdress = 0x70000000;
 80007ac:	e9cd 911b 	strd	r9, r1, [sp, #108]	; 0x6c
  pLayerCfg.WindowY0 = 0;
 80007b0:	e9cd 2414 	strd	r2, r4, [sp, #80]	; 0x50
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007b4:	a913      	add	r1, sp, #76	; 0x4c
 80007b6:	4622      	mov	r2, r4
  hospi1.Init.FifoThreshold = 4;
 80007b8:	f04f 0904 	mov.w	r9, #4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80007bc:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007c0:	f005 feb7 	bl	8006532 <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80007c4:	4621      	mov	r1, r4
 80007c6:	4652      	mov	r2, sl
 80007c8:	a813      	add	r0, sp, #76	; 0x4c
 80007ca:	f019 fb07 	bl	8019ddc <memset>
  hospi1.Init.FifoThreshold = 4;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <main+0x3ac>)
  hospi1.Init.DeviceSize = 32;
 80007d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80007d4:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80007d6:	60ac      	str	r4, [r5, #8]
  hospi1.Init.ClkChipSelectHighTime = 0;
 80007d8:	636c      	str	r4, [r5, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 80007da:	642c      	str	r4, [r5, #64]	; 0x40
  hospi1.Init.FifoThreshold = 4;
 80007dc:	e9c5 3900 	strd	r3, r9, [r5]
  hospi1.Init.DeviceSize = 32;
 80007e0:	2320      	movs	r3, #32
 80007e2:	e9c5 2303 	strd	r2, r3, [r5, #12]
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80007e6:	2308      	movs	r3, #8
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80007e8:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.MaxTran = 0;
 80007ec:	e9c5 340e 	strd	r3, r4, [r5, #56]	; 0x38
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80007f0:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80007f4:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.ChipSelectBoundary = 0;
 80007f8:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80007fc:	f006 f826 	bl	800684c <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000800:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000804:	f241 3288 	movw	r2, #5000	; 0x1388
 8000808:	a913      	add	r1, sp, #76	; 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800080a:	9316      	str	r3, [sp, #88]	; 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800080c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000810:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 1;
 8000812:	9615      	str	r6, [sp, #84]	; 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000814:	9317      	str	r3, [sp, #92]	; 0x5c
 8000816:	e01d      	b.n	8000854 <main+0x3b0>
 8000818:	03000012 	.word	0x03000012
 800081c:	01010001 	.word	0x01010001
 8000820:	e000ed00 	.word	0xe000ed00
 8000824:	58024400 	.word	0x58024400
 8000828:	58021800 	.word	0x58021800
 800082c:	240001c0 	.word	0x240001c0
 8000830:	58020c00 	.word	0x58020c00
 8000834:	58020800 	.word	0x58020800
 8000838:	24000134 	.word	0x24000134
 800083c:	58024c00 	.word	0x58024c00
 8000840:	24000158 	.word	0x24000158
 8000844:	52001000 	.word	0x52001000
 8000848:	50001000 	.word	0x50001000
 800084c:	24000268 	.word	0x24000268
 8000850:	52005000 	.word	0x52005000
  sOspiManagerCfg.DQSPort = 1;
 8000854:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000858:	f006 fa82 	bl	8006d60 <HAL_OSPIM_Config>
  HAL_OSPI_DeInit(&hospi1);
 800085c:	4628      	mov	r0, r5
 800085e:	f006 f86b 	bl	8006938 <HAL_OSPI_DeInit>
  BSP_OSPI_NOR_DeInit(0);
 8000862:	4620      	mov	r0, r4
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000864:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  ospi_nor_int.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8000868:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
  BSP_OSPI_NOR_DeInit(0);
 800086c:	f004 f9fe 	bl	8004c6c <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000870:	a90e      	add	r1, sp, #56	; 0x38
 8000872:	4620      	mov	r0, r4
 8000874:	f004 faec 	bl	8004e50 <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000878:	4620      	mov	r0, r4
 800087a:	f004 f9bf 	bl	8004bfc <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800087e:	4652      	mov	r2, sl
 8000880:	4621      	mov	r1, r4
 8000882:	a813      	add	r0, sp, #76	; 0x4c
 8000884:	f019 faaa 	bl	8019ddc <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000888:	2210      	movs	r2, #16
 800088a:	4621      	mov	r1, r4
 800088c:	a80a      	add	r0, sp, #40	; 0x28
 800088e:	f019 faa5 	bl	8019ddc <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000892:	2214      	movs	r2, #20
 8000894:	4621      	mov	r1, r4
 8000896:	a80e      	add	r0, sp, #56	; 0x38
 8000898:	f019 faa0 	bl	8019ddc <memset>
  hospi2.Instance = OCTOSPI2;
 800089c:	4d30      	ldr	r5, [pc, #192]	; (8000960 <main+0x4bc>)
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <main+0x4c0>)
  hospi2.Init.ChipSelectBoundary = 23;
 80008a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80008a4:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008a6:	60ac      	str	r4, [r5, #8]
  hospi2.Init.MaxTran = 0;
 80008a8:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi2.Init.FifoThreshold = 4;
 80008aa:	e9c5 3900 	strd	r3, r9, [r5]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80008ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hospi2.Init.DeviceSize = 24;
 80008b2:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 80008b6:	2317      	movs	r3, #23
 80008b8:	e9c5 130b 	strd	r1, r3, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 80008bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 80008c0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  hospi2.Init.Refresh = 400;
 80008c4:	642b      	str	r3, [r5, #64]	; 0x40
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008c6:	e9c5 9405 	strd	r9, r4, [r5, #20]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80008ca:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008ce:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80008d2:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80008d6:	f005 ffb9 	bl	800684c <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <main+0x4c4>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e0:	a913      	add	r1, sp, #76	; 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80008e2:	9316      	str	r3, [sp, #88]	; 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80008e4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008e8:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 80008ea:	9715      	str	r7, [sp, #84]	; 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80008ec:	9317      	str	r3, [sp, #92]	; 0x5c
  sOspiManagerCfg.DQSPort = 2;
 80008ee:	e9cd 7713 	strd	r7, r7, [sp, #76]	; 0x4c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008f2:	f006 fa35 	bl	8006d60 <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 80008f6:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80008fc:	a90a      	add	r1, sp, #40	; 0x28
 80008fe:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 8000900:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000904:	960d      	str	r6, [sp, #52]	; 0x34
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000906:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800090a:	f006 f877 	bl	80069fc <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 800090e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000912:	f241 3288 	movw	r2, #5000	; 0x1388
 8000916:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000918:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 800091a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800091e:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000920:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000922:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.Address      = 0;
 8000924:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 8000926:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000928:	f006 f88e 	bl	8006a48 <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 800092c:	a908      	add	r1, sp, #32
 800092e:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000930:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000932:	f006 f9a1 	bl	8006c78 <HAL_OSPI_MemoryMapped>
  MX_TouchGFX_Init();
 8000936:	f000 fc08 	bl	800114a <MX_TouchGFX_Init>
  osKernelInitialize();
 800093a:	f008 f893 	bl	8008a64 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <main+0x4c8>)
 8000940:	4621      	mov	r1, r4
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <main+0x4cc>)
 8000944:	f008 f8ba 	bl	8008abc <osThreadNew>
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <main+0x4d0>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <main+0x4d4>)
 800094c:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800094e:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <main+0x4d8>)
 8000952:	f008 f8b3 	bl	8008abc <osThreadNew>
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <main+0x4dc>)
 8000958:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800095a:	f008 f895 	bl	8008a88 <osKernelStart>
  while (1)
 800095e:	e7fe      	b.n	800095e <main+0x4ba>
 8000960:	240002c8 	.word	0x240002c8
 8000964:	5200a000 	.word	0x5200a000
 8000968:	00010002 	.word	0x00010002
 800096c:	0801aebc 	.word	0x0801aebc
 8000970:	080003bd 	.word	0x080003bd
 8000974:	24000130 	.word	0x24000130
 8000978:	0801ae98 	.word	0x0801ae98
 800097c:	0800114f 	.word	0x0800114f
 8000980:	2400012c 	.word	0x2400012c

08000984 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000984:	6802      	ldr	r2, [r0, #0]
 8000986:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000988:	429a      	cmp	r2, r3
 800098a:	d101      	bne.n	8000990 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800098c:	f004 bd42 	b.w	8005414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40001000 	.word	0x40001000

08000998 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000998:	4770      	bx	lr
	...

0800099c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_MspInit+0x2c>)
{
 800099e:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a0:	210f      	movs	r1, #15
 80009a2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80009aa:	f042 0202 	orr.w	r2, r2, #2
 80009ae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c2:	f004 bd5d 	b.w	8005480 <HAL_NVIC_SetPriority>
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400

080009cc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80009cc:	6802      	ldr	r2, [r0, #0]
{
 80009ce:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_CRC_MspInit+0x2c>)
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d10d      	bne.n	80009f2 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009d6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80009da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009de:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80009e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009f2:	b002      	add	sp, #8
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	58024c00 	.word	0x58024c00

080009fc <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_DMA2D_MspInit+0x40>)
{
 80009fe:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000a00:	6802      	ldr	r2, [r0, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d117      	bne.n	8000a36 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a08:	2105      	movs	r1, #5
 8000a0a:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a0c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000a10:	f042 0210 	orr.w	r2, r2, #16
 8000a14:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a18:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a26:	f004 fd2b 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a2a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000a2c:	b003      	add	sp, #12
 8000a2e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a32:	f004 bd57 	b.w	80054e4 <HAL_NVIC_EnableIRQ>
}
 8000a36:	b003      	add	sp, #12
 8000a38:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a3c:	52001000 	.word	0x52001000
 8000a40:	58024400 	.word	0x58024400

08000a44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a48:	b0ba      	sub	sp, #232	; 0xe8
 8000a4a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	2214      	movs	r2, #20
 8000a4e:	2100      	movs	r1, #0
 8000a50:	a808      	add	r0, sp, #32
 8000a52:	f019 f9c3 	bl	8019ddc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a56:	22b4      	movs	r2, #180	; 0xb4
 8000a58:	2100      	movs	r1, #0
 8000a5a:	a80d      	add	r0, sp, #52	; 0x34
 8000a5c:	f019 f9be 	bl	8019ddc <memset>
  if(hltdc->Instance==LTDC)
 8000a60:	6822      	ldr	r2, [r4, #0]
 8000a62:	4b76      	ldr	r3, [pc, #472]	; (8000c3c <HAL_LTDC_MspInit+0x1f8>)
 8000a64:	429a      	cmp	r2, r3
 8000a66:	f040 80e5 	bne.w	8000c34 <HAL_LTDC_MspInit+0x1f0>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 25;
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000a6e:	2119      	movs	r1, #25
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a70:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a72:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000a74:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000a78:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a7c:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a7e:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8000a82:	231e      	movs	r3, #30
 8000a84:	931a      	str	r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8a:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8c:	f007 f9c8 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	b108      	cbz	r0, 8000a96 <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 8000a92:	f7ff ff81 	bl	8000998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000a96:	4b6a      	ldr	r3, [pc, #424]	; (8000c40 <HAL_LTDC_MspInit+0x1fc>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000a9e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aa2:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	a908      	add	r1, sp, #32
 8000aa6:	4867      	ldr	r0, [pc, #412]	; (8000c44 <HAL_LTDC_MspInit+0x200>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000aa8:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8000aac:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ab0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000ab4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000ab8:	f002 0208 	and.w	r2, r2, #8
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ac4:	f042 0202 	orr.w	r2, r2, #2
 8000ac8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000acc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ad0:	f002 0202 	and.w	r2, r2, #2
 8000ad4:	9201      	str	r2, [sp, #4]
 8000ad6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000adc:	f042 0208 	orr.w	r2, r2, #8
 8000ae0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ae4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ae8:	f002 0208 	and.w	r2, r2, #8
 8000aec:	9202      	str	r2, [sp, #8]
 8000aee:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000af4:	f042 0210 	orr.w	r2, r2, #16
 8000af8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000afc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b00:	f002 0210 	and.w	r2, r2, #16
 8000b04:	9203      	str	r2, [sp, #12]
 8000b06:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b0c:	f042 0201 	orr.w	r2, r2, #1
 8000b10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b18:	f002 0201 	and.w	r2, r2, #1
 8000b1c:	9204      	str	r2, [sp, #16]
 8000b1e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b28:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b30:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b34:	9205      	str	r2, [sp, #20]
 8000b36:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b48:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000b4c:	9206      	str	r2, [sp, #24]
 8000b4e:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b54:	f042 0204 	orr.w	r2, r2, #4
 8000b58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b60:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	9307      	str	r3, [sp, #28]
 8000b68:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f004 fe35 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 8000b7a:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	a908      	add	r1, sp, #32
 8000b7e:	4832      	ldr	r0, [pc, #200]	; (8000c48 <HAL_LTDC_MspInit+0x204>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b80:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f004 fe2b 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000b8e:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b92:	a908      	add	r1, sp, #32
 8000b94:	482d      	ldr	r0, [pc, #180]	; (8000c4c <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b96:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba0:	f004 fe20 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	a908      	add	r1, sp, #32
 8000baa:	4829      	ldr	r0, [pc, #164]	; (8000c50 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000bb0:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000bb6:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f004 fe14 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000bbc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc0:	a908      	add	r1, sp, #32
 8000bc2:	4824      	ldr	r0, [pc, #144]	; (8000c54 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bc4:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bce:	f004 fe09 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8000bd2:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd6:	a908      	add	r1, sp, #32
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bda:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be4:	f004 fdfe 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000be8:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	a908      	add	r1, sp, #32
 8000bec:	481b      	ldr	r0, [pc, #108]	; (8000c5c <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bee:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f004 fdf4 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	a908      	add	r1, sp, #32
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c00:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	e9cd 8608 	strd	r8, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f004 fdeb 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c0e:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c10:	a908      	add	r1, sp, #32
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c18:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c1e:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c20:	f004 fde0 	bl	80057e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000c24:	4640      	mov	r0, r8
 8000c26:	4622      	mov	r2, r4
 8000c28:	2105      	movs	r1, #5
 8000c2a:	f004 fc29 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000c2e:	4640      	mov	r0, r8
 8000c30:	f004 fc58 	bl	80054e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000c34:	b03a      	add	sp, #232	; 0xe8
 8000c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c3a:	bf00      	nop
 8000c3c:	50001000 	.word	0x50001000
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58020400 	.word	0x58020400
 8000c48:	58020c00 	.word	0x58020c00
 8000c4c:	58021000 	.word	0x58021000
 8000c50:	58020000 	.word	0x58020000
 8000c54:	58021800 	.word	0x58021800
 8000c58:	58021c00 	.word	0x58021c00
 8000c5c:	58020800 	.word	0x58020800

08000c60 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c64:	b091      	sub	sp, #68	; 0x44
 8000c66:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	2214      	movs	r2, #20
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	a80b      	add	r0, sp, #44	; 0x2c
 8000c6e:	f019 f8b5 	bl	8019ddc <memset>
  if(hospi->Instance==OCTOSPI1)
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	4a88      	ldr	r2, [pc, #544]	; (8000e98 <HAL_OSPI_MspInit+0x238>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f040 80b0 	bne.w	8000ddc <HAL_OSPI_MspInit+0x17c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000c7c:	4a87      	ldr	r2, [pc, #540]	; (8000e9c <HAL_OSPI_MspInit+0x23c>)
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000c82:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000c84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000c86:	d10c      	bne.n	8000ca2 <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000c88:	4b85      	ldr	r3, [pc, #532]	; (8000ea0 <HAL_OSPI_MspInit+0x240>)
 8000c8a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000c8e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000c92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000c96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000ca2:	4b7f      	ldr	r3, [pc, #508]	; (8000ea0 <HAL_OSPI_MspInit+0x240>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ca6:	2403      	movs	r4, #3
 8000ca8:	2709      	movs	r7, #9
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000caa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cae:	a90b      	add	r1, sp, #44	; 0x2c
 8000cb0:	487c      	ldr	r0, [pc, #496]	; (8000ea4 <HAL_OSPI_MspInit+0x244>)

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2600      	movs	r6, #0
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000cb8:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cbc:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000cc0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000cc4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000cc8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ccc:	9201      	str	r2, [sp, #4]
 8000cce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cd8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ce0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ce4:	9202      	str	r2, [sp, #8]
 8000ce6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cec:	f042 0208 	orr.w	r2, r2, #8
 8000cf0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cf8:	f002 0208 	and.w	r2, r2, #8
 8000cfc:	9203      	str	r2, [sp, #12]
 8000cfe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d04:	f042 0210 	orr.w	r2, r2, #16
 8000d08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d10:	f002 0210 	and.w	r2, r2, #16
 8000d14:	9204      	str	r2, [sp, #16]
 8000d16:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d1c:	f042 0220 	orr.w	r2, r2, #32
 8000d20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d28:	f002 0220 	and.w	r2, r2, #32
 8000d2c:	9205      	str	r2, [sp, #20]
 8000d2e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d34:	f042 0202 	orr.w	r2, r2, #2
 8000d38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	9306      	str	r3, [sp, #24]
 8000d46:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4c:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000d50:	e9cd 470e 	strd	r4, r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d54:	f004 fd46 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 8000d58:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5a:	a90b      	add	r1, sp, #44	; 0x2c
 8000d5c:	4852      	ldr	r0, [pc, #328]	; (8000ea8 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000d5e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6a:	f004 fd3b 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6e:	a90b      	add	r1, sp, #44	; 0x2c
 8000d70:	484e      	ldr	r0, [pc, #312]	; (8000eac <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000d72:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	e9cd 950b 	strd	r9, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7c:	f004 fd32 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d80:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d82:	a90b      	add	r1, sp, #44	; 0x2c
 8000d84:	4847      	ldr	r0, [pc, #284]	; (8000ea4 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000d86:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d92:	f004 fd27 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8000d96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9a:	a90b      	add	r1, sp, #44	; 0x2c
 8000d9c:	4842      	ldr	r0, [pc, #264]	; (8000ea8 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000d9e:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f004 fd1c 	bl	80057e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db0:	a90b      	add	r1, sp, #44	; 0x2c
 8000db2:	483f      	ldr	r0, [pc, #252]	; (8000eb0 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000db4:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dbe:	f004 fd11 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	a90b      	add	r1, sp, #44	; 0x2c
 8000dc4:	483b      	ldr	r0, [pc, #236]	; (8000eb4 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000dc6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	e9cd 950b 	strd	r9, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd2:	f004 fd07 	bl	80057e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8000dd6:	b011      	add	sp, #68	; 0x44
 8000dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 8000ddc:	4a36      	ldr	r2, [pc, #216]	; (8000eb8 <HAL_OSPI_MspInit+0x258>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d1f9      	bne.n	8000dd6 <HAL_OSPI_MspInit+0x176>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000de2:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <HAL_OSPI_MspInit+0x23c>)
 8000de4:	6813      	ldr	r3, [r2, #0]
 8000de6:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000de8:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000dea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000dec:	d10c      	bne.n	8000e08 <HAL_OSPI_MspInit+0x1a8>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <HAL_OSPI_MspInit+0x240>)
 8000df0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000df4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000df8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000dfc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e04:	9307      	str	r3, [sp, #28]
 8000e06:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <HAL_OSPI_MspInit+0x240>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e0a:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e0e:	2609      	movs	r6, #9
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e10:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e14:	a90b      	add	r1, sp, #44	; 0x2c
 8000e16:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2700      	movs	r7, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e1a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e1e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000e22:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000e26:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000e2a:	9208      	str	r2, [sp, #32]
 8000e2c:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e3e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000e42:	9209      	str	r2, [sp, #36]	; 0x24
 8000e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e4a:	f042 0220 	orr.w	r2, r2, #32
 8000e4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	f003 0320 	and.w	r3, r3, #32
 8000e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8000e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e62:	e9cd 460e 	strd	r4, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6a:	f004 fcbb 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e72:	a90b      	add	r1, sp, #44	; 0x2c
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8000e76:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e80:	f004 fcb0 	bl	80057e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000e84:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e88:	a90b      	add	r1, sp, #44	; 0x2c
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e8c:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e96:	e79c      	b.n	8000dd2 <HAL_OSPI_MspInit+0x172>
 8000e98:	52005000 	.word	0x52005000
 8000e9c:	24000328 	.word	0x24000328
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58021800 	.word	0x58021800
 8000ea8:	58020c00 	.word	0x58020c00
 8000eac:	58021000 	.word	0x58021000
 8000eb0:	58021400 	.word	0x58021400
 8000eb4:	58020400 	.word	0x58020400
 8000eb8:	5200a000 	.word	0x5200a000

08000ebc <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_OSPI_MspDeInit+0xa0>)
{
 8000ebe:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8000ec0:	6803      	ldr	r3, [r0, #0]
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d12a      	bne.n	8000f1c <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_OSPI_MspDeInit+0xa4>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_OSPI_MspDeInit+0xa8>)
 8000ed0:	b92a      	cbnz	r2, 8000ede <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000ed2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000ed6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000eda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000ede:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8000ee2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ee6:	4820      	ldr	r0, [pc, #128]	; (8000f68 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000ee8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000eec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8000ef0:	f004 fd5e 	bl	80059b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 8000ef4:	f643 01b0 	movw	r1, #14512	; 0x38b0
 8000ef8:	481c      	ldr	r0, [pc, #112]	; (8000f6c <HAL_OSPI_MspDeInit+0xb0>)
 8000efa:	f004 fd59 	bl	80059b0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8000efe:	2104      	movs	r1, #4
 8000f00:	481b      	ldr	r0, [pc, #108]	; (8000f70 <HAL_OSPI_MspDeInit+0xb4>)
 8000f02:	f004 fd55 	bl	80059b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	481a      	ldr	r0, [pc, #104]	; (8000f74 <HAL_OSPI_MspDeInit+0xb8>)
 8000f0c:	f004 fd50 	bl	80059b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4819      	ldr	r0, [pc, #100]	; (8000f78 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8000f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000f18:	f004 bd4a 	b.w	80059b0 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_OSPI_MspDeInit+0xc0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d11a      	bne.n	8000f58 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_OSPI_MspDeInit+0xa4>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	3a01      	subs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_OSPI_MspDeInit+0xa8>)
 8000f2c:	b92a      	cbnz	r2, 8000f3a <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000f2e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f32:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8000f3a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8000f3e:	f641 4103 	movw	r1, #7171	; 0x1c03
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8000f44:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000f48:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8000f4c:	f004 fd30 	bl	80059b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000f50:	f241 011f 	movw	r1, #4127	; 0x101f
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <HAL_OSPI_MspDeInit+0xb8>)
 8000f56:	e7dd      	b.n	8000f14 <HAL_OSPI_MspDeInit+0x58>
}
 8000f58:	bd08      	pop	{r3, pc}
 8000f5a:	bf00      	nop
 8000f5c:	52005000 	.word	0x52005000
 8000f60:	24000328 	.word	0x24000328
 8000f64:	58024400 	.word	0x58024400
 8000f68:	58021800 	.word	0x58021800
 8000f6c:	58020c00 	.word	0x58020c00
 8000f70:	58021000 	.word	0x58021000
 8000f74:	58021400 	.word	0x58021400
 8000f78:	58020400 	.word	0x58020400
 8000f7c:	5200a000 	.word	0x5200a000

08000f80 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	280f      	cmp	r0, #15
{
 8000f82:	b510      	push	{r4, lr}
 8000f84:	4604      	mov	r4, r0
 8000f86:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f88:	d902      	bls.n	8000f90 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8000f8c:	b00a      	add	sp, #40	; 0x28
 8000f8e:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000f90:	4601      	mov	r1, r0
 8000f92:	2200      	movs	r2, #0
 8000f94:	2036      	movs	r0, #54	; 0x36
 8000f96:	f004 fa73 	bl	8005480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f9a:	2036      	movs	r0, #54	; 0x36
 8000f9c:	f004 faa2 	bl	80054e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa2:	4669      	mov	r1, sp
 8000fa4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8000fa6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_InitTick+0x88>)
 8000faa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000fae:	f042 0210 	orr.w	r2, r2, #16
 8000fb2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc2:	f006 fe13 	bl	8007bec <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fc6:	9b07      	ldr	r3, [sp, #28]
 8000fc8:	b9c3      	cbnz	r3, 8000ffc <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fca:	f006 fdeb 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8000fce:	4c0f      	ldr	r4, [pc, #60]	; (800100c <HAL_InitTick+0x8c>)
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_InitTick+0x90>)
 8000fd2:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fd4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000fd8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_InitTick+0x94>)
 8000fdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fe0:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8000fe2:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fe4:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fe6:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8000fe8:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fec:	f007 fcfa 	bl	80089e4 <HAL_TIM_Base_Init>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d1ca      	bne.n	8000f8a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f007 fb8d 	bl	8008714 <HAL_TIM_Base_Start_IT>
 8000ffa:	e7c7      	b.n	8000f8c <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ffc:	f006 fdd2 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8001000:	0040      	lsls	r0, r0, #1
 8001002:	e7e4      	b.n	8000fce <HAL_InitTick+0x4e>
 8001004:	24000048 	.word	0x24000048
 8001008:	58024400 	.word	0x58024400
 800100c:	2400032c 	.word	0x2400032c
 8001010:	40001000 	.word	0x40001000
 8001014:	000f4240 	.word	0x000f4240

08001018 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001018:	4770      	bx	lr

0800101a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler>

0800101c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler>

0800101e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler>

08001020 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler>

08001022 <DebugMon_Handler>:
 8001022:	4770      	bx	lr

08001024 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001024:	4801      	ldr	r0, [pc, #4]	; (800102c <TIM6_DAC_IRQHandler+0x8>)
 8001026:	f007 bbbf 	b.w	80087a8 <HAL_TIM_IRQHandler>
 800102a:	bf00      	nop
 800102c:	2400032c 	.word	0x2400032c

08001030 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001030:	4801      	ldr	r0, [pc, #4]	; (8001038 <LTDC_IRQHandler+0x8>)
 8001032:	f005 ba21 	b.w	8006478 <HAL_LTDC_IRQHandler>
 8001036:	bf00      	nop
 8001038:	240001c0 	.word	0x240001c0

0800103c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800103c:	4801      	ldr	r0, [pc, #4]	; (8001044 <DMA2D_IRQHandler+0x8>)
 800103e:	f004 bb46 	b.w	80056ce <HAL_DMA2D_IRQHandler>
 8001042:	bf00      	nop
 8001044:	24000158 	.word	0x24000158

08001048 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001048:	2001      	movs	r0, #1
 800104a:	4770      	bx	lr

0800104c <_kill>:

int _kill(int pid, int sig)
{
 800104c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800104e:	f018 fe6b 	bl	8019d28 <__errno>
 8001052:	2316      	movs	r3, #22
 8001054:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	bd08      	pop	{r3, pc}

0800105c <_exit>:

void _exit (int status)
{
 800105c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800105e:	f018 fe63 	bl	8019d28 <__errno>
 8001062:	2316      	movs	r3, #22
 8001064:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001066:	e7fe      	b.n	8001066 <_exit+0xa>

08001068 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	460d      	mov	r5, r1
 800106c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	460e      	mov	r6, r1
 8001070:	1b73      	subs	r3, r6, r5
 8001072:	429c      	cmp	r4, r3
 8001074:	dc01      	bgt.n	800107a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001076:	4620      	mov	r0, r4
 8001078:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800107a:	f3af 8000 	nop.w
 800107e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	e7f5      	b.n	8001070 <_read+0x8>

08001084 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001084:	b570      	push	{r4, r5, r6, lr}
 8001086:	460d      	mov	r5, r1
 8001088:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	460e      	mov	r6, r1
 800108c:	1b73      	subs	r3, r6, r5
 800108e:	429c      	cmp	r4, r3
 8001090:	dc01      	bgt.n	8001096 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001092:	4620      	mov	r0, r4
 8001094:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001096:	f816 0b01 	ldrb.w	r0, [r6], #1
 800109a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	e7f5      	b.n	800108c <_write+0x8>

080010a0 <_close>:

int _close(int file)
{
	return -1;
}
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	4770      	bx	lr

080010a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80010aa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80010ac:	604b      	str	r3, [r1, #4]
}
 80010ae:	4770      	bx	lr

080010b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80010b0:	2001      	movs	r0, #1
 80010b2:	4770      	bx	lr

080010b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80010b4:	2000      	movs	r0, #0
 80010b6:	4770      	bx	lr

080010b8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <_sbrk+0x30>)
{
 80010ba:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80010bc:	6811      	ldr	r1, [r2, #0]
{
 80010be:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80010c0:	b909      	cbnz	r1, 80010c6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80010c2:	490a      	ldr	r1, [pc, #40]	; (80010ec <_sbrk+0x34>)
 80010c4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	6810      	ldr	r0, [r2, #0]
 80010c8:	4909      	ldr	r1, [pc, #36]	; (80010f0 <_sbrk+0x38>)
 80010ca:	4c0a      	ldr	r4, [pc, #40]	; (80010f4 <_sbrk+0x3c>)
 80010cc:	4403      	add	r3, r0
 80010ce:	1b09      	subs	r1, r1, r4
 80010d0:	428b      	cmp	r3, r1
 80010d2:	d906      	bls.n	80010e2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80010d4:	f018 fe28 	bl	8019d28 <__errno>
 80010d8:	230c      	movs	r3, #12
 80010da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80010e0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80010e2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80010e4:	e7fc      	b.n	80010e0 <_sbrk+0x28>
 80010e6:	bf00      	nop
 80010e8:	24000378 	.word	0x24000378
 80010ec:	24006d78 	.word	0x24006d78
 80010f0:	24050000 	.word	0x24050000
 80010f4:	00001000 	.word	0x00001000

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010fc:	f004 f906 	bl	800530c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001100:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001102:	e003      	b.n	800110c <LoopCopyDataInit>

08001104 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001106:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001108:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800110a:	3104      	adds	r1, #4

0800110c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001110:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001114:	d3f6      	bcc.n	8001104 <CopyDataInit>
  ldr  r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001118:	e002      	b.n	8001120 <LoopFillZerobss>

0800111a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800111a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800111c:	f842 3b04 	str.w	r3, [r2], #4

08001120 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001124:	d3f9      	bcc.n	800111a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001126:	f018 fe17 	bl	8019d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff f9bb 	bl	80004a4 <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001134:	0801f614 	.word	0x0801f614
  ldr  r0, =_sdata
 8001138:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800113c:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 8001140:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 8001144:	24006d74 	.word	0x24006d74

08001148 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC3_IRQHandler>

0800114a <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800114a:	f000 bc89 	b.w	8001a60 <touchgfx_init>

0800114e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800114e:	f000 bcf7 	b.w	8001b40 <touchgfx_taskEntry>

08001152 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001152:	6840      	ldr	r0, [r0, #4]
    }
 8001154:	4770      	bx	lr

08001156 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001156:	6041      	str	r1, [r0, #4]
    }
 8001158:	4770      	bx	lr
	...

0800115c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 800115c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001160:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001168:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800116e:	4a06      	ldr	r2, [pc, #24]	; (8001188 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001170:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001174:	430a      	orrs	r2, r1
 8001176:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	4770      	bx	lr
 8001184:	e0001000 	.word	0xe0001000
 8001188:	c5acce55 	.word	0xc5acce55

0800118c <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800118c:	1a51      	subs	r1, r2, r1
 800118e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001192:	fbb1 f0f3 	udiv	r0, r1, r3
 8001196:	4770      	bx	lr

08001198 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001198:	4b01      	ldr	r3, [pc, #4]	; (80011a0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 800119a:	6858      	ldr	r0, [r3, #4]
}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e0001000 	.word	0xe0001000

080011a4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80011a4:	4770      	bx	lr

080011a6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80011a6:	b510      	push	{r4, lr}
 80011a8:	4604      	mov	r4, r0
 80011aa:	210c      	movs	r1, #12
 80011ac:	f018 fd5c 	bl	8019c68 <_ZdlPvj>
 80011b0:	4620      	mov	r0, r4
 80011b2:	bd10      	pop	{r4, pc}

080011b4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80011b4:	6803      	ldr	r3, [r0, #0]
{
 80011b6:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80011b8:	691b      	ldr	r3, [r3, #16]
{
 80011ba:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80011bc:	b131      	cbz	r1, 80011cc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80011be:	4798      	blx	r3
 80011c0:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80011c2:	6863      	ldr	r3, [r4, #4]
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	4418      	add	r0, r3
 80011c8:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80011ca:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80011cc:	4798      	blx	r3
 80011ce:	60a0      	str	r0, [r4, #8]
}
 80011d0:	e7fb      	b.n	80011ca <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080011d2 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80011d2:	4770      	bx	lr

080011d4 <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80011d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 80011d6:	2308      	movs	r3, #8
 80011d8:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 80011da:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 80011dc:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <_ZN20STM32TouchController4initEv+0x24>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <_ZN20STM32TouchController4initEv+0x28>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 80011ec:	f003 ffaa 	bl	8005144 <BSP_TS_Init>
}
 80011f0:	b005      	add	sp, #20
 80011f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011f6:	bf00      	nop
 80011f8:	24006aea 	.word	0x24006aea
 80011fc:	24006aec 	.word	0x24006aec

08001200 <_ZN20STM32TouchControllerD0Ev>:
 8001200:	b510      	push	{r4, lr}
 8001202:	4604      	mov	r4, r0
 8001204:	2104      	movs	r1, #4
 8001206:	f018 fd2f 	bl	8019c68 <_ZdlPvj>
 800120a:	4620      	mov	r0, r4
 800120c:	bd10      	pop	{r4, pc}

0800120e <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800120e:	b530      	push	{r4, r5, lr}
 8001210:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 8001212:	2000      	movs	r0, #0
{
 8001214:	460d      	mov	r5, r1
 8001216:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001218:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 800121a:	9003      	str	r0, [sp, #12]
 800121c:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001220:	f004 f812 	bl	8005248 <BSP_TS_GetState>
 8001224:	b140      	cbz	r0, 8001238 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800122a:	f383 8811 	msr	BASEPRI, r3
 800122e:	f3bf 8f6f 	isb	sy
 8001232:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 8001236:	e7fe      	b.n	8001236 <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001238:	9801      	ldr	r0, [sp, #4]
 800123a:	b120      	cbz	r0, 8001246 <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 800123c:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 800123e:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001240:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 8001242:	9b03      	ldr	r3, [sp, #12]
 8001244:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 8001246:	b005      	add	sp, #20
 8001248:	bd30      	pop	{r4, r5, pc}
	...

0800124c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 800124c:	b110      	cbz	r0, 8001254 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 800124e:	2801      	cmp	r0, #1
 8001250:	d009      	beq.n	8001266 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001252:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001256:	2108      	movs	r1, #8
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	fab2 f282 	clz	r2, r2
 800125e:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8001262:	f004 bc47 	b.w	8005af4 <HAL_GPIO_WritePin>
 8001266:	4b03      	ldr	r3, [pc, #12]	; (8001274 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001268:	2104      	movs	r1, #4
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	0952      	lsrs	r2, r2, #5
 8001272:	e7f5      	b.n	8001260 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8001274:	2400037c 	.word	0x2400037c
 8001278:	58020800 	.word	0x58020800

0800127c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 800127c:	b110      	cbz	r0, 8001284 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 800127e:	2801      	cmp	r0, #1
 8001280:	d009      	beq.n	8001296 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001282:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001286:	2108      	movs	r1, #8
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	3a00      	subs	r2, #0
 800128c:	bf18      	it	ne
 800128e:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8001292:	f004 bc2f 	b.w	8005af4 <HAL_GPIO_WritePin>
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001298:	2104      	movs	r1, #4
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	3a00      	subs	r2, #0
 800129e:	bf18      	it	ne
 80012a0:	2201      	movne	r2, #1
 80012a2:	e7f5      	b.n	8001290 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 80012a4:	2400037c 	.word	0x2400037c
 80012a8:	58020800 	.word	0x58020800

080012ac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80012ac:	b110      	cbz	r0, 80012b4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 80012ae:	2801      	cmp	r0, #1
 80012b0:	d004      	beq.n	80012bc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 80012b2:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80012b4:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80012b6:	4802      	ldr	r0, [pc, #8]	; (80012c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 80012b8:	f004 bc21 	b.w	8005afe <HAL_GPIO_TogglePin>
 80012bc:	2104      	movs	r1, #4
 80012be:	e7fa      	b.n	80012b6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 80012c0:	58020800 	.word	0x58020800

080012c4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80012c4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80012c6:	b130      	cbz	r0, 80012d6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 80012c8:	2801      	cmp	r0, #1
 80012ca:	d009      	beq.n	80012e0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 80012cc:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80012ce:	1e43      	subs	r3, r0, #1
 80012d0:	4258      	negs	r0, r3
 80012d2:	4158      	adcs	r0, r3
 80012d4:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80012d6:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 80012da:	f004 fc05 	bl	8005ae8 <HAL_GPIO_ReadPin>
        break;
 80012de:	e7f6      	b.n	80012ce <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80012e0:	2104      	movs	r1, #4
 80012e2:	e7f9      	b.n	80012d8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 80012e4:	58020800 	.word	0x58020800

080012e8 <_ZN8touchgfx4GPIO4initEv>:
{
 80012e8:	b570      	push	{r4, r5, r6, lr}
 80012ea:	4d08      	ldr	r5, [pc, #32]	; (800130c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 80012ec:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 80012ee:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 80012f0:	b2e0      	uxtb	r0, r4
 80012f2:	f7ff ffe7 	bl	80012c4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 80012f6:	b118      	cbz	r0, 8001300 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80012fc:	bf18      	it	ne
 80012fe:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001300:	3401      	adds	r4, #1
 8001302:	3504      	adds	r5, #4
 8001304:	2c05      	cmp	r4, #5
 8001306:	d1f3      	bne.n	80012f0 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001308:	bd70      	pop	{r4, r5, r6, pc}
 800130a:	bf00      	nop
 800130c:	2400037c 	.word	0x2400037c

08001310 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001310:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001312:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001316:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 800131a:	4770      	bx	lr

0800131c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 800131c:	2000      	movs	r0, #0
 800131e:	4770      	bx	lr

08001320 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001320:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001322:	3900      	subs	r1, #0
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001326:	bf18      	it	ne
 8001328:	2101      	movne	r1, #1
 800132a:	7019      	strb	r1, [r3, #0]
    }
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	24006aef 	.word	0x24006aef

08001334 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001334:	2000      	movs	r0, #0
 8001336:	4770      	bx	lr

08001338 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001338:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800133a:	b10b      	cbz	r3, 8001340 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800133c:	4608      	mov	r0, r1
 800133e:	4718      	bx	r3
        }
    }
 8001340:	4770      	bx	lr

08001342 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001342:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001346:	4770      	bx	lr

08001348 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001348:	6840      	ldr	r0, [r0, #4]
 800134a:	6803      	ldr	r3, [r0, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4718      	bx	r3

08001350 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001350:	4770      	bx	lr
	...

08001354 <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001358:	f000 fc9a 	bl	8001c90 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 800135e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	4620      	mov	r0, r4
 8001366:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <_ZN11TouchGFXHAL10initializeEv+0x38>)
 800136c:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 800136e:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 8001372:	f7ff ffb9 	bl	80012e8 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001376:	4628      	mov	r0, r5
 8001378:	f7ff fef0 	bl	800115c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 800137c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800137e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001380:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001384:	bd38      	pop	{r3, r4, r5, pc}
 8001386:	bf00      	nop
 8001388:	70060000 	.word	0x70060000
 800138c:	700c0000 	.word	0x700c0000

08001390 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001390:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001392:	6803      	ldr	r3, [r0, #0]
{
 8001394:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800139a:	4798      	blx	r3
    enableInterrupts();
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	4620      	mov	r0, r4
 80013a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013a2:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80013a4:	f000 f92a 	bl	80015fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	4620      	mov	r0, r4
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 80013b8:	f004 fb9c 	bl	8005af4 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <_ZN11TouchGFXHAL9taskEntryEv+0x4c>)
 80013c4:	f004 fb96 	bl	8005af4 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80013c8:	f000 f918 	bl	80015fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	4620      	mov	r0, r4
 80013d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d2:	4798      	blx	r3
    for (;;)
 80013d4:	e7f8      	b.n	80013c8 <_ZN11TouchGFXHAL9taskEntryEv+0x38>
 80013d6:	bf00      	nop
 80013d8:	58020c00 	.word	0x58020c00
 80013dc:	58021800 	.word	0x58021800

080013e0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80013e0:	b510      	push	{r4, lr}
 80013e2:	4604      	mov	r4, r0
        swapFrameBuffers();
 80013e4:	f00a fe16 	bl	800c014 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	4620      	mov	r0, r4
 80013ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 80013f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80013f4:	4718      	bx	r3

080013f6 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80013f6:	f000 bc3d 	b.w	8001c74 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

080013fa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80013fa:	f000 bc41 	b.w	8001c80 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

08001400 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001400:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001402:	f000 fc93 	bl	8001d2c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001406:	4910      	ldr	r1, [pc, #64]	; (8001448 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001408:	2300      	movs	r3, #0
 800140a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800140e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001412:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001416:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800141a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800141e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001422:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001424:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001428:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800142a:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800142e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001430:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001434:	d2f9      	bcs.n	800142a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001436:	3b20      	subs	r3, #32
 8001438:	f113 0f20 	cmn.w	r3, #32
 800143c:	d1f2      	bne.n	8001424 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 800143e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001442:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001446:	bd70      	pop	{r4, r5, r6, pc}
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800144c:	f000 bbee 	b.w	8001c2c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001450 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001450:	f000 bc8e 	b.w	8001d70 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001454 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001454:	f000 bc78 	b.w	8001d48 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001458 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001458:	f000 bbf2 	b.w	8001c40 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

0800145c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800145c:	f009 bf66 	b.w	800b32c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001460 <_ZN11TouchGFXHALD0Ev>:
 8001460:	b510      	push	{r4, lr}
 8001462:	4604      	mov	r4, r0
 8001464:	2188      	movs	r1, #136	; 0x88
 8001466:	f018 fbff 	bl	8019c68 <_ZdlPvj>
 800146a:	4620      	mov	r0, r4
 800146c:	bd10      	pop	{r4, pc}

0800146e <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 800146e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001472:	b11b      	cbz	r3, 800147c <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001474:	6840      	ldr	r0, [r0, #4]
 8001476:	6803      	ldr	r3, [r0, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4718      	bx	r3
    }
 800147c:	4618      	mov	r0, r3
 800147e:	4770      	bx	lr

08001480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001480:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001486:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001488:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 800148c:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800148e:	428c      	cmp	r4, r1
 8001490:	d009      	beq.n	80014a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001492:	b93a      	cbnz	r2, 80014a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001494:	490a      	ldr	r1, [pc, #40]	; (80014c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001498:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800149a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 800149c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800149e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014a0:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80014a2:	701a      	strb	r2, [r3, #0]
        }
    }
 80014a4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	d0fc      	beq.n	80014a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014aa:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80014ac:	4904      	ldr	r1, [pc, #16]	; (80014c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014ae:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80014b0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014b2:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80014b4:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80014b6:	2200      	movs	r2, #0
 80014b8:	e7f3      	b.n	80014a2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80014ba:	bf00      	nop
 80014bc:	24006ae8 	.word	0x24006ae8
 80014c0:	24006ae6 	.word	0x24006ae6
 80014c4:	24006ae4 	.word	0x24006ae4

080014c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	460d      	mov	r5, r1
 80014cc:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80014ce:	b935      	cbnz	r5, 80014de <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80014d2:	f240 21bb 	movw	r1, #699	; 0x2bb
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80014da:	f018 fbf3 	bl	8019cc4 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80014de:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80014e2:	3a00      	subs	r2, #0
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80014e6:	bf18      	it	ne
 80014e8:	2201      	movne	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80014ec:	6803      	ldr	r3, [r0, #0]
    }
 80014ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80014f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014f6:	4718      	bx	r3
 80014f8:	0801af20 	.word	0x0801af20
 80014fc:	0801af58 	.word	0x0801af58
 8001500:	0801afa6 	.word	0x0801afa6
 8001504:	24006aee 	.word	0x24006aee

08001508 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001508:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	428b      	cmp	r3, r1
 8001510:	d803      	bhi.n	800151a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	4293      	cmp	r3, r2
 8001518:	d905      	bls.n	8001526 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800151c:	219e      	movs	r1, #158	; 0x9e
 800151e:	4a07      	ldr	r2, [pc, #28]	; (800153c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001522:	f018 fbcf 	bl	8019cc4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001528:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800152c:	801a      	strh	r2, [r3, #0]
    }
 800152e:	bd08      	pop	{r3, pc}
 8001530:	24006ae4 	.word	0x24006ae4
 8001534:	24006ae6 	.word	0x24006ae6
 8001538:	0801afeb 	.word	0x0801afeb
 800153c:	0801b04e 	.word	0x0801b04e
 8001540:	0801afa6 	.word	0x0801afa6
 8001544:	24006aea 	.word	0x24006aea
 8001548:	24006aec 	.word	0x24006aec

0800154c <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 800154c:	4601      	mov	r1, r0
 800154e:	b508      	push	{r3, lr}
        return instance;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <IdleTaskHook+0x14>)
 8001552:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001554:	b101      	cbz	r1, 8001558 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001556:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001558:	f00a fd76 	bl	800c048 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 800155c:	2001      	movs	r0, #1
 800155e:	bd08      	pop	{r3, pc}
 8001560:	24006af0 	.word	0x24006af0

08001564 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001564:	2101      	movs	r1, #1
 8001566:	2200      	movs	r2, #0
{
 8001568:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800156a:	4608      	mov	r0, r1
 800156c:	f007 fafb 	bl	8008b66 <osSemaphoreNew>
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001572:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001574:	b928      	cbnz	r0, 8001582 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001578:	2128      	movs	r1, #40	; 0x28
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800157e:	f018 fba1 	bl	8019cc4 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001582:	2200      	movs	r2, #0
 8001584:	2104      	movs	r1, #4
 8001586:	2001      	movs	r0, #1
 8001588:	f007 fb8a 	bl	8008ca0 <osMessageQueueNew>
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800158e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001590:	b918      	cbnz	r0, 800159a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001594:	212c      	movs	r1, #44	; 0x2c
 8001596:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001598:	e7f0      	b.n	800157c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 800159a:	bd08      	pop	{r3, pc}
 800159c:	24000390 	.word	0x24000390
 80015a0:	0801b16c 	.word	0x0801b16c
 80015a4:	0801b1b5 	.word	0x0801b1b5
 80015a8:	0801b1e4 	.word	0x0801b1e4
 80015ac:	2400038c 	.word	0x2400038c
 80015b0:	0801b270 	.word	0x0801b270

080015b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80015b4:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80015b6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	f007 bb1d 	b.w	8008bfa <osSemaphoreAcquire>
 80015c0:	24000390 	.word	0x24000390

080015c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80015c4:	4b01      	ldr	r3, [pc, #4]	; (80015cc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	f007 bb42 	b.w	8008c50 <osSemaphoreRelease>
 80015cc:	24000390 	.word	0x24000390

080015d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80015d2:	2100      	movs	r1, #0
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	f007 bb10 	b.w	8008bfa <osSemaphoreAcquire>
 80015da:	bf00      	nop
 80015dc:	24000390 	.word	0x24000390

080015e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 80015e0:	f7ff bff0 	b.w	80015c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080015e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80015e4:	2300      	movs	r3, #0
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80015e8:	4903      	ldr	r1, [pc, #12]	; (80015f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80015ea:	461a      	mov	r2, r3
 80015ec:	6800      	ldr	r0, [r0, #0]
 80015ee:	f007 bb92 	b.w	8008d16 <osMessageQueuePut>
 80015f2:	bf00      	nop
 80015f4:	2400038c 	.word	0x2400038c
 80015f8:	24000004 	.word	0x24000004

080015fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80015fc:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80015fe:	2300      	movs	r3, #0
 8001600:	4c07      	ldr	r4, [pc, #28]	; (8001620 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001602:	a901      	add	r1, sp, #4
 8001604:	461a      	mov	r2, r3
 8001606:	6820      	ldr	r0, [r4, #0]
 8001608:	f007 fbb5 	bl	8008d76 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	2200      	movs	r2, #0
 8001612:	a901      	add	r1, sp, #4
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	f007 fbae 	bl	8008d76 <osMessageQueueGet>
}
 800161a:	b002      	add	sp, #8
 800161c:	bd10      	pop	{r4, pc}
 800161e:	bf00      	nop
 8001620:	2400038c 	.word	0x2400038c

08001624 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001624:	6803      	ldr	r3, [r0, #0]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	4718      	bx	r3

0800162a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800162a:	2001      	movs	r0, #1
 800162c:	4770      	bx	lr

0800162e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 800162e:	6803      	ldr	r3, [r0, #0]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	4718      	bx	r3

08001634 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001634:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001638:	4770      	bx	lr
	...

0800163c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001642:	6003      	str	r3, [r0, #0]
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <_ZN8STM32DMAD1Ev+0x1c>)
 8001646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800164e:	f3bf 8f6f 	isb	sy
}
 8001652:	4770      	bx	lr
 8001654:	0801b44c 	.word	0x0801b44c
 8001658:	e000e100 	.word	0xe000e100

0800165c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800165c:	b510      	push	{r4, lr}
 800165e:	4604      	mov	r4, r0
}
 8001660:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001664:	f7ff ffea 	bl	800163c <_ZN8STM32DMAD1Ev>
 8001668:	4620      	mov	r0, r4
 800166a:	f018 fafd 	bl	8019c68 <_ZdlPvj>
 800166e:	4620      	mov	r0, r4
 8001670:	bd10      	pop	{r4, pc}
	...

08001674 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001676:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001678:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800167c:	f042 0210 	orr.w	r2, r2, #16
 8001680:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001684:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001688:	f002 0210 	and.w	r2, r2, #16
 800168c:	9201      	str	r2, [sp, #4]
 800168e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001690:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001692:	f042 0210 	orr.w	r2, r2, #16
 8001696:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001698:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800169a:	f022 0210 	bic.w	r2, r2, #16
 800169e:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <_ZN8STM32DMA10initializeEv+0x44>)
 80016a2:	4a06      	ldr	r2, [pc, #24]	; (80016bc <_ZN8STM32DMA10initializeEv+0x48>)
 80016a4:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <_ZN8STM32DMA10initializeEv+0x4c>)
 80016a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ac:	609a      	str	r2, [r3, #8]
}
 80016ae:	b002      	add	sp, #8
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	58024400 	.word	0x58024400
 80016b8:	24000158 	.word	0x24000158
 80016bc:	080016c5 	.word	0x080016c5
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <DMA2D_XferCpltCallback>:
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <DMA2D_XferCpltCallback+0xc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80016ca:	6803      	ldr	r3, [r0, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4718      	bx	r3
 80016d0:	24006af0 	.word	0x24006af0

080016d4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <_ZN8STM32DMAC1Ev+0x30>)
 80016da:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80016dc:	2600      	movs	r6, #0
 80016de:	4625      	mov	r5, r4
 80016e0:	2260      	movs	r2, #96	; 0x60
 80016e2:	6060      	str	r0, [r4, #4]
 80016e4:	7226      	strb	r6, [r4, #8]
 80016e6:	7266      	strb	r6, [r4, #9]
 80016e8:	f845 3b20 	str.w	r3, [r5], #32
 80016ec:	4629      	mov	r1, r5
 80016ee:	f00a fe11 	bl	800c314 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80016f2:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 80016f6:	60ee      	str	r6, [r5, #12]
 80016f8:	3524      	adds	r5, #36	; 0x24
 80016fa:	42ab      	cmp	r3, r5
 80016fc:	d1fb      	bne.n	80016f6 <_ZN8STM32DMAC1Ev+0x22>
}
 80016fe:	4620      	mov	r0, r4
 8001700:	bd70      	pop	{r4, r5, r6, pc}
 8001702:	bf00      	nop
 8001704:	0801b44c 	.word	0x0801b44c

08001708 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001708:	b508      	push	{r3, lr}
    switch (format)
 800170a:	290b      	cmp	r1, #11
 800170c:	d80b      	bhi.n	8001726 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 800170e:	e8df f001 	tbb	[pc, r1]
 8001712:	0612      	.short	0x0612
 8001714:	0a0a0a10 	.word	0x0a0a0a10
 8001718:	0808080a 	.word	0x0808080a
 800171c:	0808      	.short	0x0808
 800171e:	2001      	movs	r0, #1
}
 8001720:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001722:	2005      	movs	r0, #5
        break;
 8001724:	e7fc      	b.n	8001720 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001728:	2166      	movs	r1, #102	; 0x66
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 800172e:	f018 fac9 	bl	8019cc4 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001732:	2000      	movs	r0, #0
 8001734:	e7f4      	b.n	8001720 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001736:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001738:	e7f2      	b.n	8001720 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800173a:	bf00      	nop
 800173c:	0801b2b2 	.word	0x0801b2b2
 8001740:	0801b2cd 	.word	0x0801b2cd
 8001744:	0801b317 	.word	0x0801b317

08001748 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001748:	b508      	push	{r3, lr}
    switch (format)
 800174a:	290a      	cmp	r1, #10
 800174c:	d809      	bhi.n	8001762 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800174e:	e8df f001 	tbb	[pc, r1]
 8001752:	0610      	.short	0x0610
 8001754:	0808080e 	.word	0x0808080e
 8001758:	06060608 	.word	0x06060608
 800175c:	06          	.byte	0x06
 800175d:	00          	.byte	0x00
 800175e:	2001      	movs	r0, #1
}
 8001760:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001764:	2187      	movs	r1, #135	; 0x87
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800176a:	f018 faab 	bl	8019cc4 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800176e:	2000      	movs	r0, #0
 8001770:	e7f6      	b.n	8001760 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001772:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001774:	e7f4      	b.n	8001760 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001776:	bf00      	nop
 8001778:	0801b2b2 	.word	0x0801b2b2
 800177c:	0801b3a1 	.word	0x0801b3a1
 8001780:	0801b317 	.word	0x0801b317

08001784 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001788:	7f4f      	ldrb	r7, [r1, #29]
{
 800178a:	460c      	mov	r4, r1
 800178c:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800178e:	4639      	mov	r1, r7
 8001790:	f7ff ffba 	bl	8001708 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001794:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001798:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800179a:	4648      	mov	r0, r9
 800179c:	4641      	mov	r1, r8
 800179e:	f7ff ffb3 	bl	8001708 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80017a2:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80017a4:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80017a6:	4648      	mov	r0, r9
 80017a8:	f7ff ffce 	bl	8001748 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80017ac:	8aa1      	ldrh	r1, [r4, #20]
 80017ae:	8b62      	ldrh	r2, [r4, #26]
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80017b2:	1a52      	subs	r2, r2, r1
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80017b6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80017b8:	8b22      	ldrh	r2, [r4, #24]
 80017ba:	1a52      	subs	r2, r2, r1
 80017bc:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80017be:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80017c0:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80017c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80017c6:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80017ca:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80017cc:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80017ce:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80017d0:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80017d2:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80017d6:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80017d8:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80017dc:	d026      	beq.n	800182c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80017de:	d810      	bhi.n	8001802 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80017e0:	2920      	cmp	r1, #32
 80017e2:	ea45 0402 	orr.w	r4, r5, r2
 80017e6:	d062      	beq.n	80018ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80017e8:	2940      	cmp	r1, #64	; 0x40
 80017ea:	d060      	beq.n	80018ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80017ec:	2904      	cmp	r1, #4
 80017ee:	d05e      	beq.n	80018ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80017f0:	432a      	orrs	r2, r5
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80017f4:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80017f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017fa:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80017fc:	d05b      	beq.n	80018b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001800:	e040      	b.n	8001884 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001802:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001806:	d007      	beq.n	8001818 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001808:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800180c:	d1f0      	bne.n	80017f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800180e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001812:	f042 0209 	orr.w	r2, r2, #9
 8001816:	e003      	b.n	8001820 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001818:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800181c:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001820:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8001822:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001824:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001826:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001828:	6158      	str	r0, [r3, #20]
 800182a:	e02a      	b.n	8001882 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800182c:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800182e:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001830:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001834:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001836:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001838:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800183a:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800183e:	7822      	ldrb	r2, [r4, #0]
 8001840:	b142      	cbz	r2, 8001854 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001842:	2a01      	cmp	r2, #1
 8001844:	d021      	beq.n	800188a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001848:	f240 1101 	movw	r1, #257	; 0x101
 800184c:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800184e:	481f      	ldr	r0, [pc, #124]	; (80018cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001850:	f018 fa38 	bl	8019cc4 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001854:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001856:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001858:	8861      	ldrh	r1, [r4, #2]
 800185a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800185e:	3901      	subs	r1, #1
 8001860:	f022 0210 	bic.w	r2, r2, #16
 8001864:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001868:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	0692      	lsls	r2, r2, #26
 8001878:	d4fc      	bmi.n	8001874 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800187a:	2210      	movs	r2, #16
 800187c:	609a      	str	r2, [r3, #8]
            if (blend)
 800187e:	2800      	cmp	r0, #0
 8001880:	d0bd      	beq.n	80017fe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001882:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001884:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8001886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800188a:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 800188c:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001890:	69d9      	ldr	r1, [r3, #28]
 8001892:	f102 34ff 	add.w	r4, r2, #4294967295
                if (blitOp.alpha == 255)
 8001896:	bf18      	it	ne
 8001898:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800189a:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800189e:	f022 0210 	bic.w	r2, r2, #16
 80018a2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	61da      	str	r2, [r3, #28]
                break;
 80018ac:	e7dd      	b.n	800186a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80018ae:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80018b2:	61dc      	str	r4, [r3, #28]
 80018b4:	e7b7      	b.n	8001826 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80018b6:	f240 2201 	movw	r2, #513	; 0x201
 80018ba:	e7e3      	b.n	8001884 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80018bc:	52001000 	.word	0x52001000
 80018c0:	00010201 	.word	0x00010201
 80018c4:	0801b3ec 	.word	0x0801b3ec
 80018c8:	0801b406 	.word	0x0801b406
 80018cc:	0801b317 	.word	0x0801b317
 80018d0:	00020201 	.word	0x00020201

080018d4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80018d8:	7f89      	ldrb	r1, [r1, #30]
 80018da:	f7ff ff35 	bl	8001748 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80018e0:	8aa5      	ldrh	r5, [r4, #20]
 80018e2:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80018e4:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80018e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80018ea:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80018ec:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80018ee:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80018f0:	6921      	ldr	r1, [r4, #16]
 80018f2:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80018f6:	6826      	ldr	r6, [r4, #0]
 80018f8:	68e5      	ldr	r5, [r4, #12]
 80018fa:	2e08      	cmp	r6, #8
 80018fc:	d10d      	bne.n	800191a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80018fe:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001900:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001902:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8001904:	4a09      	ldr	r2, [pc, #36]	; (800192c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8001906:	7f20      	ldrb	r0, [r4, #28]
 8001908:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800190c:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001910:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001912:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001914:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001916:	601a      	str	r2, [r3, #0]
    }
}
 8001918:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800191a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800191c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800191e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001922:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001924:	e7f7      	b.n	8001916 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001926:	bf00      	nop
 8001928:	52001000 	.word	0x52001000
 800192c:	00010009 	.word	0x00010009
 8001930:	00020201 	.word	0x00020201
 8001934:	00030201 	.word	0x00030201

08001938 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001938:	2001      	movs	r0, #1
 800193a:	4770      	bx	lr

0800193c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 800193c:	200c      	movs	r0, #12
 800193e:	4770      	bx	lr

08001940 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001940:	230c      	movs	r3, #12
 8001942:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001946:	3008      	adds	r0, #8
 8001948:	4770      	bx	lr

0800194a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800194a:	230c      	movs	r3, #12
 800194c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001950:	3008      	adds	r0, #8
 8001952:	4770      	bx	lr

08001954 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001954:	2001      	movs	r0, #1
 8001956:	4770      	bx	lr

08001958 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001958:	f44f 7004 	mov.w	r0, #528	; 0x210
 800195c:	4770      	bx	lr

0800195e <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800195e:	f44f 7304 	mov.w	r3, #528	; 0x210
 8001962:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001966:	3008      	adds	r0, #8
 8001968:	4770      	bx	lr

0800196a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800196a:	f44f 7304 	mov.w	r3, #528	; 0x210
 800196e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001972:	3008      	adds	r0, #8
 8001974:	4770      	bx	lr

08001976 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001976:	2001      	movs	r0, #1
 8001978:	4770      	bx	lr

0800197a <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800197a:	2010      	movs	r0, #16
 800197c:	4770      	bx	lr

0800197e <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800197e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001982:	3008      	adds	r0, #8
 8001984:	4770      	bx	lr

08001986 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001986:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800198a:	3008      	adds	r0, #8
 800198c:	4770      	bx	lr

0800198e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 800198e:	4608      	mov	r0, r1
 8001990:	f000 bb12 	b.w	8001fb8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08001994 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001996:	b510      	push	{r4, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	6003      	str	r3, [r0, #0]
 800199c:	f009 f9f0 	bl	800ad80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80019a0:	4620      	mov	r0, r4
 80019a2:	bd10      	pop	{r4, pc}
 80019a4:	0801b504 	.word	0x0801b504

080019a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80019a8:	b510      	push	{r4, lr}
 80019aa:	4604      	mov	r4, r0
 80019ac:	f7ff fff2 	bl	8001994 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80019b0:	2114      	movs	r1, #20
 80019b2:	4620      	mov	r0, r4
 80019b4:	f018 f958 	bl	8019c68 <_ZdlPvj>
 80019b8:	4620      	mov	r0, r4
 80019ba:	bd10      	pop	{r4, pc}

080019bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80019be:	b510      	push	{r4, lr}
 80019c0:	4604      	mov	r4, r0
 80019c2:	6003      	str	r3, [r0, #0]
 80019c4:	f009 f9dc 	bl	800ad80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80019c8:	4620      	mov	r0, r4
 80019ca:	bd10      	pop	{r4, pc}
 80019cc:	0801b4d0 	.word	0x0801b4d0

080019d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4604      	mov	r4, r0
 80019d4:	f7ff fff2 	bl	80019bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80019d8:	f44f 7106 	mov.w	r1, #536	; 0x218
 80019dc:	4620      	mov	r0, r4
 80019de:	f018 f943 	bl	8019c68 <_ZdlPvj>
 80019e2:	4620      	mov	r0, r4
 80019e4:	bd10      	pop	{r4, pc}
	...

080019e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80019ea:	b510      	push	{r4, lr}
 80019ec:	4604      	mov	r4, r0
 80019ee:	6003      	str	r3, [r0, #0]
 80019f0:	f009 f9c6 	bl	800ad80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80019f4:	4620      	mov	r0, r4
 80019f6:	bd10      	pop	{r4, pc}
 80019f8:	0801b49c 	.word	0x0801b49c

080019fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80019fc:	b510      	push	{r4, lr}
 80019fe:	4604      	mov	r4, r0
 8001a00:	f7ff fff2 	bl	80019e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a04:	2118      	movs	r1, #24
 8001a06:	4620      	mov	r0, r4
 8001a08:	f018 f92e 	bl	8019c68 <_ZdlPvj>
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	bd10      	pop	{r4, pc}

08001a10 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_ZN12FrontendHeapD1Ev+0x24>)
 8001a12:	b510      	push	{r4, lr}
 8001a14:	4604      	mov	r4, r0
 8001a16:	6003      	str	r3, [r0, #0]
 8001a18:	f500 7011 	add.w	r0, r0, #580	; 0x244
 8001a1c:	f7ff ffba 	bl	8001994 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a20:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001a24:	f7ff ffca 	bl	80019bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen13ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a28:	f104 0014 	add.w	r0, r4, #20
 8001a2c:	f7ff ffdc 	bl	80019e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen16PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a30:	4620      	mov	r0, r4
 8001a32:	bd10      	pop	{r4, pc}
 8001a34:	0801b538 	.word	0x0801b538

08001a38 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001a38:	b508      	push	{r3, lr}
 8001a3a:	4802      	ldr	r0, [pc, #8]	; (8001a44 <__tcf_0+0xc>)
 8001a3c:	f7ff ffe8 	bl	8001a10 <_ZN12FrontendHeapD1Ev>
 8001a40:	bd08      	pop	{r3, pc}
 8001a42:	bf00      	nop
 8001a44:	24000398 	.word	0x24000398

08001a48 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	f7ff ffe0 	bl	8001a10 <_ZN12FrontendHeapD1Ev>
 8001a50:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8001a54:	4620      	mov	r0, r4
 8001a56:	f018 f907 	bl	8019c68 <_ZdlPvj>
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	bd10      	pop	{r4, pc}
	...

08001a60 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001a64:	f000 f9da 	bl	8001e1c <_ZN14BitmapDatabase11getInstanceEv>
 8001a68:	2400      	movs	r4, #0
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	f000 f9da 	bl	8001e24 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001a70:	4623      	mov	r3, r4
 8001a72:	4601      	mov	r1, r0
 8001a74:	4622      	mov	r2, r4
 8001a76:	4628      	mov	r0, r5
 8001a78:	9400      	str	r4, [sp, #0]
 8001a7a:	f00f fd6f 	bl	801155c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <touchgfx_init+0xb4>)
 8001a80:	4a25      	ldr	r2, [pc, #148]	; (8001b18 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001a82:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8001a84:	4d25      	ldr	r5, [pc, #148]	; (8001b1c <touchgfx_init+0xbc>)
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	f002 f81e 	bl	8003ac8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001a8c:	4824      	ldr	r0, [pc, #144]	; (8001b20 <touchgfx_init+0xc0>)
 8001a8e:	f00f fc01 	bl	8011294 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8001a92:	782b      	ldrb	r3, [r5, #0]
 8001a94:	f3bf 8f5b 	dmb	ish
 8001a98:	07db      	lsls	r3, r3, #31
 8001a9a:	d435      	bmi.n	8001b08 <touchgfx_init+0xa8>
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f018 f8e5 	bl	8019c6c <__cxa_guard_acquire>
 8001aa2:	b388      	cbz	r0, 8001b08 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001aa4:	4c1f      	ldr	r4, [pc, #124]	; (8001b24 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <touchgfx_init+0xc8>)
 8001aa8:	f504 7617 	add.w	r6, r4, #604	; 0x25c
 8001aac:	f104 0014 	add.w	r0, r4, #20
 8001ab0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001ab4:	f504 7711 	add.w	r7, r4, #580	; 0x244
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	6060      	str	r0, [r4, #4]
 8001abc:	f8c4 8008 	str.w	r8, [r4, #8]
 8001ac0:	60e7      	str	r7, [r4, #12]
 8001ac2:	6126      	str	r6, [r4, #16]
 8001ac4:	f009 f95e 	bl	800ad84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <touchgfx_init+0xcc>)
 8001aca:	4640      	mov	r0, r8
 8001acc:	6163      	str	r3, [r4, #20]
 8001ace:	f009 f959 	bl	800ad84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <touchgfx_init+0xd0>)
 8001ad4:	4638      	mov	r0, r7
 8001ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ad8:	f009 f954 	bl	800ad84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <touchgfx_init+0xd4>)
 8001ade:	f504 7016 	add.w	r0, r4, #600	; 0x258
 8001ae2:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
 8001ae6:	f002 f86b 	bl	8003bc0 <_ZN5ModelC1Ev>
 8001aea:	4622      	mov	r2, r4
 8001aec:	f504 7116 	add.w	r1, r4, #600	; 0x258
 8001af0:	4630      	mov	r0, r6
 8001af2:	f002 f85b 	bl	8003bac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001af6:	4630      	mov	r0, r6
 8001af8:	f000 fa5e 	bl	8001fb8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8001afc:	480e      	ldr	r0, [pc, #56]	; (8001b38 <touchgfx_init+0xd8>)
 8001afe:	f018 f8ff 	bl	8019d00 <atexit>
 8001b02:	4628      	mov	r0, r5
 8001b04:	f018 f8be 	bl	8019c84 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <touchgfx_init+0xdc>)
}
 8001b0a:	b002      	add	sp, #8
 8001b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8001b10:	f7ff bc20 	b.w	8001354 <_ZN11TouchGFXHAL10initializeEv>
 8001b14:	24006b4c 	.word	0x24006b4c
 8001b18:	24001578 	.word	0x24001578
 8001b1c:	24000394 	.word	0x24000394
 8001b20:	24000008 	.word	0x24000008
 8001b24:	24000398 	.word	0x24000398
 8001b28:	0801b538 	.word	0x0801b538
 8001b2c:	0801b49c 	.word	0x0801b49c
 8001b30:	0801b4d0 	.word	0x0801b4d0
 8001b34:	0801b504 	.word	0x0801b504
 8001b38:	08001a39 	.word	0x08001a39
 8001b3c:	240014f0 	.word	0x240014f0

08001b40 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001b40:	4801      	ldr	r0, [pc, #4]	; (8001b48 <touchgfx_taskEntry+0x8>)
 8001b42:	f7ff bc25 	b.w	8001390 <_ZN11TouchGFXHAL9taskEntryEv>
 8001b46:	bf00      	nop
 8001b48:	240014f0 	.word	0x240014f0

08001b4c <_GLOBAL__sub_I_touchgfx_init>:
}
 8001b4c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001b4e:	4e26      	ldr	r6, [pc, #152]	; (8001be8 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
{
public:

    STM32TouchController() {}
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8001b52:	4c27      	ldr	r4, [pc, #156]	; (8001bf0 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8001b54:	4630      	mov	r0, r6
static LCD24bpp display;
 8001b56:	4d27      	ldr	r5, [pc, #156]	; (8001bf4 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8001b58:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8001b5a:	f7ff fdbb 	bl	80016d4 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001b5e:	4628      	mov	r0, r5
 8001b60:	f011 ffca 	bl	8013af8 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b6c:	4823      	ldr	r0, [pc, #140]	; (8001bfc <_GLOBAL__sub_I_touchgfx_init+0xb0>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001b6e:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8001b70:	661a      	str	r2, [r3, #96]	; 0x60
 8001b72:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001b76:	671a      	str	r2, [r3, #112]	; 0x70
 8001b78:	60dc      	str	r4, [r3, #12]
 8001b7a:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8001b7e:	4920      	ldr	r1, [pc, #128]	; (8001c00 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
 8001b80:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8001b84:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001b88:	6759      	str	r1, [r3, #116]	; 0x74
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8001b90:	491c      	ldr	r1, [pc, #112]	; (8001c04 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8001b92:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b94:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001b98:	8001      	strh	r1, [r0, #0]
 8001b9a:	481b      	ldr	r0, [pc, #108]	; (8001c08 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8001b9c:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b9e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001ba2:	481a      	ldr	r0, [pc, #104]	; (8001c0c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 8001ba4:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8001ba8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8001bac:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8001bb0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8001bb4:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8001bb8:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001bbc:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8001bc0:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8001bc4:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001bc8:	8001      	strh	r1, [r0, #0]
 8001bca:	4811      	ldr	r0, [pc, #68]	; (8001c10 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 8001bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001bd0:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001bd2:	4910      	ldr	r1, [pc, #64]	; (8001c14 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        DISPLAY_ROTATION = rotate0;
 8001bd8:	700a      	strb	r2, [r1, #0]
 8001bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8001bde:	490e      	ldr	r1, [pc, #56]	; (8001c18 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8001be2:	6019      	str	r1, [r3, #0]
 8001be4:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
 8001be8:	24000750 	.word	0x24000750
 8001bec:	0801af10 	.word	0x0801af10
 8001bf0:	2400074c 	.word	0x2400074c
 8001bf4:	2400157c 	.word	0x2400157c
 8001bf8:	240014f0 	.word	0x240014f0
 8001bfc:	24006ae4 	.word	0x24006ae4
 8001c00:	01000001 	.word	0x01000001
 8001c04:	24006af0 	.word	0x24006af0
 8001c08:	24006aea 	.word	0x24006aea
 8001c0c:	24006ae6 	.word	0x24006ae6
 8001c10:	24006aec 	.word	0x24006aec
 8001c14:	24006ae8 	.word	0x24006ae8
 8001c18:	0801b09c 	.word	0x0801b09c
 8001c1c:	0801aee8 	.word	0x0801aee8

08001c20 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8001c20:	4801      	ldr	r0, [pc, #4]	; (8001c28 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8001c22:	f7ff bd0b 	b.w	800163c <_ZN8STM32DMAD1Ev>
 8001c26:	bf00      	nop
 8001c28:	24000750 	.word	0x24000750

08001c2c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001c2e:	2290      	movs	r2, #144	; 0x90
 8001c30:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8001c34:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001c44:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001c52:	6911      	ldr	r1, [r2, #16]
 8001c54:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001c58:	3901      	subs	r1, #1
 8001c5a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001c5e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001c66:	4770      	bx	lr
 8001c68:	50001000 	.word	0x50001000
 8001c6c:	240015d6 	.word	0x240015d6
 8001c70:	240015d4 	.word	0x240015d4

08001c74 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001c74:	4b01      	ldr	r3, [pc, #4]	; (8001c7c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001c76:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8001c7a:	4770      	bx	lr
 8001c7c:	50001000 	.word	0x50001000

08001c80 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001c82:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001c84:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c8a:	4770      	bx	lr
 8001c8c:	50001000 	.word	0x50001000

08001c90 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	4604      	mov	r4, r0
    HAL::initialize();
 8001c94:	f009 fb9f 	bl	800b3d6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001c9c:	f00c ff2e 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8001cac:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001cb0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	46ac      	mov	ip, r5
}
 8001cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8001cbc:	4760      	bx	ip
 8001cbe:	bf00      	nop
 8001cc0:	70060000 	.word	0x70060000

08001cc4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8001cc4:	f009 bb6e 	b.w	800b3a4 <_ZN8touchgfx3HAL10beginFrameEv>

08001cc8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8001cc8:	f009 bb78 	b.w	800b3bc <_ZN8touchgfx3HAL8endFrameEv>

08001ccc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8001ccc:	f009 bc8f 	b.w	800b5ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08001cd0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001cd0:	4910      	ldr	r1, [pc, #64]	; (8001d14 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x44>)
 8001cd2:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cda:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001cde:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ce2:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ce6:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cea:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001cee:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cf0:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cf4:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cf6:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 8001cfa:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cfc:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001d00:	d2f9      	bcs.n	8001cf6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 8001d02:	3b20      	subs	r3, #32
 8001d04:	f113 0f20 	cmn.w	r3, #32
 8001d08:	d1f2      	bne.n	8001cf0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x20>
 8001d0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d0e:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	03db      	lsls	r3, r3, #15
 8001d1e:	d501      	bpl.n	8001d24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 8001d20:	f7ff bfd6 	b.w	8001cd0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>
}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001d2c:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8001d2e:	f009 fb03 	bl	800b338 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	03db      	lsls	r3, r3, #15
 8001d38:	d503      	bpl.n	8001d42 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8001d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d3e:	f7ff bfc7 	b.w	8001cd0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>
 8001d42:	bd08      	pop	{r3, pc}
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8001d4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d56:	f3bf 8f6f 	isb	sy
 8001d5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001d62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d66:	f3bf 8f6f 	isb	sy
}
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8001d72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_LTDC_LineEventCallback+0x50>)
 8001d86:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_LTDC_LineEventCallback+0x54>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	8811      	ldrh	r1, [r2, #0]
 8001d8c:	428b      	cmp	r3, r1
    {
 8001d8e:	b510      	push	{r4, lr}
 8001d90:	4c12      	ldr	r4, [pc, #72]	; (8001ddc <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 8001d92:	d113      	bne.n	8001dbc <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_LTDC_LineEventCallback+0x5c>)
 8001d96:	8819      	ldrh	r1, [r3, #0]
 8001d98:	f004 fbf8 	bl	800658c <HAL_LTDC_ProgramLineEvent>
        return instance;
 8001d9c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8001d9e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001da2:	3301      	adds	r3, #1
 8001da4:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001da8:	f7ff fc1c 	bl	80015e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8001dac:	6820      	ldr	r0, [r4, #0]
 8001dae:	f00a f931 	bl	800c014 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8001db2:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8001db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8001db8:	f7ff ba48 	b.w	800124c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001dbc:	f004 fbe6 	bl	800658c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fa5b 	bl	800127c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8001dc6:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8001dc8:	6803      	ldr	r3, [r0, #0]
    }
 8001dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4718      	bx	r3
 8001dd2:	bf00      	nop
 8001dd4:	50001000 	.word	0x50001000
 8001dd8:	240015d6 	.word	0x240015d6
 8001ddc:	24006af0 	.word	0x24006af0
 8001de0:	240015d4 	.word	0x240015d4

08001de4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_66_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001de4:	4770      	bx	lr

08001de6 <_ZN23ApplicationFontProviderD0Ev>:
 8001de6:	b510      	push	{r4, lr}
 8001de8:	4604      	mov	r4, r0
 8001dea:	2104      	movs	r1, #4
 8001dec:	f017 ff3c 	bl	8019c68 <_ZdlPvj>
 8001df0:	4620      	mov	r0, r4
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8001df4:	2901      	cmp	r1, #1
{
 8001df6:	b508      	push	{r3, lr}
    switch (typography)
 8001df8:	d006      	beq.n	8001e08 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8001dfa:	2902      	cmp	r1, #2
 8001dfc:	d008      	beq.n	8001e10 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8001dfe:	b959      	cbnz	r1, 8001e18 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8001e00:	f001 feae 	bl	8003b60 <_ZN17TypedTextDatabase8getFontsEv>
 8001e04:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8001e06:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8001e08:	f001 feaa 	bl	8003b60 <_ZN17TypedTextDatabase8getFontsEv>
 8001e0c:	6840      	ldr	r0, [r0, #4]
 8001e0e:	e7fa      	b.n	8001e06 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8001e10:	f001 fea6 	bl	8003b60 <_ZN17TypedTextDatabase8getFontsEv>
 8001e14:	6880      	ldr	r0, [r0, #8]
 8001e16:	e7f6      	b.n	8001e06 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8001e18:	2000      	movs	r0, #0
 8001e1a:	e7f4      	b.n	8001e06 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08001e1c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8001e1c:	4800      	ldr	r0, [pc, #0]	; (8001e20 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8001e1e:	4770      	bx	lr
 8001e20:	0801b558 	.word	0x0801b558

08001e24 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8001e24:	2018      	movs	r0, #24
 8001e26:	4770      	bx	lr

08001e28 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001e28:	b513      	push	{r0, r1, r4, lr}
 8001e2a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001e2c:	b151      	cbz	r1, 8001e44 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001e2e:	6803      	ldr	r3, [r0, #0]
 8001e30:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8001e32:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8001e34:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001e38:	689c      	ldr	r4, [r3, #8]
 8001e3a:	f10d 0303 	add.w	r3, sp, #3
 8001e3e:	47a0      	blx	r4
        return glyph;
    }
 8001e40:	b002      	add	sp, #8
 8001e42:	bd10      	pop	{r4, pc}
            return 0;
 8001e44:	4608      	mov	r0, r1
 8001e46:	e7fb      	b.n	8001e40 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001e48 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001e48:	8940      	ldrh	r0, [r0, #10]
 8001e4a:	4770      	bx	lr

08001e4c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001e4c:	8980      	ldrh	r0, [r0, #12]
 8001e4e:	4770      	bx	lr

08001e50 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8001e50:	8880      	ldrh	r0, [r0, #4]
 8001e52:	4770      	bx	lr

08001e54 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8001e54:	7983      	ldrb	r3, [r0, #6]
 8001e56:	8880      	ldrh	r0, [r0, #4]
 8001e58:	4418      	add	r0, r3
    }
 8001e5a:	b280      	uxth	r0, r0
 8001e5c:	4770      	bx	lr

08001e5e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001e5e:	79c0      	ldrb	r0, [r0, #7]
    }
 8001e60:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001e64:	4770      	bx	lr

08001e66 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001e66:	79c0      	ldrb	r0, [r0, #7]
    }
 8001e68:	09c0      	lsrs	r0, r0, #7
 8001e6a:	4770      	bx	lr

08001e6c <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8001e6c:	4770      	bx	lr

08001e6e <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8001e6e:	b510      	push	{r4, lr}
 8001e70:	4604      	mov	r4, r0
    }
 8001e72:	2108      	movs	r1, #8
 8001e74:	f017 fef8 	bl	8019c68 <_ZdlPvj>
 8001e78:	4620      	mov	r0, r4
 8001e7a:	bd10      	pop	{r4, pc}

08001e7c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8001e7c:	4770      	bx	lr

08001e7e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8001e7e:	4770      	bx	lr

08001e80 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8001e80:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8001e84:	6808      	ldr	r0, [r1, #0]
 8001e86:	6849      	ldr	r1, [r1, #4]
 8001e88:	c303      	stmia	r3!, {r0, r1}
    }
 8001e8a:	4770      	bx	lr

08001e8c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8001e8c:	4770      	bx	lr

08001e8e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8001e8e:	4770      	bx	lr

08001e90 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8001e90:	6041      	str	r1, [r0, #4]
    }
 8001e92:	4770      	bx	lr

08001e94 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8001e94:	4770      	bx	lr
	...

08001e98 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8001e9a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8001e9e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8001ea8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8001eac:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	080026fd 	.word	0x080026fd

08001eb8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	7203      	strb	r3, [r0, #8]
    }
 8001ebc:	4770      	bx	lr

08001ebe <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8001ebe:	4770      	bx	lr

08001ec0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8001ec0:	4770      	bx	lr

08001ec2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8001ec2:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8001ec4:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8001ec6:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8001ec8:	68c2      	ldr	r2, [r0, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	1054      	asrs	r4, r2, #1
 8001ece:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8001ed2:	07d2      	lsls	r2, r2, #31
 8001ed4:	bf48      	it	mi
 8001ed6:	590a      	ldrmi	r2, [r1, r4]
    }
 8001ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8001edc:	bf48      	it	mi
 8001ede:	58d3      	ldrmi	r3, [r2, r3]
 8001ee0:	4718      	bx	r3

08001ee2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8001ee2:	6843      	ldr	r3, [r0, #4]
 8001ee4:	b12b      	cbz	r3, 8001ef2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8001ee6:	6883      	ldr	r3, [r0, #8]
 8001ee8:	b92b      	cbnz	r3, 8001ef6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8001eea:	68c0      	ldr	r0, [r0, #12]
 8001eec:	f000 0001 	and.w	r0, r0, #1
 8001ef0:	4770      	bx	lr
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4770      	bx	lr
 8001ef6:	2001      	movs	r0, #1
    }
 8001ef8:	4770      	bx	lr

08001efa <_ZN8touchgfx12NoTransitionD0Ev>:
 8001efa:	b510      	push	{r4, lr}
 8001efc:	4604      	mov	r4, r0
 8001efe:	210c      	movs	r1, #12
 8001f00:	f017 feb2 	bl	8019c68 <_ZdlPvj>
 8001f04:	4620      	mov	r0, r4
 8001f06:	bd10      	pop	{r4, pc}

08001f08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	f017 feab 	bl	8019c68 <_ZdlPvj>
 8001f12:	4620      	mov	r0, r4
 8001f14:	bd10      	pop	{r4, pc}

08001f16 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8001f16:	b510      	push	{r4, lr}
 8001f18:	4604      	mov	r4, r0
 8001f1a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001f1e:	f017 fea3 	bl	8019c68 <_ZdlPvj>
 8001f22:	4620      	mov	r0, r4
 8001f24:	bd10      	pop	{r4, pc}

08001f26 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8001f26:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8001f28:	f00c fde8 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
    }
 8001f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8001f30:	f00d b9ac 	b.w	800f28c <_ZN8touchgfx11Application10invalidateEv>

08001f34 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8001f34:	b510      	push	{r4, lr}
 8001f36:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8001f38:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8001f3c:	b158      	cbz	r0, 8001f56 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4798      	blx	r3
 8001f44:	b138      	cbz	r0, 8001f56 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8001f46:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8001f4a:	6803      	ldr	r3, [r0, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8001f56:	bd10      	pop	{r4, pc}

08001f58 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4617      	mov	r7, r2
 8001f5e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8001f60:	f00c fdee 	bl	800eb40 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8001f66:	2500      	movs	r5, #0
        instance = this;
 8001f68:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8001f6a:	4629      	mov	r1, r5
      model(m)
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8001f6e:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8001f72:	4e0f      	ldr	r6, [pc, #60]	; (8001fb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8001f74:	6023      	str	r3, [r4, #0]
 8001f76:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8001f7a:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8001f7e:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8001f82:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8001f84:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f001 fd9b 	bl	8003ac8 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8001f92:	6833      	ldr	r3, [r6, #0]
 8001f94:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8001f98:	b10a      	cbz	r2, 8001f9e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8001f9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f9c:	b900      	cbnz	r0, 8001fa0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8001f9e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8001fa0:	f012 fe97 	bl	8014cd2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa8:	24006b3c 	.word	0x24006b3c
 8001fac:	0801c0ac 	.word	0x0801c0ac
 8001fb0:	24006af0 	.word	0x24006af0
 8001fb4:	0801c094 	.word	0x0801c094

08001fb8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8001fba:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8001fbe:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 8001fc8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8001fcc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	080026fd 	.word	0x080026fd

08001fd8 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8001fda:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8001fde:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8001fe8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8001fec:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	080025b1 	.word	0x080025b1

08001ff8 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x1c>)
 8001ffa:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8001ffe:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002002:	2300      	movs	r3, #0
 8002004:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002008:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800200c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	08002465 	.word	0x08002465

08002018 <_ZN23FrontendApplicationBase29gotoScreen4ScreenNoTransitionEv>:
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <_ZN23FrontendApplicationBase29gotoScreen4ScreenNoTransitionEv+0x1c>)
 800201a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 800201e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002022:	2300      	movs	r3, #0
 8002024:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen4

void FrontendApplicationBase::gotoScreen4ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen4ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002028:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800202c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	08002319 	.word	0x08002319

08002038 <_ZN23FrontendApplicationBase31gotoScreen5_1ScreenNoTransitionEv>:
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <_ZN23FrontendApplicationBase31gotoScreen5_1ScreenNoTransitionEv+0x1c>)
 800203a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 800203e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002042:	2300      	movs	r3, #0
 8002044:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen5_1

void FrontendApplicationBase::gotoScreen5_1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen5_1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002048:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800204c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	080021cd 	.word	0x080021cd

08002058 <_ZN23FrontendApplicationBase31gotoScreen5_2ScreenNoTransitionEv>:
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <_ZN23FrontendApplicationBase31gotoScreen5_2ScreenNoTransitionEv+0x1c>)
 800205a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 800205e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002062:	2300      	movs	r3, #0
 8002064:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen5_2

void FrontendApplicationBase::gotoScreen5_2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen5_2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002068:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800206c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	08002081 	.word	0x08002081

08002078 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002078:	6803      	ldr	r3, [r0, #0]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	4718      	bx	r3
	...

08002080 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen5_2ScreenNoTransitionImpl()
{
 8002080:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen5_2View, Screen5_2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002084:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8002088:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800208a:	68a8      	ldr	r0, [r5, #8]
 800208c:	6803      	ldr	r3, [r0, #0]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4798      	blx	r3
 8002092:	f5b0 7fcc 	cmp.w	r0, #408	; 0x198
 8002096:	d205      	bcs.n	80020a4 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x24>
 8002098:	4b44      	ldr	r3, [pc, #272]	; (80021ac <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x12c>)
 800209a:	21a5      	movs	r1, #165	; 0xa5
 800209c:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800209e:	4845      	ldr	r0, [pc, #276]	; (80021b4 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x134>)
 80020a0:	f017 fe10 	bl	8019cc4 <__assert_func>
 80020a4:	6868      	ldr	r0, [r5, #4]
 80020a6:	6803      	ldr	r3, [r0, #0]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4798      	blx	r3
 80020ac:	280f      	cmp	r0, #15
 80020ae:	d803      	bhi.n	80020b8 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x38>
 80020b0:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x138>)
 80020b2:	21a6      	movs	r1, #166	; 0xa6
 80020b4:	4a3e      	ldr	r2, [pc, #248]	; (80021b0 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x130>)
 80020b6:	e7f2      	b.n	800209e <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80020b8:	68e8      	ldr	r0, [r5, #12]
 80020ba:	6803      	ldr	r3, [r0, #0]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4798      	blx	r3
 80020c0:	280b      	cmp	r0, #11
 80020c2:	d803      	bhi.n	80020cc <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x4c>
 80020c4:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x13c>)
 80020c6:	21a7      	movs	r1, #167	; 0xa7
 80020c8:	4a39      	ldr	r2, [pc, #228]	; (80021b0 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x130>)
 80020ca:	e7e8      	b.n	800209e <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80020cc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80021c4 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 80020d0:	f00c fd14 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 80020d4:	f00c fd18 	bl	800eb08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80020d8:	f8d9 0000 	ldr.w	r0, [r9]
 80020dc:	b110      	cbz	r0, 80020e4 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80020de:	6803      	ldr	r3, [r0, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4798      	blx	r3
    if (*currentTrans)
 80020e4:	f8d9 0000 	ldr.w	r0, [r9]
 80020e8:	b110      	cbz	r0, 80020f0 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80020ea:	6803      	ldr	r3, [r0, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4798      	blx	r3
    if (*currentScreen)
 80020f0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80021c8 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x148>
 80020f4:	f8d8 0000 	ldr.w	r0, [r8]
 80020f8:	b110      	cbz	r0, 8002100 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4798      	blx	r3
    if (*currentPresenter)
 8002100:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002104:	b110      	cbz	r0, 800210c <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8002106:	6803      	ldr	r3, [r0, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4798      	blx	r3
    if (*currentScreen)
 800210c:	f8d8 0000 	ldr.w	r0, [r8]
 8002110:	b110      	cbz	r0, 8002118 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8002112:	6803      	ldr	r3, [r0, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4798      	blx	r3
    if (*currentPresenter)
 8002118:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800211c:	b110      	cbz	r0, 8002124 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 800211e:	6803      	ldr	r3, [r0, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002124:	2100      	movs	r1, #0
 8002126:	68e8      	ldr	r0, [r5, #12]
 8002128:	f7ff ffa6 	bl	8002078 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 800212c:	f04f 0b00 	mov.w	fp, #0
 8002130:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x140>)
 8002132:	4604      	mov	r4, r0
 8002134:	f8c0 b004 	str.w	fp, [r0, #4]
 8002138:	4659      	mov	r1, fp
 800213a:	6003      	str	r3, [r0, #0]
 800213c:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002140:	68a8      	ldr	r0, [r5, #8]
 8002142:	6803      	ldr	r3, [r0, #0]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	4798      	blx	r3
 8002148:	4606      	mov	r6, r0
 800214a:	f001 fe5f 	bl	8003e0c <_ZN13Screen5_2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800214e:	6868      	ldr	r0, [r5, #4]
 8002150:	4659      	mov	r1, fp
 8002152:	6803      	ldr	r3, [r0, #0]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	4798      	blx	r3
 8002158:	4605      	mov	r5, r0
 800215a:	4631      	mov	r1, r6
 800215c:	f001 fe3c 	bl	8003dd8 <_ZN18Screen5_2PresenterC1ER13Screen5_2View>
    *currentTrans = newTransition;
 8002160:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002164:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8002168:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800216c:	b1e5      	cbz	r5, 80021a8 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0x128>
 800216e:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002170:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002174:	4630      	mov	r0, r6
 8002176:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002178:	f8c5 a008 	str.w	sl, [r5, #8]
 800217c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 800217e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002180:	4798      	blx	r3
    newPresenter->activate();
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	4628      	mov	r0, r5
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800218a:	4621      	mov	r1, r4
 800218c:	4630      	mov	r0, r6
 800218e:	f00e f891 	bl	80102b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	4620      	mov	r0, r4
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4798      	blx	r3
    newTransition->invalidate();
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	4620      	mov	r0, r4
 800219e:	695b      	ldr	r3, [r3, #20]
}
 80021a0:	b001      	add	sp, #4
 80021a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a6:	4718      	bx	r3
    model->bind(newPresenter);
 80021a8:	462b      	mov	r3, r5
 80021aa:	e7e1      	b.n	8002170 <_ZN23FrontendApplicationBase35gotoScreen5_2ScreenNoTransitionImplEv+0xf0>
 80021ac:	0801b748 	.word	0x0801b748
 80021b0:	0801ba69 	.word	0x0801ba69
 80021b4:	0801b8dc 	.word	0x0801b8dc
 80021b8:	0801b923 	.word	0x0801b923
 80021bc:	0801b9c6 	.word	0x0801b9c6
 80021c0:	0801c0f8 	.word	0x0801c0f8
 80021c4:	24006b30 	.word	0x24006b30
 80021c8:	24006b2c 	.word	0x24006b2c

080021cc <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv>:
{
 80021cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen5_1View, Screen5_1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80021d0:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80021d4:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80021d6:	68a8      	ldr	r0, [r5, #8]
 80021d8:	6803      	ldr	r3, [r0, #0]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4798      	blx	r3
 80021de:	f5b0 7fd0 	cmp.w	r0, #416	; 0x1a0
 80021e2:	d205      	bcs.n	80021f0 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x24>
 80021e4:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x12c>)
 80021e6:	21a5      	movs	r1, #165	; 0xa5
 80021e8:	4a44      	ldr	r2, [pc, #272]	; (80022fc <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80021ea:	4845      	ldr	r0, [pc, #276]	; (8002300 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x134>)
 80021ec:	f017 fd6a 	bl	8019cc4 <__assert_func>
 80021f0:	6868      	ldr	r0, [r5, #4]
 80021f2:	6803      	ldr	r3, [r0, #0]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4798      	blx	r3
 80021f8:	280f      	cmp	r0, #15
 80021fa:	d803      	bhi.n	8002204 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x38>
 80021fc:	4b41      	ldr	r3, [pc, #260]	; (8002304 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x138>)
 80021fe:	21a6      	movs	r1, #166	; 0xa6
 8002200:	4a3e      	ldr	r2, [pc, #248]	; (80022fc <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x130>)
 8002202:	e7f2      	b.n	80021ea <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002204:	68e8      	ldr	r0, [r5, #12]
 8002206:	6803      	ldr	r3, [r0, #0]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4798      	blx	r3
 800220c:	280b      	cmp	r0, #11
 800220e:	d803      	bhi.n	8002218 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x4c>
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x13c>)
 8002212:	21a7      	movs	r1, #167	; 0xa7
 8002214:	4a39      	ldr	r2, [pc, #228]	; (80022fc <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x130>)
 8002216:	e7e8      	b.n	80021ea <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8002218:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8002310 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 800221c:	f00c fc6e 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 8002220:	f00c fc72 	bl	800eb08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002224:	f8d9 0000 	ldr.w	r0, [r9]
 8002228:	b110      	cbz	r0, 8002230 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800222a:	6803      	ldr	r3, [r0, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4798      	blx	r3
    if (*currentTrans)
 8002230:	f8d9 0000 	ldr.w	r0, [r9]
 8002234:	b110      	cbz	r0, 800223c <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8002236:	6803      	ldr	r3, [r0, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4798      	blx	r3
    if (*currentScreen)
 800223c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8002314 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x148>
 8002240:	f8d8 0000 	ldr.w	r0, [r8]
 8002244:	b110      	cbz	r0, 800224c <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8002246:	6803      	ldr	r3, [r0, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	4798      	blx	r3
    if (*currentPresenter)
 800224c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002250:	b110      	cbz	r0, 8002258 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8002252:	6803      	ldr	r3, [r0, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4798      	blx	r3
    if (*currentScreen)
 8002258:	f8d8 0000 	ldr.w	r0, [r8]
 800225c:	b110      	cbz	r0, 8002264 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4798      	blx	r3
    if (*currentPresenter)
 8002264:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002268:	b110      	cbz	r0, 8002270 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 800226a:	6803      	ldr	r3, [r0, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002270:	2100      	movs	r1, #0
 8002272:	68e8      	ldr	r0, [r5, #12]
 8002274:	f7ff ff00 	bl	8002078 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8002278:	f04f 0b00 	mov.w	fp, #0
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x140>)
 800227e:	4604      	mov	r4, r0
 8002280:	f8c0 b004 	str.w	fp, [r0, #4]
 8002284:	4659      	mov	r1, fp
 8002286:	6003      	str	r3, [r0, #0]
 8002288:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800228c:	68a8      	ldr	r0, [r5, #8]
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	4798      	blx	r3
 8002294:	4606      	mov	r6, r0
 8002296:	f001 fd87 	bl	8003da8 <_ZN13Screen5_1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800229a:	6868      	ldr	r0, [r5, #4]
 800229c:	4659      	mov	r1, fp
 800229e:	6803      	ldr	r3, [r0, #0]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	4798      	blx	r3
 80022a4:	4605      	mov	r5, r0
 80022a6:	4631      	mov	r1, r6
 80022a8:	f001 fd64 	bl	8003d74 <_ZN18Screen5_1PresenterC1ER13Screen5_1View>
    *currentTrans = newTransition;
 80022ac:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80022b0:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 80022b4:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80022b8:	b1e5      	cbz	r5, 80022f4 <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0x128>
 80022ba:	1d2b      	adds	r3, r5, #4
 80022bc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80022c0:	4630      	mov	r0, r6
 80022c2:	6833      	ldr	r3, [r6, #0]
 80022c4:	f8c5 a008 	str.w	sl, [r5, #8]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	63f5      	str	r5, [r6, #60]	; 0x3c
 80022cc:	4798      	blx	r3
    newPresenter->activate();
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	4628      	mov	r0, r5
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80022d6:	4621      	mov	r1, r4
 80022d8:	4630      	mov	r0, r6
 80022da:	f00d ffeb 	bl	80102b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	4620      	mov	r0, r4
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4798      	blx	r3
    newTransition->invalidate();
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	4620      	mov	r0, r4
 80022ea:	695b      	ldr	r3, [r3, #20]
}
 80022ec:	b001      	add	sp, #4
 80022ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f2:	4718      	bx	r3
    model->bind(newPresenter);
 80022f4:	462b      	mov	r3, r5
 80022f6:	e7e1      	b.n	80022bc <_ZN23FrontendApplicationBase35gotoScreen5_1ScreenNoTransitionImplEv+0xf0>
 80022f8:	0801b748 	.word	0x0801b748
 80022fc:	0801bb71 	.word	0x0801bb71
 8002300:	0801b8dc 	.word	0x0801b8dc
 8002304:	0801b923 	.word	0x0801b923
 8002308:	0801b9c6 	.word	0x0801b9c6
 800230c:	0801c0f8 	.word	0x0801c0f8
 8002310:	24006b30 	.word	0x24006b30
 8002314:	24006b2c 	.word	0x24006b2c

08002318 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv>:
{
 8002318:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen4View, Screen4Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800231c:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8002320:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002322:	68a8      	ldr	r0, [r5, #8]
 8002324:	6803      	ldr	r3, [r0, #0]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4798      	blx	r3
 800232a:	f5b0 7fcc 	cmp.w	r0, #408	; 0x198
 800232e:	d205      	bcs.n	800233c <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x24>
 8002330:	4b44      	ldr	r3, [pc, #272]	; (8002444 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x12c>)
 8002332:	21a5      	movs	r1, #165	; 0xa5
 8002334:	4a44      	ldr	r2, [pc, #272]	; (8002448 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002336:	4845      	ldr	r0, [pc, #276]	; (800244c <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x134>)
 8002338:	f017 fcc4 	bl	8019cc4 <__assert_func>
 800233c:	6868      	ldr	r0, [r5, #4]
 800233e:	6803      	ldr	r3, [r0, #0]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4798      	blx	r3
 8002344:	280f      	cmp	r0, #15
 8002346:	d803      	bhi.n	8002350 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x38>
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x138>)
 800234a:	21a6      	movs	r1, #166	; 0xa6
 800234c:	4a3e      	ldr	r2, [pc, #248]	; (8002448 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x130>)
 800234e:	e7f2      	b.n	8002336 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002350:	68e8      	ldr	r0, [r5, #12]
 8002352:	6803      	ldr	r3, [r0, #0]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4798      	blx	r3
 8002358:	280b      	cmp	r0, #11
 800235a:	d803      	bhi.n	8002364 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x4c>
 800235c:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x13c>)
 800235e:	21a7      	movs	r1, #167	; 0xa7
 8002360:	4a39      	ldr	r2, [pc, #228]	; (8002448 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x130>)
 8002362:	e7e8      	b.n	8002336 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8002364:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800245c <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8002368:	f00c fbc8 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 800236c:	f00c fbcc 	bl	800eb08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002370:	f8d9 0000 	ldr.w	r0, [r9]
 8002374:	b110      	cbz	r0, 800237c <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8002376:	6803      	ldr	r3, [r0, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4798      	blx	r3
    if (*currentTrans)
 800237c:	f8d9 0000 	ldr.w	r0, [r9]
 8002380:	b110      	cbz	r0, 8002388 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8002382:	6803      	ldr	r3, [r0, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4798      	blx	r3
    if (*currentScreen)
 8002388:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8002460 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x148>
 800238c:	f8d8 0000 	ldr.w	r0, [r8]
 8002390:	b110      	cbz	r0, 8002398 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8002392:	6803      	ldr	r3, [r0, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4798      	blx	r3
    if (*currentPresenter)
 8002398:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800239c:	b110      	cbz	r0, 80023a4 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 800239e:	6803      	ldr	r3, [r0, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4798      	blx	r3
    if (*currentScreen)
 80023a4:	f8d8 0000 	ldr.w	r0, [r8]
 80023a8:	b110      	cbz	r0, 80023b0 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80023aa:	6803      	ldr	r3, [r0, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4798      	blx	r3
    if (*currentPresenter)
 80023b0:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80023b4:	b110      	cbz	r0, 80023bc <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80023b6:	6803      	ldr	r3, [r0, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80023bc:	2100      	movs	r1, #0
 80023be:	68e8      	ldr	r0, [r5, #12]
 80023c0:	f7ff fe5a 	bl	8002078 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80023c4:	f04f 0b00 	mov.w	fp, #0
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x140>)
 80023ca:	4604      	mov	r4, r0
 80023cc:	f8c0 b004 	str.w	fp, [r0, #4]
 80023d0:	4659      	mov	r1, fp
 80023d2:	6003      	str	r3, [r0, #0]
 80023d4:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80023d8:	68a8      	ldr	r0, [r5, #8]
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	4798      	blx	r3
 80023e0:	4606      	mov	r6, r0
 80023e2:	f001 fcaf 	bl	8003d44 <_ZN11Screen4ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80023e6:	6868      	ldr	r0, [r5, #4]
 80023e8:	4659      	mov	r1, fp
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	4798      	blx	r3
 80023f0:	4605      	mov	r5, r0
 80023f2:	4631      	mov	r1, r6
 80023f4:	f001 fc8c 	bl	8003d10 <_ZN16Screen4PresenterC1ER11Screen4View>
    *currentTrans = newTransition;
 80023f8:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80023fc:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8002400:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002404:	b1e5      	cbz	r5, 8002440 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x128>
 8002406:	1d2b      	adds	r3, r5, #4
 8002408:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800240c:	4630      	mov	r0, r6
 800240e:	6833      	ldr	r3, [r6, #0]
 8002410:	f8c5 a008 	str.w	sl, [r5, #8]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002418:	4798      	blx	r3
    newPresenter->activate();
 800241a:	682b      	ldr	r3, [r5, #0]
 800241c:	4628      	mov	r0, r5
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002422:	4621      	mov	r1, r4
 8002424:	4630      	mov	r0, r6
 8002426:	f00d ff45 	bl	80102b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	4620      	mov	r0, r4
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	4798      	blx	r3
    newTransition->invalidate();
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	4620      	mov	r0, r4
 8002436:	695b      	ldr	r3, [r3, #20]
}
 8002438:	b001      	add	sp, #4
 800243a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243e:	4718      	bx	r3
    model->bind(newPresenter);
 8002440:	462b      	mov	r3, r5
 8002442:	e7e1      	b.n	8002408 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0xf0>
 8002444:	0801b748 	.word	0x0801b748
 8002448:	0801bc79 	.word	0x0801bc79
 800244c:	0801b8dc 	.word	0x0801b8dc
 8002450:	0801b923 	.word	0x0801b923
 8002454:	0801b9c6 	.word	0x0801b9c6
 8002458:	0801c0f8 	.word	0x0801c0f8
 800245c:	24006b30 	.word	0x24006b30
 8002460:	24006b2c 	.word	0x24006b2c

08002464 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:
{
 8002464:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002468:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 800246c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800246e:	68a8      	ldr	r0, [r5, #8]
 8002470:	6803      	ldr	r3, [r0, #0]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4798      	blx	r3
 8002476:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
 800247a:	d205      	bcs.n	8002488 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x24>
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x12c>)
 800247e:	21a5      	movs	r1, #165	; 0xa5
 8002480:	4a44      	ldr	r2, [pc, #272]	; (8002594 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002482:	4845      	ldr	r0, [pc, #276]	; (8002598 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x134>)
 8002484:	f017 fc1e 	bl	8019cc4 <__assert_func>
 8002488:	6868      	ldr	r0, [r5, #4]
 800248a:	6803      	ldr	r3, [r0, #0]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4798      	blx	r3
 8002490:	280f      	cmp	r0, #15
 8002492:	d803      	bhi.n	800249c <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x38>
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x138>)
 8002496:	21a6      	movs	r1, #166	; 0xa6
 8002498:	4a3e      	ldr	r2, [pc, #248]	; (8002594 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x130>)
 800249a:	e7f2      	b.n	8002482 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800249c:	68e8      	ldr	r0, [r5, #12]
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4798      	blx	r3
 80024a4:	280b      	cmp	r0, #11
 80024a6:	d803      	bhi.n	80024b0 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x4c>
 80024a8:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x13c>)
 80024aa:	21a7      	movs	r1, #167	; 0xa7
 80024ac:	4a39      	ldr	r2, [pc, #228]	; (8002594 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x130>)
 80024ae:	e7e8      	b.n	8002482 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80024b0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80025a8 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 80024b4:	f00c fb22 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 80024b8:	f00c fb26 	bl	800eb08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80024bc:	f8d9 0000 	ldr.w	r0, [r9]
 80024c0:	b110      	cbz	r0, 80024c8 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80024c2:	6803      	ldr	r3, [r0, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4798      	blx	r3
    if (*currentTrans)
 80024c8:	f8d9 0000 	ldr.w	r0, [r9]
 80024cc:	b110      	cbz	r0, 80024d4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80024ce:	6803      	ldr	r3, [r0, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4798      	blx	r3
    if (*currentScreen)
 80024d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80025ac <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x148>
 80024d8:	f8d8 0000 	ldr.w	r0, [r8]
 80024dc:	b110      	cbz	r0, 80024e4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80024de:	6803      	ldr	r3, [r0, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	4798      	blx	r3
    if (*currentPresenter)
 80024e4:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80024e8:	b110      	cbz	r0, 80024f0 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 80024ea:	6803      	ldr	r3, [r0, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4798      	blx	r3
    if (*currentScreen)
 80024f0:	f8d8 0000 	ldr.w	r0, [r8]
 80024f4:	b110      	cbz	r0, 80024fc <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4798      	blx	r3
    if (*currentPresenter)
 80024fc:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002500:	b110      	cbz	r0, 8002508 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8002502:	6803      	ldr	r3, [r0, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002508:	2100      	movs	r1, #0
 800250a:	68e8      	ldr	r0, [r5, #12]
 800250c:	f7ff fdb4 	bl	8002078 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8002510:	f04f 0b00 	mov.w	fp, #0
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x140>)
 8002516:	4604      	mov	r4, r0
 8002518:	f8c0 b004 	str.w	fp, [r0, #4]
 800251c:	4659      	mov	r1, fp
 800251e:	6003      	str	r3, [r0, #0]
 8002520:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002524:	68a8      	ldr	r0, [r5, #8]
 8002526:	6803      	ldr	r3, [r0, #0]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	4798      	blx	r3
 800252c:	4606      	mov	r6, r0
 800252e:	f001 fbd7 	bl	8003ce0 <_ZN11Screen3ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002532:	6868      	ldr	r0, [r5, #4]
 8002534:	4659      	mov	r1, fp
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	4798      	blx	r3
 800253c:	4605      	mov	r5, r0
 800253e:	4631      	mov	r1, r6
 8002540:	f001 fbb4 	bl	8003cac <_ZN16Screen3PresenterC1ER11Screen3View>
    *currentTrans = newTransition;
 8002544:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002548:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 800254c:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002550:	b1e5      	cbz	r5, 800258c <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x128>
 8002552:	1d2b      	adds	r3, r5, #4
 8002554:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002558:	4630      	mov	r0, r6
 800255a:	6833      	ldr	r3, [r6, #0]
 800255c:	f8c5 a008 	str.w	sl, [r5, #8]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002564:	4798      	blx	r3
    newPresenter->activate();
 8002566:	682b      	ldr	r3, [r5, #0]
 8002568:	4628      	mov	r0, r5
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800256e:	4621      	mov	r1, r4
 8002570:	4630      	mov	r0, r6
 8002572:	f00d fe9f 	bl	80102b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	4620      	mov	r0, r4
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	4798      	blx	r3
    newTransition->invalidate();
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	4620      	mov	r0, r4
 8002582:	695b      	ldr	r3, [r3, #20]
}
 8002584:	b001      	add	sp, #4
 8002586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800258a:	4718      	bx	r3
    model->bind(newPresenter);
 800258c:	462b      	mov	r3, r5
 800258e:	e7e1      	b.n	8002554 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0xf0>
 8002590:	0801b748 	.word	0x0801b748
 8002594:	0801bd7d 	.word	0x0801bd7d
 8002598:	0801b8dc 	.word	0x0801b8dc
 800259c:	0801b923 	.word	0x0801b923
 80025a0:	0801b9c6 	.word	0x0801b9c6
 80025a4:	0801c0f8 	.word	0x0801c0f8
 80025a8:	24006b30 	.word	0x24006b30
 80025ac:	24006b2c 	.word	0x24006b2c

080025b0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
{
 80025b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80025b4:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80025b8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025ba:	68a8      	ldr	r0, [r5, #8]
 80025bc:	6803      	ldr	r3, [r0, #0]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4798      	blx	r3
 80025c2:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
 80025c6:	d205      	bcs.n	80025d4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 80025c8:	4b44      	ldr	r3, [pc, #272]	; (80026dc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 80025ca:	21a5      	movs	r1, #165	; 0xa5
 80025cc:	4a44      	ldr	r2, [pc, #272]	; (80026e0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80025ce:	4845      	ldr	r0, [pc, #276]	; (80026e4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 80025d0:	f017 fb78 	bl	8019cc4 <__assert_func>
 80025d4:	6868      	ldr	r0, [r5, #4]
 80025d6:	6803      	ldr	r3, [r0, #0]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4798      	blx	r3
 80025dc:	280f      	cmp	r0, #15
 80025de:	d803      	bhi.n	80025e8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 80025e0:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 80025e2:	21a6      	movs	r1, #166	; 0xa6
 80025e4:	4a3e      	ldr	r2, [pc, #248]	; (80026e0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 80025e6:	e7f2      	b.n	80025ce <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80025e8:	68e8      	ldr	r0, [r5, #12]
 80025ea:	6803      	ldr	r3, [r0, #0]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4798      	blx	r3
 80025f0:	280b      	cmp	r0, #11
 80025f2:	d803      	bhi.n	80025fc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 80025f4:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 80025f6:	21a7      	movs	r1, #167	; 0xa7
 80025f8:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 80025fa:	e7e8      	b.n	80025ce <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80025fc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80026f4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8002600:	f00c fa7c 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 8002604:	f00c fa80 	bl	800eb08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002608:	f8d9 0000 	ldr.w	r0, [r9]
 800260c:	b110      	cbz	r0, 8002614 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800260e:	6803      	ldr	r3, [r0, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4798      	blx	r3
    if (*currentTrans)
 8002614:	f8d9 0000 	ldr.w	r0, [r9]
 8002618:	b110      	cbz	r0, 8002620 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 800261a:	6803      	ldr	r3, [r0, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4798      	blx	r3
    if (*currentScreen)
 8002620:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80026f8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 8002624:	f8d8 0000 	ldr.w	r0, [r8]
 8002628:	b110      	cbz	r0, 8002630 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 800262a:	6803      	ldr	r3, [r0, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	4798      	blx	r3
    if (*currentPresenter)
 8002630:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002634:	b110      	cbz	r0, 800263c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4798      	blx	r3
    if (*currentScreen)
 800263c:	f8d8 0000 	ldr.w	r0, [r8]
 8002640:	b110      	cbz	r0, 8002648 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8002642:	6803      	ldr	r3, [r0, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4798      	blx	r3
    if (*currentPresenter)
 8002648:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800264c:	b110      	cbz	r0, 8002654 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002654:	2100      	movs	r1, #0
 8002656:	68e8      	ldr	r0, [r5, #12]
 8002658:	f7ff fd0e 	bl	8002078 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800265c:	f04f 0b00 	mov.w	fp, #0
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 8002662:	4604      	mov	r4, r0
 8002664:	f8c0 b004 	str.w	fp, [r0, #4]
 8002668:	4659      	mov	r1, fp
 800266a:	6003      	str	r3, [r0, #0]
 800266c:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002670:	68a8      	ldr	r0, [r5, #8]
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	4798      	blx	r3
 8002678:	4606      	mov	r6, r0
 800267a:	f001 faff 	bl	8003c7c <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800267e:	6868      	ldr	r0, [r5, #4]
 8002680:	4659      	mov	r1, fp
 8002682:	6803      	ldr	r3, [r0, #0]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	4798      	blx	r3
 8002688:	4605      	mov	r5, r0
 800268a:	4631      	mov	r1, r6
 800268c:	f001 fadc 	bl	8003c48 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8002690:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002694:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8002698:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800269c:	b1e5      	cbz	r5, 80026d8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x128>
 800269e:	1d2b      	adds	r3, r5, #4
 80026a0:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80026a4:	4630      	mov	r0, r6
 80026a6:	6833      	ldr	r3, [r6, #0]
 80026a8:	f8c5 a008 	str.w	sl, [r5, #8]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	63f5      	str	r5, [r6, #60]	; 0x3c
 80026b0:	4798      	blx	r3
    newPresenter->activate();
 80026b2:	682b      	ldr	r3, [r5, #0]
 80026b4:	4628      	mov	r0, r5
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80026ba:	4621      	mov	r1, r4
 80026bc:	4630      	mov	r0, r6
 80026be:	f00d fdf9 	bl	80102b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	4620      	mov	r0, r4
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4798      	blx	r3
    newTransition->invalidate();
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	4620      	mov	r0, r4
 80026ce:	695b      	ldr	r3, [r3, #20]
}
 80026d0:	b001      	add	sp, #4
 80026d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d6:	4718      	bx	r3
    model->bind(newPresenter);
 80026d8:	462b      	mov	r3, r5
 80026da:	e7e1      	b.n	80026a0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xf0>
 80026dc:	0801b748 	.word	0x0801b748
 80026e0:	0801be81 	.word	0x0801be81
 80026e4:	0801b8dc 	.word	0x0801b8dc
 80026e8:	0801b923 	.word	0x0801b923
 80026ec:	0801b9c6 	.word	0x0801b9c6
 80026f0:	0801c0f8 	.word	0x0801c0f8
 80026f4:	24006b30 	.word	0x24006b30
 80026f8:	24006b2c 	.word	0x24006b2c

080026fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 80026fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002700:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8002704:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002706:	68a8      	ldr	r0, [r5, #8]
 8002708:	6803      	ldr	r3, [r0, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4798      	blx	r3
 800270e:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
 8002712:	d205      	bcs.n	8002720 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8002714:	4b44      	ldr	r3, [pc, #272]	; (8002828 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002716:	21a5      	movs	r1, #165	; 0xa5
 8002718:	4a44      	ldr	r2, [pc, #272]	; (800282c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800271a:	4845      	ldr	r0, [pc, #276]	; (8002830 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800271c:	f017 fad2 	bl	8019cc4 <__assert_func>
 8002720:	6868      	ldr	r0, [r5, #4]
 8002722:	6803      	ldr	r3, [r0, #0]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4798      	blx	r3
 8002728:	280f      	cmp	r0, #15
 800272a:	d803      	bhi.n	8002734 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800272e:	21a6      	movs	r1, #166	; 0xa6
 8002730:	4a3e      	ldr	r2, [pc, #248]	; (800282c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002732:	e7f2      	b.n	800271a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002734:	68e8      	ldr	r0, [r5, #12]
 8002736:	6803      	ldr	r3, [r0, #0]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4798      	blx	r3
 800273c:	280b      	cmp	r0, #11
 800273e:	d803      	bhi.n	8002748 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8002740:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002742:	21a7      	movs	r1, #167	; 0xa7
 8002744:	4a39      	ldr	r2, [pc, #228]	; (800282c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002746:	e7e8      	b.n	800271a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8002748:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8002840 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 800274c:	f00c f9d6 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 8002750:	f00c f9da 	bl	800eb08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002754:	f8d9 0000 	ldr.w	r0, [r9]
 8002758:	b110      	cbz	r0, 8002760 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800275a:	6803      	ldr	r3, [r0, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4798      	blx	r3
    if (*currentTrans)
 8002760:	f8d9 0000 	ldr.w	r0, [r9]
 8002764:	b110      	cbz	r0, 800276c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8002766:	6803      	ldr	r3, [r0, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4798      	blx	r3
    if (*currentScreen)
 800276c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8002844 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8002770:	f8d8 0000 	ldr.w	r0, [r8]
 8002774:	b110      	cbz	r0, 800277c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8002776:	6803      	ldr	r3, [r0, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	4798      	blx	r3
    if (*currentPresenter)
 800277c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002780:	b110      	cbz	r0, 8002788 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8002782:	6803      	ldr	r3, [r0, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4798      	blx	r3
    if (*currentScreen)
 8002788:	f8d8 0000 	ldr.w	r0, [r8]
 800278c:	b110      	cbz	r0, 8002794 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 800278e:	6803      	ldr	r3, [r0, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4798      	blx	r3
    if (*currentPresenter)
 8002794:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002798:	b110      	cbz	r0, 80027a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 800279a:	6803      	ldr	r3, [r0, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80027a0:	2100      	movs	r1, #0
 80027a2:	68e8      	ldr	r0, [r5, #12]
 80027a4:	f7ff fc68 	bl	8002078 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80027a8:	f04f 0b00 	mov.w	fp, #0
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80027ae:	4604      	mov	r4, r0
 80027b0:	f8c0 b004 	str.w	fp, [r0, #4]
 80027b4:	4659      	mov	r1, fp
 80027b6:	6003      	str	r3, [r0, #0]
 80027b8:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80027bc:	68a8      	ldr	r0, [r5, #8]
 80027be:	6803      	ldr	r3, [r0, #0]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	4798      	blx	r3
 80027c4:	4606      	mov	r6, r0
 80027c6:	f001 fa27 	bl	8003c18 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80027ca:	6868      	ldr	r0, [r5, #4]
 80027cc:	4659      	mov	r1, fp
 80027ce:	6803      	ldr	r3, [r0, #0]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	4798      	blx	r3
 80027d4:	4605      	mov	r5, r0
 80027d6:	4631      	mov	r1, r6
 80027d8:	f001 fa04 	bl	8003be4 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80027dc:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80027e0:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 80027e4:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80027e8:	b1e5      	cbz	r5, 8002824 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>
 80027ea:	1d2b      	adds	r3, r5, #4
 80027ec:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80027f0:	4630      	mov	r0, r6
 80027f2:	6833      	ldr	r3, [r6, #0]
 80027f4:	f8c5 a008 	str.w	sl, [r5, #8]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	63f5      	str	r5, [r6, #60]	; 0x3c
 80027fc:	4798      	blx	r3
    newPresenter->activate();
 80027fe:	682b      	ldr	r3, [r5, #0]
 8002800:	4628      	mov	r0, r5
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002806:	4621      	mov	r1, r4
 8002808:	4630      	mov	r0, r6
 800280a:	f00d fd53 	bl	80102b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	4620      	mov	r0, r4
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	4798      	blx	r3
    newTransition->invalidate();
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	4620      	mov	r0, r4
 800281a:	695b      	ldr	r3, [r3, #20]
}
 800281c:	b001      	add	sp, #4
 800281e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002822:	4718      	bx	r3
    model->bind(newPresenter);
 8002824:	462b      	mov	r3, r5
 8002826:	e7e1      	b.n	80027ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf0>
 8002828:	0801b748 	.word	0x0801b748
 800282c:	0801bf85 	.word	0x0801bf85
 8002830:	0801b8dc 	.word	0x0801b8dc
 8002834:	0801b923 	.word	0x0801b923
 8002838:	0801b9c6 	.word	0x0801b9c6
 800283c:	0801c0f8 	.word	0x0801c0f8
 8002840:	24006b30 	.word	0x24006b30
 8002844:	24006b2c 	.word	0x24006b2c

08002848 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002848:	6a00      	ldr	r0, [r0, #32]
 800284a:	4770      	bx	lr

0800284c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 800284c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800284e:	4770      	bx	lr

08002850 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002850:	4770      	bx	lr

08002852 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002852:	888b      	ldrh	r3, [r1, #4]
 8002854:	6980      	ldr	r0, [r0, #24]
 8002856:	0adb      	lsrs	r3, r3, #11
 8002858:	680a      	ldr	r2, [r1, #0]
 800285a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800285e:	4410      	add	r0, r2
 8002860:	4770      	bx	lr

08002862 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002862:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002864:	b1c2      	cbz	r2, 8002898 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002866:	7b13      	ldrb	r3, [r2, #12]
 8002868:	b1b3      	cbz	r3, 8002898 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800286a:	7b54      	ldrb	r4, [r2, #13]
 800286c:	7ad2      	ldrb	r2, [r2, #11]
 800286e:	0224      	lsls	r4, r4, #8
 8002870:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002874:	4314      	orrs	r4, r2
 8002876:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002878:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800287a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 800287e:	8813      	ldrh	r3, [r2, #0]
 8002880:	428b      	cmp	r3, r1
 8002882:	d102      	bne.n	800288a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002884:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002888:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800288a:	d805      	bhi.n	8002898 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800288c:	3801      	subs	r0, #1
 800288e:	3204      	adds	r2, #4
 8002890:	b280      	uxth	r0, r0
 8002892:	2800      	cmp	r0, #0
 8002894:	d1f3      	bne.n	800287e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002896:	e7f7      	b.n	8002888 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002898:	2000      	movs	r0, #0
 800289a:	e7f5      	b.n	8002888 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800289c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800289c:	b510      	push	{r4, lr}
 800289e:	4604      	mov	r4, r0
 80028a0:	2128      	movs	r1, #40	; 0x28
 80028a2:	f017 f9e1 	bl	8019c68 <_ZdlPvj>
 80028a6:	4620      	mov	r0, r4
 80028a8:	bd10      	pop	{r4, pc}
	...

080028ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80028ac:	b530      	push	{r4, r5, lr}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80028b2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80028b6:	9506      	str	r5, [sp, #24]
 80028b8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80028bc:	9505      	str	r5, [sp, #20]
 80028be:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80028c2:	9504      	str	r5, [sp, #16]
 80028c4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80028c8:	9503      	str	r5, [sp, #12]
 80028ca:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80028ce:	9502      	str	r5, [sp, #8]
 80028d0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80028d4:	9501      	str	r5, [sp, #4]
 80028d6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80028da:	9500      	str	r5, [sp, #0]
 80028dc:	f00d f94a 	bl	800fb74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 80028e2:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80028e8:	61a3      	str	r3, [r4, #24]
 80028ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80028ec:	61e3      	str	r3, [r4, #28]
 80028ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80028f0:	6223      	str	r3, [r4, #32]
 80028f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80028f4:	6263      	str	r3, [r4, #36]	; 0x24
}
 80028f6:	b009      	add	sp, #36	; 0x24
 80028f8:	bd30      	pop	{r4, r5, pc}
 80028fa:	bf00      	nop
 80028fc:	0801c11c 	.word	0x0801c11c

08002900 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002900:	2000      	movs	r0, #0
 8002902:	4770      	bx	lr

08002904 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002904:	8081      	strh	r1, [r0, #4]
    }
 8002906:	4770      	bx	lr

08002908 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002908:	80c1      	strh	r1, [r0, #6]
    }
 800290a:	4770      	bx	lr

0800290c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800290c:	8101      	strh	r1, [r0, #8]
    }
 800290e:	4770      	bx	lr

08002910 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002910:	8141      	strh	r1, [r0, #10]
    }
 8002912:	4770      	bx	lr

08002914 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002914:	4770      	bx	lr

08002916 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 8002916:	4770      	bx	lr

08002918 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8002918:	4770      	bx	lr

0800291a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 800291a:	4770      	bx	lr

0800291c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800291c:	4770      	bx	lr

0800291e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800291e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002920:	88c4      	ldrh	r4, [r0, #6]
 8002922:	6803      	ldr	r3, [r0, #0]
 8002924:	1b12      	subs	r2, r2, r4
 8002926:	8884      	ldrh	r4, [r0, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	1b09      	subs	r1, r1, r4
 800292c:	b212      	sxth	r2, r2
    }
 800292e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002932:	b209      	sxth	r1, r1
 8002934:	4718      	bx	r3

08002936 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800293a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002946:	6010      	str	r0, [r2, #0]
    }
 8002948:	4770      	bx	lr

0800294a <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 800294a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800294c:	4770      	bx	lr

0800294e <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800294e:	4770      	bx	lr

08002950 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002950:	4770      	bx	lr

08002952 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002952:	4770      	bx	lr

08002954 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002954:	4770      	bx	lr

08002956 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 8002956:	4770      	bx	lr

08002958 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8002958:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800295c:	b11a      	cbz	r2, 8002966 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800295e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002962:	b102      	cbz	r2, 8002966 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002964:	6018      	str	r0, [r3, #0]
        }
    }
 8002966:	4770      	bx	lr

08002968 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
     *
     * @see setPressed
     */
    bool getPressed()
    {
        return pressed;
 8002968:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800296c:	b14b      	cbz	r3, 8002982 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 800296e:	f100 026c 	add.w	r2, r0, #108	; 0x6c
 8002972:	6812      	ldr	r2, [r2, #0]
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8002974:	65c2      	str	r2, [r0, #92]	; 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8002976:	b13b      	cbz	r3, 8002988 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x20>
 8002978:	f100 0374 	add.w	r3, r0, #116	; 0x74
 800297c:	681b      	ldr	r3, [r3, #0]
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
    {
        borderColor = color;
 800297e:	6603      	str	r3, [r0, #96]	; 0x60
        T::handlePressedUpdated();
    }
 8002980:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 8002982:	f100 0268 	add.w	r2, r0, #104	; 0x68
 8002986:	e7f4      	b.n	8002972 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8002988:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800298c:	e7f6      	b.n	800297c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>

0800298e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 800298e:	4770      	bx	lr

08002990 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002990:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8002994:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8002998:	4770      	bx	lr

0800299a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 800299a:	b510      	push	{r4, lr}
 800299c:	4604      	mov	r4, r0
 800299e:	2178      	movs	r1, #120	; 0x78
 80029a0:	f017 f962 	bl	8019c68 <_ZdlPvj>
 80029a4:	4620      	mov	r0, r4
 80029a6:	bd10      	pop	{r4, pc}

080029a8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80029a8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80029ac:	b112      	cbz	r2, 80029b4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80029ae:	6803      	ldr	r3, [r0, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4718      	bx	r3
    }
 80029b4:	4770      	bx	lr

080029b6 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 80029b6:	b510      	push	{r4, lr}
 80029b8:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 80029ba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80029bc:	b150      	cbz	r0, 80029d4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 80029be:	6803      	ldr	r3, [r0, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	4798      	blx	r3
 80029c4:	b130      	cbz	r0, 80029d4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 80029c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80029c8:	4621      	mov	r1, r4
 80029ca:	6803      	ldr	r3, [r0, #0]
        }
    }
 80029cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4718      	bx	r3
    }
 80029d4:	bd10      	pop	{r4, pc}

080029d6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 80029d6:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	460d      	mov	r5, r1
        return pressed;
 80029de:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80029e2:	b99b      	cbnz	r3, 8002a0c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x36>
 80029e4:	b98e      	cbnz	r6, 8002a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x34>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80029e6:	fab3 f383 	clz	r3, r3
        handlePressedUpdated();
 80029ea:	4620      	mov	r0, r4
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f8:	4798      	blx	r3
        {
            setPressed(newPressedValue);
            invalidate();
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	4620      	mov	r0, r4
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8002a02:	b116      	cbz	r6, 8002a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x34>
 8002a04:	792b      	ldrb	r3, [r5, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d003      	beq.n	8002a12 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002a0c:	2e00      	cmp	r6, #0
 8002a0e:	d0fc      	beq.n	8002a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x34>
 8002a10:	e7e9      	b.n	80029e6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	4620      	mov	r0, r4
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    }
 8002a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8002a1e:	4718      	bx	r3

08002a20 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8002a20:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8002a22:	6002      	str	r2, [r0, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002a2a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8002a2e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002a32:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a3a:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	0801da70 	.word	0x0801da70

08002a44 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8002a44:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002a46:	b570      	push	{r4, r5, r6, lr}
 8002a48:	4604      	mov	r4, r0
        setX(x);
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8002a4c:	4615      	mov	r5, r2
        setX(x);
 8002a4e:	4798      	blx	r3
        setY(y);
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	4620      	mov	r0, r4
 8002a54:	4629      	mov	r1, r5
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8002a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002a5c:	4718      	bx	r3

08002a5e <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002a5e:	b570      	push	{r4, r5, r6, lr}
 8002a60:	4604      	mov	r4, r0
 8002a62:	461d      	mov	r5, r3
 8002a64:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002a68:	f7ff ffec 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	4629      	mov	r1, r5
 8002a70:	4620      	mov	r0, r4
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	4798      	blx	r3
        setHeight(height);
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	4631      	mov	r1, r6
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8002a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002a82:	4718      	bx	r3

08002a84 <_ZN8touchgfx3BoxC1Ev>:
    Box()
 8002a84:	b510      	push	{r4, lr}
 8002a86:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8002a88:	2226      	movs	r2, #38	; 0x26
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f017 f9a6 	bl	8019ddc <memset>
class Widget : public Drawable
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff ffc5 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <_ZN8touchgfx3BoxC1Ev+0x24>)
    }
 8002a98:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8002a9a:	6023      	str	r3, [r4, #0]
 8002a9c:	23ff      	movs	r3, #255	; 0xff
 8002a9e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8002aa6:	bd10      	pop	{r4, pc}
 8002aa8:	0801d56c 	.word	0x0801d56c

08002aac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle()
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4604      	mov	r4, r0
          firstChild(0)
 8002ab0:	f7ff ffb6 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
        : pressed(false), alpha(255), action(0)
 8002ab4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002ab8:	2500      	movs	r5, #0
        : T(), up(), down()
 8002aba:	4626      	mov	r6, r4
 8002abc:	85a3      	strh	r3, [r4, #44]	; 0x2c
        touchable = touch;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	62a5      	str	r5, [r4, #40]	; 0x28
 8002ac2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x50>)
 8002ac8:	6325      	str	r5, [r4, #48]	; 0x30
 8002aca:	f846 3b34 	str.w	r3, [r6], #52
        : Box(), borderColor(0), borderSize(0)
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f7ff ffd8 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x54>)
        borderBox.setXY(0, 0);
 8002ad6:	462a      	mov	r2, r5
 8002ad8:	4629      	mov	r1, r5
 8002ada:	4630      	mov	r0, r6
 8002adc:	6363      	str	r3, [r4, #52]	; 0x34
 8002ade:	6625      	str	r5, [r4, #96]	; 0x60
 8002ae0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
        : color(0)
 8002ae4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8002ae8:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 8002aec:	f7ff ffaa 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8002af0:	4620      	mov	r0, r4
 8002af2:	4631      	mov	r1, r6
 8002af4:	f008 f9c8 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8002af8:	4620      	mov	r0, r4
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	0801c174 	.word	0x0801c174
 8002b00:	0801d6e0 	.word	0x0801d6e0

08002b04 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8002b04:	4770      	bx	lr

08002b06 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8002b06:	4770      	bx	lr

08002b08 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002b08:	4770      	bx	lr

08002b0a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002b0a:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002b0c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8002b0e:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8002b10:	68c2      	ldr	r2, [r0, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	1055      	asrs	r5, r2, #1
 8002b16:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002b1a:	07d2      	lsls	r2, r2, #31
 8002b1c:	bf48      	it	mi
 8002b1e:	5962      	ldrmi	r2, [r4, r5]
    }
 8002b20:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002b22:	bf48      	it	mi
 8002b24:	58d3      	ldrmi	r3, [r2, r3]
 8002b26:	4718      	bx	r3

08002b28 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8002b28:	6843      	ldr	r3, [r0, #4]
 8002b2a:	b12b      	cbz	r3, 8002b38 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x10>
 8002b2c:	6883      	ldr	r3, [r0, #8]
 8002b2e:	b92b      	cbnz	r3, 8002b3c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002b30:	68c0      	ldr	r0, [r0, #12]
 8002b32:	f000 0001 	and.w	r0, r0, #1
 8002b36:	4770      	bx	lr
 8002b38:	4618      	mov	r0, r3
 8002b3a:	4770      	bx	lr
 8002b3c:	2001      	movs	r0, #1
    }
 8002b3e:	4770      	bx	lr

08002b40 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002b40:	b510      	push	{r4, lr}
 8002b42:	4604      	mov	r4, r0
 8002b44:	2110      	movs	r1, #16
 8002b46:	f017 f88f 	bl	8019c68 <_ZdlPvj>
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	bd10      	pop	{r4, pc}

08002b4e <_ZN15Screen1ViewBaseD0Ev>:
 8002b4e:	b510      	push	{r4, lr}
 8002b50:	4604      	mov	r4, r0
 8002b52:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002b56:	f017 f887 	bl	8019c68 <_ZdlPvj>
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	bd10      	pop	{r4, pc}

08002b5e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002b5e:	3098      	adds	r0, #152	; 0x98
 8002b60:	4288      	cmp	r0, r1
{
 8002b62:	b508      	push	{r3, lr}
    if (&src == &flexButton1)
 8002b64:	d105      	bne.n	8002b72 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002b66:	f00b ffc9 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When flexButton1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
}
 8002b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenNoTransition();
 8002b6e:	f7ff ba33 	b.w	8001fd8 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 8002b72:	bd08      	pop	{r3, pc}

08002b74 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b78:	4604      	mov	r4, r0
 8002b7a:	b087      	sub	sp, #28
        : presenter(0)
 8002b7c:	2500      	movs	r5, #0
 8002b7e:	f00d f9ed 	bl	800ff5c <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 8002b82:	46a0      	mov	r8, r4
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <_ZN15Screen1ViewBaseC1Ev+0x178>)
 8002b86:	f104 076c 	add.w	r7, r4, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002b8a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8002b8e:	63e5      	str	r5, [r4, #60]	; 0x3c
        : T(), up(), down()
 8002b90:	f104 09cc 	add.w	r9, r4, #204	; 0xcc
 8002b94:	f848 3b40 	str.w	r3, [r8], #64
 8002b98:	4640      	mov	r0, r8
 8002b9a:	f7ff ff73 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8002b9e:	2226      	movs	r2, #38	; 0x26
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	f8ad 6014 	strh.w	r6, [sp, #20]
 8002ba8:	f017 f918 	bl	8019ddc <memset>
 8002bac:	4638      	mov	r0, r7
    __background.setPosition(0, 0, 480, 272);
 8002bae:	f44f 7a88 	mov.w	sl, #272	; 0x110
 8002bb2:	f7ff ff35 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
 8002bb6:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <_ZN15Screen1ViewBaseC1Ev+0x17c>)
 8002bb8:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 8002bbc:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8002bc0:	66e3      	str	r3, [r4, #108]	; 0x6c
    {
        Image::setBitmap(bmp);
 8002bc2:	a905      	add	r1, sp, #20
        : Widget(), bitmap(bmp), alpha(255)
 8002bc4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        Image::setBitmap(bmp);
 8002bc8:	4638      	mov	r0, r7
 8002bca:	f04f 0b05 	mov.w	fp, #5
        : Widget(), bitmap(bmp), alpha(255)
 8002bce:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8002bd2:	f00a fa15 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002bd6:	4630      	mov	r0, r6
 8002bd8:	f7ff ff22 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
 8002bdc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002be0:	4648      	mov	r0, r9
 8002be2:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 8002be6:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8002bea:	2301      	movs	r3, #1
 8002bec:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 8002bf0:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <_ZN15Screen1ViewBaseC1Ev+0x180>)
 8002bf6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8002bfa:	f7ff ff43 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
 8002bfe:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <_ZN15Screen1ViewBaseC1Ev+0x184>)
        borderBox.setXY(0, 0);
 8002c00:	462a      	mov	r2, r5
 8002c02:	4629      	mov	r1, r5
 8002c04:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8002c08:	4648      	mov	r0, r9
        : color(col)
 8002c0a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
 8002c0e:	f8a4 50fc 	strh.w	r5, [r4, #252]	; 0xfc
        : color(0)
 8002c12:	e9c4 5540 	strd	r5, r5, [r4, #256]	; 0x100
 8002c16:	e9c4 5542 	strd	r5, r5, [r4, #264]	; 0x108
 8002c1a:	f7ff ff13 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8002c1e:	4649      	mov	r1, r9
 8002c20:	4630      	mov	r0, r6
 8002c22:	f008 f931 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8002c26:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <_ZN15Screen1ViewBaseC1Ev+0x188>)
    __background.setPosition(0, 0, 480, 272);
 8002c28:	462a      	mov	r2, r5
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4640      	mov	r0, r8
 8002c2e:	f8cd a000 	str.w	sl, [sp]
 8002c32:	e9c4 3444 	strd	r3, r4, [r4, #272]	; 0x110
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <_ZN15Screen1ViewBaseC1Ev+0x18c>)
 8002c38:	e9c4 3546 	strd	r3, r5, [r4, #280]	; 0x118
 8002c3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c40:	f7ff ff0d 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        this->color = color;
 8002c44:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    image1.setXY(0, 0);
 8002c48:	462a      	mov	r2, r5
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	66a3      	str	r3, [r4, #104]	; 0x68
 8002c4e:	4638      	mov	r0, r7
 8002c50:	f7ff fef8 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TWINCOOKER01_ID));
 8002c54:	a905      	add	r1, sp, #20
 8002c56:	4638      	mov	r0, r7
 8002c58:	f8ad b014 	strh.w	fp, [sp, #20]
 8002c5c:	f00a f9d0 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        borderBox.setPosition(x, y, width, height);
 8002c60:	462a      	mov	r2, r5
 8002c62:	4629      	mov	r1, r5
 8002c64:	4648      	mov	r0, r9
 8002c66:	23ce      	movs	r3, #206	; 0xce
 8002c68:	f8cd a000 	str.w	sl, [sp]
 8002c6c:	f7ff fef7 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        up = colorReleased;
 8002c70:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <_ZN15Screen1ViewBaseC1Ev+0x190>)
        handlePressedUpdated();
 8002c72:	4630      	mov	r0, r6
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8002c74:	f8a4 b0fc 	strh.w	fp, [r4, #252]	; 0xfc
        up = colorReleased;
 8002c78:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        down = colorPressed;
 8002c7c:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8002c80:	3333      	adds	r3, #51	; 0x33
 8002c82:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        borderUp = borderColorReleased;
 8002c86:	f5a3 43cc 	sub.w	r3, r3, #26112	; 0x6600
 8002c8a:	3b66      	subs	r3, #102	; 0x66
 8002c8c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        borderDown = borderColorPressed;
 8002c90:	f103 1333 	add.w	r3, r3, #3342387	; 0x330033
 8002c94:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8002c98:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
        handlePressedUpdated();
 8002c9c:	f7ff fe64 	bl	8002968 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButton1.setPosition(274, 0, 206, 272);
 8002ca0:	462a      	mov	r2, r5
 8002ca2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	23ce      	movs	r3, #206	; 0xce
 8002caa:	f8cd a000 	str.w	sl, [sp]
 8002cae:	f7ff fed6 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        handleAlphaUpdated();
 8002cb2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002cb6:	4630      	mov	r0, r6
        alpha = newAlpha;
 8002cb8:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
        handleAlphaUpdated();
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	4798      	blx	r3
    flexButton1.setAction(flexButtonCallback);
 8002cc2:	eb04 030a 	add.w	r3, r4, sl
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002cc6:	1d20      	adds	r0, r4, #4
 8002cc8:	4641      	mov	r1, r8
        action = &callback;
 8002cca:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 8002cce:	9003      	str	r0, [sp, #12]
 8002cd0:	f008 f8da 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002cd4:	4639      	mov	r1, r7
 8002cd6:	9803      	ldr	r0, [sp, #12]
 8002cd8:	f008 f8d6 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002cdc:	9803      	ldr	r0, [sp, #12]
 8002cde:	4631      	mov	r1, r6
 8002ce0:	f008 f8d2 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	b007      	add	sp, #28
 8002ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cec:	0801c228 	.word	0x0801c228
 8002cf0:	0801d748 	.word	0x0801d748
 8002cf4:	0801c174 	.word	0x0801c174
 8002cf8:	0801d6e0 	.word	0x0801d6e0
 8002cfc:	0801c210 	.word	0x0801c210
 8002d00:	08002b5f 	.word	0x08002b5f
 8002d04:	ff006699 	.word	0xff006699

08002d08 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8002d08:	4770      	bx	lr

08002d0a <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
 8002d0a:	4770      	bx	lr

08002d0c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002d0c:	4770      	bx	lr

08002d0e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002d0e:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002d10:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8002d12:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8002d14:	68c2      	ldr	r2, [r0, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	1055      	asrs	r5, r2, #1
 8002d1a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002d1e:	07d2      	lsls	r2, r2, #31
 8002d20:	bf48      	it	mi
 8002d22:	5962      	ldrmi	r2, [r4, r5]
    }
 8002d24:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002d26:	bf48      	it	mi
 8002d28:	58d3      	ldrmi	r3, [r2, r3]
 8002d2a:	4718      	bx	r3

08002d2c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8002d2c:	6843      	ldr	r3, [r0, #4]
 8002d2e:	b12b      	cbz	r3, 8002d3c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x10>
 8002d30:	6883      	ldr	r3, [r0, #8]
 8002d32:	b92b      	cbnz	r3, 8002d40 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002d34:	68c0      	ldr	r0, [r0, #12]
 8002d36:	f000 0001 	and.w	r0, r0, #1
 8002d3a:	4770      	bx	lr
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	4770      	bx	lr
 8002d40:	2001      	movs	r0, #1
    }
 8002d42:	4770      	bx	lr

08002d44 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002d44:	b510      	push	{r4, lr}
 8002d46:	4604      	mov	r4, r0
 8002d48:	2110      	movs	r1, #16
 8002d4a:	f016 ff8d 	bl	8019c68 <_ZdlPvj>
 8002d4e:	4620      	mov	r0, r4
 8002d50:	bd10      	pop	{r4, pc}

08002d52 <_ZN15Screen2ViewBaseD0Ev>:
 8002d52:	b510      	push	{r4, lr}
 8002d54:	4604      	mov	r4, r0
 8002d56:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002d5a:	f016 ff85 	bl	8019c68 <_ZdlPvj>
 8002d5e:	4620      	mov	r0, r4
 8002d60:	bd10      	pop	{r4, pc}

08002d62 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002d62:	3098      	adds	r0, #152	; 0x98
 8002d64:	4288      	cmp	r0, r1
{
 8002d66:	b508      	push	{r3, lr}
    if (&src == &flexButton1)
 8002d68:	d105      	bne.n	8002d76 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002d6a:	f00b fec7 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When flexButton1 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
    }
}
 8002d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen3ScreenNoTransition();
 8002d72:	f7ff b941 	b.w	8001ff8 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
}
 8002d76:	bd08      	pop	{r3, pc}

08002d78 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8002d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	b086      	sub	sp, #24
 8002d80:	2500      	movs	r5, #0
 8002d82:	f00d f8eb 	bl	800ff5c <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8002d86:	46a0      	mov	r8, r4
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <_ZN15Screen2ViewBaseC1Ev+0x178>)
 8002d8a:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8002d8e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8002d92:	63e5      	str	r5, [r4, #60]	; 0x3c
        : T(), up(), down()
 8002d94:	f104 09cc 	add.w	r9, r4, #204	; 0xcc
 8002d98:	f848 3b40 	str.w	r3, [r8], #64
 8002d9c:	4640      	mov	r0, r8
 8002d9e:	f7ff fe71 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
        : Widget(), bitmap(bmp), alpha(255)
 8002da2:	2226      	movs	r2, #38	; 0x26
 8002da4:	4629      	mov	r1, r5
 8002da6:	4638      	mov	r0, r7
 8002da8:	f8ad 6014 	strh.w	r6, [sp, #20]
 8002dac:	f017 f816 	bl	8019ddc <memset>
 8002db0:	4638      	mov	r0, r7
        borderBox.setPosition(x, y, width, height);
 8002db2:	f04f 0a9d 	mov.w	sl, #157	; 0x9d
 8002db6:	f7ff fe33 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
 8002dba:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <_ZN15Screen2ViewBaseC1Ev+0x17c>)
 8002dbc:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
 8002dc0:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8002dc4:	66e3      	str	r3, [r4, #108]	; 0x6c
        Image::setBitmap(bmp);
 8002dc6:	a905      	add	r1, sp, #20
        : Widget(), bitmap(bmp), alpha(255)
 8002dc8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        Image::setBitmap(bmp);
 8002dcc:	4638      	mov	r0, r7
        : Widget(), bitmap(bmp), alpha(255)
 8002dce:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8002dd2:	f00a f915 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002dd6:	4630      	mov	r0, r6
 8002dd8:	f7ff fe22 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
        : pressed(false), alpha(255), action(0)
 8002ddc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        : Box(), borderColor(0), borderSize(0)
 8002de0:	4648      	mov	r0, r9
 8002de2:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 8002de6:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8002dea:	2301      	movs	r3, #1
 8002dec:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 8002df0:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
        : T(), up(), down()
 8002df4:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <_ZN15Screen2ViewBaseC1Ev+0x180>)
 8002df6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8002dfa:	f7ff fe43 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <_ZN15Screen2ViewBaseC1Ev+0x184>)
        borderBox.setXY(0, 0);
 8002e00:	462a      	mov	r2, r5
 8002e02:	4629      	mov	r1, r5
 8002e04:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8002e08:	4648      	mov	r0, r9
        : color(col)
 8002e0a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
 8002e0e:	f8a4 50fc 	strh.w	r5, [r4, #252]	; 0xfc
        : color(0)
 8002e12:	e9c4 5540 	strd	r5, r5, [r4, #256]	; 0x100
 8002e16:	e9c4 5542 	strd	r5, r5, [r4, #264]	; 0x108
 8002e1a:	f7ff fe13 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8002e1e:	4649      	mov	r1, r9
 8002e20:	4630      	mov	r0, r6
 8002e22:	f008 f831 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8002e26:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <_ZN15Screen2ViewBaseC1Ev+0x188>)
    __background.setPosition(0, 0, 480, 272);
 8002e28:	462a      	mov	r2, r5
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	4640      	mov	r0, r8
 8002e2e:	e9c4 3444 	strd	r3, r4, [r4, #272]	; 0x110
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <_ZN15Screen2ViewBaseC1Ev+0x18c>)
 8002e34:	e9c4 3546 	strd	r3, r5, [r4, #280]	; 0x118
 8002e38:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002e42:	f7ff fe0c 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
 8002e46:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    image1.setXY(0, 0);
 8002e4a:	462a      	mov	r2, r5
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	4638      	mov	r0, r7
 8002e50:	66a3      	str	r3, [r4, #104]	; 0x68
 8002e52:	f7ff fdf7 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 8002e56:	2306      	movs	r3, #6
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TWINCOOKER02_ID));
 8002e58:	a905      	add	r1, sp, #20
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e60:	f00a f8ce 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        borderBox.setPosition(x, y, width, height);
 8002e64:	462a      	mov	r2, r5
 8002e66:	4629      	mov	r1, r5
 8002e68:	4648      	mov	r0, r9
 8002e6a:	238b      	movs	r3, #139	; 0x8b
 8002e6c:	f8cd a000 	str.w	sl, [sp]
 8002e70:	f7ff fdf5 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        borderSize = size;
 8002e74:	2305      	movs	r3, #5
        handlePressedUpdated();
 8002e76:	4630      	mov	r0, r6
 8002e78:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
        up = colorReleased;
 8002e7c:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <_ZN15Screen2ViewBaseC1Ev+0x190>)
 8002e7e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        down = colorPressed;
 8002e82:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8002e86:	3333      	adds	r3, #51	; 0x33
 8002e88:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        borderUp = borderColorReleased;
 8002e8c:	f5a3 43cc 	sub.w	r3, r3, #26112	; 0x6600
 8002e90:	3b66      	subs	r3, #102	; 0x66
 8002e92:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        borderDown = borderColorPressed;
 8002e96:	f103 1333 	add.w	r3, r3, #3342387	; 0x330033
 8002e9a:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8002e9e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
        handlePressedUpdated();
 8002ea2:	f7ff fd61 	bl	8002968 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButton1.setPosition(21, 86, 139, 157);
 8002ea6:	2256      	movs	r2, #86	; 0x56
 8002ea8:	2115      	movs	r1, #21
 8002eaa:	4630      	mov	r0, r6
 8002eac:	238b      	movs	r3, #139	; 0x8b
 8002eae:	f8cd a000 	str.w	sl, [sp]
 8002eb2:	f7ff fdd4 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        handleAlphaUpdated();
 8002eb6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002eba:	4630      	mov	r0, r6
        alpha = newAlpha;
 8002ebc:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
        handleAlphaUpdated();
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	4798      	blx	r3
    flexButton1.setAction(flexButtonCallback);
 8002ec6:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8002eca:	1d20      	adds	r0, r4, #4
 8002ecc:	4641      	mov	r1, r8
        action = &callback;
 8002ece:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 8002ed2:	9003      	str	r0, [sp, #12]
 8002ed4:	f007 ffd8 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002ed8:	4639      	mov	r1, r7
 8002eda:	9803      	ldr	r0, [sp, #12]
 8002edc:	f007 ffd4 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002ee0:	9803      	ldr	r0, [sp, #12]
 8002ee2:	4631      	mov	r1, r6
 8002ee4:	f007 ffd0 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002ee8:	4620      	mov	r0, r4
 8002eea:	b006      	add	sp, #24
 8002eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef0:	0801c274 	.word	0x0801c274
 8002ef4:	0801d748 	.word	0x0801d748
 8002ef8:	0801c174 	.word	0x0801c174
 8002efc:	0801d6e0 	.word	0x0801d6e0
 8002f00:	0801c25c 	.word	0x0801c25c
 8002f04:	08002d63 	.word	0x08002d63
 8002f08:	ff006699 	.word	0xff006699

08002f0c <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 8002f0c:	4770      	bx	lr

08002f0e <_ZN15Screen3ViewBase11setupScreenEv>:
}

void Screen3ViewBase::setupScreen()
{

}
 8002f0e:	4770      	bx	lr

08002f10 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002f10:	4770      	bx	lr

08002f12 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002f12:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002f14:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8002f16:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8002f18:	68c2      	ldr	r2, [r0, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	1055      	asrs	r5, r2, #1
 8002f1e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002f22:	07d2      	lsls	r2, r2, #31
 8002f24:	bf48      	it	mi
 8002f26:	5962      	ldrmi	r2, [r4, r5]
    }
 8002f28:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002f2a:	bf48      	it	mi
 8002f2c:	58d3      	ldrmi	r3, [r2, r3]
 8002f2e:	4718      	bx	r3

08002f30 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8002f30:	6843      	ldr	r3, [r0, #4]
 8002f32:	b12b      	cbz	r3, 8002f40 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x10>
 8002f34:	6883      	ldr	r3, [r0, #8]
 8002f36:	b92b      	cbnz	r3, 8002f44 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002f38:	68c0      	ldr	r0, [r0, #12]
 8002f3a:	f000 0001 	and.w	r0, r0, #1
 8002f3e:	4770      	bx	lr
 8002f40:	4618      	mov	r0, r3
 8002f42:	4770      	bx	lr
 8002f44:	2001      	movs	r0, #1
    }
 8002f46:	4770      	bx	lr

08002f48 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	f016 fe8b 	bl	8019c68 <_ZdlPvj>
 8002f52:	4620      	mov	r0, r4
 8002f54:	bd10      	pop	{r4, pc}

08002f56 <_ZN15Screen3ViewBaseD0Ev>:
 8002f56:	b510      	push	{r4, lr}
 8002f58:	4604      	mov	r4, r0
 8002f5a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002f5e:	f016 fe83 	bl	8019c68 <_ZdlPvj>
 8002f62:	4620      	mov	r0, r4
 8002f64:	bd10      	pop	{r4, pc}

08002f66 <_ZN15Screen3ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen3ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002f66:	3098      	adds	r0, #152	; 0x98
 8002f68:	4288      	cmp	r0, r1
{
 8002f6a:	b508      	push	{r3, lr}
    if (&src == &flexButton1)
 8002f6c:	d105      	bne.n	8002f7a <_ZN15Screen3ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002f6e:	f00b fdc5 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When flexButton1 clicked change screen to Screen4
        //Go to Screen4 with no screen transition
        application().gotoScreen4ScreenNoTransition();
    }
}
 8002f72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen4ScreenNoTransition();
 8002f76:	f7ff b84f 	b.w	8002018 <_ZN23FrontendApplicationBase29gotoScreen4ScreenNoTransitionEv>
}
 8002f7a:	bd08      	pop	{r3, pc}

08002f7c <_ZN15Screen3ViewBaseC1Ev>:
Screen3ViewBase::Screen3ViewBase() :
 8002f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f80:	4604      	mov	r4, r0
 8002f82:	b086      	sub	sp, #24
 8002f84:	2500      	movs	r5, #0
 8002f86:	f00c ffe9 	bl	800ff5c <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen3ViewBase::flexButtonCallbackHandler)
 8002f8a:	46a0      	mov	r8, r4
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <_ZN15Screen3ViewBaseC1Ev+0x178>)
 8002f8e:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8002f92:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8002f96:	63e5      	str	r5, [r4, #60]	; 0x3c
        : T(), up(), down()
 8002f98:	f104 09cc 	add.w	r9, r4, #204	; 0xcc
 8002f9c:	f848 3b40 	str.w	r3, [r8], #64
 8002fa0:	4640      	mov	r0, r8
 8002fa2:	f7ff fd6f 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
        : Widget(), bitmap(bmp), alpha(255)
 8002fa6:	2226      	movs	r2, #38	; 0x26
 8002fa8:	4629      	mov	r1, r5
 8002faa:	4638      	mov	r0, r7
 8002fac:	f8ad 6014 	strh.w	r6, [sp, #20]
 8002fb0:	f016 ff14 	bl	8019ddc <memset>
 8002fb4:	4638      	mov	r0, r7
        borderBox.setPosition(x, y, width, height);
 8002fb6:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
 8002fba:	f7ff fd31 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
 8002fbe:	4b4e      	ldr	r3, [pc, #312]	; (80030f8 <_ZN15Screen3ViewBaseC1Ev+0x17c>)
 8002fc0:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
 8002fc4:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8002fc8:	66e3      	str	r3, [r4, #108]	; 0x6c
        Image::setBitmap(bmp);
 8002fca:	a905      	add	r1, sp, #20
        : Widget(), bitmap(bmp), alpha(255)
 8002fcc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        Image::setBitmap(bmp);
 8002fd0:	4638      	mov	r0, r7
        : Widget(), bitmap(bmp), alpha(255)
 8002fd2:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8002fd6:	f00a f813 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f7ff fd20 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
        : pressed(false), alpha(255), action(0)
 8002fe0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        : Box(), borderColor(0), borderSize(0)
 8002fe4:	4648      	mov	r0, r9
 8002fe6:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 8002fea:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 8002ff4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
        : T(), up(), down()
 8002ff8:	4b40      	ldr	r3, [pc, #256]	; (80030fc <_ZN15Screen3ViewBaseC1Ev+0x180>)
 8002ffa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8002ffe:	f7ff fd41 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <_ZN15Screen3ViewBaseC1Ev+0x184>)
        borderBox.setXY(0, 0);
 8003004:	462a      	mov	r2, r5
 8003006:	4629      	mov	r1, r5
 8003008:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 800300c:	4648      	mov	r0, r9
        : color(col)
 800300e:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
 8003012:	f8a4 50fc 	strh.w	r5, [r4, #252]	; 0xfc
        : color(0)
 8003016:	e9c4 5540 	strd	r5, r5, [r4, #256]	; 0x100
 800301a:	e9c4 5542 	strd	r5, r5, [r4, #264]	; 0x108
 800301e:	f7ff fd11 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8003022:	4649      	mov	r1, r9
 8003024:	4630      	mov	r0, r6
 8003026:	f007 ff2f 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800302a:	4b36      	ldr	r3, [pc, #216]	; (8003104 <_ZN15Screen3ViewBaseC1Ev+0x188>)
    __background.setPosition(0, 0, 480, 272);
 800302c:	462a      	mov	r2, r5
 800302e:	4629      	mov	r1, r5
 8003030:	4640      	mov	r0, r8
 8003032:	e9c4 3444 	strd	r3, r4, [r4, #272]	; 0x110
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <_ZN15Screen3ViewBaseC1Ev+0x18c>)
 8003038:	e9c4 3546 	strd	r3, r5, [r4, #280]	; 0x118
 800303c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003046:	f7ff fd0a 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
 800304a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    image1.setXY(0, 0);
 800304e:	462a      	mov	r2, r5
 8003050:	4629      	mov	r1, r5
 8003052:	4638      	mov	r0, r7
 8003054:	66a3      	str	r3, [r4, #104]	; 0x68
 8003056:	f7ff fcf5 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 800305a:	2307      	movs	r3, #7
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TWINCOOKER03_ID));
 800305c:	a905      	add	r1, sp, #20
 800305e:	4638      	mov	r0, r7
 8003060:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003064:	f009 ffcc 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        borderBox.setPosition(x, y, width, height);
 8003068:	462a      	mov	r2, r5
 800306a:	4629      	mov	r1, r5
 800306c:	4648      	mov	r0, r9
 800306e:	23dd      	movs	r3, #221	; 0xdd
 8003070:	f8cd a000 	str.w	sl, [sp]
 8003074:	f7ff fcf3 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        borderSize = size;
 8003078:	2305      	movs	r3, #5
        handlePressedUpdated();
 800307a:	4630      	mov	r0, r6
 800307c:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
        up = colorReleased;
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <_ZN15Screen3ViewBaseC1Ev+0x190>)
 8003082:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        down = colorPressed;
 8003086:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 800308a:	3333      	adds	r3, #51	; 0x33
 800308c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        borderUp = borderColorReleased;
 8003090:	f5a3 43cc 	sub.w	r3, r3, #26112	; 0x6600
 8003094:	3b66      	subs	r3, #102	; 0x66
 8003096:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        borderDown = borderColorPressed;
 800309a:	f103 1333 	add.w	r3, r3, #3342387	; 0x330033
 800309e:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 80030a2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
        handlePressedUpdated();
 80030a6:	f7ff fc5f 	bl	8002968 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButton1.setPosition(233, 201, 221, 46);
 80030aa:	22c9      	movs	r2, #201	; 0xc9
 80030ac:	21e9      	movs	r1, #233	; 0xe9
 80030ae:	4630      	mov	r0, r6
 80030b0:	23dd      	movs	r3, #221	; 0xdd
 80030b2:	f8cd a000 	str.w	sl, [sp]
 80030b6:	f7ff fcd2 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        handleAlphaUpdated();
 80030ba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80030be:	4630      	mov	r0, r6
        alpha = newAlpha;
 80030c0:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
        handleAlphaUpdated();
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	4798      	blx	r3
    flexButton1.setAction(flexButtonCallback);
 80030ca:	f504 7388 	add.w	r3, r4, #272	; 0x110
 80030ce:	1d20      	adds	r0, r4, #4
 80030d0:	4641      	mov	r1, r8
        action = &callback;
 80030d2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 80030d6:	9003      	str	r0, [sp, #12]
 80030d8:	f007 fed6 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80030dc:	4639      	mov	r1, r7
 80030de:	9803      	ldr	r0, [sp, #12]
 80030e0:	f007 fed2 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80030e4:	9803      	ldr	r0, [sp, #12]
 80030e6:	4631      	mov	r1, r6
 80030e8:	f007 fece 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80030ec:	4620      	mov	r0, r4
 80030ee:	b006      	add	sp, #24
 80030f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f4:	0801c2c0 	.word	0x0801c2c0
 80030f8:	0801d748 	.word	0x0801d748
 80030fc:	0801c174 	.word	0x0801c174
 8003100:	0801d6e0 	.word	0x0801d6e0
 8003104:	0801c2a8 	.word	0x0801c2a8
 8003108:	08002f67 	.word	0x08002f67
 800310c:	ff006699 	.word	0xff006699

08003110 <_ZN15Screen4ViewBaseD1Ev>:

class Screen4ViewBase : public touchgfx::View<Screen4Presenter>
{
public:
    Screen4ViewBase();
    virtual ~Screen4ViewBase() {}
 8003110:	4770      	bx	lr

08003112 <_ZN15Screen4ViewBase11setupScreenEv>:
}

void Screen4ViewBase::setupScreen()
{

}
 8003112:	4770      	bx	lr

08003114 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003114:	4770      	bx	lr

08003116 <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003116:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003118:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800311a:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800311c:	68c2      	ldr	r2, [r0, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	1055      	asrs	r5, r2, #1
 8003122:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003126:	07d2      	lsls	r2, r2, #31
 8003128:	bf48      	it	mi
 800312a:	5962      	ldrmi	r2, [r4, r5]
    }
 800312c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800312e:	bf48      	it	mi
 8003130:	58d3      	ldrmi	r3, [r2, r3]
 8003132:	4718      	bx	r3

08003134 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003134:	6843      	ldr	r3, [r0, #4]
 8003136:	b12b      	cbz	r3, 8003144 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x10>
 8003138:	6883      	ldr	r3, [r0, #8]
 800313a:	b92b      	cbnz	r3, 8003148 <_ZNK8touchgfx8CallbackI15Screen4ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 800313c:	68c0      	ldr	r0, [r0, #12]
 800313e:	f000 0001 	and.w	r0, r0, #1
 8003142:	4770      	bx	lr
 8003144:	4618      	mov	r0, r3
 8003146:	4770      	bx	lr
 8003148:	2001      	movs	r0, #1
    }
 800314a:	4770      	bx	lr

0800314c <_ZN8touchgfx8CallbackI15Screen4ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800314c:	b510      	push	{r4, lr}
 800314e:	4604      	mov	r4, r0
 8003150:	2110      	movs	r1, #16
 8003152:	f016 fd89 	bl	8019c68 <_ZdlPvj>
 8003156:	4620      	mov	r0, r4
 8003158:	bd10      	pop	{r4, pc}

0800315a <_ZN15Screen4ViewBaseD0Ev>:
 800315a:	b510      	push	{r4, lr}
 800315c:	4604      	mov	r4, r0
 800315e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003162:	f016 fd81 	bl	8019c68 <_ZdlPvj>
 8003166:	4620      	mov	r0, r4
 8003168:	bd10      	pop	{r4, pc}

0800316a <_ZN15Screen4ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:
{

}

void Screen4ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 800316a:	b508      	push	{r3, lr}
    if (&src == &flexButton1)
 800316c:	f100 0398 	add.w	r3, r0, #152	; 0x98
 8003170:	4299      	cmp	r1, r3
 8003172:	d105      	bne.n	8003180 <_ZN15Screen4ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x16>
     */
    virtual void action1();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003174:	f00b fcc2 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When flexButton2 clicked change screen to Screen5_1
        //Go to Screen5_1 with no screen transition
        application().gotoScreen5_1ScreenNoTransition();
    }
}
 8003178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen5_2ScreenNoTransition();
 800317c:	f7fe bf6c 	b.w	8002058 <_ZN23FrontendApplicationBase31gotoScreen5_2ScreenNoTransitionEv>
    else if (&src == &flexButton2)
 8003180:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8003184:	4281      	cmp	r1, r0
 8003186:	d105      	bne.n	8003194 <_ZN15Screen4ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2a>
 8003188:	f00b fcb8 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
}
 800318c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen5_1ScreenNoTransition();
 8003190:	f7fe bf52 	b.w	8002038 <_ZN23FrontendApplicationBase31gotoScreen5_1ScreenNoTransitionEv>
}
 8003194:	bd08      	pop	{r3, pc}
	...

08003198 <_ZN15Screen4ViewBaseC1Ev>:
Screen4ViewBase::Screen4ViewBase() :
 8003198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800319c:	4604      	mov	r4, r0
 800319e:	b087      	sub	sp, #28
 80031a0:	2500      	movs	r5, #0
 80031a2:	f00c fedb 	bl	800ff5c <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen4ViewBase::flexButtonCallbackHandler)
 80031a6:	46a1      	mov	r9, r4
 80031a8:	4b5c      	ldr	r3, [pc, #368]	; (800331c <_ZN15Screen4ViewBaseC1Ev+0x184>)
 80031aa:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 80031ae:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80031b2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80031b4:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80031b8:	f849 3b40 	str.w	r3, [r9], #64
 80031bc:	4648      	mov	r0, r9
 80031be:	f7ff fc61 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
        : Widget(), bitmap(bmp), alpha(255)
 80031c2:	2226      	movs	r2, #38	; 0x26
 80031c4:	4629      	mov	r1, r5
 80031c6:	4630      	mov	r0, r6
 80031c8:	f8ad 7014 	strh.w	r7, [sp, #20]
 80031cc:	f016 fe06 	bl	8019ddc <memset>
 80031d0:	4630      	mov	r0, r6
        borderBox.setPosition(x, y, width, height);
 80031d2:	f04f 0a20 	mov.w	sl, #32
 80031d6:	f7ff fc23 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <_ZN15Screen4ViewBaseC1Ev+0x188>)
        Image::setBitmap(bmp);
 80031dc:	a905      	add	r1, sp, #20
 80031de:	4630      	mov	r0, r6
        : Widget(), bitmap(bmp), alpha(255)
 80031e0:	66e3      	str	r3, [r4, #108]	; 0x6c
 80031e2:	f04f 0b05 	mov.w	fp, #5
 80031e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80031ea:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
 80031ee:	f504 7788 	add.w	r7, r4, #272	; 0x110
 80031f2:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 80031f6:	f009 ff03 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80031fa:	4640      	mov	r0, r8
 80031fc:	f7ff fc56 	bl	8002aac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8003200:	4638      	mov	r0, r7
 8003202:	f7ff fc53 	bl	8002aac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003206:	4b47      	ldr	r3, [pc, #284]	; (8003324 <_ZN15Screen4ViewBaseC1Ev+0x18c>)
    __background.setPosition(0, 0, 480, 272);
 8003208:	462a      	mov	r2, r5
 800320a:	4629      	mov	r1, r5
 800320c:	4648      	mov	r0, r9
 800320e:	e9c4 3462 	strd	r3, r4, [r4, #392]	; 0x188
 8003212:	4b45      	ldr	r3, [pc, #276]	; (8003328 <_ZN15Screen4ViewBaseC1Ev+0x190>)
 8003214:	e9c4 3564 	strd	r3, r5, [r4, #400]	; 0x190
 8003218:	f44f 7388 	mov.w	r3, #272	; 0x110
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003222:	f7ff fc1c 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
 8003226:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    image1.setXY(0, 0);
 800322a:	462a      	mov	r2, r5
 800322c:	4629      	mov	r1, r5
 800322e:	4630      	mov	r0, r6
 8003230:	66a3      	str	r3, [r4, #104]	; 0x68
 8003232:	f7ff fc07 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 8003236:	2308      	movs	r3, #8
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TWINCOOKER04_ID));
 8003238:	a905      	add	r1, sp, #20
 800323a:	4630      	mov	r0, r6
 800323c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003240:	f009 fede 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003244:	462a      	mov	r2, r5
 8003246:	4629      	mov	r1, r5
 8003248:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800324c:	233e      	movs	r3, #62	; 0x3e
 800324e:	f8cd a000 	str.w	sl, [sp]
 8003252:	f7ff fc04 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        down = colorPressed;
 8003256:	4b35      	ldr	r3, [pc, #212]	; (800332c <_ZN15Screen4ViewBaseC1Ev+0x194>)
 8003258:	4a35      	ldr	r2, [pc, #212]	; (8003330 <_ZN15Screen4ViewBaseC1Ev+0x198>)
        borderDown = borderColorPressed;
 800325a:	4936      	ldr	r1, [pc, #216]	; (8003334 <_ZN15Screen4ViewBaseC1Ev+0x19c>)
 800325c:	4836      	ldr	r0, [pc, #216]	; (8003338 <_ZN15Screen4ViewBaseC1Ev+0x1a0>)
 800325e:	f8a4 b0fc 	strh.w	fp, [r4, #252]	; 0xfc
        down = colorPressed;
 8003262:	e9c4 3240 	strd	r3, r2, [r4, #256]	; 0x100
        borderDown = borderColorPressed;
 8003266:	e9c4 1042 	strd	r1, r0, [r4, #264]	; 0x108
        handlePressedUpdated();
 800326a:	4640      	mov	r0, r8
 800326c:	f7ff fb7c 	bl	8002968 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButton1.setPosition(278, 20, 62, 32);
 8003270:	2214      	movs	r2, #20
 8003272:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003276:	4640      	mov	r0, r8
 8003278:	233e      	movs	r3, #62	; 0x3e
 800327a:	f8cd a000 	str.w	sl, [sp]
 800327e:	f7ff fbee 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        handleAlphaUpdated();
 8003282:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003286:	4640      	mov	r0, r8
        alpha = newAlpha;
 8003288:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
        handleAlphaUpdated();
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	4798      	blx	r3
    flexButton1.setAction(flexButtonCallback);
 8003292:	f504 7cc4 	add.w	ip, r4, #392	; 0x188
        borderBox.setPosition(x, y, width, height);
 8003296:	462a      	mov	r2, r5
 8003298:	4629      	mov	r1, r5
        action = &callback;
 800329a:	f8c4 c0c8 	str.w	ip, [r4, #200]	; 0xc8
 800329e:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 80032a2:	233e      	movs	r3, #62	; 0x3e
 80032a4:	f8cd a000 	str.w	sl, [sp]
 80032a8:	f8cd c00c 	str.w	ip, [sp, #12]
 80032ac:	f7ff fbd7 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        down = colorPressed;
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <_ZN15Screen4ViewBaseC1Ev+0x194>)
 80032b2:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <_ZN15Screen4ViewBaseC1Ev+0x198>)
        borderDown = borderColorPressed;
 80032b4:	491f      	ldr	r1, [pc, #124]	; (8003334 <_ZN15Screen4ViewBaseC1Ev+0x19c>)
 80032b6:	4820      	ldr	r0, [pc, #128]	; (8003338 <_ZN15Screen4ViewBaseC1Ev+0x1a0>)
 80032b8:	f8a4 b174 	strh.w	fp, [r4, #372]	; 0x174
        down = colorPressed;
 80032bc:	e9c4 325e 	strd	r3, r2, [r4, #376]	; 0x178
        borderDown = borderColorPressed;
 80032c0:	e9c4 1060 	strd	r1, r0, [r4, #384]	; 0x180
        handlePressedUpdated();
 80032c4:	4638      	mov	r0, r7
 80032c6:	f7ff fb4f 	bl	8002968 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButton2.setPosition(140, 20, 62, 32);
 80032ca:	2214      	movs	r2, #20
 80032cc:	218c      	movs	r1, #140	; 0x8c
 80032ce:	4638      	mov	r0, r7
 80032d0:	233e      	movs	r3, #62	; 0x3e
 80032d2:	f8cd a000 	str.w	sl, [sp]
 80032d6:	f7ff fbc2 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        handleAlphaUpdated();
 80032da:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80032de:	4638      	mov	r0, r7
        alpha = newAlpha;
 80032e0:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
        handleAlphaUpdated();
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	4798      	blx	r3
        action = &callback;
 80032ea:	9b03      	ldr	r3, [sp, #12]
 80032ec:	1d20      	adds	r0, r4, #4
 80032ee:	4649      	mov	r1, r9
 80032f0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80032f4:	9003      	str	r0, [sp, #12]
 80032f6:	f007 fdc7 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80032fa:	4631      	mov	r1, r6
 80032fc:	9803      	ldr	r0, [sp, #12]
 80032fe:	f007 fdc3 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003302:	4641      	mov	r1, r8
 8003304:	9803      	ldr	r0, [sp, #12]
 8003306:	f007 fdbf 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800330a:	9803      	ldr	r0, [sp, #12]
 800330c:	4639      	mov	r1, r7
 800330e:	f007 fdbb 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003312:	4620      	mov	r0, r4
 8003314:	b007      	add	sp, #28
 8003316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331a:	bf00      	nop
 800331c:	0801c30c 	.word	0x0801c30c
 8003320:	0801d748 	.word	0x0801d748
 8003324:	0801c2f4 	.word	0x0801c2f4
 8003328:	0800316b 	.word	0x0800316b
 800332c:	ff006699 	.word	0xff006699
 8003330:	ff0099cc 	.word	0xff0099cc
 8003334:	ff003366 	.word	0xff003366
 8003338:	ff336699 	.word	0xff336699

0800333c <_ZN17Screen5_1ViewBaseD1Ev>:

class Screen5_1ViewBase : public touchgfx::View<Screen5_1Presenter>
{
public:
    Screen5_1ViewBase();
    virtual ~Screen5_1ViewBase() {}
 800333c:	4770      	bx	lr

0800333e <_ZN17Screen5_1ViewBase19SC5_1_decreaseValueEv>:
     * Virtual Action Handlers
     */
    virtual void SC5_1_decreaseValue()
    {
        // Override and implement this function in Screen5_1
    }
 800333e:	4770      	bx	lr

08003340 <_ZN17Screen5_1ViewBase19SC5_1_increaseValueEv>:

    virtual void SC5_1_increaseValue()
    {
        // Override and implement this function in Screen5_1
    }
 8003340:	4770      	bx	lr

08003342 <_ZN17Screen5_1ViewBase11setupScreenEv>:
}

void Screen5_1ViewBase::setupScreen()
{

}
 8003342:	4770      	bx	lr

08003344 <_ZN8touchgfx8CallbackI17Screen5_1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003344:	4770      	bx	lr

08003346 <_ZN8touchgfx8CallbackI17Screen5_1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003346:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003348:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800334a:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800334c:	68c2      	ldr	r2, [r0, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	1055      	asrs	r5, r2, #1
 8003352:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003356:	07d2      	lsls	r2, r2, #31
 8003358:	bf48      	it	mi
 800335a:	5962      	ldrmi	r2, [r4, r5]
    }
 800335c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800335e:	bf48      	it	mi
 8003360:	58d3      	ldrmi	r3, [r2, r3]
 8003362:	4718      	bx	r3

08003364 <_ZNK8touchgfx8CallbackI17Screen5_1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003364:	6843      	ldr	r3, [r0, #4]
 8003366:	b12b      	cbz	r3, 8003374 <_ZNK8touchgfx8CallbackI17Screen5_1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003368:	6883      	ldr	r3, [r0, #8]
 800336a:	b92b      	cbnz	r3, 8003378 <_ZNK8touchgfx8CallbackI17Screen5_1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800336c:	68c0      	ldr	r0, [r0, #12]
 800336e:	f000 0001 	and.w	r0, r0, #1
 8003372:	4770      	bx	lr
 8003374:	4618      	mov	r0, r3
 8003376:	4770      	bx	lr
 8003378:	2001      	movs	r0, #1
    }
 800337a:	4770      	bx	lr

0800337c <_ZN8touchgfx8CallbackI17Screen5_1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800337c:	b510      	push	{r4, lr}
 800337e:	4604      	mov	r4, r0
 8003380:	2110      	movs	r1, #16
 8003382:	f016 fc71 	bl	8019c68 <_ZdlPvj>
 8003386:	4620      	mov	r0, r4
 8003388:	bd10      	pop	{r4, pc}

0800338a <_ZN17Screen5_1ViewBaseD0Ev>:
    virtual ~Screen5_1ViewBase() {}
 800338a:	b510      	push	{r4, lr}
 800338c:	4604      	mov	r4, r0
 800338e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003392:	f016 fc69 	bl	8019c68 <_ZdlPvj>
 8003396:	4620      	mov	r0, r4
 8003398:	bd10      	pop	{r4, pc}

0800339a <_ZN17Screen5_1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen5_1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button_up)
 800339a:	f100 0298 	add.w	r2, r0, #152	; 0x98
 800339e:	4291      	cmp	r1, r2
 80033a0:	d102      	bne.n	80033a8 <_ZN17Screen5_1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    {
        //Interaction_button_up
        //When button_up clicked call virtual function
        //Call SC5_1_increaseValue
        SC5_1_increaseValue();
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    else if (&src == &button_down)
    {
        //Interaction_button_down
        //When button_down clicked call virtual function
        //Call SC5_1_decreaseValue
        SC5_1_decreaseValue();
 80033a6:	4718      	bx	r3
    else if (&src == &button_down)
 80033a8:	f100 02cc 	add.w	r2, r0, #204	; 0xcc
 80033ac:	4291      	cmp	r1, r2
 80033ae:	d102      	bne.n	80033b6 <_ZN17Screen5_1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>
        SC5_1_decreaseValue();
 80033b0:	6803      	ldr	r3, [r0, #0]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	e7f7      	b.n	80033a6 <_ZN17Screen5_1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc>
    }
}
 80033b6:	4770      	bx	lr

080033b8 <_ZN8touchgfx6WidgetC1Ev>:
        : x(0), y(0), width(0), height(0)
 80033b8:	2200      	movs	r2, #0
 80033ba:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80033be:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 80033c2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80033c6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80033ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ce:	8482      	strh	r2, [r0, #36]	; 0x24
 80033d0:	4a01      	ldr	r2, [pc, #4]	; (80033d8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80033d2:	6002      	str	r2, [r0, #0]
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	0801c344 	.word	0x0801c344

080033dc <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80033dc:	b510      	push	{r4, lr}
 80033de:	4604      	mov	r4, r0
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80033e0:	2226      	movs	r2, #38	; 0x26
 80033e2:	2100      	movs	r1, #0
 80033e4:	f016 fcfa 	bl	8019ddc <memset>
 80033e8:	4620      	mov	r0, r4
 80033ea:	f7ff ffe5 	bl	80033b8 <_ZN8touchgfx6WidgetC1Ev>
 80033ee:	2300      	movs	r3, #0
        : AbstractButton(), up(), down(), alpha(255)
    {
    }
 80033f0:	4620      	mov	r0, r4
 80033f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80033f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        touchable = touch;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        : AbstractButton(), up(), down(), alpha(255)
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <_ZN8touchgfx6ButtonC1Ev+0x34>)
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003406:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003408:	8623      	strh	r3, [r4, #48]	; 0x30
 800340a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    }
 800340e:	bd10      	pop	{r4, pc}
 8003410:	0801d638 	.word	0x0801d638

08003414 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8003414:	b510      	push	{r4, lr}
 8003416:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003418:	2226      	movs	r2, #38	; 0x26
 800341a:	2100      	movs	r1, #0
 800341c:	f016 fcde 	bl	8019ddc <memset>
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff ffc9 	bl	80033b8 <_ZN8touchgfx6WidgetC1Ev>
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003428:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 800342c:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800342e:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8003432:	62a3      	str	r3, [r4, #40]	; 0x28
 8003434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003438:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800343a:	2300      	movs	r3, #0
 800343c:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
        : x(x), y(y), width(width), height(height)
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	8723      	strh	r3, [r4, #56]	; 0x38
 8003446:	63e3      	str	r3, [r4, #60]	; 0x3c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003448:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 800344c:	bd10      	pop	{r4, pc}
 800344e:	bf00      	nop
 8003450:	0801d4ac 	.word	0x0801d4ac
 8003454:	0801b740 	.word	0x0801b740

08003458 <_ZN17Screen5_1ViewBaseC1Ev>:
Screen5_1ViewBase::Screen5_1ViewBase() :
 8003458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345c:	4604      	mov	r4, r0
 800345e:	b08b      	sub	sp, #44	; 0x2c
 8003460:	2500      	movs	r5, #0
 8003462:	f00c fd7b 	bl	800ff5c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen5_1ViewBase::buttonCallbackHandler)
 8003466:	4626      	mov	r6, r4
 8003468:	4b74      	ldr	r3, [pc, #464]	; (800363c <_ZN17Screen5_1ViewBaseC1Ev+0x1e4>)
        : Widget(), alpha(255), color(0)
 800346a:	4629      	mov	r1, r5
 800346c:	2226      	movs	r2, #38	; 0x26
 800346e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003470:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8003474:	f846 3b40 	str.w	r3, [r6], #64
 8003478:	4630      	mov	r0, r6
 800347a:	f016 fcaf 	bl	8019ddc <memset>
 800347e:	4630      	mov	r0, r6
 8003480:	f7ff ff9a 	bl	80033b8 <_ZN8touchgfx6WidgetC1Ev>
 8003484:	4b6e      	ldr	r3, [pc, #440]	; (8003640 <_ZN17Screen5_1ViewBaseC1Ev+0x1e8>)
 8003486:	27ff      	movs	r7, #255	; 0xff
        : Widget(), bitmap(bmp), alpha(255)
 8003488:	2226      	movs	r2, #38	; 0x26
 800348a:	6423      	str	r3, [r4, #64]	; 0x40
 800348c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003490:	4629      	mov	r1, r5
 8003492:	f884 7066 	strb.w	r7, [r4, #102]	; 0x66
 8003496:	4640      	mov	r0, r8
        : color(col)
 8003498:	66a5      	str	r5, [r4, #104]	; 0x68
 800349a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800349e:	f016 fc9d 	bl	8019ddc <memset>
 80034a2:	4640      	mov	r0, r8
 80034a4:	f104 0bcc 	add.w	fp, r4, #204	; 0xcc
 80034a8:	f7ff ff86 	bl	80033b8 <_ZN8touchgfx6WidgetC1Ev>
 80034ac:	4b65      	ldr	r3, [pc, #404]	; (8003644 <_ZN17Screen5_1ViewBaseC1Ev+0x1ec>)
        Image::setBitmap(bmp);
 80034ae:	a908      	add	r1, sp, #32
 80034b0:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 80034b2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80034b4:	f504 7a80 	add.w	sl, r4, #256	; 0x100
 80034b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80034bc:	f504 79a4 	add.w	r9, r4, #328	; 0x148
 80034c0:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
    button_up.setAction(buttonCallback);
 80034c4:	f504 77c8 	add.w	r7, r4, #400	; 0x190
 80034c8:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 80034cc:	f009 fd98 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    buttonCallback(this, &Screen5_1ViewBase::buttonCallbackHandler)
 80034d0:	f104 0398 	add.w	r3, r4, #152	; 0x98
 80034d4:	4618      	mov	r0, r3
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	f7ff ff80 	bl	80033dc <_ZN8touchgfx6ButtonC1Ev>
 80034dc:	4658      	mov	r0, fp
 80034de:	f7ff ff7d 	bl	80033dc <_ZN8touchgfx6ButtonC1Ev>
 80034e2:	4650      	mov	r0, sl
 80034e4:	f7ff ff96 	bl	8003414 <_ZN8touchgfx8TextAreaC1Ev>
 80034e8:	4648      	mov	r0, r9
 80034ea:	f7ff ff93 	bl	8003414 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80034ee:	4a56      	ldr	r2, [pc, #344]	; (8003648 <_ZN17Screen5_1ViewBaseC1Ev+0x1f0>)
        setXY(x, y);
 80034f0:	4629      	mov	r1, r5
 80034f2:	4630      	mov	r0, r6
 80034f4:	e9c4 2464 	strd	r2, r4, [r4, #400]	; 0x190
 80034f8:	4a54      	ldr	r2, [pc, #336]	; (800364c <_ZN17Screen5_1ViewBaseC1Ev+0x1f4>)
 80034fa:	e9c4 2566 	strd	r2, r5, [r4, #408]	; 0x198
 80034fe:	462a      	mov	r2, r5
 8003500:	f7ff faa0 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003504:	4630      	mov	r0, r6
 8003506:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800350a:	f7ff f9ff 	bl	800290c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 800350e:	4630      	mov	r0, r6
 8003510:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003514:	f7ff f9fc 	bl	8002910 <_ZN8touchgfx8Drawable9setHeightEs>
        this->color = color;
 8003518:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
    image_back.setXY(0, 0);
 800351c:	4629      	mov	r1, r5
 800351e:	4640      	mov	r0, r8
 8003520:	66a2      	str	r2, [r4, #104]	; 0x68
 8003522:	462a      	mov	r2, r5
 8003524:	f7ff fa8e 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
    image_back.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 8003528:	a908      	add	r1, sp, #32
 800352a:	4640      	mov	r0, r8
 800352c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8003530:	f009 fd66 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    button_up.setXY(56, 65);
 8003534:	9b00      	ldr	r3, [sp, #0]
 8003536:	2241      	movs	r2, #65	; 0x41
 8003538:	2138      	movs	r1, #56	; 0x38
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fa82 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 8003540:	2215      	movs	r2, #21
    button_up.setBitmaps(touchgfx::Bitmap(BITMAP_UP_BTN_ID), touchgfx::Bitmap(BITMAP_UP_BTN_PRESSED_ID));
 8003542:	9b00      	ldr	r3, [sp, #0]
 8003544:	a907      	add	r1, sp, #28
 8003546:	f8ad 201c 	strh.w	r2, [sp, #28]
 800354a:	2217      	movs	r2, #23
 800354c:	4618      	mov	r0, r3
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	f8ad 2020 	strh.w	r2, [sp, #32]
 8003554:	aa08      	add	r2, sp, #32
 8003556:	f009 fbdb 	bl	800cd10 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button_down.setXY(56, 137);
 800355a:	4658      	mov	r0, fp
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800355c:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
 8003560:	2289      	movs	r2, #137	; 0x89
 8003562:	2138      	movs	r1, #56	; 0x38
 8003564:	f7ff fa6e 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 8003568:	2202      	movs	r2, #2
    button_down.setBitmaps(touchgfx::Bitmap(BITMAP_DOWN_BTN_ID), touchgfx::Bitmap(BITMAP_DOWN_BTN_PRESSED_ID));
 800356a:	a907      	add	r1, sp, #28
 800356c:	4658      	mov	r0, fp
 800356e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8003572:	2204      	movs	r2, #4
 8003574:	f8ad 2020 	strh.w	r2, [sp, #32]
 8003578:	aa08      	add	r2, sp, #32
 800357a:	f009 fbc9 	bl	800cd10 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    textArea_temp.setXY(313, 136);
 800357e:	2288      	movs	r2, #136	; 0x88
 8003580:	4650      	mov	r0, sl
 8003582:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
 8003586:	f240 1139 	movw	r1, #313	; 0x139
        boundingArea = calculateBoundingArea();
 800358a:	af02      	add	r7, sp, #8
 800358c:	f7ff fa5a 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003594:	4651      	mov	r1, sl
 8003596:	4638      	mov	r0, r7
        this->color = color;
 8003598:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
        linespace = space;
 800359c:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
        boundingArea = calculateBoundingArea();
 80035a0:	f009 f806 	bl	800c5b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80035a4:	f504 7c9e 	add.w	ip, r4, #316	; 0x13c
 80035a8:	4b29      	ldr	r3, [pc, #164]	; (8003650 <_ZN17Screen5_1ViewBaseC1Ev+0x1f8>)
 80035aa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80035ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80035b2:	2201      	movs	r2, #1
    textArea_temp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A1ZH));
 80035b4:	a908      	add	r1, sp, #32
 80035b6:	4650      	mov	r0, sl
 80035b8:	9308      	str	r3, [sp, #32]
 80035ba:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80035be:	f009 fb49 	bl	800cc54 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea_temp_1.setXY(276, 53);
 80035c2:	4648      	mov	r0, r9
 80035c4:	2235      	movs	r2, #53	; 0x35
 80035c6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80035ca:	f7ff fa3b 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 80035ce:	f04f 32ff 	mov.w	r2, #4294967295
        boundingArea = calculateBoundingArea();
 80035d2:	4649      	mov	r1, r9
 80035d4:	4638      	mov	r0, r7
        this->color = color;
 80035d6:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
        linespace = space;
 80035da:	f8a4 517c 	strh.w	r5, [r4, #380]	; 0x17c
        boundingArea = calculateBoundingArea();
 80035de:	f008 ffe7 	bl	800c5b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80035e2:	f504 7cc2 	add.w	ip, r4, #388	; 0x184
 80035e6:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <_ZN17Screen5_1ViewBaseC1Ev+0x1f8>)
 80035e8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80035ec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    textArea_temp_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UYDQ));
 80035f0:	a908      	add	r1, sp, #32
 80035f2:	4648      	mov	r0, r9
 80035f4:	9308      	str	r3, [sp, #32]
 80035f6:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 80035fa:	f009 fb2b 	bl	800cc54 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80035fe:	1d20      	adds	r0, r4, #4
 8003600:	4631      	mov	r1, r6
 8003602:	9000      	str	r0, [sp, #0]
 8003604:	f007 fc40 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003608:	4641      	mov	r1, r8
 800360a:	9800      	ldr	r0, [sp, #0]
 800360c:	f007 fc3c 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003610:	9b01      	ldr	r3, [sp, #4]
 8003612:	9800      	ldr	r0, [sp, #0]
 8003614:	4619      	mov	r1, r3
 8003616:	f007 fc37 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800361a:	4659      	mov	r1, fp
 800361c:	9800      	ldr	r0, [sp, #0]
 800361e:	f007 fc33 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003622:	4651      	mov	r1, sl
 8003624:	9800      	ldr	r0, [sp, #0]
 8003626:	f007 fc2f 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800362a:	9800      	ldr	r0, [sp, #0]
 800362c:	4649      	mov	r1, r9
 800362e:	f007 fc2b 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003632:	4620      	mov	r0, r4
 8003634:	b00b      	add	sp, #44	; 0x2c
 8003636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363a:	bf00      	nop
 800363c:	0801c3c4 	.word	0x0801c3c4
 8003640:	0801d56c 	.word	0x0801d56c
 8003644:	0801d748 	.word	0x0801d748
 8003648:	0801c3ac 	.word	0x0801c3ac
 800364c:	0800339b 	.word	0x0800339b
 8003650:	0801b740 	.word	0x0801b740

08003654 <_ZN17Screen5_2ViewBaseD1Ev>:

class Screen5_2ViewBase : public touchgfx::View<Screen5_2Presenter>
{
public:
    Screen5_2ViewBase();
    virtual ~Screen5_2ViewBase() {}
 8003654:	4770      	bx	lr

08003656 <_ZN17Screen5_2ViewBase11setupScreenEv>:
}

void Screen5_2ViewBase::setupScreen()
{

}
 8003656:	4770      	bx	lr

08003658 <_ZN8touchgfx8CallbackI17Screen5_2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003658:	4770      	bx	lr

0800365a <_ZN8touchgfx8CallbackI17Screen5_2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800365a:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800365c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800365e:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003660:	68c2      	ldr	r2, [r0, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	1055      	asrs	r5, r2, #1
 8003666:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800366a:	07d2      	lsls	r2, r2, #31
 800366c:	bf48      	it	mi
 800366e:	5962      	ldrmi	r2, [r4, r5]
    }
 8003670:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003672:	bf48      	it	mi
 8003674:	58d3      	ldrmi	r3, [r2, r3]
 8003676:	4718      	bx	r3

08003678 <_ZNK8touchgfx8CallbackI17Screen5_2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003678:	6843      	ldr	r3, [r0, #4]
 800367a:	b12b      	cbz	r3, 8003688 <_ZNK8touchgfx8CallbackI17Screen5_2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x10>
 800367c:	6883      	ldr	r3, [r0, #8]
 800367e:	b92b      	cbnz	r3, 800368c <_ZNK8touchgfx8CallbackI17Screen5_2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8003680:	68c0      	ldr	r0, [r0, #12]
 8003682:	f000 0001 	and.w	r0, r0, #1
 8003686:	4770      	bx	lr
 8003688:	4618      	mov	r0, r3
 800368a:	4770      	bx	lr
 800368c:	2001      	movs	r0, #1
    }
 800368e:	4770      	bx	lr

08003690 <_ZN8touchgfx8CallbackI17Screen5_2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	2110      	movs	r1, #16
 8003696:	f016 fae7 	bl	8019c68 <_ZdlPvj>
 800369a:	4620      	mov	r0, r4
 800369c:	bd10      	pop	{r4, pc}

0800369e <_ZN17Screen5_2ViewBaseD0Ev>:
 800369e:	b510      	push	{r4, lr}
 80036a0:	4604      	mov	r4, r0
 80036a2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80036a6:	f016 fadf 	bl	8019c68 <_ZdlPvj>
 80036aa:	4620      	mov	r0, r4
 80036ac:	bd10      	pop	{r4, pc}

080036ae <_ZN17Screen5_2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen5_2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80036ae:	b508      	push	{r3, lr}
    if (&src == &flexButton1)
 80036b0:	f100 0398 	add.w	r3, r0, #152	; 0x98
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d105      	bne.n	80036c4 <_ZN17Screen5_2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x16>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80036b8:	f00b fa20 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When flexButton2 clicked change screen to Screen4
        //Go to Screen4 with no screen transition
        application().gotoScreen4ScreenNoTransition();
    }
}
 80036bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen5_1ScreenNoTransition();
 80036c0:	f7fe bcba 	b.w	8002038 <_ZN23FrontendApplicationBase31gotoScreen5_1ScreenNoTransitionEv>
    else if (&src == &flexButton2)
 80036c4:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80036c8:	4281      	cmp	r1, r0
 80036ca:	d105      	bne.n	80036d8 <_ZN17Screen5_2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2a>
 80036cc:	f00b fa16 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
}
 80036d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen4ScreenNoTransition();
 80036d4:	f7fe bca0 	b.w	8002018 <_ZN23FrontendApplicationBase29gotoScreen4ScreenNoTransitionEv>
}
 80036d8:	bd08      	pop	{r3, pc}
	...

080036dc <_ZN17Screen5_2ViewBaseC1Ev>:
Screen5_2ViewBase::Screen5_2ViewBase() :
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	4604      	mov	r4, r0
 80036e2:	b087      	sub	sp, #28
 80036e4:	2500      	movs	r5, #0
 80036e6:	f00c fc39 	bl	800ff5c <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen5_2ViewBase::flexButtonCallbackHandler)
 80036ea:	46a1      	mov	r9, r4
 80036ec:	4b5c      	ldr	r3, [pc, #368]	; (8003860 <_ZN17Screen5_2ViewBaseC1Ev+0x184>)
 80036ee:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 80036f2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80036f6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80036f8:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80036fc:	f849 3b40 	str.w	r3, [r9], #64
 8003700:	4648      	mov	r0, r9
 8003702:	f7ff f9bf 	bl	8002a84 <_ZN8touchgfx3BoxC1Ev>
        : Widget(), bitmap(bmp), alpha(255)
 8003706:	2226      	movs	r2, #38	; 0x26
 8003708:	4629      	mov	r1, r5
 800370a:	4630      	mov	r0, r6
 800370c:	f8ad 7014 	strh.w	r7, [sp, #20]
 8003710:	f016 fb64 	bl	8019ddc <memset>
 8003714:	4630      	mov	r0, r6
        borderBox.setPosition(x, y, width, height);
 8003716:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
 800371a:	f7ff f981 	bl	8002a20 <_ZN8touchgfx8DrawableC1Ev>
 800371e:	4b51      	ldr	r3, [pc, #324]	; (8003864 <_ZN17Screen5_2ViewBaseC1Ev+0x188>)
        Image::setBitmap(bmp);
 8003720:	a905      	add	r1, sp, #20
 8003722:	4630      	mov	r0, r6
        : Widget(), bitmap(bmp), alpha(255)
 8003724:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003726:	f04f 0b05 	mov.w	fp, #5
 800372a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800372e:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
 8003732:	f504 7788 	add.w	r7, r4, #272	; 0x110
 8003736:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 800373a:	f009 fc61 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800373e:	4640      	mov	r0, r8
 8003740:	f7ff f9b4 	bl	8002aac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff f9b1 	bl	8002aac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <_ZN17Screen5_2ViewBaseC1Ev+0x18c>)
    __background.setPosition(0, 0, 480, 272);
 800374c:	462a      	mov	r2, r5
 800374e:	4629      	mov	r1, r5
 8003750:	4648      	mov	r0, r9
 8003752:	e9c4 3462 	strd	r3, r4, [r4, #392]	; 0x188
 8003756:	4b45      	ldr	r3, [pc, #276]	; (800386c <_ZN17Screen5_2ViewBaseC1Ev+0x190>)
 8003758:	e9c4 3564 	strd	r3, r5, [r4, #400]	; 0x190
 800375c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003766:	f7ff f97a 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
 800376a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    image1.setXY(0, 0);
 800376e:	462a      	mov	r2, r5
 8003770:	4629      	mov	r1, r5
 8003772:	4630      	mov	r0, r6
 8003774:	66a3      	str	r3, [r4, #104]	; 0x68
 8003776:	f7ff f965 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 800377a:	2309      	movs	r3, #9
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TWINCOOKER05_ID));
 800377c:	a905      	add	r1, sp, #20
 800377e:	4630      	mov	r0, r6
 8003780:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003784:	f009 fc3c 	bl	800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003788:	462a      	mov	r2, r5
 800378a:	4629      	mov	r1, r5
 800378c:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8003790:	f8cd a000 	str.w	sl, [sp]
 8003794:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003798:	f7ff f961 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        down = colorPressed;
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <_ZN17Screen5_2ViewBaseC1Ev+0x194>)
 800379e:	4a35      	ldr	r2, [pc, #212]	; (8003874 <_ZN17Screen5_2ViewBaseC1Ev+0x198>)
        borderDown = borderColorPressed;
 80037a0:	4935      	ldr	r1, [pc, #212]	; (8003878 <_ZN17Screen5_2ViewBaseC1Ev+0x19c>)
 80037a2:	4836      	ldr	r0, [pc, #216]	; (800387c <_ZN17Screen5_2ViewBaseC1Ev+0x1a0>)
 80037a4:	f8a4 b0fc 	strh.w	fp, [r4, #252]	; 0xfc
        down = colorPressed;
 80037a8:	e9c4 3240 	strd	r3, r2, [r4, #256]	; 0x100
        borderDown = borderColorPressed;
 80037ac:	e9c4 1042 	strd	r1, r0, [r4, #264]	; 0x108
        handlePressedUpdated();
 80037b0:	4640      	mov	r0, r8
 80037b2:	f7ff f8d9 	bl	8002968 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButton1.setPosition(109, 205, 262, 44);
 80037b6:	22cd      	movs	r2, #205	; 0xcd
 80037b8:	216d      	movs	r1, #109	; 0x6d
 80037ba:	4640      	mov	r0, r8
 80037bc:	f8cd a000 	str.w	sl, [sp]
 80037c0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80037c4:	f7ff f94b 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        handleAlphaUpdated();
 80037c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80037cc:	4640      	mov	r0, r8
        alpha = newAlpha;
 80037ce:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
        handleAlphaUpdated();
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    flexButton1.setAction(flexButtonCallback);
 80037d6:	f504 7ac4 	add.w	sl, r4, #392	; 0x188
 80037da:	4798      	blx	r3
        borderBox.setPosition(x, y, width, height);
 80037dc:	f04f 0c20 	mov.w	ip, #32
 80037e0:	462a      	mov	r2, r5
 80037e2:	4629      	mov	r1, r5
 80037e4:	f8cd c000 	str.w	ip, [sp]
 80037e8:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 80037ec:	233e      	movs	r3, #62	; 0x3e
        action = &callback;
 80037ee:	f8c4 a0c8 	str.w	sl, [r4, #200]	; 0xc8
 80037f2:	f7ff f934 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        down = colorPressed;
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <_ZN17Screen5_2ViewBaseC1Ev+0x194>)
 80037f8:	4a1e      	ldr	r2, [pc, #120]	; (8003874 <_ZN17Screen5_2ViewBaseC1Ev+0x198>)
        borderDown = borderColorPressed;
 80037fa:	491f      	ldr	r1, [pc, #124]	; (8003878 <_ZN17Screen5_2ViewBaseC1Ev+0x19c>)
 80037fc:	481f      	ldr	r0, [pc, #124]	; (800387c <_ZN17Screen5_2ViewBaseC1Ev+0x1a0>)
 80037fe:	f8a4 b174 	strh.w	fp, [r4, #372]	; 0x174
        down = colorPressed;
 8003802:	e9c4 325e 	strd	r3, r2, [r4, #376]	; 0x178
        borderDown = borderColorPressed;
 8003806:	e9c4 1060 	strd	r1, r0, [r4, #384]	; 0x180
        handlePressedUpdated();
 800380a:	4638      	mov	r0, r7
 800380c:	f7ff f8ac 	bl	8002968 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    flexButton2.setPosition(140, 20, 62, 32);
 8003810:	2320      	movs	r3, #32
 8003812:	2214      	movs	r2, #20
 8003814:	218c      	movs	r1, #140	; 0x8c
 8003816:	4638      	mov	r0, r7
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	233e      	movs	r3, #62	; 0x3e
 800381c:	f7ff f91f 	bl	8002a5e <_ZN8touchgfx8Drawable11setPositionEssss>
        handleAlphaUpdated();
 8003820:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003824:	4638      	mov	r0, r7
        alpha = newAlpha;
 8003826:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
        handleAlphaUpdated();
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	4798      	blx	r3
 8003830:	1d20      	adds	r0, r4, #4
 8003832:	4649      	mov	r1, r9
        action = &callback;
 8003834:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
 8003838:	9003      	str	r0, [sp, #12]
 800383a:	f007 fb25 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800383e:	4631      	mov	r1, r6
 8003840:	9803      	ldr	r0, [sp, #12]
 8003842:	f007 fb21 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003846:	4641      	mov	r1, r8
 8003848:	9803      	ldr	r0, [sp, #12]
 800384a:	f007 fb1d 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800384e:	9803      	ldr	r0, [sp, #12]
 8003850:	4639      	mov	r1, r7
 8003852:	f007 fb19 	bl	800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003856:	4620      	mov	r0, r4
 8003858:	b007      	add	sp, #28
 800385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385e:	bf00      	nop
 8003860:	0801c418 	.word	0x0801c418
 8003864:	0801d748 	.word	0x0801d748
 8003868:	0801c400 	.word	0x0801c400
 800386c:	080036af 	.word	0x080036af
 8003870:	ff006699 	.word	0xff006699
 8003874:	ff0099cc 	.word	0xff0099cc
 8003878:	ff003366 	.word	0xff003366
 800387c:	ff336699 	.word	0xff336699

08003880 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003880:	4770      	bx	lr
	...

08003884 <_Z23getFont_verdana_10_4bppv>:
{
 8003884:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003886:	4d15      	ldr	r5, [pc, #84]	; (80038dc <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003888:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800388a:	782c      	ldrb	r4, [r5, #0]
 800388c:	f3bf 8f5b 	dmb	ish
 8003890:	f014 0401 	ands.w	r4, r4, #1
 8003894:	d11e      	bne.n	80038d4 <_Z23getFont_verdana_10_4bppv+0x50>
 8003896:	4628      	mov	r0, r5
 8003898:	f016 f9e8 	bl	8019c6c <__cxa_guard_acquire>
 800389c:	b1d0      	cbz	r0, 80038d4 <_Z23getFont_verdana_10_4bppv+0x50>
 800389e:	233f      	movs	r3, #63	; 0x3f
 80038a0:	2201      	movs	r2, #1
 80038a2:	490f      	ldr	r1, [pc, #60]	; (80038e0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 80038a4:	9307      	str	r3, [sp, #28]
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <_Z23getFont_verdana_10_4bppv+0x60>)
 80038a8:	480f      	ldr	r0, [pc, #60]	; (80038e8 <_Z23getFont_verdana_10_4bppv+0x64>)
 80038aa:	9306      	str	r3, [sp, #24]
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <_Z23getFont_verdana_10_4bppv+0x68>)
 80038ae:	9408      	str	r4, [sp, #32]
 80038b0:	9403      	str	r4, [sp, #12]
 80038b2:	9400      	str	r4, [sp, #0]
 80038b4:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80038b8:	2304      	movs	r3, #4
 80038ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80038be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80038c2:	230a      	movs	r3, #10
 80038c4:	f7fe fff2 	bl	80028ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80038c8:	4809      	ldr	r0, [pc, #36]	; (80038f0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80038ca:	f016 fa19 	bl	8019d00 <atexit>
 80038ce:	4628      	mov	r0, r5
 80038d0:	f016 f9d8 	bl	8019c84 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80038d4:	4804      	ldr	r0, [pc, #16]	; (80038e8 <_Z23getFont_verdana_10_4bppv+0x64>)
 80038d6:	b00d      	add	sp, #52	; 0x34
 80038d8:	bd30      	pop	{r4, r5, pc}
 80038da:	bf00      	nop
 80038dc:	240015d8 	.word	0x240015d8
 80038e0:	0801f588 	.word	0x0801f588
 80038e4:	0801f5c4 	.word	0x0801f5c4
 80038e8:	240015dc 	.word	0x240015dc
 80038ec:	0801f5d0 	.word	0x0801f5d0
 80038f0:	08003881 	.word	0x08003881

080038f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80038f4:	4770      	bx	lr
	...

080038f8 <_Z23getFont_verdana_20_4bppv>:
{
 80038f8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80038fa:	4d15      	ldr	r5, [pc, #84]	; (8003950 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80038fc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80038fe:	782c      	ldrb	r4, [r5, #0]
 8003900:	f3bf 8f5b 	dmb	ish
 8003904:	f014 0401 	ands.w	r4, r4, #1
 8003908:	d11e      	bne.n	8003948 <_Z23getFont_verdana_20_4bppv+0x50>
 800390a:	4628      	mov	r0, r5
 800390c:	f016 f9ae 	bl	8019c6c <__cxa_guard_acquire>
 8003910:	b1d0      	cbz	r0, 8003948 <_Z23getFont_verdana_20_4bppv+0x50>
 8003912:	233f      	movs	r3, #63	; 0x3f
 8003914:	2201      	movs	r2, #1
 8003916:	490f      	ldr	r1, [pc, #60]	; (8003954 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003918:	9307      	str	r3, [sp, #28]
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <_Z23getFont_verdana_20_4bppv+0x60>)
 800391c:	480f      	ldr	r0, [pc, #60]	; (800395c <_Z23getFont_verdana_20_4bppv+0x64>)
 800391e:	9306      	str	r3, [sp, #24]
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003922:	9408      	str	r4, [sp, #32]
 8003924:	9403      	str	r4, [sp, #12]
 8003926:	9400      	str	r4, [sp, #0]
 8003928:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800392c:	2304      	movs	r3, #4
 800392e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003932:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003936:	2314      	movs	r3, #20
 8003938:	f7fe ffb8 	bl	80028ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800393c:	4809      	ldr	r0, [pc, #36]	; (8003964 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800393e:	f016 f9df 	bl	8019d00 <atexit>
 8003942:	4628      	mov	r0, r5
 8003944:	f016 f99e 	bl	8019c84 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003948:	4804      	ldr	r0, [pc, #16]	; (800395c <_Z23getFont_verdana_20_4bppv+0x64>)
 800394a:	b00d      	add	sp, #52	; 0x34
 800394c:	bd30      	pop	{r4, r5, pc}
 800394e:	bf00      	nop
 8003950:	24001604 	.word	0x24001604
 8003954:	0801f598 	.word	0x0801f598
 8003958:	0801f5c8 	.word	0x0801f5c8
 800395c:	24001608 	.word	0x24001608
 8003960:	0801f5d4 	.word	0x0801f5d4
 8003964:	080038f5 	.word	0x080038f5

08003968 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_66_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_66_4bpp();

touchgfx::GeneratedFont& getFont_verdana_66_4bpp()
{
    static touchgfx::GeneratedFont verdana_66_4bpp(glyphs_verdana_66_4bpp, 2, 66, 1, 4, 1, 0, 0, unicodes_verdana_66_4bpp, kerning_verdana_66_4bpp, 63, 0, 0, 0);
 8003968:	4770      	bx	lr
	...

0800396c <_Z23getFont_verdana_66_4bppv>:
{
 800396c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_66_4bpp(glyphs_verdana_66_4bpp, 2, 66, 1, 4, 1, 0, 0, unicodes_verdana_66_4bpp, kerning_verdana_66_4bpp, 63, 0, 0, 0);
 800396e:	4d15      	ldr	r5, [pc, #84]	; (80039c4 <_Z23getFont_verdana_66_4bppv+0x58>)
{
 8003970:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_66_4bpp(glyphs_verdana_66_4bpp, 2, 66, 1, 4, 1, 0, 0, unicodes_verdana_66_4bpp, kerning_verdana_66_4bpp, 63, 0, 0, 0);
 8003972:	782c      	ldrb	r4, [r5, #0]
 8003974:	f3bf 8f5b 	dmb	ish
 8003978:	f014 0401 	ands.w	r4, r4, #1
 800397c:	d11f      	bne.n	80039be <_Z23getFont_verdana_66_4bppv+0x52>
 800397e:	4628      	mov	r0, r5
 8003980:	f016 f974 	bl	8019c6c <__cxa_guard_acquire>
 8003984:	b1d8      	cbz	r0, 80039be <_Z23getFont_verdana_66_4bppv+0x52>
 8003986:	233f      	movs	r3, #63	; 0x3f
 8003988:	2204      	movs	r2, #4
 800398a:	490f      	ldr	r1, [pc, #60]	; (80039c8 <_Z23getFont_verdana_66_4bppv+0x5c>)
 800398c:	9307      	str	r3, [sp, #28]
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <_Z23getFont_verdana_66_4bppv+0x60>)
 8003990:	480f      	ldr	r0, [pc, #60]	; (80039d0 <_Z23getFont_verdana_66_4bppv+0x64>)
 8003992:	9306      	str	r3, [sp, #24]
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <_Z23getFont_verdana_66_4bppv+0x68>)
 8003996:	9408      	str	r4, [sp, #32]
 8003998:	9403      	str	r4, [sp, #12]
 800399a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800399e:	2301      	movs	r3, #1
 80039a0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80039a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2202      	movs	r2, #2
 80039ac:	2342      	movs	r3, #66	; 0x42
 80039ae:	f7fe ff7d 	bl	80028ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80039b2:	4809      	ldr	r0, [pc, #36]	; (80039d8 <_Z23getFont_verdana_66_4bppv+0x6c>)
 80039b4:	f016 f9a4 	bl	8019d00 <atexit>
 80039b8:	4628      	mov	r0, r5
 80039ba:	f016 f963 	bl	8019c84 <__cxa_guard_release>
    return verdana_66_4bpp;
}
 80039be:	4804      	ldr	r0, [pc, #16]	; (80039d0 <_Z23getFont_verdana_66_4bppv+0x64>)
 80039c0:	b00d      	add	sp, #52	; 0x34
 80039c2:	bd30      	pop	{r4, r5, pc}
 80039c4:	24001630 	.word	0x24001630
 80039c8:	0801f5a8 	.word	0x0801f5a8
 80039cc:	0801f5cc 	.word	0x0801f5cc
 80039d0:	24001634 	.word	0x24001634
 80039d4:	0801f5d8 	.word	0x0801f5d8
 80039d8:	08003969 	.word	0x08003969

080039dc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80039dc:	2000      	movs	r0, #0
 80039de:	4770      	bx	lr

080039e0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80039e0:	2000      	movs	r0, #0
 80039e2:	4770      	bx	lr

080039e4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80039e4:	b40e      	push	{r1, r2, r3}
 80039e6:	b503      	push	{r0, r1, lr}
 80039e8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80039ea:	2100      	movs	r1, #0
{
 80039ec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80039f0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80039f2:	f00b feef 	bl	800f7d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80039f6:	b002      	add	sp, #8
 80039f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039fc:	b003      	add	sp, #12
 80039fe:	4770      	bx	lr

08003a00 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003a00:	b40c      	push	{r2, r3}
 8003a02:	b507      	push	{r0, r1, r2, lr}
 8003a04:	ab04      	add	r3, sp, #16
 8003a06:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003a0a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003a0c:	f00b fee2 	bl	800f7d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003a10:	b003      	add	sp, #12
 8003a12:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a16:	b002      	add	sp, #8
 8003a18:	4770      	bx	lr
	...

08003a1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003a1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003a22:	b373      	cbz	r3, 8003a82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003a24:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003a26:	b92b      	cbnz	r3, 8003a34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003a2a:	21c0      	movs	r1, #192	; 0xc0
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003a2e:	4819      	ldr	r0, [pc, #100]	; (8003a94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003a30:	f016 f948 	bl	8019cc4 <__assert_func>
            return buffer[pos];
 8003a34:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003a36:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003a3a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a3c:	b30b      	cbz	r3, 8003a82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003a3e:	f00d f9d3 	bl	8010de8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003a42:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d803      	bhi.n	8003a50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003a4a:	21c5      	movs	r1, #197	; 0xc5
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003a4e:	e7ee      	b.n	8003a2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003a50:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003a52:	f640 103f 	movw	r0, #2367	; 0x93f
 8003a56:	1c53      	adds	r3, r2, #1
 8003a58:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	bf88      	it	hi
 8003a60:	f1a3 010a 	subhi.w	r1, r3, #10
 8003a64:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003a68:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003a6a:	4281      	cmp	r1, r0
 8003a6c:	d109      	bne.n	8003a82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003a6e:	2b0a      	cmp	r3, #10
 8003a70:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003a74:	bf28      	it	cs
 8003a76:	2300      	movcs	r3, #0
            return buffer[pos];
 8003a78:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003a7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003a7e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003a80:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003a82:	4620      	mov	r0, r4
}
 8003a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003a88:	f00d b892 	b.w	8010bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003a8c:	0801c444 	.word	0x0801c444
 8003a90:	0801c44d 	.word	0x0801c44d
 8003a94:	0801c4f8 	.word	0x0801c4f8
 8003a98:	0801c542 	.word	0x0801c542
 8003a9c:	0801c550 	.word	0x0801c550

08003aa0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003aa0:	f00d b83e 	b.w	8010b20 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003aa4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	ac02      	add	r4, sp, #8
 8003aaa:	e884 0006 	stmia.w	r4, {r1, r2}
 8003aae:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003ab0:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003ab2:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003ab4:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	9b08      	ldr	r3, [sp, #32]
 8003abe:	f00a fb3e 	bl	800e13e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003ac2:	b006      	add	sp, #24
 8003ac4:	bd10      	pop	{r4, pc}
	...

08003ac8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003ac8:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003aca:	bb18      	cbnz	r0, 8003b14 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003ace:	4813      	ldr	r0, [pc, #76]	; (8003b1c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4913      	ldr	r1, [pc, #76]	; (8003b20 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003ad4:	b1b3      	cbz	r3, 8003b04 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003ad6:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003ad8:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003ada:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003adc:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003ade:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	441a      	add	r2, r3
 8003ae4:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003aec:	f000 f838 	bl	8003b60 <_ZN17TypedTextDatabase8getFontsEv>
 8003af0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003af2:	f000 f833 	bl	8003b5c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003af8:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003afc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003b00:	8018      	strh	r0, [r3, #0]
    }
}
 8003b02:	e007      	b.n	8003b14 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003b06:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003b0a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003b0e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	d1e8      	bne.n	8003ae6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003b14:	bd38      	pop	{r3, r4, r5, pc}
 8003b16:	bf00      	nop
 8003b18:	2400165c 	.word	0x2400165c
 8003b1c:	24001660 	.word	0x24001660
 8003b20:	24001664 	.word	0x24001664
 8003b24:	24001668 	.word	0x24001668
 8003b28:	24006b40 	.word	0x24006b40
 8003b2c:	24006b48 	.word	0x24006b48
 8003b30:	24006b44 	.word	0x24006b44
 8003b34:	0801f5e4 	.word	0x0801f5e4
 8003b38:	0801f5dc 	.word	0x0801f5dc
 8003b3c:	0801f5f4 	.word	0x0801f5f4

08003b40 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	24001664 	.word	0x24001664
 8003b58:	24001660 	.word	0x24001660

08003b5c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003b5c:	2002      	movs	r0, #2
 8003b5e:	4770      	bx	lr

08003b60 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003b60:	4800      	ldr	r0, [pc, #0]	; (8003b64 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003b62:	4770      	bx	lr
 8003b64:	2400166c 	.word	0x2400166c

08003b68 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003b68:	b510      	push	{r4, lr}
};
 8003b6a:	4c05      	ldr	r4, [pc, #20]	; (8003b80 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8003b6c:	f7ff fec4 	bl	80038f8 <_Z23getFont_verdana_20_4bppv>
};
 8003b70:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_66_4bpp()),
 8003b72:	f7ff fefb 	bl	800396c <_Z23getFont_verdana_66_4bppv>
};
 8003b76:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003b78:	f7ff fe84 	bl	8003884 <_Z23getFont_verdana_10_4bppv>
};
 8003b7c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003b7e:	bd10      	pop	{r4, pc}
 8003b80:	2400166c 	.word	0x2400166c

08003b84 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003b84:	4770      	bx	lr

08003b86 <_ZN19FrontendApplicationD0Ev>:
 8003b86:	b510      	push	{r4, lr}
 8003b88:	4604      	mov	r4, r0
 8003b8a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003b8e:	f016 f86b 	bl	8019c68 <_ZdlPvj>
 8003b92:	4620      	mov	r0, r4
 8003b94:	bd10      	pop	{r4, pc}

08003b96 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003b96:	b510      	push	{r4, lr}
 8003b98:	4604      	mov	r4, r0
    {
        model.tick();
 8003b9a:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8003b9e:	f000 f812 	bl	8003bc6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003ba2:	4620      	mov	r0, r4
    }
 8003ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003ba8:	f00a be28 	b.w	800e7fc <_ZN8touchgfx11Application15handleTickEventEv>

08003bac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003bac:	b510      	push	{r4, lr}
 8003bae:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003bb0:	f7fe f9d2 	bl	8001f58 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003bb4:	4b01      	ldr	r3, [pc, #4]	; (8003bbc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003bb6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003bb8:	6023      	str	r3, [r4, #0]
}
 8003bba:	bd10      	pop	{r4, pc}
 8003bbc:	0801c62c 	.word	0x0801c62c

08003bc0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	6002      	str	r2, [r0, #0]
{

}
 8003bc4:	4770      	bx	lr

08003bc6 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003bc6:	4770      	bx	lr

08003bc8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003bc8:	4770      	bx	lr

08003bca <_ZThn4_N16Screen1PresenterD1Ev>:
 8003bca:	3804      	subs	r0, #4
 8003bcc:	4770      	bx	lr

08003bce <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003bce:	4770      	bx	lr

08003bd0 <_ZN16Screen1PresenterD0Ev>:
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	f016 f847 	bl	8019c68 <_ZdlPvj>
 8003bda:	4620      	mov	r0, r4
 8003bdc:	bd10      	pop	{r4, pc}

08003bde <_ZThn4_N16Screen1PresenterD0Ev>:
 8003bde:	f1a0 0004 	sub.w	r0, r0, #4
 8003be2:	e7f5      	b.n	8003bd0 <_ZN16Screen1PresenterD0Ev>

08003be4 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003be4:	2200      	movs	r2, #0
    : view(v)
 8003be6:	60c1      	str	r1, [r0, #12]
 8003be8:	6082      	str	r2, [r0, #8]
 8003bea:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003bec:	b510      	push	{r4, lr}
    : view(v)
 8003bee:	f102 0408 	add.w	r4, r2, #8
 8003bf2:	3220      	adds	r2, #32
 8003bf4:	6004      	str	r4, [r0, #0]
 8003bf6:	6042      	str	r2, [r0, #4]
}
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	bf00      	nop
 8003bfc:	0801c670 	.word	0x0801c670

08003c00 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003c00:	4770      	bx	lr

08003c02 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003c02:	4770      	bx	lr

08003c04 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003c04:	f7fe bf7f 	b.w	8002b06 <_ZN15Screen1ViewBase11setupScreenEv>

08003c08 <_ZN11Screen1ViewD0Ev>:
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003c10:	f016 f82a 	bl	8019c68 <_ZdlPvj>
 8003c14:	4620      	mov	r0, r4
 8003c16:	bd10      	pop	{r4, pc}

08003c18 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	f7fe ffaa 	bl	8002b74 <_ZN15Screen1ViewBaseC1Ev>
 8003c20:	4b01      	ldr	r3, [pc, #4]	; (8003c28 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8003c22:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8003c24:	6023      	str	r3, [r4, #0]
}
 8003c26:	bd10      	pop	{r4, pc}
 8003c28:	0801c6a0 	.word	0x0801c6a0

08003c2c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8003c2c:	4770      	bx	lr

08003c2e <_ZThn4_N16Screen2PresenterD1Ev>:
 8003c2e:	3804      	subs	r0, #4
 8003c30:	4770      	bx	lr

08003c32 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003c32:	4770      	bx	lr

08003c34 <_ZN16Screen2PresenterD0Ev>:
 8003c34:	b510      	push	{r4, lr}
 8003c36:	4604      	mov	r4, r0
 8003c38:	2110      	movs	r1, #16
 8003c3a:	f016 f815 	bl	8019c68 <_ZdlPvj>
 8003c3e:	4620      	mov	r0, r4
 8003c40:	bd10      	pop	{r4, pc}

08003c42 <_ZThn4_N16Screen2PresenterD0Ev>:
 8003c42:	f1a0 0004 	sub.w	r0, r0, #4
 8003c46:	e7f5      	b.n	8003c34 <_ZN16Screen2PresenterD0Ev>

08003c48 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003c48:	2200      	movs	r2, #0
    : view(v)
 8003c4a:	60c1      	str	r1, [r0, #12]
 8003c4c:	6082      	str	r2, [r0, #8]
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 8003c50:	b510      	push	{r4, lr}
    : view(v)
 8003c52:	f102 0408 	add.w	r4, r2, #8
 8003c56:	3220      	adds	r2, #32
 8003c58:	6004      	str	r4, [r0, #0]
 8003c5a:	6042      	str	r2, [r0, #4]
}
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	bf00      	nop
 8003c60:	0801c6cc 	.word	0x0801c6cc

08003c64 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003c64:	4770      	bx	lr

08003c66 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8003c66:	4770      	bx	lr

08003c68 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8003c68:	f7ff b84f 	b.w	8002d0a <_ZN15Screen2ViewBase11setupScreenEv>

08003c6c <_ZN11Screen2ViewD0Ev>:
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	4604      	mov	r4, r0
 8003c70:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003c74:	f015 fff8 	bl	8019c68 <_ZdlPvj>
 8003c78:	4620      	mov	r0, r4
 8003c7a:	bd10      	pop	{r4, pc}

08003c7c <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4604      	mov	r4, r0
 8003c80:	f7ff f87a 	bl	8002d78 <_ZN15Screen2ViewBaseC1Ev>
 8003c84:	4b01      	ldr	r3, [pc, #4]	; (8003c8c <_ZN11Screen2ViewC1Ev+0x10>)
}
 8003c86:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8003c88:	6023      	str	r3, [r4, #0]
}
 8003c8a:	bd10      	pop	{r4, pc}
 8003c8c:	0801c6fc 	.word	0x0801c6fc

08003c90 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 8003c90:	4770      	bx	lr

08003c92 <_ZThn4_N16Screen3PresenterD1Ev>:
 8003c92:	3804      	subs	r0, #4
 8003c94:	4770      	bx	lr

08003c96 <_ZN16Screen3Presenter10deactivateEv>:
}

void Screen3Presenter::activate()
{

}
 8003c96:	4770      	bx	lr

08003c98 <_ZN16Screen3PresenterD0Ev>:
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	2110      	movs	r1, #16
 8003c9e:	f015 ffe3 	bl	8019c68 <_ZdlPvj>
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	bd10      	pop	{r4, pc}

08003ca6 <_ZThn4_N16Screen3PresenterD0Ev>:
 8003ca6:	f1a0 0004 	sub.w	r0, r0, #4
 8003caa:	e7f5      	b.n	8003c98 <_ZN16Screen3PresenterD0Ev>

08003cac <_ZN16Screen3PresenterC1ER11Screen3View>:
 8003cac:	2200      	movs	r2, #0
    : view(v)
 8003cae:	60c1      	str	r1, [r0, #12]
 8003cb0:	6082      	str	r2, [r0, #8]
 8003cb2:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <_ZN16Screen3PresenterC1ER11Screen3View+0x18>)
Screen3Presenter::Screen3Presenter(Screen3View& v)
 8003cb4:	b510      	push	{r4, lr}
    : view(v)
 8003cb6:	f102 0408 	add.w	r4, r2, #8
 8003cba:	3220      	adds	r2, #32
 8003cbc:	6004      	str	r4, [r0, #0]
 8003cbe:	6042      	str	r2, [r0, #4]
}
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	bf00      	nop
 8003cc4:	0801c728 	.word	0x0801c728

08003cc8 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8003cc8:	4770      	bx	lr

08003cca <_ZN11Screen3View14tearDownScreenEv>:
}

void Screen3View::tearDownScreen()
{
    Screen3ViewBase::tearDownScreen();
}
 8003cca:	4770      	bx	lr

08003ccc <_ZN11Screen3View11setupScreenEv>:
    Screen3ViewBase::setupScreen();
 8003ccc:	f7ff b91f 	b.w	8002f0e <_ZN15Screen3ViewBase11setupScreenEv>

08003cd0 <_ZN11Screen3ViewD0Ev>:
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003cd8:	f015 ffc6 	bl	8019c68 <_ZdlPvj>
 8003cdc:	4620      	mov	r0, r4
 8003cde:	bd10      	pop	{r4, pc}

08003ce0 <_ZN11Screen3ViewC1Ev>:
Screen3View::Screen3View()
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	f7ff f94a 	bl	8002f7c <_ZN15Screen3ViewBaseC1Ev>
 8003ce8:	4b01      	ldr	r3, [pc, #4]	; (8003cf0 <_ZN11Screen3ViewC1Ev+0x10>)
}
 8003cea:	4620      	mov	r0, r4
Screen3View::Screen3View()
 8003cec:	6023      	str	r3, [r4, #0]
}
 8003cee:	bd10      	pop	{r4, pc}
 8003cf0:	0801c758 	.word	0x0801c758

08003cf4 <_ZN16Screen4PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen4Presenter() {};
 8003cf4:	4770      	bx	lr

08003cf6 <_ZThn4_N16Screen4PresenterD1Ev>:
 8003cf6:	3804      	subs	r0, #4
 8003cf8:	4770      	bx	lr

08003cfa <_ZN16Screen4Presenter10deactivateEv>:
}

void Screen4Presenter::activate()
{

}
 8003cfa:	4770      	bx	lr

08003cfc <_ZN16Screen4PresenterD0Ev>:
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	4604      	mov	r4, r0
 8003d00:	2110      	movs	r1, #16
 8003d02:	f015 ffb1 	bl	8019c68 <_ZdlPvj>
 8003d06:	4620      	mov	r0, r4
 8003d08:	bd10      	pop	{r4, pc}

08003d0a <_ZThn4_N16Screen4PresenterD0Ev>:
 8003d0a:	f1a0 0004 	sub.w	r0, r0, #4
 8003d0e:	e7f5      	b.n	8003cfc <_ZN16Screen4PresenterD0Ev>

08003d10 <_ZN16Screen4PresenterC1ER11Screen4View>:
 8003d10:	2200      	movs	r2, #0
    : view(v)
 8003d12:	60c1      	str	r1, [r0, #12]
 8003d14:	6082      	str	r2, [r0, #8]
 8003d16:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <_ZN16Screen4PresenterC1ER11Screen4View+0x18>)
Screen4Presenter::Screen4Presenter(Screen4View& v)
 8003d18:	b510      	push	{r4, lr}
    : view(v)
 8003d1a:	f102 0408 	add.w	r4, r2, #8
 8003d1e:	3220      	adds	r2, #32
 8003d20:	6004      	str	r4, [r0, #0]
 8003d22:	6042      	str	r2, [r0, #4]
}
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	bf00      	nop
 8003d28:	0801c784 	.word	0x0801c784

08003d2c <_ZN11Screen4ViewD1Ev>:

class Screen4View : public Screen4ViewBase
{
public:
    Screen4View();
    virtual ~Screen4View() {}
 8003d2c:	4770      	bx	lr

08003d2e <_ZN11Screen4View14tearDownScreenEv>:
}

void Screen4View::tearDownScreen()
{
    Screen4ViewBase::tearDownScreen();
}
 8003d2e:	4770      	bx	lr

08003d30 <_ZN11Screen4View11setupScreenEv>:
    Screen4ViewBase::setupScreen();
 8003d30:	f7ff b9ef 	b.w	8003112 <_ZN15Screen4ViewBase11setupScreenEv>

08003d34 <_ZN11Screen4ViewD0Ev>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	4604      	mov	r4, r0
 8003d38:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003d3c:	f015 ff94 	bl	8019c68 <_ZdlPvj>
 8003d40:	4620      	mov	r0, r4
 8003d42:	bd10      	pop	{r4, pc}

08003d44 <_ZN11Screen4ViewC1Ev>:
Screen4View::Screen4View()
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4604      	mov	r4, r0
 8003d48:	f7ff fa26 	bl	8003198 <_ZN15Screen4ViewBaseC1Ev>
 8003d4c:	4b01      	ldr	r3, [pc, #4]	; (8003d54 <_ZN11Screen4ViewC1Ev+0x10>)
}
 8003d4e:	4620      	mov	r0, r4
Screen4View::Screen4View()
 8003d50:	6023      	str	r3, [r4, #0]
}
 8003d52:	bd10      	pop	{r4, pc}
 8003d54:	0801c7b4 	.word	0x0801c7b4

08003d58 <_ZN18Screen5_1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen5_1Presenter() {};
 8003d58:	4770      	bx	lr

08003d5a <_ZThn4_N18Screen5_1PresenterD1Ev>:
 8003d5a:	3804      	subs	r0, #4
 8003d5c:	4770      	bx	lr

08003d5e <_ZN18Screen5_1Presenter10deactivateEv>:
}

void Screen5_1Presenter::activate()
{

}
 8003d5e:	4770      	bx	lr

08003d60 <_ZN18Screen5_1PresenterD0Ev>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4604      	mov	r4, r0
 8003d64:	2110      	movs	r1, #16
 8003d66:	f015 ff7f 	bl	8019c68 <_ZdlPvj>
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	bd10      	pop	{r4, pc}

08003d6e <_ZThn4_N18Screen5_1PresenterD0Ev>:
 8003d6e:	f1a0 0004 	sub.w	r0, r0, #4
 8003d72:	e7f5      	b.n	8003d60 <_ZN18Screen5_1PresenterD0Ev>

08003d74 <_ZN18Screen5_1PresenterC1ER13Screen5_1View>:
 8003d74:	2200      	movs	r2, #0
    : view(v)
 8003d76:	60c1      	str	r1, [r0, #12]
 8003d78:	6082      	str	r2, [r0, #8]
 8003d7a:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <_ZN18Screen5_1PresenterC1ER13Screen5_1View+0x18>)
Screen5_1Presenter::Screen5_1Presenter(Screen5_1View& v)
 8003d7c:	b510      	push	{r4, lr}
    : view(v)
 8003d7e:	f102 0408 	add.w	r4, r2, #8
 8003d82:	3220      	adds	r2, #32
 8003d84:	6004      	str	r4, [r0, #0]
 8003d86:	6042      	str	r2, [r0, #4]
}
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	bf00      	nop
 8003d8c:	0801c7e4 	.word	0x0801c7e4

08003d90 <_ZN13Screen5_1ViewD1Ev>:

class Screen5_1View : public Screen5_1ViewBase
{
public:
    Screen5_1View();
    virtual ~Screen5_1View() {}
 8003d90:	4770      	bx	lr

08003d92 <_ZN13Screen5_1View14tearDownScreenEv>:


void Screen5_1View::tearDownScreen()
{

}
 8003d92:	4770      	bx	lr

08003d94 <_ZN13Screen5_1View11setupScreenEv>:
    Screen5_1ViewBase::setupScreen();
 8003d94:	f7ff bad5 	b.w	8003342 <_ZN17Screen5_1ViewBase11setupScreenEv>

08003d98 <_ZN13Screen5_1ViewD0Ev>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003da0:	f015 ff62 	bl	8019c68 <_ZdlPvj>
 8003da4:	4620      	mov	r0, r4
 8003da6:	bd10      	pop	{r4, pc}

08003da8 <_ZN13Screen5_1ViewC1Ev>:
Screen5_1View::Screen5_1View()
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4604      	mov	r4, r0
 8003dac:	f7ff fb54 	bl	8003458 <_ZN17Screen5_1ViewBaseC1Ev>
 8003db0:	4b01      	ldr	r3, [pc, #4]	; (8003db8 <_ZN13Screen5_1ViewC1Ev+0x10>)
}
 8003db2:	4620      	mov	r0, r4
Screen5_1View::Screen5_1View()
 8003db4:	6023      	str	r3, [r4, #0]
}
 8003db6:	bd10      	pop	{r4, pc}
 8003db8:	0801c814 	.word	0x0801c814

08003dbc <_ZN18Screen5_2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen5_2Presenter() {};
 8003dbc:	4770      	bx	lr

08003dbe <_ZThn4_N18Screen5_2PresenterD1Ev>:
 8003dbe:	3804      	subs	r0, #4
 8003dc0:	4770      	bx	lr

08003dc2 <_ZN18Screen5_2Presenter10deactivateEv>:
}

void Screen5_2Presenter::activate()
{

}
 8003dc2:	4770      	bx	lr

08003dc4 <_ZN18Screen5_2PresenterD0Ev>:
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	2110      	movs	r1, #16
 8003dca:	f015 ff4d 	bl	8019c68 <_ZdlPvj>
 8003dce:	4620      	mov	r0, r4
 8003dd0:	bd10      	pop	{r4, pc}

08003dd2 <_ZThn4_N18Screen5_2PresenterD0Ev>:
 8003dd2:	f1a0 0004 	sub.w	r0, r0, #4
 8003dd6:	e7f5      	b.n	8003dc4 <_ZN18Screen5_2PresenterD0Ev>

08003dd8 <_ZN18Screen5_2PresenterC1ER13Screen5_2View>:
 8003dd8:	2200      	movs	r2, #0
    : view(v)
 8003dda:	60c1      	str	r1, [r0, #12]
 8003ddc:	6082      	str	r2, [r0, #8]
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <_ZN18Screen5_2PresenterC1ER13Screen5_2View+0x18>)
Screen5_2Presenter::Screen5_2Presenter(Screen5_2View& v)
 8003de0:	b510      	push	{r4, lr}
    : view(v)
 8003de2:	f102 0408 	add.w	r4, r2, #8
 8003de6:	3220      	adds	r2, #32
 8003de8:	6004      	str	r4, [r0, #0]
 8003dea:	6042      	str	r2, [r0, #4]
}
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	bf00      	nop
 8003df0:	0801c848 	.word	0x0801c848

08003df4 <_ZN13Screen5_2ViewD1Ev>:

class Screen5_2View : public Screen5_2ViewBase
{
public:
    Screen5_2View();
    virtual ~Screen5_2View() {}
 8003df4:	4770      	bx	lr

08003df6 <_ZN13Screen5_2View14tearDownScreenEv>:
}

void Screen5_2View::tearDownScreen()
{
    Screen5_2ViewBase::tearDownScreen();
}
 8003df6:	4770      	bx	lr

08003df8 <_ZN13Screen5_2View11setupScreenEv>:
    Screen5_2ViewBase::setupScreen();
 8003df8:	f7ff bc2d 	b.w	8003656 <_ZN17Screen5_2ViewBase11setupScreenEv>

08003dfc <_ZN13Screen5_2ViewD0Ev>:
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	4604      	mov	r4, r0
 8003e00:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003e04:	f015 ff30 	bl	8019c68 <_ZdlPvj>
 8003e08:	4620      	mov	r0, r4
 8003e0a:	bd10      	pop	{r4, pc}

08003e0c <_ZN13Screen5_2ViewC1Ev>:
Screen5_2View::Screen5_2View()
 8003e0c:	b510      	push	{r4, lr}
 8003e0e:	4604      	mov	r4, r0
 8003e10:	f7ff fc64 	bl	80036dc <_ZN17Screen5_2ViewBaseC1Ev>
 8003e14:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <_ZN13Screen5_2ViewC1Ev+0x10>)
}
 8003e16:	4620      	mov	r0, r4
Screen5_2View::Screen5_2View()
 8003e18:	6023      	str	r3, [r4, #0]
}
 8003e1a:	bd10      	pop	{r4, pc}
 8003e1c:	0801c878 	.word	0x0801c878

08003e20 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8003e20:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003e24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8003e28:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8003e2a:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8003e2c:	2305      	movs	r3, #5
 8003e2e:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003e30:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003e34:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8003e38:	4770      	bx	lr

08003e3a <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8003e3a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003e3e:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8003e40:	bf04      	itt	eq
 8003e42:	2300      	moveq	r3, #0
 8003e44:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8003e48:	2000      	movs	r0, #0
 8003e4a:	4770      	bx	lr

08003e4c <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	4770      	bx	lr

08003e50 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003e50:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003e52:	6904      	ldr	r4, [r0, #16]
 8003e54:	8900      	ldrh	r0, [r0, #8]
 8003e56:	46a4      	mov	ip, r4
}
 8003e58:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003e5c:	4760      	bx	ip

08003e5e <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003e5e:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003e60:	68c4      	ldr	r4, [r0, #12]
 8003e62:	8900      	ldrh	r0, [r0, #8]
 8003e64:	46a4      	mov	ip, r4
}
 8003e66:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003e6a:	4760      	bx	ip

08003e6c <FT5336_GestureConfig>:
{
 8003e6c:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003e70:	f100 0818 	add.w	r8, r0, #24
{
 8003e74:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003e76:	7809      	ldrb	r1, [r1, #0]
 8003e78:	4640      	mov	r0, r8
 8003e7a:	f000 f8fb 	bl	8004074 <ft5336_radian_value>
 8003e7e:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003e80:	f899 1004 	ldrb.w	r1, [r9, #4]
 8003e84:	4640      	mov	r0, r8
 8003e86:	f000 f901 	bl	800408c <ft5336_offset_left_right>
 8003e8a:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003e8c:	f899 1008 	ldrb.w	r1, [r9, #8]
 8003e90:	4640      	mov	r0, r8
 8003e92:	f000 f907 	bl	80040a4 <ft5336_offset_up_down>
 8003e96:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8003e98:	f899 100c 	ldrb.w	r1, [r9, #12]
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	f000 f90d 	bl	80040bc <ft5336_disatnce_left_right>
 8003ea2:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003ea4:	f899 1010 	ldrb.w	r1, [r9, #16]
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	f000 f913 	bl	80040d4 <ft5336_distance_up_down>
 8003eae:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003eb0:	f899 1014 	ldrb.w	r1, [r9, #20]
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	f000 f919 	bl	80040ec <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8003eba:	42c5      	cmn	r5, r0
}
 8003ebc:	bf14      	ite	ne
 8003ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8003ec2:	2000      	moveq	r0, #0
 8003ec4:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08003ec8 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8003ec8:	3018      	adds	r0, #24
 8003eca:	f000 b927 	b.w	800411c <ft5336_chip_id>

08003ece <FT5336_GetState>:
{
 8003ece:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003ed0:	f100 0518 	add.w	r5, r0, #24
{
 8003ed4:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003ed6:	a901      	add	r1, sp, #4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 f8be 	bl	800405a <ft5336_td_status>
 8003ede:	bb08      	cbnz	r0, 8003f24 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003ee0:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	bf98      	it	ls
 8003ee8:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003eea:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003eec:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003eee:	2103      	movs	r1, #3
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	eb0d 0203 	add.w	r2, sp, r3
 8003ef6:	f000 f89d 	bl	8004034 <ft5336_read_reg>
 8003efa:	b9b0      	cbnz	r0, 8003f2a <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003efc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f0a:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003f0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003f10:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003f12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60a3      	str	r3, [r4, #8]
}
 8003f20:	b003      	add	sp, #12
 8003f22:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	e7df      	b.n	8003eea <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003f2e:	e7f7      	b.n	8003f20 <FT5336_GetState+0x52>

08003f30 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8003f30:	3018      	adds	r0, #24
 8003f32:	f000 b88d 	b.w	8004050 <ft5336_gest_id>

08003f36 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003f36:	2101      	movs	r1, #1
 8003f38:	3018      	adds	r0, #24
 8003f3a:	f000 b8e3 	b.w	8004104 <ft5336_g_mode>

08003f3e <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8003f3e:	2100      	movs	r1, #0
 8003f40:	3018      	adds	r0, #24
 8003f42:	f000 b8df 	b.w	8004104 <ft5336_g_mode>

08003f46 <FT5336_Init>:
{
 8003f46:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8003f48:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003f4c:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8003f4e:	b96b      	cbnz	r3, 8003f6c <FT5336_Init+0x26>
    pObj->IO.Init();
 8003f50:	6803      	ldr	r3, [r0, #0]
 8003f52:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8003f54:	4620      	mov	r0, r4
 8003f56:	f7ff fff2 	bl	8003f3e <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8003f5a:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8003f5c:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8003f60:	bf18      	it	ne
 8003f62:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8003f64:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8003f68:	4240      	negs	r0, r0
}
 8003f6a:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8003f6c:	2000      	movs	r0, #0
  return ret;
 8003f6e:	e7fc      	b.n	8003f6a <FT5336_Init+0x24>

08003f70 <FT5336_ClearIT>:
 8003f70:	2000      	movs	r0, #0
 8003f72:	4770      	bx	lr

08003f74 <FT5336_GetMultiTouchState>:
{
 8003f74:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003f76:	f100 0518 	add.w	r5, r0, #24
{
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003f7e:	4628      	mov	r0, r5
 8003f80:	4669      	mov	r1, sp
 8003f82:	f000 f86a 	bl	800405a <ft5336_td_status>
 8003f86:	bb90      	cbnz	r0, 8003fee <FT5336_GetMultiTouchState+0x7a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003f88:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8003f8c:	2b05      	cmp	r3, #5
 8003f8e:	bf98      	it	ls
 8003f90:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003f92:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003f94:	231e      	movs	r3, #30
 8003f96:	466a      	mov	r2, sp
 8003f98:	2103      	movs	r1, #3
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 f84a 	bl	8004034 <ft5336_read_reg>
 8003fa0:	bb40      	cbnz	r0, 8003ff4 <FT5336_GetMultiTouchState+0x80>
 8003fa2:	1d22      	adds	r2, r4, #4
 8003fa4:	466b      	mov	r3, sp
 8003fa6:	3418      	adds	r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003fa8:	781d      	ldrb	r5, [r3, #0]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003faa:	3306      	adds	r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003fac:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8003fb0:	0229      	lsls	r1, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003fb2:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003fb4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003fb8:	4331      	orrs	r1, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003fba:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003fbe:	f842 1b04 	str.w	r1, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003fc2:	4294      	cmp	r4, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003fc4:	f813 1c04 	ldrb.w	r1, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003fc8:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003fca:	ea4f 2101 	mov.w	r1, r1, lsl #8
 8003fce:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003fd2:	ea41 0106 	orr.w	r1, r1, r6
 8003fd6:	6111      	str	r1, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8003fd8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8003fdc:	6251      	str	r1, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003fde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003fe2:	ea4f 1111 	mov.w	r1, r1, lsr #4
 8003fe6:	64d1      	str	r1, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003fe8:	d1de      	bne.n	8003fa8 <FT5336_GetMultiTouchState+0x34>
}
 8003fea:	b008      	add	sp, #32
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8003fee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff2:	e7ce      	b.n	8003f92 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003ff8:	e7f7      	b.n	8003fea <FT5336_GetMultiTouchState+0x76>
	...

08003ffc <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8003ffc:	b190      	cbz	r0, 8004024 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8003ffe:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004000:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004002:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004004:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004006:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004008:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800400a:	68ca      	ldr	r2, [r1, #12]
 800400c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800400e:	690a      	ldr	r2, [r1, #16]
 8004010:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004012:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004014:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004016:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <FT5336_RegisterBusIO+0x30>)
 800401a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <FT5336_RegisterBusIO+0x34>)
 800401e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004020:	b103      	cbz	r3, 8004024 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004022:	4718      	bx	r3
}
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	08003e51 	.word	0x08003e51
 8004030:	08003e5f 	.word	0x08003e5f

08004034 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004034:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004036:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800403a:	46a4      	mov	ip, r4
}
 800403c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004040:	4760      	bx	ip

08004042 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004042:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004044:	6804      	ldr	r4, [r0, #0]
 8004046:	6880      	ldr	r0, [r0, #8]
 8004048:	46a4      	mov	ip, r4
}
 800404a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800404e:	4760      	bx	ip

08004050 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8004050:	2301      	movs	r3, #1
{
 8004052:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8004054:	4619      	mov	r1, r3
 8004056:	f7ff bfed 	b.w	8004034 <ft5336_read_reg>

0800405a <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800405a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800405c:	460a      	mov	r2, r1
{
 800405e:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8004060:	2301      	movs	r3, #1
 8004062:	2102      	movs	r1, #2
 8004064:	f7ff ffe6 	bl	8004034 <ft5336_read_reg>
  
  if(ret == 0)
 8004068:	b918      	cbnz	r0, 8004072 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800406a:	7823      	ldrb	r3, [r4, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004072:	bd10      	pop	{r4, pc}

08004074 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8004074:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8004076:	2301      	movs	r3, #1
{
 8004078:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800407c:	f10d 0207 	add.w	r2, sp, #7
 8004080:	2191      	movs	r1, #145	; 0x91
 8004082:	f7ff ffde 	bl	8004042 <ft5336_write_reg>
}
 8004086:	b003      	add	sp, #12
 8004088:	f85d fb04 	ldr.w	pc, [sp], #4

0800408c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800408c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800408e:	2301      	movs	r3, #1
{
 8004090:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8004094:	f10d 0207 	add.w	r2, sp, #7
 8004098:	2192      	movs	r1, #146	; 0x92
 800409a:	f7ff ffd2 	bl	8004042 <ft5336_write_reg>
}
 800409e:	b003      	add	sp, #12
 80040a0:	f85d fb04 	ldr.w	pc, [sp], #4

080040a4 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80040a4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 80040a6:	2301      	movs	r3, #1
{
 80040a8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 80040ac:	f10d 0207 	add.w	r2, sp, #7
 80040b0:	2193      	movs	r1, #147	; 0x93
 80040b2:	f7ff ffc6 	bl	8004042 <ft5336_write_reg>
}
 80040b6:	b003      	add	sp, #12
 80040b8:	f85d fb04 	ldr.w	pc, [sp], #4

080040bc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80040bc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80040be:	2301      	movs	r3, #1
{
 80040c0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80040c4:	f10d 0207 	add.w	r2, sp, #7
 80040c8:	2194      	movs	r1, #148	; 0x94
 80040ca:	f7ff ffba 	bl	8004042 <ft5336_write_reg>
}
 80040ce:	b003      	add	sp, #12
 80040d0:	f85d fb04 	ldr.w	pc, [sp], #4

080040d4 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80040d4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80040d6:	2301      	movs	r3, #1
{
 80040d8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80040dc:	f10d 0207 	add.w	r2, sp, #7
 80040e0:	2195      	movs	r1, #149	; 0x95
 80040e2:	f7ff ffae 	bl	8004042 <ft5336_write_reg>
}
 80040e6:	b003      	add	sp, #12
 80040e8:	f85d fb04 	ldr.w	pc, [sp], #4

080040ec <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80040ec:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80040ee:	2301      	movs	r3, #1
{
 80040f0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80040f4:	f10d 0207 	add.w	r2, sp, #7
 80040f8:	2196      	movs	r1, #150	; 0x96
 80040fa:	f7ff ffa2 	bl	8004042 <ft5336_write_reg>
}
 80040fe:	b003      	add	sp, #12
 8004100:	f85d fb04 	ldr.w	pc, [sp], #4

08004104 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8004104:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8004106:	2301      	movs	r3, #1
{
 8004108:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800410c:	f10d 0207 	add.w	r2, sp, #7
 8004110:	21a4      	movs	r1, #164	; 0xa4
 8004112:	f7ff ff96 	bl	8004042 <ft5336_write_reg>
}
 8004116:	b003      	add	sp, #12
 8004118:	f85d fb04 	ldr.w	pc, [sp], #4

0800411c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800411c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800411e:	2301      	movs	r3, #1
 8004120:	21a8      	movs	r1, #168	; 0xa8
 8004122:	f7ff bf87 	b.w	8004034 <ft5336_read_reg>

08004126 <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8004126:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800412a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800412e:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8004132:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8004136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800413a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800413e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8004142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8004146:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800414a:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800414c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004150:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 8004154:	2000      	movs	r0, #0
 8004156:	4770      	bx	lr

08004158 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	b09a      	sub	sp, #104	; 0x68
 800415c:	460d      	mov	r5, r1
 800415e:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 8004160:	2100      	movs	r1, #0
{
 8004162:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8004164:	a806      	add	r0, sp, #24
 8004166:	2250      	movs	r2, #80	; 0x50
 8004168:	f015 fe38 	bl	8019ddc <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800416c:	2214      	movs	r2, #20
 800416e:	2100      	movs	r1, #0
 8004170:	a801      	add	r0, sp, #4
 8004172:	f015 fe33 	bl	8019ddc <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004176:	b92d      	cbnz	r5, 8004184 <MX25LM51245G_AutoPollingMemReady+0x2c>
 8004178:	2c01      	cmp	r4, #1
 800417a:	d159      	bne.n	8004230 <MX25LM51245G_AutoPollingMemReady+0xd8>
  {
    return MX25LM51245G_ERROR;
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004180:	b01a      	add	sp, #104	; 0x68
 8004182:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004184:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004186:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004188:	9309      	str	r3, [sp, #36]	; 0x24
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800418a:	f04f 0110 	mov.w	r1, #16
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004192:	bf0c      	ite	eq
 8004194:	2308      	moveq	r3, #8
 8004196:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004198:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800419a:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800419c:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800419e:	bf0c      	ite	eq
 80041a0:	2300      	moveq	r3, #0
 80041a2:	2310      	movne	r3, #16
 80041a4:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80041a6:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80041aa:	bf08      	it	eq
 80041ac:	2305      	moveq	r3, #5
 80041ae:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80041b0:	bf0c      	ite	eq
 80041b2:	2300      	moveq	r3, #0
 80041b4:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80041b8:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80041ba:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80041bc:	bf0c      	ite	eq
 80041be:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80041c2:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80041c4:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80041c6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80041c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041cc:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80041ce:	bf0c      	ite	eq
 80041d0:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80041d4:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80041d8:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80041da:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80041dc:	bf0c      	ite	eq
 80041de:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80041e2:	2300      	movne	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80041e4:	2d00      	cmp	r5, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80041e6:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80041e8:	bf0c      	ite	eq
 80041ea:	2300      	moveq	r3, #0
 80041ec:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80041ee:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80041f0:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80041f2:	bf0c      	ite	eq
 80041f4:	2302      	moveq	r3, #2
 80041f6:	2301      	movne	r3, #1
 80041f8:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80041fa:	bf0c      	ite	eq
 80041fc:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8004200:	2300      	movne	r3, #0
 8004202:	9318      	str	r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8004204:	2301      	movs	r3, #1
 8004206:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8004208:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800420c:	e9cd 3104 	strd	r3, r1, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004210:	a906      	add	r1, sp, #24
 8004212:	f002 fba4 	bl	800695e <HAL_OSPI_Command>
 8004216:	2800      	cmp	r0, #0
 8004218:	d1b0      	bne.n	800417c <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	a901      	add	r1, sp, #4
 8004220:	4630      	mov	r0, r6
 8004222:	f002 fcd9 	bl	8006bd8 <HAL_OSPI_AutoPolling>
 8004226:	3800      	subs	r0, #0
 8004228:	bf18      	it	ne
 800422a:	2001      	movne	r0, #1
 800422c:	4240      	negs	r0, r0
 800422e:	e7a7      	b.n	8004180 <MX25LM51245G_AutoPollingMemReady+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004230:	2301      	movs	r3, #1
 8004232:	e7a8      	b.n	8004186 <MX25LM51245G_AutoPollingMemReady+0x2e>

08004234 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	b096      	sub	sp, #88	; 0x58
 8004238:	460c      	mov	r4, r1
 800423a:	4606      	mov	r6, r0
 800423c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 800423e:	2100      	movs	r1, #0
 8004240:	2250      	movs	r2, #80	; 0x50
 8004242:	a802      	add	r0, sp, #8
 8004244:	f015 fdca 	bl	8019ddc <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8004248:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800424a:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800424c:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8004250:	d104      	bne.n	800425c <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 8004252:	b91d      	cbnz	r5, 800425c <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004258:	b016      	add	sp, #88	; 0x58
 800425a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800425c:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800425e:	2c00      	cmp	r4, #0
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8004260:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004262:	bf18      	it	ne
 8004264:	2304      	movne	r3, #4
 8004266:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004268:	bf0c      	ite	eq
 800426a:	2300      	moveq	r3, #0
 800426c:	2310      	movne	r3, #16
 800426e:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8004270:	d140      	bne.n	80042f4 <MX25LM51245G_EnableSTRMemoryMappedMode+0xc0>
 8004272:	2d00      	cmp	r5, #0
 8004274:	bf0c      	ite	eq
 8004276:	230b      	moveq	r3, #11
 8004278:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800427a:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800427c:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	a902      	add	r1, sp, #8
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004284:	bf0c      	ite	eq
 8004286:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800428a:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800428e:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004290:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004292:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8004294:	bf0c      	ite	eq
 8004296:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 800429a:	f44f 5340 	movne.w	r3, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800429e:	2c00      	cmp	r4, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80042a0:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80042a2:	bf0c      	ite	eq
 80042a4:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80042a8:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80042ac:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80042ae:	bf0c      	ite	eq
 80042b0:	2308      	moveq	r3, #8
 80042b2:	2306      	movne	r3, #6
 80042b4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042b6:	f002 fb52 	bl	800695e <HAL_OSPI_Command>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d1ca      	bne.n	8004254 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80042be:	2302      	movs	r3, #2
 80042c0:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80042c2:	b9d4      	cbnz	r4, 80042fa <MX25LM51245G_EnableSTRMemoryMappedMode+0xc6>
 80042c4:	2d00      	cmp	r5, #0
 80042c6:	bf18      	it	ne
 80042c8:	2312      	movne	r3, #18
 80042ca:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80042cc:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	a902      	add	r1, sp, #8
 80042d4:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 80042d6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042d8:	f002 fb41 	bl	800695e <HAL_OSPI_Command>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d1b9      	bne.n	8004254 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80042e0:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80042e2:	4669      	mov	r1, sp
 80042e4:	4630      	mov	r0, r6
 80042e6:	f002 fcc7 	bl	8006c78 <HAL_OSPI_MemoryMapped>
 80042ea:	3800      	subs	r0, #0
 80042ec:	bf18      	it	ne
 80042ee:	2001      	movne	r0, #1
 80042f0:	4240      	negs	r0, r0
 80042f2:	e7b1      	b.n	8004258 <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80042f4:	f64e 4313 	movw	r3, #60435	; 0xec13
 80042f8:	e7bf      	b.n	800427a <MX25LM51245G_EnableSTRMemoryMappedMode+0x46>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80042fa:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80042fe:	e7e4      	b.n	80042ca <MX25LM51245G_EnableSTRMemoryMappedMode+0x96>

08004300 <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8004300:	b510      	push	{r4, lr}
 8004302:	b096      	sub	sp, #88	; 0x58
 8004304:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8004306:	224c      	movs	r2, #76	; 0x4c
 8004308:	2100      	movs	r1, #0
 800430a:	a803      	add	r0, sp, #12
 800430c:	f015 fd66 	bl	8019ddc <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8004310:	2300      	movs	r3, #0
  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8004312:	f04f 0c08 	mov.w	ip, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004316:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4620      	mov	r0, r4
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8004320:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8004324:	2301      	movs	r3, #1
 8004326:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8004328:	2304      	movs	r3, #4
 800432a:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800432c:	2310      	movs	r3, #16
 800432e:	e9cd 3c06 	strd	r3, ip, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8004332:	f64e 6311 	movw	r3, #60945	; 0xee11
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8004336:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800433a:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800433c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004340:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004342:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004346:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800434a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800434e:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8004350:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8004352:	2306      	movs	r3, #6
 8004354:	e9cd c312 	strd	ip, r3, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8004358:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800435c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800435e:	f002 fafe 	bl	800695e <HAL_OSPI_Command>
 8004362:	b118      	cbz	r0, 800436c <MX25LM51245G_EnableDTRMemoryMappedMode+0x6c>
  {
    return MX25LM51245G_ERROR;
 8004364:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004368:	b016      	add	sp, #88	; 0x58
 800436a:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800436c:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8004374:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8004376:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800437a:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800437e:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8004380:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004382:	f002 faec 	bl	800695e <HAL_OSPI_Command>
 8004386:	2800      	cmp	r0, #0
 8004388:	d1ec      	bne.n	8004364 <MX25LM51245G_EnableDTRMemoryMappedMode+0x64>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800438a:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800438c:	4669      	mov	r1, sp
 800438e:	4620      	mov	r0, r4
 8004390:	f002 fc72 	bl	8006c78 <HAL_OSPI_MemoryMapped>
 8004394:	3800      	subs	r0, #0
 8004396:	bf18      	it	ne
 8004398:	2001      	movne	r0, #1
 800439a:	4240      	negs	r0, r0
 800439c:	e7e4      	b.n	8004368 <MX25LM51245G_EnableDTRMemoryMappedMode+0x68>

0800439e <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800439e:	b570      	push	{r4, r5, r6, lr}
 80043a0:	b09a      	sub	sp, #104	; 0x68
 80043a2:	460d      	mov	r5, r1
 80043a4:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 80043a6:	2100      	movs	r1, #0
{
 80043a8:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 80043aa:	a806      	add	r0, sp, #24
 80043ac:	2250      	movs	r2, #80	; 0x50
 80043ae:	f015 fd15 	bl	8019ddc <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80043b2:	2214      	movs	r2, #20
 80043b4:	2100      	movs	r1, #0
 80043b6:	a801      	add	r0, sp, #4
 80043b8:	f015 fd10 	bl	8019ddc <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80043bc:	b92d      	cbnz	r5, 80043ca <MX25LM51245G_WriteEnable+0x2c>
 80043be:	2c01      	cmp	r4, #1
 80043c0:	d169      	bne.n	8004496 <MX25LM51245G_WriteEnable+0xf8>
  {
    return MX25LM51245G_ERROR;
 80043c2:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80043c6:	b01a      	add	sp, #104	; 0x68
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80043ca:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80043cc:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80043ce:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	a906      	add	r1, sp, #24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80043d6:	bf0c      	ite	eq
 80043d8:	2308      	moveq	r3, #8
 80043da:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80043dc:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043de:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80043e0:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80043e2:	bf0c      	ite	eq
 80043e4:	2300      	moveq	r3, #0
 80043e6:	2310      	movne	r3, #16
 80043e8:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80043ea:	f240 63f9 	movw	r3, #1785	; 0x6f9
 80043ee:	bf08      	it	eq
 80043f0:	2306      	moveq	r3, #6
 80043f2:	9308      	str	r3, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043f4:	f002 fab3 	bl	800695e <HAL_OSPI_Command>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d1e2      	bne.n	80043c2 <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80043fc:	2d00      	cmp	r5, #0
 80043fe:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 8004402:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8004408:	bf08      	it	eq
 800440a:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800440c:	a906      	add	r1, sp, #24
 800440e:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8004410:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8004412:	bf0c      	ite	eq
 8004414:	2300      	moveq	r3, #0
 8004416:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800441a:	2c01      	cmp	r4, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800441c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800441e:	bf0c      	ite	eq
 8004420:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8004424:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004426:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004428:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800442a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800442e:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004430:	bf0c      	ite	eq
 8004432:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8004436:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800443a:	2c01      	cmp	r4, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800443c:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800443e:	bf0c      	ite	eq
 8004440:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8004444:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004446:	2d00      	cmp	r5, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004448:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800444a:	bf0c      	ite	eq
 800444c:	2300      	moveq	r3, #0
 800444e:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004450:	2c01      	cmp	r4, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004452:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004454:	bf0c      	ite	eq
 8004456:	2302      	moveq	r3, #2
 8004458:	2301      	movne	r3, #1
 800445a:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800445c:	bf0c      	ite	eq
 800445e:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8004462:	2300      	movne	r3, #0
 8004464:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004466:	f002 fa7a 	bl	800695e <HAL_OSPI_Command>
 800446a:	2800      	cmp	r0, #0
 800446c:	d1a9      	bne.n	80043c2 <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 800446e:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8004470:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8004472:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004474:	a901      	add	r1, sp, #4
 8004476:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 8004478:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800447c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004480:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	f002 fba6 	bl	8006bd8 <HAL_OSPI_AutoPolling>
 800448c:	3800      	subs	r0, #0
 800448e:	bf18      	it	ne
 8004490:	2001      	movne	r0, #1
 8004492:	4240      	negs	r0, r0
 8004494:	e797      	b.n	80043c6 <MX25LM51245G_WriteEnable+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004496:	2301      	movs	r3, #1
 8004498:	e798      	b.n	80043cc <MX25LM51245G_WriteEnable+0x2e>

0800449a <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800449a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449c:	b095      	sub	sp, #84	; 0x54
 800449e:	460d      	mov	r5, r1
 80044a0:	4606      	mov	r6, r0
 80044a2:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80044a4:	2100      	movs	r1, #0
 80044a6:	2250      	movs	r2, #80	; 0x50
 80044a8:	4668      	mov	r0, sp
{
 80044aa:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80044ac:	f015 fc96 	bl	8019ddc <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80044b0:	b92d      	cbnz	r5, 80044be <MX25LM51245G_WriteCfg2Register+0x24>
 80044b2:	2c01      	cmp	r4, #1
 80044b4:	d14a      	bne.n	800454c <MX25LM51245G_WriteCfg2Register+0xb2>
  {
    return MX25LM51245G_ERROR;
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80044ba:	b015      	add	sp, #84	; 0x54
 80044bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80044be:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80044c0:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80044c2:	9303      	str	r3, [sp, #12]
  s_command.Address            = WriteAddr;
 80044c4:	9706      	str	r7, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80044c6:	bf0c      	ite	eq
 80044c8:	2308      	moveq	r3, #8
 80044ca:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80044cc:	2d00      	cmp	r5, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80044ce:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80044d0:	bf0c      	ite	eq
 80044d2:	2300      	moveq	r3, #0
 80044d4:	2310      	movne	r3, #16
 80044d6:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80044d8:	f247 238d 	movw	r3, #29325	; 0x728d
 80044dc:	bf08      	it	eq
 80044de:	2372      	moveq	r3, #114	; 0x72
 80044e0:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80044e2:	bf0c      	ite	eq
 80044e4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80044e8:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80044ec:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80044ee:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80044f0:	bf0c      	ite	eq
 80044f2:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80044f6:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80044f8:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80044fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004500:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004502:	bf0c      	ite	eq
 8004504:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8004508:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800450c:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800450e:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004510:	bf0c      	ite	eq
 8004512:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8004516:	2300      	movne	r3, #0
 8004518:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800451a:	b1cd      	cbz	r5, 8004550 <MX25LM51245G_WriteCfg2Register+0xb6>
 800451c:	2c01      	cmp	r4, #1
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2302      	moveq	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4669      	mov	r1, sp
 800452a:	4630      	mov	r0, r6
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800452c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800452e:	f002 fa16 	bl	800695e <HAL_OSPI_Command>
 8004532:	2800      	cmp	r0, #0
 8004534:	d1bf      	bne.n	80044b6 <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	a91a      	add	r1, sp, #104	; 0x68
 800453c:	4630      	mov	r0, r6
 800453e:	f002 fab9 	bl	8006ab4 <HAL_OSPI_Transmit>
 8004542:	3800      	subs	r0, #0
 8004544:	bf18      	it	ne
 8004546:	2001      	movne	r0, #1
 8004548:	4240      	negs	r0, r0
 800454a:	e7b6      	b.n	80044ba <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800454c:	2301      	movs	r3, #1
 800454e:	e7b7      	b.n	80044c0 <MX25LM51245G_WriteCfg2Register+0x26>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8004550:	2301      	movs	r3, #1
 8004552:	e7e7      	b.n	8004524 <MX25LM51245G_WriteCfg2Register+0x8a>

08004554 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	b095      	sub	sp, #84	; 0x54
 8004558:	460d      	mov	r5, r1
 800455a:	4606      	mov	r6, r0
 800455c:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800455e:	2100      	movs	r1, #0
 8004560:	2250      	movs	r2, #80	; 0x50
 8004562:	4668      	mov	r0, sp
{
 8004564:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8004566:	f015 fc39 	bl	8019ddc <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800456a:	b92d      	cbnz	r5, 8004578 <MX25LM51245G_ReadCfg2Register+0x24>
 800456c:	2c01      	cmp	r4, #1
 800456e:	d153      	bne.n	8004618 <MX25LM51245G_ReadCfg2Register+0xc4>
  {
    return MX25LM51245G_ERROR;
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004574:	b015      	add	sp, #84	; 0x54
 8004576:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004578:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800457a:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800457c:	9303      	str	r3, [sp, #12]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004584:	bf0c      	ite	eq
 8004586:	2308      	moveq	r3, #8
 8004588:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800458a:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800458c:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800458e:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004590:	bf0c      	ite	eq
 8004592:	2300      	moveq	r3, #0
 8004594:	2310      	movne	r3, #16
  s_command.Address            = ReadAddr;
 8004596:	9706      	str	r7, [sp, #24]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004598:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800459a:	f247 138e 	movw	r3, #29070	; 0x718e
 800459e:	bf08      	it	eq
 80045a0:	2371      	moveq	r3, #113	; 0x71
 80045a2:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80045a4:	bf0c      	ite	eq
 80045a6:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80045aa:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80045ae:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80045b0:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80045b2:	bf0c      	ite	eq
 80045b4:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80045b8:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80045ba:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80045bc:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80045be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80045c2:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80045c4:	bf0c      	ite	eq
 80045c6:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80045ca:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80045ce:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80045d0:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80045d2:	bf0c      	ite	eq
 80045d4:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80045d8:	2300      	movne	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80045da:	2d00      	cmp	r5, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80045dc:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80045de:	bf0c      	ite	eq
 80045e0:	2300      	moveq	r3, #0
 80045e2:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80045e4:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80045e6:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80045e8:	bf0c      	ite	eq
 80045ea:	2302      	moveq	r3, #2
 80045ec:	2301      	movne	r3, #1
 80045ee:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80045f0:	bf0c      	ite	eq
 80045f2:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 80045f6:	2300      	movne	r3, #0
 80045f8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045fa:	f002 f9b0 	bl	800695e <HAL_OSPI_Command>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d1b6      	bne.n	8004570 <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004608:	4630      	mov	r0, r6
 800460a:	f002 fa93 	bl	8006b34 <HAL_OSPI_Receive>
 800460e:	3800      	subs	r0, #0
 8004610:	bf18      	it	ne
 8004612:	2001      	movne	r0, #1
 8004614:	4240      	negs	r0, r0
 8004616:	e7ad      	b.n	8004574 <MX25LM51245G_ReadCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004618:	2301      	movs	r3, #1
 800461a:	e7ae      	b.n	800457a <MX25LM51245G_ReadCfg2Register+0x26>

0800461c <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	b094      	sub	sp, #80	; 0x50
 8004620:	460c      	mov	r4, r1
 8004622:	4606      	mov	r6, r0
 8004624:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004626:	2100      	movs	r1, #0
 8004628:	2250      	movs	r2, #80	; 0x50
 800462a:	4668      	mov	r0, sp
 800462c:	f015 fbd6 	bl	8019ddc <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004630:	b9f4      	cbnz	r4, 8004670 <MX25LM51245G_ResetEnable+0x54>
 8004632:	2d01      	cmp	r5, #1
 8004634:	d01e      	beq.n	8004674 <MX25LM51245G_ResetEnable+0x58>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004636:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004638:	2d01      	cmp	r5, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800463a:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004642:	bf0c      	ite	eq
 8004644:	2308      	moveq	r3, #8
 8004646:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004648:	2c00      	cmp	r4, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800464a:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800464c:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800464e:	bf0c      	ite	eq
 8004650:	2300      	moveq	r3, #0
 8004652:	2310      	movne	r3, #16
 8004654:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8004656:	f246 6399 	movw	r3, #26265	; 0x6699
 800465a:	bf08      	it	eq
 800465c:	2366      	moveq	r3, #102	; 0x66
 800465e:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004660:	f002 f97d 	bl	800695e <HAL_OSPI_Command>
 8004664:	3800      	subs	r0, #0
 8004666:	bf18      	it	ne
 8004668:	2001      	movne	r0, #1
 800466a:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800466c:	b014      	add	sp, #80	; 0x50
 800466e:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004670:	2304      	movs	r3, #4
 8004672:	e7e1      	b.n	8004638 <MX25LM51245G_ResetEnable+0x1c>
    return MX25LM51245G_ERROR;
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	e7f8      	b.n	800466c <MX25LM51245G_ResetEnable+0x50>

0800467a <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800467a:	b570      	push	{r4, r5, r6, lr}
 800467c:	b094      	sub	sp, #80	; 0x50
 800467e:	460c      	mov	r4, r1
 8004680:	4606      	mov	r6, r0
 8004682:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004684:	2100      	movs	r1, #0
 8004686:	2250      	movs	r2, #80	; 0x50
 8004688:	4668      	mov	r0, sp
 800468a:	f015 fba7 	bl	8019ddc <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800468e:	b9f4      	cbnz	r4, 80046ce <MX25LM51245G_ResetMemory+0x54>
 8004690:	2d01      	cmp	r5, #1
 8004692:	d01e      	beq.n	80046d2 <MX25LM51245G_ResetMemory+0x58>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004694:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004696:	2d01      	cmp	r5, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004698:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80046a0:	bf0c      	ite	eq
 80046a2:	2308      	moveq	r3, #8
 80046a4:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80046a6:	2c00      	cmp	r4, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046a8:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80046aa:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80046ac:	bf0c      	ite	eq
 80046ae:	2300      	moveq	r3, #0
 80046b0:	2310      	movne	r3, #16
 80046b2:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80046b4:	f649 1366 	movw	r3, #39270	; 0x9966
 80046b8:	bf08      	it	eq
 80046ba:	2399      	moveq	r3, #153	; 0x99
 80046bc:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046be:	f002 f94e 	bl	800695e <HAL_OSPI_Command>
 80046c2:	3800      	subs	r0, #0
 80046c4:	bf18      	it	ne
 80046c6:	2001      	movne	r0, #1
 80046c8:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80046ca:	b014      	add	sp, #80	; 0x50
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80046ce:	2304      	movs	r3, #4
 80046d0:	e7e1      	b.n	8004696 <MX25LM51245G_ResetMemory+0x1c>
    return MX25LM51245G_ERROR;
 80046d2:	f04f 30ff 	mov.w	r0, #4294967295
 80046d6:	e7f8      	b.n	80046ca <MX25LM51245G_ResetMemory+0x50>

080046d8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 80046d8:	4a11      	ldr	r2, [pc, #68]	; (8004720 <BSP_I2C4_DeInit+0x48>)
{
 80046da:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 80046dc:	6813      	ldr	r3, [r2, #0]
 80046de:	b90b      	cbnz	r3, 80046e4 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 80046e0:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 80046e2:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 80046e4:	3b01      	subs	r3, #1
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f9      	bne.n	80046e0 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80046ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046f0:	480c      	ldr	r0, [pc, #48]	; (8004724 <BSP_I2C4_DeInit+0x4c>)
 80046f2:	f001 f95d 	bl	80059b0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80046f6:	480b      	ldr	r0, [pc, #44]	; (8004724 <BSP_I2C4_DeInit+0x4c>)
 80046f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046fc:	f001 f958 	bl	80059b0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8004700:	4a09      	ldr	r2, [pc, #36]	; (8004728 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004702:	480a      	ldr	r0, [pc, #40]	; (800472c <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 8004704:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8004708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004710:	f001 fbe2 	bl	8005ed8 <HAL_I2C_DeInit>
 8004714:	2800      	cmp	r0, #0
 8004716:	d0e3      	beq.n	80046e0 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 8004718:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800471c:	e7e1      	b.n	80046e2 <BSP_I2C4_DeInit+0xa>
 800471e:	bf00      	nop
 8004720:	24001678 	.word	0x24001678
 8004724:	58021400 	.word	0x58021400
 8004728:	58024400 	.word	0x58024400
 800472c:	24002080 	.word	0x24002080

08004730 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004730:	2300      	movs	r3, #0
 8004732:	2201      	movs	r2, #1
{
 8004734:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8004736:	6041      	str	r1, [r0, #4]
{
 8004738:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800473a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800473c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8004740:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004744:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004748:	f001 fb74 	bl	8005e34 <HAL_I2C_Init>
 800474c:	4601      	mov	r1, r0
 800474e:	b108      	cbz	r0, 8004754 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8004750:	2001      	movs	r0, #1
}
 8004752:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004754:	4620      	mov	r0, r4
 8004756:	f001 fd50 	bl	80061fa <HAL_I2CEx_ConfigAnalogFilter>
 800475a:	4601      	mov	r1, r0
 800475c:	2800      	cmp	r0, #0
 800475e:	d1f7      	bne.n	8004750 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004760:	4620      	mov	r0, r4
 8004762:	f001 fd70 	bl	8006246 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8004766:	3800      	subs	r0, #0
 8004768:	bf18      	it	ne
 800476a:	2001      	movne	r0, #1
 800476c:	e7f1      	b.n	8004752 <MX_I2C4_Init+0x22>
	...

08004770 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8004770:	4ba1      	ldr	r3, [pc, #644]	; (80049f8 <BSP_I2C4_Init+0x288>)
 8004772:	48a2      	ldr	r0, [pc, #648]	; (80049fc <BSP_I2C4_Init+0x28c>)
{
 8004774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8004778:	6003      	str	r3, [r0, #0]
{
 800477a:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 800477c:	4ba0      	ldr	r3, [pc, #640]	; (8004a00 <BSP_I2C4_Init+0x290>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	9200      	str	r2, [sp, #0]
 8004782:	3201      	adds	r2, #1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	9b00      	ldr	r3, [sp, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 80c8 	bne.w	800491e <BSP_I2C4_Init+0x1ae>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800478e:	f001 fd2f 	bl	80061f0 <HAL_I2C_GetState>
 8004792:	2800      	cmp	r0, #0
 8004794:	f040 80c3 	bne.w	800491e <BSP_I2C4_Init+0x1ae>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004798:	4d9a      	ldr	r5, [pc, #616]	; (8004a04 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800479a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800479e:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80047a0:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80047a2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80047a6:	4898      	ldr	r0, [pc, #608]	; (8004a08 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80047a8:	f043 0320 	orr.w	r3, r3, #32
 80047ac:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80047b0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	930a      	str	r3, [sp, #40]	; 0x28
 80047ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80047bc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80047c0:	f043 0320 	orr.w	r3, r3, #32
 80047c4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80047c8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80047cc:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80047d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80047d6:	2312      	movs	r3, #18
 80047d8:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80047dc:	2302      	movs	r3, #2
 80047de:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80047e2:	a90d      	add	r1, sp, #52	; 0x34
 80047e4:	f000 fffe 	bl	80057e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80047e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80047ec:	a90d      	add	r1, sp, #52	; 0x34
 80047ee:	4886      	ldr	r0, [pc, #536]	; (8004a08 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80047f0:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80047f2:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80047f4:	f000 fff6 	bl	80057e4 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80047f8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80047fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004800:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8004804:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	930c      	str	r3, [sp, #48]	; 0x30
 800480e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8004810:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800481c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004824:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004828:	f003 f9ce 	bl	8007bc8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800482c:	2800      	cmp	r0, #0
 800482e:	d070      	beq.n	8004912 <BSP_I2C4_Init+0x1a2>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004830:	4b76      	ldr	r3, [pc, #472]	; (8004a0c <BSP_I2C4_Init+0x29c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004832:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004836:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8004a14 <BSP_I2C4_Init+0x2a4>
 800483a:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800483e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8004842:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004846:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800484a:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800484e:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004850:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004854:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004858:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800485c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004860:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 8004862:	9302      	str	r3, [sp, #8]
 8004864:	4b6a      	ldr	r3, [pc, #424]	; (8004a10 <BSP_I2C4_Init+0x2a0>)
 8004866:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800486a:	9a00      	ldr	r2, [sp, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4696      	mov	lr, r2
{
 8004870:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004872:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8004874:	f240 3479 	movw	r4, #889	; 0x379
 8004878:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800487a:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800487c:	45a4      	cmp	ip, r4
 800487e:	d959      	bls.n	8004934 <BSP_I2C4_Init+0x1c4>
 8004880:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004882:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004884:	45ab      	cmp	fp, r5
 8004886:	d851      	bhi.n	800492c <BSP_I2C4_Init+0x1bc>
 8004888:	9c02      	ldr	r4, [sp, #8]
 800488a:	42ac      	cmp	r4, r5
 800488c:	d34e      	bcc.n	800492c <BSP_I2C4_Init+0x1bc>
            if(presc != prev_presc)
 800488e:	4590      	cmp	r8, r2
 8004890:	d04c      	beq.n	800492c <BSP_I2C4_Init+0x1bc>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004892:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8004896:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004898:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800489a:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800489e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80048a0:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80048a4:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80048a8:	d93d      	bls.n	8004926 <BSP_I2C4_Init+0x1b6>
 80048aa:	4a59      	ldr	r2, [pc, #356]	; (8004a10 <BSP_I2C4_Init+0x2a0>)
 80048ac:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80048ae:	4b58      	ldr	r3, [pc, #352]	; (8004a10 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80048b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80048b4:	4957      	ldr	r1, [pc, #348]	; (8004a14 <BSP_I2C4_Init+0x2a4>)
 80048b6:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80048b8:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80048c0:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80048c2:	0043      	lsls	r3, r0, #1
 80048c4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80048c8:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 80048cc:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 80048d0:	f10b 0b0c 	add.w	fp, fp, #12
 80048d4:	9409      	str	r4, [sp, #36]	; 0x24
 80048d6:	3b0a      	subs	r3, #10
 80048d8:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80048da:	9b05      	ldr	r3, [sp, #20]
 80048dc:	429f      	cmp	r7, r3
 80048de:	d134      	bne.n	800494a <BSP_I2C4_Init+0x1da>
        if (idx < I2C_VALID_TIMING_NBR)
 80048e0:	2a7f      	cmp	r2, #127	; 0x7f
 80048e2:	d816      	bhi.n	8004912 <BSP_I2C4_Init+0x1a2>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80048e4:	2314      	movs	r3, #20
 80048e6:	435a      	muls	r2, r3
 80048e8:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <BSP_I2C4_Init+0x2a4>)
 80048ea:	1899      	adds	r1, r3, r2
 80048ec:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80048ee:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80048f0:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80048f4:	684b      	ldr	r3, [r1, #4]
 80048f6:	051b      	lsls	r3, r3, #20
 80048f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80048fc:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80048fe:	688b      	ldr	r3, [r1, #8]
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004906:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8004908:	68cb      	ldr	r3, [r1, #12]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800490e:	4323      	orrs	r3, r4
 8004910:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004912:	9900      	ldr	r1, [sp, #0]
 8004914:	4839      	ldr	r0, [pc, #228]	; (80049fc <BSP_I2C4_Init+0x28c>)
 8004916:	f7ff ff0b 	bl	8004730 <MX_I2C4_Init>
 800491a:	2800      	cmp	r0, #0
 800491c:	d169      	bne.n	80049f2 <BSP_I2C4_Init+0x282>
  int32_t ret = BSP_ERROR_NONE;
 800491e:	2000      	movs	r0, #0
}
 8004920:	b013      	add	sp, #76	; 0x4c
 8004922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004926:	4690      	mov	r8, r2
 8004928:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800492c:	3701      	adds	r7, #1
 800492e:	440d      	add	r5, r1
 8004930:	2f10      	cmp	r7, #16
 8004932:	d1a7      	bne.n	8004884 <BSP_I2C4_Init+0x114>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004934:	2e10      	cmp	r6, #16
 8004936:	448c      	add	ip, r1
 8004938:	d19c      	bne.n	8004874 <BSP_I2C4_Init+0x104>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800493a:	3201      	adds	r2, #1
 800493c:	4401      	add	r1, r0
 800493e:	2a10      	cmp	r2, #16
 8004940:	d196      	bne.n	8004870 <BSP_I2C4_Init+0x100>
 8004942:	f1be 0f00 	cmp.w	lr, #0
 8004946:	d1b0      	bne.n	80048aa <BSP_I2C4_Init+0x13a>
 8004948:	e7b1      	b.n	80048ae <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800494a:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800494c:	f04f 0c00 	mov.w	ip, #0
 8004950:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004952:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004956:	441c      	add	r4, r3
 8004958:	ebab 0503 	sub.w	r5, fp, r3
 800495c:	9404      	str	r4, [sp, #16]
 800495e:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004960:	9d04      	ldr	r5, [sp, #16]
 8004962:	9401      	str	r4, [sp, #4]
 8004964:	9c02      	ldr	r4, [sp, #8]
 8004966:	441c      	add	r4, r3
 8004968:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800496a:	f241 245c 	movw	r4, #4700	; 0x125c
 800496e:	f8cd c018 	str.w	ip, [sp, #24]
 8004972:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004976:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800497a:	42a5      	cmp	r5, r4
 800497c:	d92e      	bls.n	80049dc <BSP_I2C4_Init+0x26c>
 800497e:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8004982:	d22b      	bcs.n	80049dc <BSP_I2C4_Init+0x26c>
 8004984:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004986:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800498a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800498e:	1966      	adds	r6, r4, r5
 8004990:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8004994:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 8004998:	f241 0447 	movw	r4, #4167	; 0x1047
 800499c:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80049a0:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80049a4:	45a2      	cmp	sl, r4
 80049a6:	d812      	bhi.n	80049ce <BSP_I2C4_Init+0x25e>
 80049a8:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 80049ac:	d30f      	bcc.n	80049ce <BSP_I2C4_Init+0x25e>
 80049ae:	4540      	cmp	r0, r8
 80049b0:	d20d      	bcs.n	80049ce <BSP_I2C4_Init+0x25e>
              error = -error;
 80049b2:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80049b6:	bf28      	it	cs
 80049b8:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80049ba:	9c03      	ldr	r4, [sp, #12]
 80049bc:	45a2      	cmp	sl, r4
 80049be:	d206      	bcs.n	80049ce <BSP_I2C4_Init+0x25e>
              I2c_valid_timing[count].scll = scll;
 80049c0:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 80049c2:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 80049c6:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80049c8:	9a07      	ldr	r2, [sp, #28]
 80049ca:	60ca      	str	r2, [r1, #12]
 80049cc:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80049ce:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 80049d2:	eba9 0903 	sub.w	r9, r9, r3
 80049d6:	441e      	add	r6, r3
 80049d8:	4498      	add	r8, r3
 80049da:	d1db      	bne.n	8004994 <BSP_I2C4_Init+0x224>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80049dc:	9c01      	ldr	r4, [sp, #4]
 80049de:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80049e2:	441d      	add	r5, r3
 80049e4:	eba4 0403 	sub.w	r4, r4, r3
 80049e8:	9401      	str	r4, [sp, #4]
 80049ea:	d1be      	bne.n	800496a <BSP_I2C4_Init+0x1fa>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80049ec:	3701      	adds	r7, #1
 80049ee:	3114      	adds	r1, #20
 80049f0:	e773      	b.n	80048da <BSP_I2C4_Init+0x16a>
          ret = BSP_ERROR_BUS_FAILURE;
 80049f2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80049f6:	e793      	b.n	8004920 <BSP_I2C4_Init+0x1b0>
 80049f8:	58001c00 	.word	0x58001c00
 80049fc:	24002080 	.word	0x24002080
 8004a00:	24001678 	.word	0x24001678
 8004a04:	58024400 	.word	0x58024400
 8004a08:	58021400 	.word	0x58021400
 8004a0c:	3b9aca00 	.word	0x3b9aca00
 8004a10:	2400207c 	.word	0x2400207c
 8004a14:	2400167c 	.word	0x2400167c

08004a18 <BSP_I2C4_WriteReg>:
{
 8004a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004a1a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004a1e:	9200      	str	r2, [sp, #0]
 8004a20:	460a      	mov	r2, r1
 8004a22:	4601      	mov	r1, r0
 8004a24:	4808      	ldr	r0, [pc, #32]	; (8004a48 <BSP_I2C4_WriteReg+0x30>)
 8004a26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f001 fa6d 	bl	8005f0a <HAL_I2C_Mem_Write>
 8004a30:	b140      	cbz	r0, 8004a44 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004a32:	4805      	ldr	r0, [pc, #20]	; (8004a48 <BSP_I2C4_WriteReg+0x30>)
 8004a34:	f001 fbdf 	bl	80061f6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004a38:	2804      	cmp	r0, #4
 8004a3a:	bf0c      	ite	eq
 8004a3c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8004a40:	f06f 0003 	mvnne.w	r0, #3
}
 8004a44:	b004      	add	sp, #16
 8004a46:	bd10      	pop	{r4, pc}
 8004a48:	24002080 	.word	0x24002080

08004a4c <BSP_I2C4_ReadReg>:
{
 8004a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004a4e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004a52:	9200      	str	r2, [sp, #0]
 8004a54:	460a      	mov	r2, r1
 8004a56:	4601      	mov	r1, r0
 8004a58:	4808      	ldr	r0, [pc, #32]	; (8004a7c <BSP_I2C4_ReadReg+0x30>)
 8004a5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f001 fb0a 	bl	8006078 <HAL_I2C_Mem_Read>
 8004a64:	b140      	cbz	r0, 8004a78 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004a66:	4805      	ldr	r0, [pc, #20]	; (8004a7c <BSP_I2C4_ReadReg+0x30>)
 8004a68:	f001 fbc5 	bl	80061f6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004a6c:	2804      	cmp	r0, #4
 8004a6e:	bf0c      	ite	eq
 8004a70:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8004a74:	f06f 0003 	mvnne.w	r0, #3
}
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd10      	pop	{r4, pc}
 8004a7c:	24002080 	.word	0x24002080

08004a80 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8004a80:	f000 bcd4 	b.w	800542c <HAL_GetTick>

08004a84 <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8004a84:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a86:	4c21      	ldr	r4, [pc, #132]	; (8004b0c <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8004a88:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a8a:	4821      	ldr	r0, [pc, #132]	; (8004b10 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004a8c:	78a2      	ldrb	r2, [r4, #2]
 8004a8e:	7861      	ldrb	r1, [r4, #1]
 8004a90:	f7ff fc85 	bl	800439e <MX25LM51245G_WriteEnable>
 8004a94:	b118      	cbz	r0, 8004a9e <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a96:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8004a9a:	b005      	add	sp, #20
 8004a9c:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	481b      	ldr	r0, [pc, #108]	; (8004b10 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004aa8:	78a2      	ldrb	r2, [r4, #2]
 8004aaa:	7861      	ldrb	r1, [r4, #1]
 8004aac:	f7ff fcf5 	bl	800449a <MX25LM51245G_WriteCfg2Register>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d1f0      	bne.n	8004a96 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004ab4:	78a2      	ldrb	r2, [r4, #2]
 8004ab6:	7861      	ldrb	r1, [r4, #1]
 8004ab8:	4815      	ldr	r0, [pc, #84]	; (8004b10 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004aba:	f7ff fc70 	bl	800439e <MX25LM51245G_WriteEnable>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d1e8      	bne.n	8004a96 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8004ac4:	2501      	movs	r5, #1
 8004ac6:	4812      	ldr	r0, [pc, #72]	; (8004b10 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004ac8:	9500      	str	r5, [sp, #0]
 8004aca:	78a2      	ldrb	r2, [r4, #2]
 8004acc:	7861      	ldrb	r1, [r4, #1]
 8004ace:	f7ff fce4 	bl	800449a <MX25LM51245G_WriteCfg2Register>
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d1de      	bne.n	8004a96 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004ad8:	2028      	movs	r0, #40	; 0x28
 8004ada:	f000 fcad 	bl	8005438 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004ade:	4622      	mov	r2, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	480b      	ldr	r0, [pc, #44]	; (8004b10 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004ae4:	f7ff fb38 	bl	8004158 <MX25LM51245G_AutoPollingMemReady>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d1d4      	bne.n	8004a96 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004aec:	ab03      	add	r3, sp, #12
 8004aee:	4602      	mov	r2, r0
 8004af0:	4629      	mov	r1, r5
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4603      	mov	r3, r0
 8004af6:	4806      	ldr	r0, [pc, #24]	; (8004b10 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004af8:	f7ff fd2c 	bl	8004554 <MX25LM51245G_ReadCfg2Register>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d1ca      	bne.n	8004a96 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8004b00:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	d0c8      	beq.n	8004a9a <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8004b08:	e7c5      	b.n	8004a96 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8004b0a:	bf00      	nop
 8004b0c:	240020cc 	.word	0x240020cc
 8004b10:	240020d4 	.word	0x240020d4

08004b14 <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8004b14:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004b16:	4d27      	ldr	r5, [pc, #156]	; (8004bb4 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8004b18:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004b1a:	4c27      	ldr	r4, [pc, #156]	; (8004bb8 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8004b1c:	78aa      	ldrb	r2, [r5, #2]
 8004b1e:	7869      	ldrb	r1, [r5, #1]
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7ff fc3c 	bl	800439e <MX25LM51245G_WriteEnable>
 8004b26:	b118      	cbz	r0, 8004b30 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b28:	f06f 0004 	mvn.w	r0, #4
}
 8004b2c:	b005      	add	sp, #20
 8004b2e:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8004b30:	2303      	movs	r3, #3
 8004b32:	78aa      	ldrb	r2, [r5, #2]
 8004b34:	7869      	ldrb	r1, [r5, #1]
 8004b36:	4620      	mov	r0, r4
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b3e:	f7ff fcac 	bl	800449a <MX25LM51245G_WriteCfg2Register>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d1f0      	bne.n	8004b28 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004b46:	78aa      	ldrb	r2, [r5, #2]
 8004b48:	4620      	mov	r0, r4
 8004b4a:	7869      	ldrb	r1, [r5, #1]
 8004b4c:	f7ff fc27 	bl	800439e <MX25LM51245G_WriteEnable>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d1e9      	bne.n	8004b28 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8004b54:	2302      	movs	r3, #2
 8004b56:	78aa      	ldrb	r2, [r5, #2]
 8004b58:	7869      	ldrb	r1, [r5, #1]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f7ff fc9b 	bl	800449a <MX25LM51245G_WriteCfg2Register>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d1df      	bne.n	8004b28 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004b68:	2028      	movs	r0, #40	; 0x28
 8004b6a:	f000 fc65 	bl	8005438 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004b6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004b72:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004b74:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004b7c:	f001 fe66 	bl	800684c <HAL_OSPI_Init>
 8004b80:	b9a8      	cbnz	r0, 8004bae <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004b82:	2201      	movs	r2, #1
 8004b84:	4620      	mov	r0, r4
 8004b86:	4611      	mov	r1, r2
 8004b88:	f7ff fae6 	bl	8004158 <MX25LM51245G_AutoPollingMemReady>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d1cb      	bne.n	8004b28 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004b90:	ab03      	add	r3, sp, #12
 8004b92:	2201      	movs	r2, #1
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7ff fcda 	bl	8004554 <MX25LM51245G_ReadCfg2Register>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d1c1      	bne.n	8004b28 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8004ba4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d0bf      	beq.n	8004b2c <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004bac:	e7bc      	b.n	8004b28 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004bae:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004bb2:	e7bb      	b.n	8004b2c <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004bb4:	240020cc 	.word	0x240020cc
 8004bb8:	240020d4 	.word	0x240020d4

08004bbc <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <MX_OSPI_NOR_Init+0x3c>)
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004bc4:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004bc6:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004bc8:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8004bca:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004bcc:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004bce:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004bd2:	684a      	ldr	r2, [r1, #4]
 8004bd4:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004bd6:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8004bd8:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004bda:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004bdc:	68ca      	ldr	r2, [r1, #12]
 8004bde:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004be0:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004be4:	bf09      	itett	eq
 8004be6:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004bea:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004bec:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004bee:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004bf2:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8004bf4:	f001 be2a 	b.w	800684c <HAL_OSPI_Init>
 8004bf8:	52005000 	.word	0x52005000

08004bfc <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8004bfc:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004bfe:	b998      	cbnz	r0, 8004c28 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004c00:	4c0b      	ldr	r4, [pc, #44]	; (8004c30 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004c02:	78a3      	ldrb	r3, [r4, #2]
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004c04:	7861      	ldrb	r1, [r4, #1]
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004c06:	b95b      	cbnz	r3, 8004c20 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	480a      	ldr	r0, [pc, #40]	; (8004c34 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8004c0c:	f7ff fb12 	bl	8004234 <MX25LM51245G_EnableSTRMemoryMappedMode>
 8004c10:	b110      	cbz	r0, 8004c18 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c12:	f06f 0004 	mvn.w	r0, #4
}
 8004c16:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004c18:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8004c1a:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004c1c:	7023      	strb	r3, [r4, #0]
 8004c1e:	e7fa      	b.n	8004c16 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8004c20:	4804      	ldr	r0, [pc, #16]	; (8004c34 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8004c22:	f7ff fb6d 	bl	8004300 <MX25LM51245G_EnableDTRMemoryMappedMode>
 8004c26:	e7f3      	b.n	8004c10 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8004c28:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004c2c:	e7f3      	b.n	8004c16 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8004c2e:	bf00      	nop
 8004c30:	240020cc 	.word	0x240020cc
 8004c34:	240020d4 	.word	0x240020d4

08004c38 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8004c38:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004c3a:	b950      	cbnz	r0, 8004c52 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8004c3c:	4c09      	ldr	r4, [pc, #36]	; (8004c64 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8004c3e:	7823      	ldrb	r3, [r4, #0]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d109      	bne.n	8004c58 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8004c44:	4808      	ldr	r0, [pc, #32]	; (8004c68 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8004c46:	f002 f846 	bl	8006cd6 <HAL_OSPI_Abort>
 8004c4a:	b940      	cbnz	r0, 8004c5e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	7023      	strb	r3, [r4, #0]
}
 8004c50:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004c52:	f06f 0001 	mvn.w	r0, #1
 8004c56:	e7fb      	b.n	8004c50 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8004c58:	f06f 001a 	mvn.w	r0, #26
 8004c5c:	e7f8      	b.n	8004c50 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004c5e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004c62:	e7f5      	b.n	8004c50 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8004c64:	240020cc 	.word	0x240020cc
 8004c68:	240020d4 	.word	0x240020d4

08004c6c <BSP_OSPI_NOR_DeInit>:
{
 8004c6c:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d156      	bne.n	8004d20 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004c72:	4c2d      	ldr	r4, [pc, #180]	; (8004d28 <BSP_OSPI_NOR_DeInit+0xbc>)
 8004c74:	7823      	ldrb	r3, [r4, #0]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d04b      	beq.n	8004d12 <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004c7a:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c80:	482a      	ldr	r0, [pc, #168]	; (8004d2c <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004c82:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8004c84:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004c86:	f000 fe93 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	4828      	ldr	r0, [pc, #160]	; (8004d30 <BSP_OSPI_NOR_DeInit+0xc4>)
 8004c8e:	f000 fe8f 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8004c92:	2140      	movs	r1, #64	; 0x40
 8004c94:	4827      	ldr	r0, [pc, #156]	; (8004d34 <BSP_OSPI_NOR_DeInit+0xc8>)
 8004c96:	f000 fe8b 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8004c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c9e:	4826      	ldr	r0, [pc, #152]	; (8004d38 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004ca0:	f000 fe86 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8004ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ca8:	4823      	ldr	r0, [pc, #140]	; (8004d38 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004caa:	f000 fe81 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8004cae:	2104      	movs	r1, #4
 8004cb0:	4822      	ldr	r0, [pc, #136]	; (8004d3c <BSP_OSPI_NOR_DeInit+0xd0>)
 8004cb2:	f000 fe7d 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8004cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cba:	481f      	ldr	r0, [pc, #124]	; (8004d38 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004cbc:	f000 fe78 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8004cc0:	2110      	movs	r1, #16
 8004cc2:	481d      	ldr	r0, [pc, #116]	; (8004d38 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004cc4:	f000 fe74 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8004cc8:	2120      	movs	r1, #32
 8004cca:	481b      	ldr	r0, [pc, #108]	; (8004d38 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004ccc:	f000 fe70 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8004cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cd4:	4817      	ldr	r0, [pc, #92]	; (8004d34 <BSP_OSPI_NOR_DeInit+0xc8>)
 8004cd6:	f000 fe6b 	bl	80059b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	4816      	ldr	r0, [pc, #88]	; (8004d38 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004cde:	f000 fe67 	bl	80059b0 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004ce4:	4817      	ldr	r0, [pc, #92]	; (8004d44 <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8004ce6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cec:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004cee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 8004cf6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004cfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cfe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004d02:	f001 fe19 	bl	8006938 <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004d06:	2800      	cmp	r0, #0
 8004d08:	bf0c      	ite	eq
 8004d0a:	2000      	moveq	r0, #0
 8004d0c:	f06f 0003 	mvnne.w	r0, #3
}
 8004d10:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8004d12:	f7ff ff91 	bl	8004c38 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d0af      	beq.n	8004c7a <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8004d1a:	f06f 0004 	mvn.w	r0, #4
 8004d1e:	e7f7      	b.n	8004d10 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8004d20:	f06f 0001 	mvn.w	r0, #1
 8004d24:	e7f4      	b.n	8004d10 <BSP_OSPI_NOR_DeInit+0xa4>
 8004d26:	bf00      	nop
 8004d28:	240020cc 	.word	0x240020cc
 8004d2c:	58021400 	.word	0x58021400
 8004d30:	58020400 	.word	0x58020400
 8004d34:	58021800 	.word	0x58021800
 8004d38:	58020c00 	.word	0x58020c00
 8004d3c:	58021000 	.word	0x58021000
 8004d40:	58024400 	.word	0x58024400
 8004d44:	240020d4 	.word	0x240020d4

08004d48 <BSP_OSPI_NOR_ConfigFlash>:
{
 8004d48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004d4c:	460d      	mov	r5, r1
 8004d4e:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d158      	bne.n	8004e06 <BSP_OSPI_NOR_ConfigFlash+0xbe>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004d54:	4c2f      	ldr	r4, [pc, #188]	; (8004e14 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004d56:	7823      	ldrb	r3, [r4, #0]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d057      	beq.n	8004e0c <BSP_OSPI_NOR_ConfigFlash+0xc4>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8004d5c:	7863      	ldrb	r3, [r4, #1]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d148      	bne.n	8004df4 <BSP_OSPI_NOR_ConfigFlash+0xac>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8004d62:	2901      	cmp	r1, #1
 8004d64:	78a2      	ldrb	r2, [r4, #2]
 8004d66:	d109      	bne.n	8004d7c <BSP_OSPI_NOR_ConfigFlash+0x34>
 8004d68:	4296      	cmp	r6, r2
 8004d6a:	d107      	bne.n	8004d7c <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004d6c:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004d6e:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8004d70:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004d72:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004d74:	70a6      	strb	r6, [r4, #2]
}
 8004d76:	b004      	add	sp, #16
 8004d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004d7c:	4f26      	ldr	r7, [pc, #152]	; (8004e18 <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4638      	mov	r0, r7
 8004d82:	f7ff fb0c 	bl	800439e <MX25LM51245G_WriteEnable>
 8004d86:	4603      	mov	r3, r0
 8004d88:	bb88      	cbnz	r0, 8004dee <BSP_OSPI_NOR_ConfigFlash+0xa6>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8004d8a:	f88d 000c 	strb.w	r0, [sp, #12]
    reg[1] = 0;
 8004d8e:	f88d 000d 	strb.w	r0, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8004d92:	9000      	str	r0, [sp, #0]
 8004d94:	4638      	mov	r0, r7
 8004d96:	78a2      	ldrb	r2, [r4, #2]
 8004d98:	7861      	ldrb	r1, [r4, #1]
 8004d9a:	f7ff fb7e 	bl	800449a <MX25LM51245G_WriteCfg2Register>
 8004d9e:	4680      	mov	r8, r0
 8004da0:	bb28      	cbnz	r0, 8004dee <BSP_OSPI_NOR_ConfigFlash+0xa6>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004da2:	2028      	movs	r0, #40	; 0x28
 8004da4:	f000 fb48 	bl	8005438 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004da8:	78a3      	ldrb	r3, [r4, #2]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d106      	bne.n	8004dbc <BSP_OSPI_NOR_ConfigFlash+0x74>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004dae:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004db0:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004db4:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004db8:	f001 fd48 	bl	800684c <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4816      	ldr	r0, [pc, #88]	; (8004e18 <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	f7ff f9c9 	bl	8004158 <MX25LM51245G_AutoPollingMemReady>
 8004dc6:	b990      	cbnz	r0, 8004dee <BSP_OSPI_NOR_ConfigFlash+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004dc8:	ab03      	add	r3, sp, #12
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4601      	mov	r1, r0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4811      	ldr	r0, [pc, #68]	; (8004e18 <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 8004dd4:	f7ff fbbe 	bl	8004554 <MX25LM51245G_ReadCfg2Register>
 8004dd8:	b948      	cbnz	r0, 8004dee <BSP_OSPI_NOR_ConfigFlash+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8004dda:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004dde:	b933      	cbnz	r3, 8004dee <BSP_OSPI_NOR_ConfigFlash+0xa6>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004de0:	2d01      	cmp	r5, #1
 8004de2:	d1c3      	bne.n	8004d6c <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004de4:	78a3      	ldrb	r3, [r4, #2]
 8004de6:	b94b      	cbnz	r3, 8004dfc <BSP_OSPI_NOR_ConfigFlash+0xb4>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004de8:	f7ff fe94 	bl	8004b14 <OSPI_NOR_EnterDOPIMode.constprop.0>
 8004dec:	e008      	b.n	8004e00 <BSP_OSPI_NOR_ConfigFlash+0xb8>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004dee:	f06f 0004 	mvn.w	r0, #4
 8004df2:	e7c0      	b.n	8004d76 <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8004df4:	2901      	cmp	r1, #1
 8004df6:	d1b9      	bne.n	8004d6c <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	d1f5      	bne.n	8004de8 <BSP_OSPI_NOR_ConfigFlash+0xa0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8004dfc:	f7ff fe42 	bl	8004a84 <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d1b8      	bne.n	8004d76 <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8004e04:	e7b2      	b.n	8004d6c <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8004e06:	f06f 0001 	mvn.w	r0, #1
 8004e0a:	e7b4      	b.n	8004d76 <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8004e0c:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8004e10:	e7b1      	b.n	8004d76 <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8004e12:	bf00      	nop
 8004e14:	240020cc 	.word	0x240020cc
 8004e18:	240020d4 	.word	0x240020d4

08004e1c <MX_OSPI_ClockConfig>:
{
 8004e1c:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
{
 8004e22:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004e24:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004e26:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004e28:	2320      	movs	r3, #32
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004e2a:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004e2c:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004e2e:	2305      	movs	r3, #5
 8004e30:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8004e34:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8004e36:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004e38:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004e3c:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004e3e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8004e42:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004e44:	f002 ffec 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
}
 8004e48:	b02f      	add	sp, #188	; 0xbc
 8004e4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004e50 <BSP_OSPI_NOR_Init>:
{
 8004e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e54:	460d      	mov	r5, r1
 8004e56:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	f040 8160 	bne.w	800511e <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8004e5e:	4eb1      	ldr	r6, [pc, #708]	; (8005124 <BSP_OSPI_NOR_Init+0x2d4>)
 8004e60:	7834      	ldrb	r4, [r6, #0]
 8004e62:	2c00      	cmp	r4, #0
 8004e64:	f040 8159 	bne.w	800511a <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8004e68:	4baf      	ldr	r3, [pc, #700]	; (8005128 <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004e6a:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004e6e:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004e72:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8004e74:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004e78:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004e7a:	48ac      	ldr	r0, [pc, #688]	; (800512c <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8004e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e80:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004e84:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004e88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004e8c:	9201      	str	r2, [sp, #4]
 8004e8e:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8004e90:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e96:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004e98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004e9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e9e:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8004ea0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ea4:	f042 0220 	orr.w	r2, r2, #32
 8004ea8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004eac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004eb0:	f002 0220 	and.w	r2, r2, #32
 8004eb4:	9202      	str	r2, [sp, #8]
 8004eb6:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8004eb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ebc:	f042 0202 	orr.w	r2, r2, #2
 8004ec0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004ec4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ec8:	f002 0202 	and.w	r2, r2, #2
 8004ecc:	9203      	str	r2, [sp, #12]
 8004ece:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8004ed0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004edc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ee0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004ee4:	9204      	str	r2, [sp, #16]
 8004ee6:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8004ee8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004eec:	f042 0208 	orr.w	r2, r2, #8
 8004ef0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004ef4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ef8:	f002 0208 	and.w	r2, r2, #8
 8004efc:	9205      	str	r2, [sp, #20]
 8004efe:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8004f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f04:	f042 0208 	orr.w	r2, r2, #8
 8004f08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004f0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f10:	f002 0208 	and.w	r2, r2, #8
 8004f14:	9206      	str	r2, [sp, #24]
 8004f16:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8004f18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f1c:	f042 0210 	orr.w	r2, r2, #16
 8004f20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004f24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f28:	f002 0210 	and.w	r2, r2, #16
 8004f2c:	9207      	str	r2, [sp, #28]
 8004f2e:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8004f30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f34:	f042 0208 	orr.w	r2, r2, #8
 8004f38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004f3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f40:	f002 0208 	and.w	r2, r2, #8
 8004f44:	9208      	str	r2, [sp, #32]
 8004f46:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8004f48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f4c:	f042 0208 	orr.w	r2, r2, #8
 8004f50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004f54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f58:	f002 0208 	and.w	r2, r2, #8
 8004f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8004f60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f64:	f042 0208 	orr.w	r2, r2, #8
 8004f68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004f6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f70:	f002 0208 	and.w	r2, r2, #8
 8004f74:	920a      	str	r2, [sp, #40]	; 0x28
 8004f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8004f78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f88:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004f8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004f90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004f94:	f042 0208 	orr.w	r2, r2, #8
 8004f98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9c:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8004fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004faa:	2340      	movs	r3, #64	; 0x40
 8004fac:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb0:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004fb2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb6:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004fba:	f000 fc13 	bl	80057e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004fbe:	a911      	add	r1, sp, #68	; 0x44
 8004fc0:	485b      	ldr	r0, [pc, #364]	; (8005130 <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004fc2:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004fc4:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8004fc6:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004fca:	f000 fc0b 	bl	80057e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004fd2:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004fd4:	2409      	movs	r4, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004fd6:	a911      	add	r1, sp, #68	; 0x44
 8004fd8:	4856      	ldr	r0, [pc, #344]	; (8005134 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004fda:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004fdc:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004fde:	f000 fc01 	bl	80057e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004fe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004fe6:	a911      	add	r1, sp, #68	; 0x44
 8004fe8:	4853      	ldr	r0, [pc, #332]	; (8005138 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004fea:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8004fec:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004fee:	f000 fbf9 	bl	80057e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004ff6:	a911      	add	r1, sp, #68	; 0x44
 8004ff8:	484f      	ldr	r0, [pc, #316]	; (8005138 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004ffa:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8004ffc:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004ffe:	f000 fbf1 	bl	80057e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8005002:	a911      	add	r1, sp, #68	; 0x44
 8005004:	484d      	ldr	r0, [pc, #308]	; (800513c <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8005006:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8005008:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 800500a:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 800500c:	f000 fbea 	bl	80057e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8005010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8005014:	a911      	add	r1, sp, #68	; 0x44
 8005016:	4848      	ldr	r0, [pc, #288]	; (8005138 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8005018:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 800501a:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 800501c:	f000 fbe2 	bl	80057e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8005020:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8005022:	a911      	add	r1, sp, #68	; 0x44
 8005024:	4844      	ldr	r0, [pc, #272]	; (8005138 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8005026:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8005028:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 800502c:	f000 fbda 	bl	80057e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8005030:	a911      	add	r1, sp, #68	; 0x44
 8005032:	4841      	ldr	r0, [pc, #260]	; (8005138 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8005034:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8005036:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 800503a:	f000 fbd3 	bl	80057e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 800503e:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8005042:	a911      	add	r1, sp, #68	; 0x44
 8005044:	4839      	ldr	r0, [pc, #228]	; (800512c <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8005046:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8005048:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 800504a:	f000 fbcb 	bl	80057e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 800504e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8005050:	a911      	add	r1, sp, #68	; 0x44
 8005052:	4839      	ldr	r0, [pc, #228]	; (8005138 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8005054:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8005056:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 800505a:	f000 fbc3 	bl	80057e4 <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800505e:	a811      	add	r0, sp, #68	; 0x44
 8005060:	f7ff f861 	bl	8004126 <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 8005066:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800506a:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800506e:	b10b      	cbz	r3, 8005074 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005070:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8005074:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8005076:	4832      	ldr	r0, [pc, #200]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8005078:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800507a:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 800507c:	786b      	ldrb	r3, [r5, #1]
 800507e:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8005080:	f7ff fecc 	bl	8004e1c <MX_OSPI_ClockConfig>
 8005084:	b120      	cbz	r0, 8005090 <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005086:	f06f 0003 	mvn.w	r0, #3
}
 800508a:	b01b      	add	sp, #108	; 0x6c
 800508c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8005090:	a90d      	add	r1, sp, #52	; 0x34
 8005092:	482b      	ldr	r0, [pc, #172]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
 8005094:	f7ff fd92 	bl	8004bbc <MX_OSPI_NOR_Init>
 8005098:	4602      	mov	r2, r0
 800509a:	2800      	cmp	r0, #0
 800509c:	d1f3      	bne.n	8005086 <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800509e:	4601      	mov	r1, r0
 80050a0:	4827      	ldr	r0, [pc, #156]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
 80050a2:	f7ff fabb 	bl	800461c <MX25LM51245G_ResetEnable>
 80050a6:	4602      	mov	r2, r0
 80050a8:	b110      	cbz	r0, 80050b0 <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050aa:	f06f 0004 	mvn.w	r0, #4
 80050ae:	e7ec      	b.n	800508a <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80050b0:	4601      	mov	r1, r0
 80050b2:	4823      	ldr	r0, [pc, #140]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
 80050b4:	f7ff fae1 	bl	800467a <MX25LM51245G_ResetMemory>
 80050b8:	4602      	mov	r2, r0
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d1f5      	bne.n	80050aa <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80050be:	2101      	movs	r1, #1
 80050c0:	481f      	ldr	r0, [pc, #124]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
 80050c2:	f7ff faab 	bl	800461c <MX25LM51245G_ResetEnable>
 80050c6:	4602      	mov	r2, r0
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d1ee      	bne.n	80050aa <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80050cc:	2101      	movs	r1, #1
 80050ce:	481c      	ldr	r0, [pc, #112]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
 80050d0:	f7ff fad3 	bl	800467a <MX25LM51245G_ResetMemory>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1e8      	bne.n	80050aa <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80050d8:	2201      	movs	r2, #1
 80050da:	4819      	ldr	r0, [pc, #100]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
 80050dc:	4611      	mov	r1, r2
 80050de:	f7ff fa9d 	bl	800461c <MX25LM51245G_ResetEnable>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d1e1      	bne.n	80050aa <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80050e6:	2201      	movs	r2, #1
 80050e8:	4815      	ldr	r0, [pc, #84]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
 80050ea:	4611      	mov	r1, r2
 80050ec:	f7ff fac5 	bl	800467a <MX25LM51245G_ResetMemory>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d1da      	bne.n	80050aa <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80050f4:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80050f6:	70b0      	strb	r0, [r6, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80050f8:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80050fa:	8033      	strh	r3, [r6, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80050fc:	f000 f99c 	bl	8005438 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005100:	78b2      	ldrb	r2, [r6, #2]
 8005102:	7871      	ldrb	r1, [r6, #1]
 8005104:	480e      	ldr	r0, [pc, #56]	; (8005140 <BSP_OSPI_NOR_Init+0x2f0>)
 8005106:	f7ff f827 	bl	8004158 <MX25LM51245G_AutoPollingMemReady>
 800510a:	2800      	cmp	r0, #0
 800510c:	d1cd      	bne.n	80050aa <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800510e:	786a      	ldrb	r2, [r5, #1]
 8005110:	7829      	ldrb	r1, [r5, #0]
 8005112:	f7ff fe19 	bl	8004d48 <BSP_OSPI_NOR_ConfigFlash>
 8005116:	2800      	cmp	r0, #0
 8005118:	d1c7      	bne.n	80050aa <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 800511a:	2000      	movs	r0, #0
 800511c:	e7b5      	b.n	800508a <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 800511e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005122:	e7b2      	b.n	800508a <BSP_OSPI_NOR_Init+0x23a>
 8005124:	240020cc 	.word	0x240020cc
 8005128:	58024400 	.word	0x58024400
 800512c:	58021800 	.word	0x58021800
 8005130:	58020400 	.word	0x58020400
 8005134:	58021400 	.word	0x58021400
 8005138:	58020c00 	.word	0x58020c00
 800513c:	58021000 	.word	0x58021000
 8005140:	240020d4 	.word	0x240020d4

08005144 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005148:	460c      	mov	r4, r1
 800514a:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800514c:	2800      	cmp	r0, #0
 800514e:	d163      	bne.n	8005218 <BSP_TS_Init+0xd4>
 8005150:	680b      	ldr	r3, [r1, #0]
 8005152:	1e5a      	subs	r2, r3, #1
 8005154:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8005158:	d25e      	bcs.n	8005218 <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800515a:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800515c:	1e51      	subs	r1, r2, #1
 800515e:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 8005162:	d259      	bcs.n	8005218 <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005164:	4293      	cmp	r3, r2
 8005166:	bf28      	it	cs
 8005168:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800516a:	68e2      	ldr	r2, [r4, #12]
 800516c:	429a      	cmp	r2, r3
 800516e:	d853      	bhi.n	8005218 <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8005170:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005172:	4d2b      	ldr	r5, [pc, #172]	; (8005220 <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8005174:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005176:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 8005178:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800517c:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 800517e:	4b29      	ldr	r3, [pc, #164]	; (8005224 <BSP_TS_Init+0xe0>)
 8005180:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005182:	4b29      	ldr	r3, [pc, #164]	; (8005228 <BSP_TS_Init+0xe4>)
 8005184:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005186:	4b29      	ldr	r3, [pc, #164]	; (800522c <BSP_TS_Init+0xe8>)
 8005188:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800518a:	4b29      	ldr	r3, [pc, #164]	; (8005230 <BSP_TS_Init+0xec>)
 800518c:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 800518e:	4b29      	ldr	r3, [pc, #164]	; (8005234 <BSP_TS_Init+0xf0>)
 8005190:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005192:	f7fe ff33 	bl	8003ffc <FT5336_RegisterBusIO>
 8005196:	b128      	cbz	r0, 80051a4 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 8005198:	f04f 35ff 	mov.w	r5, #4294967295
}
 800519c:	4628      	mov	r0, r5
 800519e:	b008      	add	sp, #32
 80051a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80051a4:	a901      	add	r1, sp, #4
 80051a6:	4628      	mov	r0, r5
 80051a8:	f7fe fe8e 	bl	8003ec8 <FT5336_ReadID>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d1f3      	bne.n	8005198 <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 80051b0:	9b01      	ldr	r3, [sp, #4]
 80051b2:	2b51      	cmp	r3, #81	; 0x51
 80051b4:	d1f0      	bne.n	8005198 <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80051b8:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 80051ba:	4f20      	ldr	r7, [pc, #128]	; (800523c <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80051bc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8005244 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 80051c0:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80051c2:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4798      	blx	r3
 80051ca:	4605      	mov	r5, r0
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d1e3      	bne.n	8005198 <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80051d0:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80051d2:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80051d4:	4e1a      	ldr	r6, [pc, #104]	; (8005240 <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80051d6:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80051d8:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80051da:	6863      	ldr	r3, [r4, #4]
 80051dc:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80051de:	68a3      	ldr	r3, [r4, #8]
 80051e0:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80051e2:	68e3      	ldr	r3, [r4, #12]
 80051e4:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80051e6:	f8d8 3000 	ldr.w	r3, [r8]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	4798      	blx	r3
 80051ee:	2800      	cmp	r0, #0
 80051f0:	db0f      	blt.n	8005212 <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80051f2:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80051f4:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80051f6:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80051f8:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80051fa:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80051fc:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005202:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005204:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005206:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005208:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800520a:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800520c:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8005210:	e7c4      	b.n	800519c <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005212:	f06f 0504 	mvn.w	r5, #4
 8005216:	e7c1      	b.n	800519c <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 8005218:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800521c:	e7be      	b.n	800519c <BSP_TS_Init+0x58>
 800521e:	bf00      	nop
 8005220:	24002134 	.word	0x24002134
 8005224:	08004771 	.word	0x08004771
 8005228:	080046d9 	.word	0x080046d9
 800522c:	08004a4d 	.word	0x08004a4d
 8005230:	08004a19 	.word	0x08004a19
 8005234:	08004a81 	.word	0x08004a81
 8005238:	2400000c 	.word	0x2400000c
 800523c:	2400215c 	.word	0x2400215c
 8005240:	24002160 	.word	0x24002160
 8005244:	24002188 	.word	0x24002188

08005248 <BSP_TS_GetState>:
{
 8005248:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800524c:	460d      	mov	r5, r1
  if(Instance >= TS_INSTANCES_NBR)
 800524e:	2800      	cmp	r0, #0
 8005250:	d153      	bne.n	80052fa <BSP_TS_GetState+0xb2>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005252:	4b2b      	ldr	r3, [pc, #172]	; (8005300 <BSP_TS_GetState+0xb8>)
 8005254:	a901      	add	r1, sp, #4
 8005256:	4a2b      	ldr	r2, [pc, #172]	; (8005304 <BSP_TS_GetState+0xbc>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6810      	ldr	r0, [r2, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	4798      	blx	r3
 8005260:	2800      	cmp	r0, #0
 8005262:	db47      	blt.n	80052f4 <BSP_TS_GetState+0xac>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005264:	4928      	ldr	r1, [pc, #160]	; (8005308 <BSP_TS_GetState+0xc0>)
    else if(state.TouchDetected != 0U)
 8005266:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005268:	698f      	ldr	r7, [r1, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800526a:	6a0e      	ldr	r6, [r1, #32]
    else if(state.TouchDetected != 0U)
 800526c:	2800      	cmp	r0, #0
 800526e:	d03d      	beq.n	80052ec <BSP_TS_GetState+0xa4>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005270:	f8d1 e008 	ldr.w	lr, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8005274:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005278:	f01e 0f08 	tst.w	lr, #8
      y_oriented = state.TouchY;
 800527c:	e9dd c302 	ldrd	ip, r3, [sp, #8]
        x_oriented = state.TouchY;
 8005280:	bf19      	ittee	ne
 8005282:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8005284:	4664      	movne	r4, ip
      y_oriented = state.TouchY;
 8005286:	461c      	moveq	r4, r3
      x_oriented = state.TouchX;
 8005288:	4662      	moveq	r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800528a:	f01e 0f02 	tst.w	lr, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800528e:	bf1c      	itt	ne
 8005290:	f108 32ff 	addne.w	r2, r8, #4294967295
 8005294:	eba2 020c 	subne.w	r2, r2, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8005298:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800529c:	f01e 0f04 	tst.w	lr, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80052a0:	bf18      	it	ne
 80052a2:	ebac 0403 	subne.w	r4, ip, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80052a6:	680b      	ldr	r3, [r1, #0]
 80052a8:	4353      	muls	r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80052aa:	684a      	ldr	r2, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80052ac:	6028      	str	r0, [r5, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80052ae:	4362      	muls	r2, r4
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80052b0:	68cc      	ldr	r4, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80052b2:	fbb3 f3f8 	udiv	r3, r3, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80052b6:	fbb2 f2fc 	udiv	r2, r2, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80052ba:	42bb      	cmp	r3, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80052bc:	606b      	str	r3, [r5, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80052be:	60aa      	str	r2, [r5, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80052c0:	bf8c      	ite	hi
 80052c2:	eba3 0c07 	subhi.w	ip, r3, r7
 80052c6:	eba7 0c03 	subls.w	ip, r7, r3
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80052ca:	42b2      	cmp	r2, r6
 80052cc:	bf8c      	ite	hi
 80052ce:	1b90      	subhi	r0, r2, r6
 80052d0:	1ab0      	subls	r0, r6, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80052d2:	4564      	cmp	r4, ip
 80052d4:	d301      	bcc.n	80052da <BSP_TS_GetState+0x92>
 80052d6:	4284      	cmp	r4, r0
 80052d8:	d205      	bcs.n	80052e6 <BSP_TS_GetState+0x9e>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80052da:	618b      	str	r3, [r1, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80052dc:	620a      	str	r2, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80052de:	2000      	movs	r0, #0
}
 80052e0:	b004      	add	sp, #16
 80052e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80052e6:	e9c5 7601 	strd	r7, r6, [r5, #4]
 80052ea:	e7f8      	b.n	80052de <BSP_TS_GetState+0x96>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80052ec:	e9c5 0700 	strd	r0, r7, [r5]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80052f0:	60ae      	str	r6, [r5, #8]
 80052f2:	e7f5      	b.n	80052e0 <BSP_TS_GetState+0x98>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80052f4:	f06f 0004 	mvn.w	r0, #4
 80052f8:	e7f2      	b.n	80052e0 <BSP_TS_GetState+0x98>
    ret = BSP_ERROR_WRONG_PARAM;
 80052fa:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80052fe:	e7ef      	b.n	80052e0 <BSP_TS_GetState+0x98>
 8005300:	24002188 	.word	0x24002188
 8005304:	2400215c 	.word	0x2400215c
 8005308:	24002160 	.word	0x24002160

0800530c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800530c:	4a22      	ldr	r2, [pc, #136]	; (8005398 <SystemInit+0x8c>)
 800530e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005312:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005316:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800531a:	4a20      	ldr	r2, [pc, #128]	; (800539c <SystemInit+0x90>)
 800531c:	6813      	ldr	r3, [r2, #0]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	2b06      	cmp	r3, #6
 8005324:	d805      	bhi.n	8005332 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	f023 030f 	bic.w	r3, r3, #15
 800532c:	f043 0307 	orr.w	r3, r3, #7
 8005330:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005332:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <SystemInit+0x94>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800533c:	2200      	movs	r2, #0
 800533e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005340:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <SystemInit+0x98>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005346:	4915      	ldr	r1, [pc, #84]	; (800539c <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 8005348:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800534a:	680a      	ldr	r2, [r1, #0]
 800534c:	0712      	lsls	r2, r2, #28
 800534e:	d505      	bpl.n	800535c <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005350:	680a      	ldr	r2, [r1, #0]
 8005352:	f022 020f 	bic.w	r2, r2, #15
 8005356:	f042 0207 	orr.w	r2, r2, #7
 800535a:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800535c:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800535e:	4912      	ldr	r1, [pc, #72]	; (80053a8 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8005360:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005362:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005364:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005366:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005368:	4910      	ldr	r1, [pc, #64]	; (80053ac <SystemInit+0xa0>)
 800536a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800536c:	4910      	ldr	r1, [pc, #64]	; (80053b0 <SystemInit+0xa4>)
 800536e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005372:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005374:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005376:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800537a:	6819      	ldr	r1, [r3, #0]
 800537c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005380:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005382:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005384:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <SystemInit+0xa8>)
 800538a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800538c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005390:	4b01      	ldr	r3, [pc, #4]	; (8005398 <SystemInit+0x8c>)
 8005392:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	e000ed00 	.word	0xe000ed00
 800539c:	52002000 	.word	0x52002000
 80053a0:	58024400 	.word	0x58024400
 80053a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80053a8:	02020200 	.word	0x02020200
 80053ac:	01ff0000 	.word	0x01ff0000
 80053b0:	01010280 	.word	0x01010280
 80053b4:	52004000 	.word	0x52004000

080053b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053b8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053ba:	2003      	movs	r0, #3
 80053bc:	f000 f84e 	bl	800545c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053c0:	f002 fa08 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 80053c4:	490f      	ldr	r1, [pc, #60]	; (8005404 <HAL_Init+0x4c>)
 80053c6:	4a10      	ldr	r2, [pc, #64]	; (8005408 <HAL_Init+0x50>)
 80053c8:	698b      	ldr	r3, [r1, #24]
 80053ca:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80053ce:	5cd3      	ldrb	r3, [r2, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053d6:	698b      	ldr	r3, [r1, #24]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	5cd3      	ldrb	r3, [r2, r3]
 80053de:	4a0b      	ldr	r2, [pc, #44]	; (800540c <HAL_Init+0x54>)
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	fa20 f303 	lsr.w	r3, r0, r3
 80053e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <HAL_Init+0x58>)
 80053ec:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7fb fdc6 	bl	8000f80 <HAL_InitTick>
 80053f4:	4604      	mov	r4, r0
 80053f6:	b918      	cbnz	r0, 8005400 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80053f8:	f7fb fad0 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80053fc:	4620      	mov	r0, r4
 80053fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005400:	2401      	movs	r4, #1
 8005402:	e7fb      	b.n	80053fc <HAL_Init+0x44>
 8005404:	58024400 	.word	0x58024400
 8005408:	0801c8a4 	.word	0x0801c8a4
 800540c:	24000040 	.word	0x24000040
 8005410:	2400003c 	.word	0x2400003c

08005414 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005414:	4a03      	ldr	r2, [pc, #12]	; (8005424 <HAL_IncTick+0x10>)
 8005416:	4b04      	ldr	r3, [pc, #16]	; (8005428 <HAL_IncTick+0x14>)
 8005418:	6811      	ldr	r1, [r2, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	440b      	add	r3, r1
 800541e:	6013      	str	r3, [r2, #0]
}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	2400218c 	.word	0x2400218c
 8005428:	24000044 	.word	0x24000044

0800542c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800542c:	4b01      	ldr	r3, [pc, #4]	; (8005434 <HAL_GetTick+0x8>)
 800542e:	6818      	ldr	r0, [r3, #0]
}
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2400218c 	.word	0x2400218c

08005438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800543c:	f7ff fff6 	bl	800542c <HAL_GetTick>
 8005440:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005442:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005444:	bf1e      	ittt	ne
 8005446:	4b04      	ldrne	r3, [pc, #16]	; (8005458 <HAL_Delay+0x20>)
 8005448:	781b      	ldrbne	r3, [r3, #0]
 800544a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800544c:	f7ff ffee 	bl	800542c <HAL_GetTick>
 8005450:	1b43      	subs	r3, r0, r5
 8005452:	42a3      	cmp	r3, r4
 8005454:	d3fa      	bcc.n	800544c <HAL_Delay+0x14>
  {
  }
}
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	24000044 	.word	0x24000044

0800545c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800545c:	4907      	ldr	r1, [pc, #28]	; (800547c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800545e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005460:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005462:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800546a:	0412      	lsls	r2, r2, #16
 800546c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800546e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005478:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800547a:	4770      	bx	lr
 800547c:	e000ed00 	.word	0xe000ed00

08005480 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005480:	4b16      	ldr	r3, [pc, #88]	; (80054dc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005482:	b530      	push	{r4, r5, lr}
 8005484:	68dc      	ldr	r4, [r3, #12]
 8005486:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800548a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005490:	2d04      	cmp	r5, #4
 8005492:	bf28      	it	cs
 8005494:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005496:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005498:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800549c:	bf8c      	ite	hi
 800549e:	3c03      	subhi	r4, #3
 80054a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80054a6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054a8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054ac:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b4:	fa01 f104 	lsl.w	r1, r1, r4
 80054b8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80054c0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80054c2:	db06      	blt.n	80054d2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054c4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80054c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80054cc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80054d0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d2:	f000 000f 	and.w	r0, r0, #15
 80054d6:	4a02      	ldr	r2, [pc, #8]	; (80054e0 <HAL_NVIC_SetPriority+0x60>)
 80054d8:	5413      	strb	r3, [r2, r0]
 80054da:	e7f9      	b.n	80054d0 <HAL_NVIC_SetPriority+0x50>
 80054dc:	e000ed00 	.word	0xe000ed00
 80054e0:	e000ed14 	.word	0xe000ed14

080054e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80054e4:	2800      	cmp	r0, #0
 80054e6:	db08      	blt.n	80054fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054e8:	2301      	movs	r3, #1
 80054ea:	0942      	lsrs	r2, r0, #5
 80054ec:	f000 001f 	and.w	r0, r0, #31
 80054f0:	fa03 f000 	lsl.w	r0, r3, r0
 80054f4:	4b01      	ldr	r3, [pc, #4]	; (80054fc <HAL_NVIC_EnableIRQ+0x18>)
 80054f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80054fa:	4770      	bx	lr
 80054fc:	e000e100 	.word	0xe000e100

08005500 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005500:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005504:	4b04      	ldr	r3, [pc, #16]	; (8005518 <HAL_MPU_Disable+0x18>)
 8005506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005508:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000ed00 	.word	0xe000ed00

0800551c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <HAL_MPU_Enable+0x1c>)
 800551e:	f040 0001 	orr.w	r0, r0, #1
 8005522:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005528:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800552e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005532:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005536:	4770      	bx	lr
 8005538:	e000ed00 	.word	0xe000ed00

0800553c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800553c:	7843      	ldrb	r3, [r0, #1]
 800553e:	4a14      	ldr	r2, [pc, #80]	; (8005590 <HAL_MPU_ConfigRegion+0x54>)
{
 8005540:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8005542:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8005546:	7801      	ldrb	r1, [r0, #0]
 8005548:	b1e9      	cbz	r1, 8005586 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800554a:	6843      	ldr	r3, [r0, #4]
 800554c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005550:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005552:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005554:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005556:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800555a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800555c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800555e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005562:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005564:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005568:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800556a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800556e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005570:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005574:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005576:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800557a:	7a01      	ldrb	r1, [r0, #8]
 800557c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005580:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005584:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005586:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800558a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800558e:	e7f9      	b.n	8005584 <HAL_MPU_ConfigRegion+0x48>
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005594:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005596:	4604      	mov	r4, r0
 8005598:	b908      	cbnz	r0, 800559e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800559a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800559c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800559e:	7f43      	ldrb	r3, [r0, #29]
 80055a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055a4:	b913      	cbnz	r3, 80055ac <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80055a6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80055a8:	f7fb fa10 	bl	80009cc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80055ac:	2302      	movs	r3, #2
 80055ae:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80055b0:	7923      	ldrb	r3, [r4, #4]
 80055b2:	b9e3      	cbnz	r3, 80055ee <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <HAL_CRC_Init+0x70>)
 80055b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	f022 0218 	bic.w	r2, r2, #24
 80055c0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80055c2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80055c4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80055c6:	b9d2      	cbnz	r2, 80055fe <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80055c8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80055cc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80055ce:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	6961      	ldr	r1, [r4, #20]
 80055d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055d8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80055da:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80055dc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055e4:	430a      	orrs	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80055e8:	2301      	movs	r3, #1
 80055ea:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80055ec:	e7d6      	b.n	800559c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80055ee:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 f808 	bl	8005608 <HAL_CRCEx_Polynomial_Set>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d0e2      	beq.n	80055c2 <HAL_CRC_Init+0x2e>
 80055fc:	e7cd      	b.n	800559a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80055fe:	6922      	ldr	r2, [r4, #16]
 8005600:	e7e4      	b.n	80055cc <HAL_CRC_Init+0x38>
 8005602:	bf00      	nop
 8005604:	04c11db7 	.word	0x04c11db7

08005608 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005608:	231f      	movs	r3, #31
{
 800560a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800560c:	3b01      	subs	r3, #1
 800560e:	d31c      	bcc.n	800564a <HAL_CRCEx_Polynomial_Set+0x42>
 8005610:	fa21 f403 	lsr.w	r4, r1, r3
 8005614:	07e4      	lsls	r4, r4, #31
 8005616:	d5f9      	bpl.n	800560c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8005618:	2a10      	cmp	r2, #16
 800561a:	d012      	beq.n	8005642 <HAL_CRCEx_Polynomial_Set+0x3a>
 800561c:	d804      	bhi.n	8005628 <HAL_CRCEx_Polynomial_Set+0x20>
 800561e:	b13a      	cbz	r2, 8005630 <HAL_CRCEx_Polynomial_Set+0x28>
 8005620:	2a08      	cmp	r2, #8
 8005622:	d010      	beq.n	8005646 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8005624:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8005626:	e00b      	b.n	8005640 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8005628:	2a18      	cmp	r2, #24
 800562a:	d1fb      	bne.n	8005624 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 800562c:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800562e:	d8f9      	bhi.n	8005624 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005630:	6800      	ldr	r0, [r0, #0]
 8005632:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005634:	6883      	ldr	r3, [r0, #8]
 8005636:	f023 0318 	bic.w	r3, r3, #24
 800563a:	431a      	orrs	r2, r3
 800563c:	6082      	str	r2, [r0, #8]
 800563e:	2000      	movs	r0, #0
}
 8005640:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8005642:	2b07      	cmp	r3, #7
 8005644:	e7f3      	b.n	800562e <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005646:	2b0f      	cmp	r3, #15
 8005648:	e7f1      	b.n	800562e <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800564a:	2a00      	cmp	r2, #0
 800564c:	d1ea      	bne.n	8005624 <HAL_CRCEx_Polynomial_Set+0x1c>
 800564e:	e7ef      	b.n	8005630 <HAL_CRCEx_Polynomial_Set+0x28>

08005650 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005650:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005652:	4604      	mov	r4, r0
 8005654:	2800      	cmp	r0, #0
 8005656:	d036      	beq.n	80056c6 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005658:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800565c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005660:	b91b      	cbnz	r3, 800566a <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005662:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005666:	f7fb f9c9 	bl	80009fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800566a:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800566c:	69e0      	ldr	r0, [r4, #28]
 800566e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005670:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005678:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800567a:	6819      	ldr	r1, [r3, #0]
 800567c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8005680:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005688:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800568a:	68a2      	ldr	r2, [r4, #8]
 800568c:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8005690:	4302      	orrs	r2, r0
 8005692:	f021 0101 	bic.w	r1, r1, #1
 8005696:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005698:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800569a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800569c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800569e:	0c12      	lsrs	r2, r2, #16
 80056a0:	0412      	lsls	r2, r2, #16
 80056a2:	430a      	orrs	r2, r1
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80056a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056a8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80056ac:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80056b0:	0552      	lsls	r2, r2, #21
 80056b2:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80056b6:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80056b8:	430a      	orrs	r2, r1
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80056bc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80056be:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80056c0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80056c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80056c6:	2001      	movs	r0, #1
 80056c8:	e7fc      	b.n	80056c4 <HAL_DMA2D_Init+0x74>

080056ca <HAL_DMA2D_LineEventCallback>:
 80056ca:	4770      	bx	lr

080056cc <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80056cc:	4770      	bx	lr

080056ce <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80056ce:	6803      	ldr	r3, [r0, #0]
{
 80056d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80056d2:	685e      	ldr	r6, [r3, #4]
{
 80056d4:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80056d6:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056d8:	07f2      	lsls	r2, r6, #31
 80056da:	d514      	bpl.n	8005706 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80056dc:	05e9      	lsls	r1, r5, #23
 80056de:	d512      	bpl.n	8005706 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056e6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056e8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80056f0:	2201      	movs	r2, #1
 80056f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056f4:	2304      	movs	r3, #4
 80056f6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056fa:	2300      	movs	r3, #0
 80056fc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8005700:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005702:	b103      	cbz	r3, 8005706 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005704:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005706:	06b2      	lsls	r2, r6, #26
 8005708:	d516      	bpl.n	8005738 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800570a:	04ab      	lsls	r3, r5, #18
 800570c:	d514      	bpl.n	8005738 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005716:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005718:	2220      	movs	r2, #32
 800571a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800571c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800571e:	f043 0302 	orr.w	r3, r3, #2
 8005722:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005724:	2304      	movs	r3, #4
 8005726:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800572a:	2300      	movs	r3, #0
 800572c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8005730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005732:	b10b      	cbz	r3, 8005738 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005734:	4620      	mov	r0, r4
 8005736:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005738:	0730      	lsls	r0, r6, #28
 800573a:	d516      	bpl.n	800576a <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800573c:	0529      	lsls	r1, r5, #20
 800573e:	d514      	bpl.n	800576a <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005748:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800574a:	2208      	movs	r2, #8
 800574c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800574e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005750:	f043 0304 	orr.w	r3, r3, #4
 8005754:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005756:	2304      	movs	r3, #4
 8005758:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800575c:	2300      	movs	r3, #0
 800575e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8005762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005764:	b10b      	cbz	r3, 800576a <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005766:	4620      	mov	r0, r4
 8005768:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800576a:	0772      	lsls	r2, r6, #29
 800576c:	d50b      	bpl.n	8005786 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800576e:	056b      	lsls	r3, r5, #21
 8005770:	d509      	bpl.n	8005786 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005772:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005774:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800577e:	2204      	movs	r2, #4
 8005780:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005782:	f7ff ffa2 	bl	80056ca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005786:	07b0      	lsls	r0, r6, #30
 8005788:	d514      	bpl.n	80057b4 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800578a:	05a9      	lsls	r1, r5, #22
 800578c:	d512      	bpl.n	80057b4 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005798:	2202      	movs	r2, #2
 800579a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800579c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800579e:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057a6:	2300      	movs	r3, #0
 80057a8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80057ac:	6a23      	ldr	r3, [r4, #32]
 80057ae:	b10b      	cbz	r3, 80057b4 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80057b0:	4620      	mov	r0, r4
 80057b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80057b4:	06f2      	lsls	r2, r6, #27
 80057b6:	d513      	bpl.n	80057e0 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80057b8:	04eb      	lsls	r3, r5, #19
 80057ba:	d511      	bpl.n	80057e0 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80057bc:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80057be:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80057c8:	2210      	movs	r2, #16
 80057ca:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80057cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057ce:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80057d6:	2300      	movs	r3, #0
 80057d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80057dc:	f7ff ff76 	bl	80056cc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080057e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80057e8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ea:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80059ac <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057ee:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057f2:	680a      	ldr	r2, [r1, #0]
 80057f4:	fa32 f503 	lsrs.w	r5, r2, r3
 80057f8:	d102      	bne.n	8005800 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80057fa:	b003      	add	sp, #12
 80057fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005800:	f04f 0e01 	mov.w	lr, #1
 8005804:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8005808:	ea1e 0202 	ands.w	r2, lr, r2
 800580c:	f000 80b9 	beq.w	8005982 <HAL_GPIO_Init+0x19e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005810:	684e      	ldr	r6, [r1, #4]
 8005812:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005816:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800581a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800581e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005822:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005824:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005828:	2f01      	cmp	r7, #1
 800582a:	d834      	bhi.n	8005896 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800582c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800582e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005832:	68cf      	ldr	r7, [r1, #12]
 8005834:	fa07 f708 	lsl.w	r7, r7, r8
 8005838:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800583c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800583e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005840:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005844:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8005848:	409f      	lsls	r7, r3
 800584a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800584e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8005850:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005852:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005854:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005858:	688f      	ldr	r7, [r1, #8]
 800585a:	fa07 f708 	lsl.w	r7, r7, r8
 800585e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8005862:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005864:	d119      	bne.n	800589a <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8005866:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800586a:	f003 0b07 	and.w	fp, r3, #7
 800586e:	f04f 0e0f 	mov.w	lr, #15
 8005872:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8005876:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800587a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800587e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8005882:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005886:	690f      	ldr	r7, [r1, #16]
 8005888:	fa07 f70b 	lsl.w	r7, r7, fp
 800588c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005890:	f8ca 7020 	str.w	r7, [sl, #32]
 8005894:	e001      	b.n	800589a <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005896:	2d03      	cmp	r5, #3
 8005898:	d1da      	bne.n	8005850 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800589a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800589c:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058a0:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058a4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058a8:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 80058ac:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058ae:	d068      	beq.n	8005982 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058b0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80058b4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b8:	f003 0c03 	and.w	ip, r3, #3
 80058bc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c0:	f045 0502 	orr.w	r5, r5, #2
 80058c4:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058cc:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 80058d0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80058d4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80058d8:	f005 0502 	and.w	r5, r5, #2
 80058dc:	9501      	str	r5, [sp, #4]
 80058de:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058e0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 80058e4:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058e8:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058ec:	4d2e      	ldr	r5, [pc, #184]	; (80059a8 <HAL_GPIO_Init+0x1c4>)
 80058ee:	42a8      	cmp	r0, r5
 80058f0:	d049      	beq.n	8005986 <HAL_GPIO_Init+0x1a2>
 80058f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058f6:	42a8      	cmp	r0, r5
 80058f8:	d047      	beq.n	800598a <HAL_GPIO_Init+0x1a6>
 80058fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058fe:	42a8      	cmp	r0, r5
 8005900:	d045      	beq.n	800598e <HAL_GPIO_Init+0x1aa>
 8005902:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005906:	42a8      	cmp	r0, r5
 8005908:	d043      	beq.n	8005992 <HAL_GPIO_Init+0x1ae>
 800590a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800590e:	42a8      	cmp	r0, r5
 8005910:	d041      	beq.n	8005996 <HAL_GPIO_Init+0x1b2>
 8005912:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005916:	42a8      	cmp	r0, r5
 8005918:	d03f      	beq.n	800599a <HAL_GPIO_Init+0x1b6>
 800591a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800591e:	42a8      	cmp	r0, r5
 8005920:	d03d      	beq.n	800599e <HAL_GPIO_Init+0x1ba>
 8005922:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005926:	42a8      	cmp	r0, r5
 8005928:	d03b      	beq.n	80059a2 <HAL_GPIO_Init+0x1be>
 800592a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800592e:	42a8      	cmp	r0, r5
 8005930:	bf0c      	ite	eq
 8005932:	2509      	moveq	r5, #9
 8005934:	250a      	movne	r5, #10
 8005936:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800593a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800593e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005942:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8005944:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8005948:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800594a:	bf0c      	ite	eq
 800594c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800594e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005950:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8005954:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8005956:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8005958:	bf0c      	ite	eq
 800595a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800595c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800595e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8005962:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005964:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8005968:	bf0c      	ite	eq
 800596a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800596c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800596e:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8005970:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8005974:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8005978:	bf54      	ite	pl
 800597a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800597c:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800597e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8005982:	3301      	adds	r3, #1
 8005984:	e735      	b.n	80057f2 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005986:	2500      	movs	r5, #0
 8005988:	e7d5      	b.n	8005936 <HAL_GPIO_Init+0x152>
 800598a:	2501      	movs	r5, #1
 800598c:	e7d3      	b.n	8005936 <HAL_GPIO_Init+0x152>
 800598e:	2502      	movs	r5, #2
 8005990:	e7d1      	b.n	8005936 <HAL_GPIO_Init+0x152>
 8005992:	2503      	movs	r5, #3
 8005994:	e7cf      	b.n	8005936 <HAL_GPIO_Init+0x152>
 8005996:	2504      	movs	r5, #4
 8005998:	e7cd      	b.n	8005936 <HAL_GPIO_Init+0x152>
 800599a:	2505      	movs	r5, #5
 800599c:	e7cb      	b.n	8005936 <HAL_GPIO_Init+0x152>
 800599e:	2506      	movs	r5, #6
 80059a0:	e7c9      	b.n	8005936 <HAL_GPIO_Init+0x152>
 80059a2:	2507      	movs	r5, #7
 80059a4:	e7c7      	b.n	8005936 <HAL_GPIO_Init+0x152>
 80059a6:	bf00      	nop
 80059a8:	58020000 	.word	0x58020000
 80059ac:	58024400 	.word	0x58024400

080059b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80059b4:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80059b6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8005ad8 <HAL_GPIO_DeInit+0x128>
 80059ba:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8005adc <HAL_GPIO_DeInit+0x12c>
 80059be:	f8df a120 	ldr.w	sl, [pc, #288]	; 8005ae0 <HAL_GPIO_DeInit+0x130>
 80059c2:	f8df b120 	ldr.w	fp, [pc, #288]	; 8005ae4 <HAL_GPIO_DeInit+0x134>
  while ((GPIO_Pin >> position) != 0x00U)
 80059c6:	fa31 f302 	lsrs.w	r3, r1, r2
 80059ca:	d101      	bne.n	80059d0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80059d0:	2301      	movs	r3, #1
 80059d2:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 80059d6:	ea1c 0601 	ands.w	r6, ip, r1
 80059da:	d069      	beq.n	8005ab0 <HAL_GPIO_DeInit+0x100>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80059dc:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80059e0:	f002 0703 	and.w	r7, r2, #3
 80059e4:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80059e6:	4b3b      	ldr	r3, [pc, #236]	; (8005ad4 <HAL_GPIO_DeInit+0x124>)
 80059e8:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80059ec:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80059ee:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80059f0:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 80059f4:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80059f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059fc:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005a00:	d058      	beq.n	8005ab4 <HAL_GPIO_DeInit+0x104>
 8005a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a06:	4298      	cmp	r0, r3
 8005a08:	d056      	beq.n	8005ab8 <HAL_GPIO_DeInit+0x108>
 8005a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0e:	4298      	cmp	r0, r3
 8005a10:	d054      	beq.n	8005abc <HAL_GPIO_DeInit+0x10c>
 8005a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a16:	4298      	cmp	r0, r3
 8005a18:	d052      	beq.n	8005ac0 <HAL_GPIO_DeInit+0x110>
 8005a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1e:	4298      	cmp	r0, r3
 8005a20:	d050      	beq.n	8005ac4 <HAL_GPIO_DeInit+0x114>
 8005a22:	4540      	cmp	r0, r8
 8005a24:	d050      	beq.n	8005ac8 <HAL_GPIO_DeInit+0x118>
 8005a26:	4548      	cmp	r0, r9
 8005a28:	d050      	beq.n	8005acc <HAL_GPIO_DeInit+0x11c>
 8005a2a:	4550      	cmp	r0, sl
 8005a2c:	d050      	beq.n	8005ad0 <HAL_GPIO_DeInit+0x120>
 8005a2e:	4558      	cmp	r0, fp
 8005a30:	bf0c      	ite	eq
 8005a32:	2309      	moveq	r3, #9
 8005a34:	230a      	movne	r3, #10
 8005a36:	40bb      	lsls	r3, r7
 8005a38:	4573      	cmp	r3, lr
 8005a3a:	d119      	bne.n	8005a70 <HAL_GPIO_DeInit+0xc0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a40:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8005a44:	ea27 0706 	bic.w	r7, r7, r6
 8005a48:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005a4c:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8005a50:	ea27 0706 	bic.w	r7, r7, r6
 8005a54:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8005a58:	685f      	ldr	r7, [r3, #4]
 8005a5a:	ea27 0706 	bic.w	r7, r7, r6
 8005a5e:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005a60:	681f      	ldr	r7, [r3, #0]
 8005a62:	ea27 0606 	bic.w	r6, r7, r6
 8005a66:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a68:	68a3      	ldr	r3, [r4, #8]
 8005a6a:	ea23 0305 	bic.w	r3, r3, r5
 8005a6e:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005a70:	2503      	movs	r5, #3
 8005a72:	0053      	lsls	r3, r2, #1
 8005a74:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005a76:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005a7a:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005a7e:	260f      	movs	r6, #15
 8005a80:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005a82:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005a84:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005a86:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005a88:	fa22 f405 	lsr.w	r4, r2, r5
 8005a8c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005a90:	6a25      	ldr	r5, [r4, #32]
 8005a92:	ea25 0606 	bic.w	r6, r5, r6
 8005a96:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a98:	68c4      	ldr	r4, [r0, #12]
 8005a9a:	ea24 0403 	bic.w	r4, r4, r3
 8005a9e:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aa0:	6844      	ldr	r4, [r0, #4]
 8005aa2:	ea24 040c 	bic.w	r4, r4, ip
 8005aa6:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005aa8:	6884      	ldr	r4, [r0, #8]
 8005aaa:	ea24 0303 	bic.w	r3, r4, r3
 8005aae:	6083      	str	r3, [r0, #8]
    position++;
 8005ab0:	3201      	adds	r2, #1
 8005ab2:	e788      	b.n	80059c6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e7be      	b.n	8005a36 <HAL_GPIO_DeInit+0x86>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e7bc      	b.n	8005a36 <HAL_GPIO_DeInit+0x86>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e7ba      	b.n	8005a36 <HAL_GPIO_DeInit+0x86>
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e7b8      	b.n	8005a36 <HAL_GPIO_DeInit+0x86>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	e7b6      	b.n	8005a36 <HAL_GPIO_DeInit+0x86>
 8005ac8:	2305      	movs	r3, #5
 8005aca:	e7b4      	b.n	8005a36 <HAL_GPIO_DeInit+0x86>
 8005acc:	2306      	movs	r3, #6
 8005ace:	e7b2      	b.n	8005a36 <HAL_GPIO_DeInit+0x86>
 8005ad0:	2307      	movs	r3, #7
 8005ad2:	e7b0      	b.n	8005a36 <HAL_GPIO_DeInit+0x86>
 8005ad4:	58020000 	.word	0x58020000
 8005ad8:	58021400 	.word	0x58021400
 8005adc:	58021800 	.word	0x58021800
 8005ae0:	58021c00 	.word	0x58021c00
 8005ae4:	58022400 	.word	0x58022400

08005ae8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ae8:	6903      	ldr	r3, [r0, #16]
 8005aea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005aec:	bf14      	ite	ne
 8005aee:	2001      	movne	r0, #1
 8005af0:	2000      	moveq	r0, #0
 8005af2:	4770      	bx	lr

08005af4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005af4:	b10a      	cbz	r2, 8005afa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005af6:	6181      	str	r1, [r0, #24]
  }
}
 8005af8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005afa:	0409      	lsls	r1, r1, #16
 8005afc:	e7fb      	b.n	8005af6 <HAL_GPIO_WritePin+0x2>

08005afe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005afe:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b00:	ea01 0203 	and.w	r2, r1, r3
 8005b04:	ea21 0103 	bic.w	r1, r1, r3
 8005b08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b0c:	6181      	str	r1, [r0, #24]
}
 8005b0e:	4770      	bx	lr

08005b10 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b10:	6803      	ldr	r3, [r0, #0]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	0791      	lsls	r1, r2, #30
 8005b16:	d501      	bpl.n	8005b1c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b18:	2200      	movs	r2, #0
 8005b1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	07d2      	lsls	r2, r2, #31
 8005b20:	d403      	bmi.n	8005b2a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	619a      	str	r2, [r3, #24]
  }
}
 8005b2a:	4770      	bx	lr

08005b2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b2c:	b530      	push	{r4, r5, lr}
 8005b2e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b30:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b34:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b36:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b38:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b3e:	4a05      	ldr	r2, [pc, #20]	; (8005b54 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b40:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b42:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b4a:	ea20 0002 	bic.w	r0, r0, r2
 8005b4e:	4303      	orrs	r3, r0
 8005b50:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b52:	bd30      	pop	{r4, r5, pc}
 8005b54:	03ff63ff 	.word	0x03ff63ff

08005b58 <I2C_IsErrorOccurred>:
{
 8005b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b5c:	6803      	ldr	r3, [r0, #0]
{
 8005b5e:	4605      	mov	r5, r0
 8005b60:	4688      	mov	r8, r1
 8005b62:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b64:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b66:	f014 0410 	ands.w	r4, r4, #16
 8005b6a:	d079      	beq.n	8005c60 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b6c:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8005b70:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b74:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	0694      	lsls	r4, r2, #26
 8005b7c:	d436      	bmi.n	8005bec <I2C_IsErrorOccurred+0x94>
 8005b7e:	b10e      	cbz	r6, 8005b84 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8005b80:	2404      	movs	r4, #4
 8005b82:	e039      	b.n	8005bf8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8005b84:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005b88:	d0f6      	beq.n	8005b78 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7ff fc4f 	bl	800542c <HAL_GetTick>
 8005b8e:	1bc0      	subs	r0, r0, r7
 8005b90:	4540      	cmp	r0, r8
 8005b92:	d802      	bhi.n	8005b9a <I2C_IsErrorOccurred+0x42>
 8005b94:	f1b8 0f00 	cmp.w	r8, #0
 8005b98:	d1ed      	bne.n	8005b76 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8005b9e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ba2:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005ba4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ba6:	0400      	lsls	r0, r0, #16
 8005ba8:	d50a      	bpl.n	8005bc0 <I2C_IsErrorOccurred+0x68>
 8005baa:	0449      	lsls	r1, r1, #17
 8005bac:	d408      	bmi.n	8005bc0 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8005bae:	2a20      	cmp	r2, #32
 8005bb0:	d006      	beq.n	8005bc0 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005bba:	f7ff fc37 	bl	800542c <HAL_GetTick>
 8005bbe:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	699c      	ldr	r4, [r3, #24]
 8005bc4:	f014 0420 	ands.w	r4, r4, #32
 8005bc8:	d1d5      	bne.n	8005b76 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bca:	f7ff fc2f 	bl	800542c <HAL_GetTick>
 8005bce:	1bc0      	subs	r0, r0, r7
 8005bd0:	2819      	cmp	r0, #25
 8005bd2:	d9f5      	bls.n	8005bc0 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8005bd6:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8005bd8:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	f043 0320 	orr.w	r3, r3, #32
 8005be0:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8005bea:	e7e9      	b.n	8005bc0 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8005bec:	2e00      	cmp	r6, #0
 8005bee:	d1c7      	bne.n	8005b80 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf0:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8005bf2:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8005bf4:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf6:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bfc:	05d0      	lsls	r0, r2, #23
 8005bfe:	d505      	bpl.n	8005c0c <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c00:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005c04:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8005c08:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c0a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c0c:	0551      	lsls	r1, r2, #21
 8005c0e:	d505      	bpl.n	8005c1c <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005c14:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8005c18:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c1a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c1c:	0592      	lsls	r2, r2, #22
 8005c1e:	d521      	bpl.n	8005c64 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c20:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c24:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c28:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8005c2a:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 8005c2c:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8005c2e:	f7ff ff6f 	bl	8005b10 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005c32:	682a      	ldr	r2, [r5, #0]
 8005c34:	6853      	ldr	r3, [r2, #4]
 8005c36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005c3a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005c3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005c48:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005c4a:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8005c4e:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005c5a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8005c5e:	e003      	b.n	8005c68 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8005c60:	4626      	mov	r6, r4
 8005c62:	e7c9      	b.n	8005bf8 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8005c64:	2e00      	cmp	r6, #0
 8005c66:	d1e0      	bne.n	8005c2a <I2C_IsErrorOccurred+0xd2>
}
 8005c68:	4630      	mov	r0, r6
 8005c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005c6e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005c6e:	b570      	push	{r4, r5, r6, lr}
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	d501      	bpl.n	8005c82 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005c7e:	2000      	movs	r0, #0
}
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c82:	4632      	mov	r2, r6
 8005c84:	4629      	mov	r1, r5
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7ff ff66 	bl	8005b58 <I2C_IsErrorOccurred>
 8005c8c:	b9a0      	cbnz	r0, 8005cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005c8e:	1c6a      	adds	r2, r5, #1
 8005c90:	d0f1      	beq.n	8005c76 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c92:	f7ff fbcb 	bl	800542c <HAL_GetTick>
 8005c96:	1b80      	subs	r0, r0, r6
 8005c98:	42a8      	cmp	r0, r5
 8005c9a:	d801      	bhi.n	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	d1ea      	bne.n	8005c76 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ca0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ca2:	f043 0320 	orr.w	r3, r3, #32
 8005ca6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ca8:	2320      	movs	r3, #32
 8005caa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005cb4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005cb8:	2001      	movs	r0, #1
 8005cba:	e7e1      	b.n	8005c80 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08005cbc <I2C_WaitOnFlagUntilTimeout>:
{
 8005cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc0:	9f06      	ldr	r7, [sp, #24]
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4688      	mov	r8, r1
 8005cc6:	4616      	mov	r6, r2
 8005cc8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	6993      	ldr	r3, [r2, #24]
 8005cce:	ea38 0303 	bics.w	r3, r8, r3
 8005cd2:	bf0c      	ite	eq
 8005cd4:	2301      	moveq	r3, #1
 8005cd6:	2300      	movne	r3, #0
 8005cd8:	42b3      	cmp	r3, r6
 8005cda:	d001      	beq.n	8005ce0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e015      	b.n	8005d0c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	1c6b      	adds	r3, r5, #1
 8005ce2:	d0f3      	beq.n	8005ccc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce4:	f7ff fba2 	bl	800542c <HAL_GetTick>
 8005ce8:	1bc0      	subs	r0, r0, r7
 8005cea:	42a8      	cmp	r0, r5
 8005cec:	d801      	bhi.n	8005cf2 <I2C_WaitOnFlagUntilTimeout+0x36>
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	d1eb      	bne.n	8005cca <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005cf4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cf6:	f043 0320 	orr.w	r3, r3, #32
 8005cfa:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005d08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d10 <I2C_RequestMemoryWrite>:
{
 8005d10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d14:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <I2C_RequestMemoryWrite+0x68>)
{
 8005d18:	4605      	mov	r5, r0
 8005d1a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	b2f2      	uxtb	r2, r6
 8005d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8005d24:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d28:	f7ff ff00 	bl	8005b2c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	4642      	mov	r2, r8
 8005d30:	4639      	mov	r1, r7
 8005d32:	f7ff ff9c 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005d36:	b118      	cbz	r0, 8005d40 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8005d38:	2001      	movs	r0, #1
}
 8005d3a:	b002      	add	sp, #8
 8005d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d40:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d42:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d44:	d10d      	bne.n	8005d62 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d46:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2180      	movs	r1, #128	; 0x80
 8005d4c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d4e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d50:	463b      	mov	r3, r7
 8005d52:	f8cd 8000 	str.w	r8, [sp]
 8005d56:	f7ff ffb1 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005d5a:	3800      	subs	r0, #0
 8005d5c:	bf18      	it	ne
 8005d5e:	2001      	movne	r0, #1
 8005d60:	e7eb      	b.n	8005d3a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d62:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d64:	4639      	mov	r1, r7
 8005d66:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	f7ff ff7f 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d1e1      	bne.n	8005d38 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	e7e6      	b.n	8005d46 <I2C_RequestMemoryWrite+0x36>
 8005d78:	80002000 	.word	0x80002000

08005d7c <I2C_RequestMemoryRead>:
{
 8005d7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d80:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d82:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <I2C_RequestMemoryRead+0x68>)
{
 8005d84:	4605      	mov	r5, r0
 8005d86:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	b2f2      	uxtb	r2, r6
 8005d8c:	2300      	movs	r3, #0
{
 8005d8e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d92:	f7ff fecb 	bl	8005b2c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d96:	4628      	mov	r0, r5
 8005d98:	4642      	mov	r2, r8
 8005d9a:	4639      	mov	r1, r7
 8005d9c:	f7ff ff67 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005da0:	b118      	cbz	r0, 8005daa <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005da2:	2001      	movs	r0, #1
}
 8005da4:	b002      	add	sp, #8
 8005da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005daa:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dac:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dae:	d10d      	bne.n	8005dcc <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005db0:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005db2:	2200      	movs	r2, #0
 8005db4:	2140      	movs	r1, #64	; 0x40
 8005db6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005db8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dba:	463b      	mov	r3, r7
 8005dbc:	f8cd 8000 	str.w	r8, [sp]
 8005dc0:	f7ff ff7c 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005dc4:	3800      	subs	r0, #0
 8005dc6:	bf18      	it	ne
 8005dc8:	2001      	movne	r0, #1
 8005dca:	e7eb      	b.n	8005da4 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dcc:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dce:	4639      	mov	r1, r7
 8005dd0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	f7ff ff4a 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d1e1      	bne.n	8005da2 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dde:	682b      	ldr	r3, [r5, #0]
 8005de0:	e7e6      	b.n	8005db0 <I2C_RequestMemoryRead+0x34>
 8005de2:	bf00      	nop
 8005de4:	80002000 	.word	0x80002000

08005de8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4604      	mov	r4, r0
 8005dec:	460d      	mov	r5, r1
 8005dee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	069b      	lsls	r3, r3, #26
 8005df6:	d501      	bpl.n	8005dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005df8:	2000      	movs	r0, #0
}
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	4629      	mov	r1, r5
 8005e00:	4620      	mov	r0, r4
 8005e02:	f7ff fea9 	bl	8005b58 <I2C_IsErrorOccurred>
 8005e06:	b990      	cbnz	r0, 8005e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e08:	f7ff fb10 	bl	800542c <HAL_GetTick>
 8005e0c:	1b80      	subs	r0, r0, r6
 8005e0e:	42a8      	cmp	r0, r5
 8005e10:	d801      	bhi.n	8005e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	d1ec      	bne.n	8005df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e18:	f043 0320 	orr.w	r3, r3, #32
 8005e1c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	2320      	movs	r3, #32
 8005e20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005e2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005e2e:	2001      	movs	r0, #1
 8005e30:	e7e3      	b.n	8005dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08005e32 <HAL_I2C_MspInit>:
}
 8005e32:	4770      	bx	lr

08005e34 <HAL_I2C_Init>:
{
 8005e34:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005e36:	4604      	mov	r4, r0
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d04a      	beq.n	8005ed2 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e3c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005e40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e44:	b91b      	cbnz	r3, 8005e4e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005e46:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005e4a:	f7ff fff2 	bl	8005e32 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e4e:	2324      	movs	r3, #36	; 0x24
 8005e50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e5e:	6862      	ldr	r2, [r4, #4]
 8005e60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e64:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e6c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e6e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e72:	2901      	cmp	r1, #1
 8005e74:	d124      	bne.n	8005ec0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e7c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e7e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e80:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e88:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e90:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e92:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005e96:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e98:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e9e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ea0:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f042 0201 	orr.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005eb0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eb8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eba:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005ebe:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ec0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ec4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ec6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ec8:	d1d8      	bne.n	8005e7c <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ece:	605a      	str	r2, [r3, #4]
 8005ed0:	e7d4      	b.n	8005e7c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	e7f3      	b.n	8005ebe <HAL_I2C_Init+0x8a>

08005ed6 <HAL_I2C_MspDeInit>:
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_I2C_DeInit>:
{
 8005ed8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005eda:	4604      	mov	r4, r0
 8005edc:	b198      	cbz	r0, 8005f06 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005ede:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee0:	2324      	movs	r3, #36	; 0x24
 8005ee2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005eee:	f7ff fff2 	bl	8005ed6 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8005ef6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005efa:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005efe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f00:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005f04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f06:	2001      	movs	r0, #1
 8005f08:	e7fc      	b.n	8005f04 <HAL_I2C_DeInit+0x2c>

08005f0a <HAL_I2C_Mem_Write>:
{
 8005f0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	469b      	mov	fp, r3
 8005f12:	4604      	mov	r4, r0
 8005f14:	460f      	mov	r7, r1
 8005f16:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005f1a:	4692      	mov	sl, r2
 8005f1c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005f20:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f22:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	f040 80a3 	bne.w	8006072 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8005f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f2e:	b10b      	cbz	r3, 8005f34 <HAL_I2C_Mem_Write+0x2a>
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	b933      	cbnz	r3, 8005f42 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f38:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005f3a:	2001      	movs	r0, #1
}
 8005f3c:	b005      	add	sp, #20
 8005f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005f42:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	f000 8093 	beq.w	8006072 <HAL_I2C_Mem_Write+0x168>
 8005f4c:	2501      	movs	r5, #1
 8005f4e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005f52:	f7ff fa6b 	bl	800542c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f56:	2319      	movs	r3, #25
 8005f58:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005f5a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f62:	4620      	mov	r0, r4
 8005f64:	f7ff feaa 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4680      	mov	r8, r0
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d1e5      	bne.n	8005f3a <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f6e:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8005f70:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f72:	4652      	mov	r2, sl
 8005f74:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f7a:	2340      	movs	r3, #64	; 0x40
 8005f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f82:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f84:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005f86:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f88:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f8a:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005f8e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f90:	465b      	mov	r3, fp
 8005f92:	f7ff febd 	bl	8005d10 <I2C_RequestMemoryWrite>
 8005f96:	b110      	cbz	r0, 8005f9e <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8005f98:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005f9c:	e7cd      	b.n	8005f3a <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2bff      	cmp	r3, #255	; 0xff
 8005fa4:	d955      	bls.n	8006052 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fac:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7ff fdba 	bl	8005b2c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb8:	4632      	mov	r2, r6
 8005fba:	4649      	mov	r1, r9
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7ff fe56 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d1b9      	bne.n	8005f3a <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005fce:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005fd0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005fd4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005fd6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005fd8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005fda:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005fdc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005fde:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fe0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005fe2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	b1ab      	cbz	r3, 8006014 <HAL_I2C_Mem_Write+0x10a>
 8005fe8:	b9a2      	cbnz	r2, 8006014 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fea:	464b      	mov	r3, r9
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	4620      	mov	r0, r4
 8005ff0:	9600      	str	r6, [sp, #0]
 8005ff2:	f7ff fe63 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d19f      	bne.n	8005f3a <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ffa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2bff      	cmp	r3, #255	; 0xff
 8006000:	d92f      	bls.n	8006062 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006002:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006008:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800600a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800600c:	4639      	mov	r1, r7
 800600e:	4620      	mov	r0, r4
 8006010:	f7ff fd8c 	bl	8005b2c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1cd      	bne.n	8005fb8 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800601c:	4632      	mov	r2, r6
 800601e:	4649      	mov	r1, r9
 8006020:	4620      	mov	r0, r4
 8006022:	f7ff fee1 	bl	8005de8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006026:	2800      	cmp	r0, #0
 8006028:	d187      	bne.n	8005f3a <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	2120      	movs	r1, #32
 800602e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006036:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800603a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006044:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006048:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800604c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8006050:	e774      	b.n	8005f3c <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8006052:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006058:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800605a:	b292      	uxth	r2, r2
 800605c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	e7a6      	b.n	8005fb0 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8006062:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006068:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800606a:	b292      	uxth	r2, r2
 800606c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	e7cc      	b.n	800600c <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8006072:	2002      	movs	r0, #2
 8006074:	e762      	b.n	8005f3c <HAL_I2C_Mem_Write+0x32>
	...

08006078 <HAL_I2C_Mem_Read>:
{
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	b085      	sub	sp, #20
 800607e:	469b      	mov	fp, r3
 8006080:	4604      	mov	r4, r0
 8006082:	460f      	mov	r7, r1
 8006084:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8006088:	4692      	mov	sl, r2
 800608a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800608e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006090:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006094:	2b20      	cmp	r3, #32
 8006096:	f040 80a7 	bne.w	80061e8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800609a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800609c:	b10b      	cbz	r3, 80060a2 <HAL_I2C_Mem_Read+0x2a>
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	b933      	cbnz	r3, 80060b0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80060a8:	2001      	movs	r0, #1
}
 80060aa:	b005      	add	sp, #20
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80060b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	f000 8097 	beq.w	80061e8 <HAL_I2C_Mem_Read+0x170>
 80060ba:	2501      	movs	r5, #1
 80060bc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80060c0:	f7ff f9b4 	bl	800542c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060c4:	2319      	movs	r3, #25
 80060c6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80060c8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060ca:	462a      	mov	r2, r5
 80060cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060d0:	4620      	mov	r0, r4
 80060d2:	f7ff fdf3 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 80060d6:	4680      	mov	r8, r0
 80060d8:	2800      	cmp	r0, #0
 80060da:	d1e5      	bne.n	80060a8 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060dc:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80060de:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060e0:	4652      	mov	r2, sl
 80060e2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80060ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060f0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060f2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80060f4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80060f6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060f8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80060fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060fe:	465b      	mov	r3, fp
 8006100:	f7ff fe3c 	bl	8005d7c <I2C_RequestMemoryRead>
 8006104:	b110      	cbz	r0, 800610c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8006106:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800610a:	e7cd      	b.n	80060a8 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800610c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	2bff      	cmp	r3, #255	; 0xff
 8006112:	4b36      	ldr	r3, [pc, #216]	; (80061ec <HAL_I2C_Mem_Read+0x174>)
 8006114:	d958      	bls.n	80061c8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006116:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800611e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006120:	4639      	mov	r1, r7
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff fd02 	bl	8005b2c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006128:	464b      	mov	r3, r9
 800612a:	2200      	movs	r2, #0
 800612c:	2104      	movs	r1, #4
 800612e:	4620      	mov	r0, r4
 8006130:	9600      	str	r6, [sp, #0]
 8006132:	f7ff fdc3 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8006136:	2800      	cmp	r0, #0
 8006138:	d1b6      	bne.n	80060a8 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800613e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006140:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006142:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006144:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006146:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8006148:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800614a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800614c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800614e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006150:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006152:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006154:	b29b      	uxth	r3, r3
 8006156:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006158:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	b1ab      	cbz	r3, 800618a <HAL_I2C_Mem_Read+0x112>
 800615e:	b9a2      	cbnz	r2, 800618a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006160:	464b      	mov	r3, r9
 8006162:	2180      	movs	r1, #128	; 0x80
 8006164:	4620      	mov	r0, r4
 8006166:	9600      	str	r6, [sp, #0]
 8006168:	f7ff fda8 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 800616c:	2800      	cmp	r0, #0
 800616e:	d19b      	bne.n	80060a8 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006170:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	2bff      	cmp	r3, #255	; 0xff
 8006176:	d92f      	bls.n	80061d8 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006178:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800617a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800617e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006180:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006182:	4639      	mov	r1, r7
 8006184:	4620      	mov	r0, r4
 8006186:	f7ff fcd1 	bl	8005b2c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800618a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1ca      	bne.n	8006128 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006192:	4632      	mov	r2, r6
 8006194:	4649      	mov	r1, r9
 8006196:	4620      	mov	r0, r4
 8006198:	f7ff fe26 	bl	8005de8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800619c:	2800      	cmp	r0, #0
 800619e:	d183      	bne.n	80060a8 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	2120      	movs	r1, #32
 80061a4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80061ac:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80061b0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80061ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80061be:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80061c6:	e770      	b.n	80060aa <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80061c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80061d0:	b292      	uxth	r2, r2
 80061d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	e7a3      	b.n	8006120 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80061d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061de:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80061e0:	b292      	uxth	r2, r2
 80061e2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	e7cc      	b.n	8006182 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80061e8:	2002      	movs	r0, #2
 80061ea:	e75e      	b.n	80060aa <HAL_I2C_Mem_Read+0x32>
 80061ec:	80002400 	.word	0x80002400

080061f0 <HAL_I2C_GetState>:
  return hi2c->State;
 80061f0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80061f4:	4770      	bx	lr

080061f6 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80061f6:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80061f8:	4770      	bx	lr

080061fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061fa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006200:	2b20      	cmp	r3, #32
 8006202:	b2dc      	uxtb	r4, r3
 8006204:	d11d      	bne.n	8006242 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006206:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800620a:	2b01      	cmp	r3, #1
 800620c:	d019      	beq.n	8006242 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800620e:	2324      	movs	r3, #36	; 0x24
 8006210:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006214:	6803      	ldr	r3, [r0, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006224:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4311      	orrs	r1, r2
 800622a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006234:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006236:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800623a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800623e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006240:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006242:	2002      	movs	r0, #2
 8006244:	e7fc      	b.n	8006240 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08006246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006246:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006248:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800624c:	2b20      	cmp	r3, #32
 800624e:	b2dc      	uxtb	r4, r3
 8006250:	d11c      	bne.n	800628c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006252:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006256:	2b01      	cmp	r3, #1
 8006258:	d018      	beq.n	800628c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800625a:	2324      	movs	r3, #36	; 0x24
 800625c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006260:	6803      	ldr	r3, [r0, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800626a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800626c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006270:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006274:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	f042 0201 	orr.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006280:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006284:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006288:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800628a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800628c:	2002      	movs	r0, #2
 800628e:	e7fc      	b.n	800628a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08006290 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006290:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006292:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006294:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006298:	3284      	adds	r2, #132	; 0x84
 800629a:	1883      	adds	r3, r0, r2
{
 800629c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062a0:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062a2:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062a6:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80062a8:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062ac:	684c      	ldr	r4, [r1, #4]
 80062ae:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062b2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80062b6:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062ba:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062bc:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062be:	68c5      	ldr	r5, [r0, #12]
 80062c0:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80062c4:	443d      	add	r5, r7
 80062c6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062ca:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062cc:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062ce:	68c5      	ldr	r5, [r0, #12]
 80062d0:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80062d4:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80062d6:	689d      	ldr	r5, [r3, #8]
 80062d8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80062dc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80062de:	688d      	ldr	r5, [r1, #8]
 80062e0:	68c7      	ldr	r7, [r0, #12]
 80062e2:	3501      	adds	r5, #1
 80062e4:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80062e8:	443d      	add	r5, r7
 80062ea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80062ee:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80062f0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80062f2:	691d      	ldr	r5, [r3, #16]
 80062f4:	f025 0507 	bic.w	r5, r5, #7
 80062f8:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80062fa:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80062fc:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80062fe:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006302:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006306:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800630a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800630e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8006312:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8006316:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800631a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800631c:	695d      	ldr	r5, [r3, #20]
 800631e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8006322:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006324:	694d      	ldr	r5, [r1, #20]
 8006326:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006328:	69dd      	ldr	r5, [r3, #28]
 800632a:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800632e:	f025 0507 	bic.w	r5, r5, #7
 8006332:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006334:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8006338:	433d      	orrs	r5, r7
 800633a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800633c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800633e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006340:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006344:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006346:	b31e      	cbz	r6, 8006390 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006348:	2e01      	cmp	r6, #1
 800634a:	d023      	beq.n	8006394 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800634c:	1eb5      	subs	r5, r6, #2
 800634e:	2d02      	cmp	r5, #2
 8006350:	d922      	bls.n	8006398 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8006352:	2e07      	cmp	r6, #7
 8006354:	bf0c      	ite	eq
 8006356:	2502      	moveq	r5, #2
 8006358:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800635a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800635c:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006360:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006364:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006366:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006368:	3407      	adds	r4, #7
 800636a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800636c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800636e:	436e      	muls	r6, r5
 8006370:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8006374:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006376:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006378:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800637c:	f024 0407 	bic.w	r4, r4, #7
 8006380:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006382:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006384:	5883      	ldr	r3, [r0, r2]
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	5083      	str	r3, [r0, r2]
}
 800638c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8006390:	2504      	movs	r5, #4
 8006392:	e7e2      	b.n	800635a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8006394:	2503      	movs	r5, #3
 8006396:	e7e0      	b.n	800635a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8006398:	2502      	movs	r5, #2
 800639a:	e7de      	b.n	800635a <LTDC_SetConfig+0xca>

0800639c <HAL_LTDC_Init>:
{
 800639c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800639e:	4604      	mov	r4, r0
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d063      	beq.n	800646c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80063a4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80063a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063ac:	b91b      	cbnz	r3, 80063b6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80063ae:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80063b2:	f7fa fb47 	bl	8000a44 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063b6:	2302      	movs	r3, #2
 80063b8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80063c4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063c6:	6999      	ldr	r1, [r3, #24]
 80063c8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80063cc:	4302      	orrs	r2, r0
 80063ce:	68e0      	ldr	r0, [r4, #12]
 80063d0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80063d2:	6920      	ldr	r0, [r4, #16]
 80063d4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80063d6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063d8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80063da:	4925      	ldr	r1, [pc, #148]	; (8006470 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063dc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	400a      	ands	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80063ea:	69a0      	ldr	r0, [r4, #24]
 80063ec:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80063ee:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80063f0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	400a      	ands	r2, r1
 80063f6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80063fe:	6a20      	ldr	r0, [r4, #32]
 8006400:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006402:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006404:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	400a      	ands	r2, r1
 800640a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006412:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006414:	4302      	orrs	r2, r0
 8006416:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006418:	695a      	ldr	r2, [r3, #20]
 800641a:	4011      	ands	r1, r2
 800641c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800641e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006426:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006428:	430a      	orrs	r2, r1
 800642a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800642c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800642e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006432:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006436:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800643a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800643c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800643e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8006442:	430a      	orrs	r2, r1
 8006444:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006448:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800644c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006452:	f042 0206 	orr.w	r2, r2, #6
 8006456:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8006460:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006462:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006466:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800646a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800646c:	2001      	movs	r0, #1
 800646e:	e7fc      	b.n	800646a <HAL_LTDC_Init+0xce>
 8006470:	f000f800 	.word	0xf000f800

08006474 <HAL_LTDC_ErrorCallback>:
 8006474:	4770      	bx	lr

08006476 <HAL_LTDC_ReloadEventCallback>:
 8006476:	4770      	bx	lr

08006478 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006478:	6803      	ldr	r3, [r0, #0]
{
 800647a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800647c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800647e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006480:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006482:	0772      	lsls	r2, r6, #29
 8006484:	d514      	bpl.n	80064b0 <HAL_LTDC_IRQHandler+0x38>
 8006486:	0769      	lsls	r1, r5, #29
 8006488:	d512      	bpl.n	80064b0 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800648a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648c:	f022 0204 	bic.w	r2, r2, #4
 8006490:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006492:	2204      	movs	r2, #4
 8006494:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006496:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80064a2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80064a4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80064a8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80064ac:	f7ff ffe2 	bl	8006474 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80064b0:	07b2      	lsls	r2, r6, #30
 80064b2:	d516      	bpl.n	80064e2 <HAL_LTDC_IRQHandler+0x6a>
 80064b4:	07ab      	lsls	r3, r5, #30
 80064b6:	d514      	bpl.n	80064e2 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80064b8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80064ba:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80064bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064be:	f022 0202 	bic.w	r2, r2, #2
 80064c2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80064c4:	2202      	movs	r2, #2
 80064c6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80064c8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80064d2:	2304      	movs	r3, #4
 80064d4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80064d8:	2300      	movs	r3, #0
 80064da:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80064de:	f7ff ffc9 	bl	8006474 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80064e2:	07f0      	lsls	r0, r6, #31
 80064e4:	d510      	bpl.n	8006508 <HAL_LTDC_IRQHandler+0x90>
 80064e6:	07e9      	lsls	r1, r5, #31
 80064e8:	d50e      	bpl.n	8006508 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80064ea:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80064ec:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80064ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80064f6:	2201      	movs	r2, #1
 80064f8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80064fa:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80064fc:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006500:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8006504:	f7fb fc3e 	bl	8001d84 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006508:	0732      	lsls	r2, r6, #28
 800650a:	d511      	bpl.n	8006530 <HAL_LTDC_IRQHandler+0xb8>
 800650c:	072b      	lsls	r3, r5, #28
 800650e:	d50f      	bpl.n	8006530 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006510:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006512:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006516:	f022 0208 	bic.w	r2, r2, #8
 800651a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800651c:	2208      	movs	r2, #8
 800651e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006520:	2301      	movs	r3, #1
 8006522:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006526:	2300      	movs	r3, #0
 8006528:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800652c:	f7ff ffa3 	bl	8006476 <HAL_LTDC_ReloadEventCallback>
}
 8006530:	bd70      	pop	{r4, r5, r6, pc}

08006532 <HAL_LTDC_ConfigLayer>:
{
 8006532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8006536:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800653a:	4606      	mov	r6, r0
 800653c:	460f      	mov	r7, r1
 800653e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8006540:	2b01      	cmp	r3, #1
 8006542:	f04f 0002 	mov.w	r0, #2
 8006546:	d01f      	beq.n	8006588 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006548:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800654a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800654e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006550:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006554:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8006558:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800655c:	3438      	adds	r4, #56	; 0x38
 800655e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800656c:	4630      	mov	r0, r6
 800656e:	4662      	mov	r2, ip
 8006570:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006572:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006574:	f7ff fe8c 	bl	8006290 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006578:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800657a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800657c:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006580:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006584:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8006588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800658c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800658c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006590:	2b01      	cmp	r3, #1
 8006592:	f04f 0302 	mov.w	r3, #2
 8006596:	d012      	beq.n	80065be <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006598:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800659c:	6803      	ldr	r3, [r0, #0]
 800659e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a0:	f022 0201 	bic.w	r2, r2, #1
 80065a4:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80065a6:	4a07      	ldr	r2, [pc, #28]	; (80065c4 <HAL_LTDC_ProgramLineEvent+0x38>)
 80065a8:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80065aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ac:	f042 0201 	orr.w	r2, r2, #1
 80065b0:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80065b8:	2300      	movs	r3, #0
 80065ba:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80065be:	4618      	mov	r0, r3
}
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	50001000 	.word	0x50001000

080065c8 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 80065cc:	f7fe ff2e 	bl	800542c <HAL_GetTick>
 80065d0:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80065d2:	b144      	cbz	r4, 80065e6 <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80065d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d006      	beq.n	80065ea <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80065dc:	2380      	movs	r3, #128	; 0x80
 80065de:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80065e0:	2300      	movs	r3, #0
 80065e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80065e6:	2001      	movs	r0, #1
 80065e8:	e015      	b.n	8006616 <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80065f2:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80065fc:	6822      	ldr	r2, [r4, #0]
 80065fe:	68d3      	ldr	r3, [r2, #12]
 8006600:	f013 0301 	ands.w	r3, r3, #1
 8006604:	d108      	bne.n	8006618 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8006606:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 8006608:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800660a:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 800660c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 800660e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 8006612:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8006616:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006618:	f7fe ff08 	bl	800542c <HAL_GetTick>
 800661c:	1b40      	subs	r0, r0, r5
 800661e:	2805      	cmp	r0, #5
 8006620:	d9ec      	bls.n	80065fc <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8006622:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006628:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800662a:	2300      	movs	r3, #0
 800662c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8006630:	2303      	movs	r3, #3
 8006632:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 8006636:	e7d6      	b.n	80065e6 <HAL_MDMA_Abort+0x1e>

08006638 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800663c:	6804      	ldr	r4, [r0, #0]
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006644:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8006646:	6883      	ldr	r3, [r0, #8]
 8006648:	b92b      	cbnz	r3, 8006656 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	684a      	ldr	r2, [r1, #4]
 800664e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006652:	4313      	orrs	r3, r2
 8006654:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006656:	680b      	ldr	r3, [r1, #0]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d150      	bne.n	80066fe <OSPI_ConfigCmd+0xc6>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800665c:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8006660:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 8006664:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8006668:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800666c:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 8006670:	433b      	orrs	r3, r7
 8006672:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8006674:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006676:	b16b      	cbz	r3, 8006694 <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8006678:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800667a:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800667e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8006680:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006682:	f8d2 c000 	ldr.w	ip, [r2]
 8006686:	433b      	orrs	r3, r7
 8006688:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 800668a:	433b      	orrs	r3, r7
 800668c:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 8006690:	433b      	orrs	r3, r7
 8006692:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006694:	6833      	ldr	r3, [r6, #0]
 8006696:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8006698:	f023 031f 	bic.w	r3, r3, #31
 800669c:	433b      	orrs	r3, r7
 800669e:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80066a0:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
 80066a4:	f1be 0f00 	cmp.w	lr, #0
 80066a8:	d004      	beq.n	80066b4 <OSPI_ConfigCmd+0x7c>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80066aa:	680b      	ldr	r3, [r1, #0]
 80066ac:	b913      	cbnz	r3, 80066b4 <OSPI_ConfigCmd+0x7c>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80066ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80066b0:	3b01      	subs	r3, #1
 80066b2:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80066b4:	68cb      	ldr	r3, [r1, #12]
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80066b6:	f8d1 901c 	ldr.w	r9, [r1, #28]
  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d07b      	beq.n	80067b6 <OSPI_ConfigCmd+0x17e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80066be:	e9d1 c804 	ldrd	ip, r8, [r1, #16]
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80066c2:	f1b9 0f00 	cmp.w	r9, #0
 80066c6:	d04a      	beq.n	800675e <OSPI_ConfigCmd+0x126>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80066c8:	e9d1 6708 	ldrd	r6, r7, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80066cc:	f1be 0f00 	cmp.w	lr, #0
 80066d0:	d029      	beq.n	8006726 <OSPI_ConfigCmd+0xee>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80066d2:	ea4e 0303 	orr.w	r3, lr, r3
 80066d6:	6810      	ldr	r0, [r2, #0]
 80066d8:	ea43 0309 	orr.w	r3, r3, r9
 80066dc:	ea43 0308 	orr.w	r3, r3, r8
 80066e0:	ea43 030c 	orr.w	r3, r3, ip
 80066e4:	433b      	orrs	r3, r7
 80066e6:	4333      	orrs	r3, r6
 80066e8:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 80066ea:	4333      	orrs	r3, r6
 80066ec:	4e42      	ldr	r6, [pc, #264]	; (80067f8 <OSPI_ConfigCmd+0x1c0>)
 80066ee:	4006      	ands	r6, r0
 80066f0:	4333      	orrs	r3, r6

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80066f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80066f4:	688b      	ldr	r3, [r1, #8]
 80066f6:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80066f8:	698b      	ldr	r3, [r1, #24]
 80066fa:	64a3      	str	r3, [r4, #72]	; 0x48
 80066fc:	e044      	b.n	8006788 <OSPI_ConfigCmd+0x150>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80066fe:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 8006700:	bf01      	itttt	eq
 8006702:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 8006706:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800670a:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 800670e:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 8006712:	bf1f      	itttt	ne
 8006714:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8006718:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800671c:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 8006720:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 8006724:	e7a2      	b.n	800666c <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006726:	ea43 0309 	orr.w	r3, r3, r9
 800672a:	f8d2 e000 	ldr.w	lr, [r2]
 800672e:	ea43 0308 	orr.w	r3, r3, r8
 8006732:	f42e 5e7c 	bic.w	lr, lr, #16128	; 0x3f00
 8006736:	ea43 030c 	orr.w	r3, r3, ip
 800673a:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 800673e:	433b      	orrs	r3, r7
 8006740:	4333      	orrs	r3, r6
 8006742:	ea43 030e 	orr.w	r3, r3, lr
 8006746:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006748:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800674a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800674e:	d1d1      	bne.n	80066f4 <OSPI_ConfigCmd+0xbc>
 8006750:	694b      	ldr	r3, [r1, #20]
 8006752:	2b08      	cmp	r3, #8
 8006754:	d1ce      	bne.n	80066f4 <OSPI_ConfigCmd+0xbc>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800675c:	e7c9      	b.n	80066f2 <OSPI_ConfigCmd+0xba>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800675e:	f1be 0f00 	cmp.w	lr, #0
 8006762:	d014      	beq.n	800678e <OSPI_ConfigCmd+0x156>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006764:	ea4e 0303 	orr.w	r3, lr, r3
 8006768:	6810      	ldr	r0, [r2, #0]
 800676a:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800676c:	ea43 0308 	orr.w	r3, r3, r8
 8006770:	ea43 030c 	orr.w	r3, r3, ip
 8006774:	f020 6c70 	bic.w	ip, r0, #251658240	; 0xf000000
 8006778:	4323      	orrs	r3, r4
 800677a:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
 800677e:	ea43 030c 	orr.w	r3, r3, ip
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006782:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 8006784:	688b      	ldr	r3, [r1, #8]
 8006786:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006788:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800678a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800678e:	6814      	ldr	r4, [r2, #0]
 8006790:	ea43 0308 	orr.w	r3, r3, r8
 8006794:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006798:	ea43 030c 	orr.w	r3, r3, ip
 800679c:	4323      	orrs	r3, r4
 800679e:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80067a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80067a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067a6:	d1ed      	bne.n	8006784 <OSPI_ConfigCmd+0x14c>
 80067a8:	694b      	ldr	r3, [r1, #20]
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d1ea      	bne.n	8006784 <OSPI_ConfigCmd+0x14c>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067b4:	e7e5      	b.n	8006782 <OSPI_ConfigCmd+0x14a>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80067b6:	f1b9 0f00 	cmp.w	r9, #0
 80067ba:	d018      	beq.n	80067ee <OSPI_ConfigCmd+0x1b6>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80067bc:	6815      	ldr	r5, [r2, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80067be:	e9d1 6008 	ldrd	r6, r0, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80067c2:	f1be 0f00 	cmp.w	lr, #0
 80067c6:	d00c      	beq.n	80067e2 <OSPI_ConfigCmd+0x1aa>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80067c8:	ea4e 0309 	orr.w	r3, lr, r9
 80067cc:	4303      	orrs	r3, r0
 80067ce:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80067d0:	4333      	orrs	r3, r6
 80067d2:	4303      	orrs	r3, r0
 80067d4:	f025 6070 	bic.w	r0, r5, #251658240	; 0xf000000
 80067d8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80067dc:	4303      	orrs	r3, r0
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	e78a      	b.n	80066f8 <OSPI_ConfigCmd+0xc0>
 80067e2:	ea40 0309 	orr.w	r3, r0, r9
 80067e6:	f425 507c 	bic.w	r0, r5, #16128	; 0x3f00
 80067ea:	4333      	orrs	r3, r6
 80067ec:	e7f6      	b.n	80067dc <OSPI_ConfigCmd+0x1a4>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80067ee:	2308      	movs	r3, #8
 80067f0:	6583      	str	r3, [r0, #88]	; 0x58
      status = HAL_ERROR;
 80067f2:	2001      	movs	r0, #1
 80067f4:	e7c9      	b.n	800678a <OSPI_ConfigCmd+0x152>
 80067f6:	bf00      	nop
 80067f8:	f0ffc0c0 	.word	0xf0ffc0c0

080067fc <OSPI_WaitFlagStateUntilTimeout>:
{
 80067fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006800:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006804:	4604      	mov	r4, r0
 8006806:	460e      	mov	r6, r1
 8006808:	4615      	mov	r5, r2
 800680a:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	6a13      	ldr	r3, [r2, #32]
 8006810:	4233      	tst	r3, r6
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	42ab      	cmp	r3, r5
 800681a:	d101      	bne.n	8006820 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800681c:	2000      	movs	r0, #0
 800681e:	e012      	b.n	8006846 <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006820:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006824:	d0f3      	beq.n	800680e <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fe fe01 	bl	800542c <HAL_GetTick>
 800682a:	1bc0      	subs	r0, r0, r7
 800682c:	4540      	cmp	r0, r8
 800682e:	d802      	bhi.n	8006836 <OSPI_WaitFlagStateUntilTimeout+0x3a>
 8006830:	f1b8 0f00 	cmp.w	r8, #0
 8006834:	d1ea      	bne.n	800680c <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006836:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800683a:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800683c:	6563      	str	r3, [r4, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800683e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006840:	f043 0301 	orr.w	r3, r3, #1
 8006844:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800684c <HAL_OSPI_Init>:
{
 800684c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684e:	4604      	mov	r4, r0
 8006850:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8006852:	f7fe fdeb 	bl	800542c <HAL_GetTick>
 8006856:	4603      	mov	r3, r0
  if (hospi == NULL)
 8006858:	2c00      	cmp	r4, #0
 800685a:	d068      	beq.n	800692e <HAL_OSPI_Init+0xe2>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800685c:	2000      	movs	r0, #0
 800685e:	65a0      	str	r0, [r4, #88]	; 0x58
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006860:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8006862:	2e00      	cmp	r6, #0
 8006864:	d161      	bne.n	800692a <HAL_OSPI_Init+0xde>
      HAL_OSPI_MspInit(hospi);
 8006866:	4620      	mov	r0, r4
 8006868:	9303      	str	r3, [sp, #12]
 800686a:	f7fa f9f9 	bl	8000c60 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 800686e:	69e0      	ldr	r0, [r4, #28]
 8006870:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 8006872:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 8006876:	6825      	ldr	r5, [r4, #0]
 8006878:	4301      	orrs	r1, r0
 800687a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800687c:	68af      	ldr	r7, [r5, #8]
 800687e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006882:	482c      	ldr	r0, [pc, #176]	; (8006934 <HAL_OSPI_Init+0xe8>)
  hospi->Timeout = Timeout;
 8006884:	65e2      	str	r2, [r4, #92]	; 0x5c
      MODIFY_REG(hospi->Instance->DCR1,
 8006886:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006888:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 800688a:	4301      	orrs	r1, r0
 800688c:	6920      	ldr	r0, [r4, #16]
 800688e:	3801      	subs	r0, #1
 8006890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006894:	6960      	ldr	r0, [r4, #20]
 8006896:	3801      	subs	r0, #1
 8006898:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800689c:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 800689e:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80068a0:	68e9      	ldr	r1, [r5, #12]
 80068a2:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80068a6:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80068a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80068aa:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80068ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068ae:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80068b2:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80068b4:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80068b6:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80068b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068ba:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80068bc:	6829      	ldr	r1, [r5, #0]
 80068be:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 80068c2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80068c6:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80068c8:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80068ca:	2120      	movs	r1, #32
 80068cc:	9200      	str	r2, [sp, #0]
 80068ce:	4632      	mov	r2, r6
 80068d0:	f7ff ff94 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80068d4:	bb48      	cbnz	r0, 800692a <HAL_OSPI_Init+0xde>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068da:	68d9      	ldr	r1, [r3, #12]
 80068dc:	3a01      	subs	r2, #1
 80068de:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80068e2:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80068e4:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80068e6:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ee:	430a      	orrs	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80068f2:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80068f6:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 80068fa:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 80068fe:	432a      	orrs	r2, r5
 8006900:	430a      	orrs	r2, r1
 8006902:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800690e:	69a2      	ldr	r2, [r4, #24]
 8006910:	2a02      	cmp	r2, #2
 8006912:	d103      	bne.n	800691c <HAL_OSPI_Init+0xd0>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	f042 0202 	orr.w	r2, r2, #2
 800691a:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800691c:	68e3      	ldr	r3, [r4, #12]
 800691e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 8006926:	2302      	movne	r3, #2
 8006928:	6563      	str	r3, [r4, #84]	; 0x54
}
 800692a:	b005      	add	sp, #20
 800692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 800692e:	2001      	movs	r0, #1
 8006930:	e7fb      	b.n	800692a <HAL_OSPI_Init+0xde>
 8006932:	bf00      	nop
 8006934:	f8e0f88c 	.word	0xf8e0f88c

08006938 <HAL_OSPI_DeInit>:
{
 8006938:	b510      	push	{r4, lr}
  if (hospi == NULL)
 800693a:	4604      	mov	r4, r0
 800693c:	b168      	cbz	r0, 800695a <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 800693e:	6803      	ldr	r3, [r0, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	f022 0202 	bic.w	r2, r2, #2
 800694e:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 8006950:	f7fa fab4 	bl	8000ebc <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8006954:	2000      	movs	r0, #0
 8006956:	6560      	str	r0, [r4, #84]	; 0x54
}
 8006958:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800695a:	2001      	movs	r0, #1
 800695c:	e7fc      	b.n	8006958 <HAL_OSPI_DeInit+0x20>

0800695e <HAL_OSPI_Command>:
{
 800695e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	4616      	mov	r6, r2
 8006964:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006966:	f7fe fd61 	bl	800542c <HAL_GetTick>
  state = hospi->State;
 800696a:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 800696c:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800696e:	2a02      	cmp	r2, #2
 8006970:	d107      	bne.n	8006982 <HAL_OSPI_Command+0x24>
 8006972:	68e2      	ldr	r2, [r4, #12]
 8006974:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8006978:	d109      	bne.n	800698e <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800697a:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800697c:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800697e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006980:	e01f      	b.n	80069c2 <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006982:	2a14      	cmp	r2, #20
 8006984:	d11f      	bne.n	80069c6 <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8006986:	682a      	ldr	r2, [r5, #0]
 8006988:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800698a:	2a01      	cmp	r2, #1
 800698c:	d8f5      	bhi.n	800697a <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800698e:	2200      	movs	r2, #0
 8006990:	2120      	movs	r1, #32
 8006992:	4620      	mov	r0, r4
 8006994:	9600      	str	r6, [sp, #0]
 8006996:	9303      	str	r3, [sp, #12]
 8006998:	f7ff ff30 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800699c:	b988      	cbnz	r0, 80069c2 <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800699e:	65a0      	str	r0, [r4, #88]	; 0x58
      status = OSPI_ConfigCmd(hospi, cmd);
 80069a0:	4629      	mov	r1, r5
 80069a2:	4620      	mov	r0, r4
 80069a4:	f7ff fe48 	bl	8006638 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 80069a8:	b958      	cbnz	r0, 80069c2 <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80069aa:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	b992      	cbnz	r2, 80069d6 <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80069b0:	2201      	movs	r2, #1
 80069b2:	2102      	movs	r1, #2
 80069b4:	4620      	mov	r0, r4
 80069b6:	9600      	str	r6, [sp, #0]
 80069b8:	f7ff ff20 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	2202      	movs	r2, #2
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80069c2:	b004      	add	sp, #16
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80069c6:	2a24      	cmp	r2, #36	; 0x24
 80069c8:	d1d7      	bne.n	800697a <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80069ca:	682a      	ldr	r2, [r5, #0]
 80069cc:	f022 0202 	bic.w	r2, r2, #2
 80069d0:	2a01      	cmp	r2, #1
 80069d2:	d1d2      	bne.n	800697a <HAL_OSPI_Command+0x1c>
 80069d4:	e7db      	b.n	800698e <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	b90b      	cbnz	r3, 80069de <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80069da:	2304      	movs	r3, #4
 80069dc:	e005      	b.n	80069ea <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d105      	bne.n	80069ee <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80069e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80069e4:	2b24      	cmp	r3, #36	; 0x24
 80069e6:	d0f8      	beq.n	80069da <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80069e8:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80069ea:	6563      	str	r3, [r4, #84]	; 0x54
 80069ec:	e7e9      	b.n	80069c2 <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d1e7      	bne.n	80069c2 <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80069f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80069f4:	2b14      	cmp	r3, #20
 80069f6:	d0f0      	beq.n	80069da <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80069f8:	2324      	movs	r3, #36	; 0x24
 80069fa:	e7f6      	b.n	80069ea <HAL_OSPI_Command+0x8c>

080069fc <HAL_OSPI_HyperbusCfg>:
{
 80069fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069fe:	4604      	mov	r4, r0
 8006a00:	4616      	mov	r6, r2
 8006a02:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006a04:	f7fe fd12 	bl	800542c <HAL_GetTick>
  state = hospi->State;
 8006a08:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8006a0a:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8006a0c:	3a01      	subs	r2, #1
 8006a0e:	2a01      	cmp	r2, #1
 8006a10:	d816      	bhi.n	8006a40 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006a12:	2200      	movs	r2, #0
 8006a14:	2120      	movs	r1, #32
 8006a16:	4620      	mov	r0, r4
 8006a18:	9600      	str	r6, [sp, #0]
 8006a1a:	f7ff feef 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006a1e:	b968      	cbnz	r0, 8006a3c <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 8006a26:	430b      	orrs	r3, r1
 8006a28:	6829      	ldr	r1, [r5, #0]
 8006a2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006a2e:	6869      	ldr	r1, [r5, #4]
 8006a30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006a34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006a3c:	b002      	add	sp, #8
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a40:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006a42:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a44:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a46:	e7f9      	b.n	8006a3c <HAL_OSPI_HyperbusCfg+0x40>

08006a48 <HAL_OSPI_HyperbusCmd>:
{
 8006a48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006a50:	f7fe fcec 	bl	800542c <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8006a54:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8006a56:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8006a58:	2a02      	cmp	r2, #2
 8006a5a:	d127      	bne.n	8006aac <HAL_OSPI_HyperbusCmd+0x64>
 8006a5c:	68e2      	ldr	r2, [r4, #12]
 8006a5e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8006a62:	d123      	bne.n	8006aac <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006a64:	2200      	movs	r2, #0
 8006a66:	2120      	movs	r1, #32
 8006a68:	4620      	mov	r0, r4
 8006a6a:	9600      	str	r6, [sp, #0]
 8006a6c:	f7ff fec6 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006a70:	b9d0      	cbnz	r0, 8006aa8 <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006a72:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006a74:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a7c:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006a84:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8006a86:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006a88:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8006a8a:	692a      	ldr	r2, [r5, #16]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8006a92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8006a96:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8006a9a:	68ea      	ldr	r2, [r5, #12]
 8006a9c:	3a01      	subs	r2, #1
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8006aa0:	686a      	ldr	r2, [r5, #4]
 8006aa2:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006aa8:	b002      	add	sp, #8
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006aac:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006aae:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006ab0:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ab2:	e7f9      	b.n	8006aa8 <HAL_OSPI_HyperbusCmd+0x60>

08006ab4 <HAL_OSPI_Transmit>:
{
 8006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	b085      	sub	sp, #20
 8006aba:	4604      	mov	r4, r0
 8006abc:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8006abe:	f7fe fcb5 	bl	800542c <HAL_GetTick>
 8006ac2:	4603      	mov	r3, r0
  if (pData == NULL)
 8006ac4:	b91f      	cbnz	r7, 8006ace <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006ac6:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8006ac8:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006aca:	65a3      	str	r3, [r4, #88]	; 0x58
 8006acc:	e02e      	b.n	8006b2c <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006ace:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006ad0:	2a04      	cmp	r2, #4
 8006ad2:	d12d      	bne.n	8006b30 <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006ad4:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006ad6:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8006ad8:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006ada:	3201      	adds	r2, #1
 8006adc:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8006ade:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006ae0:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006ae2:	6832      	ldr	r2, [r6, #0]
 8006ae4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ae8:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8006aea:	2201      	movs	r2, #1
 8006aec:	2104      	movs	r1, #4
 8006aee:	4620      	mov	r0, r4
 8006af0:	9500      	str	r5, [sp, #0]
 8006af2:	9303      	str	r3, [sp, #12]
 8006af4:	f7ff fe82 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006af8:	b9c0      	cbnz	r0, 8006b2c <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006afa:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while (hospi->XferCount > 0U);
 8006afc:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006afe:	7812      	ldrb	r2, [r2, #0]
 8006b00:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 8006b04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006b06:	3201      	adds	r2, #1
 8006b08:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8006b0a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006b0c:	3a01      	subs	r2, #1
 8006b0e:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 8006b10:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	d1e9      	bne.n	8006aea <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006b16:	2201      	movs	r2, #1
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	9500      	str	r5, [sp, #0]
 8006b1e:	f7ff fe6d 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006b22:	b918      	cbnz	r0, 8006b2c <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006b24:	2302      	movs	r3, #2
 8006b26:	6822      	ldr	r2, [r4, #0]
 8006b28:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006b2a:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006b2c:	b005      	add	sp, #20
 8006b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b30:	2310      	movs	r3, #16
 8006b32:	e7c9      	b.n	8006ac8 <HAL_OSPI_Transmit+0x14>

08006b34 <HAL_OSPI_Receive>:
{
 8006b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b36:	4604      	mov	r4, r0
 8006b38:	b085      	sub	sp, #20
 8006b3a:	460f      	mov	r7, r1
 8006b3c:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006b3e:	f7fe fc75 	bl	800542c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006b42:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006b44:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8006b46:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006b48:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8006b4c:	b91f      	cbnz	r7, 8006b56 <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006b4e:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8006b50:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b52:	65a3      	str	r3, [r4, #88]	; 0x58
 8006b54:	e034      	b.n	8006bc0 <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006b56:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b58:	2a04      	cmp	r2, #4
 8006b5a:	d13b      	bne.n	8006bd4 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006b5c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8006b5e:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006b60:	3201      	adds	r2, #1
 8006b62:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8006b64:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006b66:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006b68:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006b6a:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006b6c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006b70:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006b74:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006b78:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006b7a:	d123      	bne.n	8006bc4 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006b7c:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8006b7e:	2201      	movs	r2, #1
 8006b80:	2106      	movs	r1, #6
 8006b82:	4620      	mov	r0, r4
 8006b84:	9600      	str	r6, [sp, #0]
 8006b86:	9303      	str	r3, [sp, #12]
 8006b88:	f7ff fe38 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006b8c:	b9c0      	cbnz	r0, 8006bc0 <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006b8e:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8006b92:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while(hospi->XferCount > 0U);
 8006b94:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006b96:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8006b98:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006b9a:	3201      	adds	r2, #1
 8006b9c:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8006b9e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006ba0:	3a01      	subs	r2, #1
 8006ba2:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 8006ba4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	d1e9      	bne.n	8006b7e <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006baa:	2201      	movs	r2, #1
 8006bac:	2102      	movs	r1, #2
 8006bae:	4620      	mov	r0, r4
 8006bb0:	9600      	str	r6, [sp, #0]
 8006bb2:	f7ff fe23 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006bb6:	b918      	cbnz	r0, 8006bc0 <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006bb8:	2302      	movs	r3, #2
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006bbe:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006bc0:	b005      	add	sp, #20
 8006bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006bc4:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 8006bc8:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8006bcc:	d1d6      	bne.n	8006b7c <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006bce:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 8006bd2:	e7d4      	b.n	8006b7e <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	e7bb      	b.n	8006b50 <HAL_OSPI_Receive+0x1c>

08006bd8 <HAL_OSPI_AutoPolling>:
{
 8006bd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006bdc:	4604      	mov	r4, r0
 8006bde:	4616      	mov	r6, r2
 8006be0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006be2:	f7fe fc23 	bl	800542c <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8006be6:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006be8:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8006bea:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006bec:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006bf0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006bf2:	2a04      	cmp	r2, #4
 8006bf4:	d13c      	bne.n	8006c70 <HAL_OSPI_AutoPolling+0x98>
 8006bf6:	68ea      	ldr	r2, [r5, #12]
 8006bf8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006bfc:	d138      	bne.n	8006c70 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006bfe:	9003      	str	r0, [sp, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	2120      	movs	r1, #32
 8006c04:	4620      	mov	r0, r4
 8006c06:	9600      	str	r6, [sp, #0]
 8006c08:	f7ff fdf8 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006c0c:	bb28      	cbnz	r0, 8006c5a <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8006c0e:	6829      	ldr	r1, [r5, #0]
 8006c10:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006c12:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8006c14:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8006c18:	6869      	ldr	r1, [r5, #4]
 8006c1a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8006c1e:	6929      	ldr	r1, [r5, #16]
 8006c20:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006c24:	6810      	ldr	r0, [r2, #0]
 8006c26:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 8006c2a:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 8006c2e:	4329      	orrs	r1, r5
 8006c30:	4301      	orrs	r1, r0
 8006c32:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006c36:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006c38:	68e1      	ldr	r1, [r4, #12]
 8006c3a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006c3e:	d10f      	bne.n	8006c60 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006c40:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006c42:	2201      	movs	r2, #1
 8006c44:	2108      	movs	r1, #8
 8006c46:	4620      	mov	r0, r4
 8006c48:	9600      	str	r6, [sp, #0]
 8006c4a:	f7ff fdd7 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006c4e:	b920      	cbnz	r0, 8006c5a <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	2208      	movs	r2, #8
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8006c56:	2302      	movs	r3, #2
 8006c58:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006c5a:	b004      	add	sp, #16
 8006c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006c60:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8006c64:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 8006c68:	d1ea      	bne.n	8006c40 <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006c6a:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 8006c6e:	e7e8      	b.n	8006c42 <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c70:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006c72:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c74:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c76:	e7f0      	b.n	8006c5a <HAL_OSPI_AutoPolling+0x82>

08006c78 <HAL_OSPI_MemoryMapped>:
{
 8006c78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006c7e:	f7fe fbd5 	bl	800542c <HAL_GetTick>
 8006c82:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006c84:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006c86:	2a04      	cmp	r2, #4
 8006c88:	d121      	bne.n	8006cce <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006c8c:	2120      	movs	r1, #32
 8006c8e:	4620      	mov	r0, r4
 8006c90:	9200      	str	r2, [sp, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f7ff fdb2 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006c98:	b9b8      	cbnz	r0, 8006cca <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006c9a:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006c9c:	2388      	movs	r3, #136	; 0x88
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006c9e:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006ca0:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006ca2:	6563      	str	r3, [r4, #84]	; 0x54
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006ca4:	d108      	bne.n	8006cb8 <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006ca6:	686b      	ldr	r3, [r5, #4]
 8006ca8:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006cac:	2310      	movs	r3, #16
 8006cae:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006cb0:	6811      	ldr	r1, [r2, #0]
 8006cb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cb6:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006cb8:	6813      	ldr	r3, [r2, #0]
 8006cba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006cbe:	f023 0308 	bic.w	r3, r3, #8
 8006cc2:	4333      	orrs	r3, r6
 8006cc4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8006cc8:	6013      	str	r3, [r2, #0]
}
 8006cca:	b002      	add	sp, #8
 8006ccc:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006cce:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006cd0:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006cd2:	65a3      	str	r3, [r4, #88]	; 0x58
 8006cd4:	e7f9      	b.n	8006cca <HAL_OSPI_MemoryMapped+0x52>

08006cd6 <HAL_OSPI_Abort>:
{
 8006cd6:	b530      	push	{r4, r5, lr}
 8006cd8:	4604      	mov	r4, r0
 8006cda:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8006cdc:	f7fe fba6 	bl	800542c <HAL_GetTick>
 8006ce0:	4603      	mov	r3, r0
  state = hospi->State;
 8006ce2:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006ce4:	f012 0f0c 	tst.w	r2, #12
 8006ce8:	d035      	beq.n	8006d56 <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006cea:	6821      	ldr	r1, [r4, #0]
 8006cec:	680a      	ldr	r2, [r1, #0]
 8006cee:	f012 0204 	ands.w	r2, r2, #4
 8006cf2:	d02b      	beq.n	8006d4c <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006cf4:	680a      	ldr	r2, [r1, #0]
 8006cf6:	9003      	str	r0, [sp, #12]
 8006cf8:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006cfc:	6d20      	ldr	r0, [r4, #80]	; 0x50
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006cfe:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006d00:	f7ff fc62 	bl	80065c8 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	b108      	cbz	r0, 8006d0c <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006d08:	2204      	movs	r2, #4
 8006d0a:	65a2      	str	r2, [r4, #88]	; 0x58
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	6a11      	ldr	r1, [r2, #32]
 8006d10:	0689      	lsls	r1, r1, #26
 8006d12:	d51d      	bpl.n	8006d50 <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006d14:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006d16:	4620      	mov	r0, r4
 8006d18:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006d1a:	f041 0102 	orr.w	r1, r1, #2
 8006d1e:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006d20:	2102      	movs	r1, #2
 8006d22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006d24:	9200      	str	r2, [sp, #0]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f7ff fd68 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	b958      	cbnz	r0, 8006d48 <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006d34:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006d36:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006d38:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006d3a:	9200      	str	r2, [sp, #0]
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff fd5c 	bl	80067fc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006d44:	b900      	cbnz	r0, 8006d48 <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 8006d46:	6565      	str	r5, [r4, #84]	; 0x54
}
 8006d48:	b005      	add	sp, #20
 8006d4a:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	e7dd      	b.n	8006d0c <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 8006d50:	2302      	movs	r3, #2
 8006d52:	6563      	str	r3, [r4, #84]	; 0x54
 8006d54:	e7f8      	b.n	8006d48 <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006d56:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006d58:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006d5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d5c:	e7f4      	b.n	8006d48 <HAL_OSPI_Abort+0x72>
	...

08006d60 <HAL_OSPIM_Config>:
    other_instance = 0U;
 8006d60:	4ba5      	ldr	r3, [pc, #660]	; (8006ff8 <HAL_OSPIM_Config+0x298>)
  if (hospi->Instance == OCTOSPI1)
 8006d62:	6802      	ldr	r2, [r0, #0]
{
 8006d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 8006d68:	429a      	cmp	r2, r3
{
 8006d6a:	b08f      	sub	sp, #60	; 0x3c
    instance = 1U;
 8006d6c:	f04f 0501 	mov.w	r5, #1
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006d70:	f04f 0700 	mov.w	r7, #0
    other_instance = 0U;
 8006d74:	bf0b      	itete	eq
 8006d76:	f04f 0801 	moveq.w	r8, #1
 8006d7a:	f04f 0800 	movne.w	r8, #0
 8006d7e:	2400      	moveq	r4, #0
 8006d80:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006d82:	ab02      	add	r3, sp, #8
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006d84:	f8df e278 	ldr.w	lr, [pc, #632]	; 8007000 <HAL_OSPIM_Config+0x2a0>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8006d88:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8007004 <HAL_OSPIM_Config+0x2a4>
    if (instance_nb == 2U)
 8006d8c:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 8006d8e:	611f      	str	r7, [r3, #16]
    cfg->DQSPort    = 0U;
 8006d90:	e9c3 7700 	strd	r7, r7, [r3]
    cfg->IOLowPort  = 0U;
 8006d94:	e9c3 7702 	strd	r7, r7, [r3, #8]
    if (instance_nb == 2U)
 8006d98:	f040 812a 	bne.w	8006ff0 <HAL_OSPIM_Config+0x290>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006d9c:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 8006da0:	f012 0f01 	tst.w	r2, #1
 8006da4:	bf0c      	ite	eq
 8006da6:	464e      	moveq	r6, r9
 8006da8:	f44f 7600 	movne.w	r6, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006dac:	f04f 0c00 	mov.w	ip, #0
    {
      reg = OCTOSPIM->PCR[index];
 8006db0:	eb0e 028c 	add.w	r2, lr, ip, lsl #2
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8006db4:	f10c 0001 	add.w	r0, ip, #1
      reg = OCTOSPIM->PCR[index];
 8006db8:	6852      	ldr	r2, [r2, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006dba:	f012 0f01 	tst.w	r2, #1
 8006dbe:	d005      	beq.n	8006dcc <HAL_OSPIM_Config+0x6c>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006dc0:	ea82 0c06 	eor.w	ip, r2, r6
 8006dc4:	f01c 0f02 	tst.w	ip, #2
          cfg->ClkPort = index+1U;
 8006dc8:	bf08      	it	eq
 8006dca:	6018      	streq	r0, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006dcc:	f012 0f10 	tst.w	r2, #16
 8006dd0:	d005      	beq.n	8006dde <HAL_OSPIM_Config+0x7e>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006dd2:	ea82 0c06 	eor.w	ip, r2, r6
 8006dd6:	f01c 0f20 	tst.w	ip, #32
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8006dda:	bf08      	it	eq
 8006ddc:	6058      	streq	r0, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006dde:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006de2:	d005      	beq.n	8006df0 <HAL_OSPIM_Config+0x90>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006de4:	ea82 0c06 	eor.w	ip, r2, r6
 8006de8:	f41c 7f00 	tst.w	ip, #512	; 0x200
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8006dec:	bf08      	it	eq
 8006dee:	6098      	streq	r0, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006df0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006df4:	d00d      	beq.n	8006e12 <HAL_OSPIM_Config+0xb2>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006df6:	ea82 0c06 	eor.w	ip, r2, r6
 8006dfa:	f41c 2f80 	tst.w	ip, #262144	; 0x40000
 8006dfe:	d108      	bne.n	8006e12 <HAL_OSPIM_Config+0xb2>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006e00:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006e04:	bf0c      	ite	eq
 8006e06:	f440 3c80 	orreq.w	ip, r0, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006e0a:	f040 7c80 	orrne.w	ip, r0, #16777216	; 0x1000000
 8006e0e:	f8c3 c00c 	str.w	ip, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006e12:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8006e16:	d00b      	beq.n	8006e30 <HAL_OSPIM_Config+0xd0>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006e18:	ea82 0c06 	eor.w	ip, r2, r6
 8006e1c:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
 8006e20:	d106      	bne.n	8006e30 <HAL_OSPIM_Config+0xd0>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006e22:	0192      	lsls	r2, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006e24:	bf54      	ite	pl
 8006e26:	f440 3280 	orrpl.w	r2, r0, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006e2a:	f040 7280 	orrmi.w	r2, r0, #16777216	; 0x1000000
 8006e2e:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006e30:	2802      	cmp	r0, #2
 8006e32:	f04f 0c01 	mov.w	ip, #1
 8006e36:	d1bb      	bne.n	8006db0 <HAL_OSPIM_Config+0x50>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006e38:	2d02      	cmp	r5, #2
 8006e3a:	f103 0318 	add.w	r3, r3, #24
 8006e3e:	f040 80d5 	bne.w	8006fec <HAL_OSPIM_Config+0x28c>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006e42:	4a6d      	ldr	r2, [pc, #436]	; (8006ff8 <HAL_OSPIM_Config+0x298>)
 8006e44:	6815      	ldr	r5, [r2, #0]
 8006e46:	ea15 050c 	ands.w	r5, r5, ip
 8006e4a:	d004      	beq.n	8006e56 <HAL_OSPIM_Config+0xf6>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006e4c:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006e4e:	4665      	mov	r5, ip
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006e56:	4b69      	ldr	r3, [pc, #420]	; (8006ffc <HAL_OSPIM_Config+0x29c>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	07d0      	lsls	r0, r2, #31
 8006e5c:	f140 80ca 	bpl.w	8006ff4 <HAL_OSPIM_Config+0x294>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8006e68:	f045 0302 	orr.w	r3, r5, #2
 8006e6c:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006e6e:	ab0e      	add	r3, sp, #56	; 0x38
 8006e70:	2018      	movs	r0, #24
 8006e72:	fb00 3004 	mla	r0, r0, r4, r3
 8006e76:	4b62      	ldr	r3, [pc, #392]	; (8007000 <HAL_OSPIM_Config+0x2a0>)
 8006e78:	f850 2c28 	ldr.w	r2, [r0, #-40]
 8006e7c:	3a01      	subs	r2, #1
 8006e7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006e82:	6857      	ldr	r7, [r2, #4]
 8006e84:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8006e88:	6057      	str	r7, [r2, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	07d2      	lsls	r2, r2, #31
 8006e8e:	f140 80bd 	bpl.w	800700c <HAL_OSPIM_Config+0x2ac>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8006e9a:	f1b8 0f00 	cmp.w	r8, #0
 8006e9e:	d02c      	beq.n	8006efa <HAL_OSPIM_Config+0x19a>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8006ea0:	9a08      	ldr	r2, [sp, #32]
 8006ea2:	3a01      	subs	r2, #1
 8006ea4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006ea8:	6850      	ldr	r0, [r2, #4]
 8006eaa:	f040 0002 	orr.w	r0, r0, #2
 8006eae:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb2:	b132      	cbz	r2, 8006ec2 <HAL_OSPIM_Config+0x162>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8006eb4:	3a01      	subs	r2, #1
 8006eb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	f042 0220 	orr.w	r2, r2, #32
 8006ec0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ec4:	b15b      	cbz	r3, 8006ede <HAL_OSPIM_Config+0x17e>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006ed2:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006edc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ee0:	b15b      	cbz	r3, 8006efa <HAL_OSPIM_Config+0x19a>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006eee:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006ef8:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006efa:	ab0e      	add	r3, sp, #56	; 0x38
 8006efc:	f04f 0918 	mov.w	r9, #24
 8006f00:	f8d1 c000 	ldr.w	ip, [r1]
 8006f04:	fb09 3908 	mla	r9, r9, r8, r3
 8006f08:	f859 ac30 	ldr.w	sl, [r9, #-48]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006f0c:	f859 0c20 	ldr.w	r0, [r9, #-32]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006f10:	45d4      	cmp	ip, sl
 8006f12:	f859 bc2c 	ldr.w	fp, [r9, #-44]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006f16:	e9d1 7e01 	ldrd	r7, lr, [r1, #4]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006f1a:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006f1e:	f000 80b3 	beq.w	8007088 <HAL_OSPIM_Config+0x328>
 8006f22:	45bb      	cmp	fp, r7
 8006f24:	d00a      	beq.n	8006f3c <HAL_OSPIM_Config+0x1dc>
 8006f26:	f859 6c28 	ldr.w	r6, [r9, #-40]
 8006f2a:	4576      	cmp	r6, lr
 8006f2c:	d006      	beq.n	8006f3c <HAL_OSPIM_Config+0x1dc>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006f2e:	f859 9c24 	ldr.w	r9, [r9, #-36]
 8006f32:	4591      	cmp	r9, r2
 8006f34:	d002      	beq.n	8006f3c <HAL_OSPIM_Config+0x1dc>
 8006f36:	4298      	cmp	r0, r3
 8006f38:	f040 80b9 	bne.w	80070ae <HAL_OSPIM_Config+0x34e>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006f3c:	f10a 39ff 	add.w	r9, sl, #4294967295
 8006f40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007000 <HAL_OSPIM_Config+0x2a0>
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006f44:	ae0e      	add	r6, sp, #56	; 0x38
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006f46:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 8006f4a:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8006f4e:	f02b 0b01 	bic.w	fp, fp, #1
 8006f52:	f8c9 b004 	str.w	fp, [r9, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006f56:	f04f 0918 	mov.w	r9, #24
 8006f5a:	fb09 6908 	mla	r9, r9, r8, r6
 8006f5e:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8006f62:	f1b9 0f00 	cmp.w	r9, #0
 8006f66:	d009      	beq.n	8006f7c <HAL_OSPIM_Config+0x21c>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006f68:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f6c:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 8006f70:	f8d9 a004 	ldr.w	sl, [r9, #4]
 8006f74:	f02a 0a10 	bic.w	sl, sl, #16
 8006f78:	f8c9 a004 	str.w	sl, [r9, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006f7c:	f04f 0918 	mov.w	r9, #24
 8006f80:	ae0e      	add	r6, sp, #56	; 0x38
 8006f82:	fb09 6808 	mla	r8, r9, r8, r6
 8006f86:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007008 <HAL_OSPIM_Config+0x2a8>
 8006f8a:	f858 6c28 	ldr.w	r6, [r8, #-40]
 8006f8e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006f92:	44d1      	add	r9, sl
 8006f94:	f8d9 a004 	ldr.w	sl, [r9, #4]
 8006f98:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8006f9c:	f8c9 a004 	str.w	sl, [r9, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006fa0:	f858 8c24 	ldr.w	r8, [r8, #-36]
 8006fa4:	f1b8 0f00 	cmp.w	r8, #0
 8006fa8:	d00f      	beq.n	8006fca <HAL_OSPIM_Config+0x26a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006faa:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fae:	f008 0801 	and.w	r8, r8, #1
 8006fb2:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006fb6:	f108 48a4 	add.w	r8, r8, #1375731712	; 0x52000000
 8006fba:	f508 4834 	add.w	r8, r8, #46080	; 0xb400
 8006fbe:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8006fc2:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 8006fc6:	f8c8 9004 	str.w	r9, [r8, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d06f      	beq.n	80070ae <HAL_OSPIM_Config+0x34e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006fce:	3801      	subs	r0, #1
 8006fd0:	f000 0001 	and.w	r0, r0, #1
 8006fd4:	0080      	lsls	r0, r0, #2
 8006fd6:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 8006fda:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 8006fde:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006fe2:	f028 7880 	bic.w	r8, r8, #16777216	; 0x1000000
 8006fe6:	f8c0 8004 	str.w	r8, [r0, #4]
 8006fea:	e060      	b.n	80070ae <HAL_OSPIM_Config+0x34e>
 8006fec:	4605      	mov	r5, r0
 8006fee:	e6cd      	b.n	8006d8c <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	e6db      	b.n	8006dac <HAL_OSPIM_Config+0x4c>
 8006ff4:	9501      	str	r5, [sp, #4]
 8006ff6:	e73a      	b.n	8006e6e <HAL_OSPIM_Config+0x10e>
 8006ff8:	52005000 	.word	0x52005000
 8006ffc:	5200a000 	.word	0x5200a000
 8007000:	5200b400 	.word	0x5200b400
 8007004:	04040222 	.word	0x04040222
 8007008:	5200b3fc 	.word	0x5200b3fc
      if (IOM_cfg[instance].ClkPort != 0U)
 800700c:	f850 2c30 	ldr.w	r2, [r0, #-48]
 8007010:	2a00      	cmp	r2, #0
 8007012:	f43f af72 	beq.w	8006efa <HAL_OSPIM_Config+0x19a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007016:	3a01      	subs	r2, #1
 8007018:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800701c:	6857      	ldr	r7, [r2, #4]
 800701e:	f027 0701 	bic.w	r7, r7, #1
 8007022:	6057      	str	r7, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007024:	f850 2c2c 	ldr.w	r2, [r0, #-44]
 8007028:	b132      	cbz	r2, 8007038 <HAL_OSPIM_Config+0x2d8>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800702a:	3a01      	subs	r2, #1
 800702c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	f022 0210 	bic.w	r2, r2, #16
 8007036:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007038:	2318      	movs	r3, #24
 800703a:	aa0e      	add	r2, sp, #56	; 0x38
 800703c:	fb03 2304 	mla	r3, r3, r4, r2
 8007040:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8007044:	b15b      	cbz	r3, 800705e <HAL_OSPIM_Config+0x2fe>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007046:	3b01      	subs	r3, #1
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007052:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800705c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800705e:	2318      	movs	r3, #24
 8007060:	aa0e      	add	r2, sp, #56	; 0x38
 8007062:	fb03 2304 	mla	r3, r3, r4, r2
 8007066:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f43f af45 	beq.w	8006efa <HAL_OSPIM_Config+0x19a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007070:	3b01      	subs	r3, #1
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800707c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007086:	e737      	b.n	8006ef8 <HAL_OSPIM_Config+0x198>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007088:	45bb      	cmp	fp, r7
 800708a:	f47f af57 	bne.w	8006f3c <HAL_OSPIM_Config+0x1dc>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800708e:	f859 9c24 	ldr.w	r9, [r9, #-36]
 8007092:	4591      	cmp	r9, r2
 8007094:	f47f af52 	bne.w	8006f3c <HAL_OSPIM_Config+0x1dc>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007098:	4298      	cmp	r0, r3
 800709a:	f47f af4f 	bne.w	8006f3c <HAL_OSPIM_Config+0x1dc>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800709e:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 800728c <HAL_OSPIM_Config+0x52c>
 80070a2:	f8d8 0000 	ldr.w	r0, [r8]
 80070a6:	f040 0001 	orr.w	r0, r0, #1
 80070aa:	f8c8 0000 	str.w	r0, [r8]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80070ae:	4877      	ldr	r0, [pc, #476]	; (800728c <HAL_OSPIM_Config+0x52c>)
 80070b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80070b4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80070b8:	f8de 8004 	ldr.w	r8, [lr, #4]
 80070bc:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 80070c0:	ea48 2844 	orr.w	r8, r8, r4, lsl #9
 80070c4:	f448 7880 	orr.w	r8, r8, #256	; 0x100
 80070c8:	f8ce 8004 	str.w	r8, [lr, #4]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80070cc:	6949      	ldr	r1, [r1, #20]
 80070ce:	f101 3eff 	add.w	lr, r1, #4294967295
 80070d2:	6801      	ldr	r1, [r0, #0]
 80070d4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80070d8:	458e      	cmp	lr, r1
 80070da:	d905      	bls.n	80070e8 <HAL_OSPIM_Config+0x388>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80070dc:	6801      	ldr	r1, [r0, #0]
 80070de:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 80070e2:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80070e6:	6001      	str	r1, [r0, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80070e8:	6801      	ldr	r1, [r0, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80070ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070ee:	f402 3e80 	and.w	lr, r2, #65536	; 0x10000
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80070f2:	f011 0f01 	tst.w	r1, #1
 80070f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80070fa:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80070fe:	4484      	add	ip, r0
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007100:	d063      	beq.n	80071ca <HAL_OSPIM_Config+0x46a>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007102:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8007106:	f024 0403 	bic.w	r4, r4, #3
 800710a:	f044 0401 	orr.w	r4, r4, #1
 800710e:	f8cc 4004 	str.w	r4, [ip, #4]
      if (cfg->DQSPort != 0U)
 8007112:	b147      	cbz	r7, 8007126 <HAL_OSPIM_Config+0x3c6>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007114:	3f01      	subs	r7, #1
 8007116:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800711a:	6844      	ldr	r4, [r0, #4]
 800711c:	f024 0430 	bic.w	r4, r4, #48	; 0x30
 8007120:	f044 0410 	orr.w	r4, r4, #16
 8007124:	6044      	str	r4, [r0, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007126:	f1be 0f00 	cmp.w	lr, #0
 800712a:	d02e      	beq.n	800718a <HAL_OSPIM_Config+0x42a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800712c:	3a01      	subs	r2, #1
 800712e:	f002 0201 	and.w	r2, r2, #1
 8007132:	0092      	lsls	r2, r2, #2
 8007134:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8007138:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800713c:	6850      	ldr	r0, [r2, #4]
 800713e:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8007142:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007146:	6050      	str	r0, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007148:	b379      	cbz	r1, 80071aa <HAL_OSPIM_Config+0x44a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800714a:	3b01      	subs	r3, #1
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007156:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007160:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007164:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 8007166:	b125      	cbz	r5, 8007172 <HAL_OSPIM_Config+0x412>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007168:	4a49      	ldr	r2, [pc, #292]	; (8007290 <HAL_OSPIM_Config+0x530>)
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	079b      	lsls	r3, r3, #30
 8007176:	d504      	bpl.n	8007182 <HAL_OSPIM_Config+0x422>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007178:	4a46      	ldr	r2, [pc, #280]	; (8007294 <HAL_OSPIM_Config+0x534>)
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	6013      	str	r3, [r2, #0]
}
 8007182:	2000      	movs	r0, #0
 8007184:	b00f      	add	sp, #60	; 0x3c
 8007186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800718a:	2a00      	cmp	r2, #0
 800718c:	d0dc      	beq.n	8007148 <HAL_OSPIM_Config+0x3e8>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800718e:	3a01      	subs	r2, #1
 8007190:	f002 0201 	and.w	r2, r2, #1
 8007194:	0092      	lsls	r2, r2, #2
 8007196:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 800719a:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800719e:	6850      	ldr	r0, [r2, #4]
 80071a0:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 80071a4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80071a8:	e7cd      	b.n	8007146 <HAL_OSPIM_Config+0x3e6>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0db      	beq.n	8007166 <HAL_OSPIM_Config+0x406>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80071ae:	3b01      	subs	r3, #1
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80071ba:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80071c4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80071c8:	e7cc      	b.n	8007164 <HAL_OSPIM_Config+0x404>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80071ca:	f8dc 8004 	ldr.w	r8, [ip, #4]
 80071ce:	f028 0803 	bic.w	r8, r8, #3
 80071d2:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
 80071d6:	f048 0801 	orr.w	r8, r8, #1
 80071da:	f8cc 8004 	str.w	r8, [ip, #4]
      if (cfg->DQSPort != 0U)
 80071de:	b157      	cbz	r7, 80071f6 <HAL_OSPIM_Config+0x496>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80071e0:	3f01      	subs	r7, #1
 80071e2:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 80071e6:	6847      	ldr	r7, [r0, #4]
 80071e8:	f027 0730 	bic.w	r7, r7, #48	; 0x30
 80071ec:	ea47 1744 	orr.w	r7, r7, r4, lsl #5
 80071f0:	f047 0710 	orr.w	r7, r7, #16
 80071f4:	6047      	str	r7, [r0, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80071f6:	f1be 0f00 	cmp.w	lr, #0
 80071fa:	d021      	beq.n	8007240 <HAL_OSPIM_Config+0x4e0>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80071fc:	3a01      	subs	r2, #1
 80071fe:	f002 0201 	and.w	r2, r2, #1
 8007202:	0092      	lsls	r2, r2, #2
 8007204:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8007208:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800720c:	6850      	ldr	r0, [r2, #4]
 800720e:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8007212:	ea40 4084 	orr.w	r0, r0, r4, lsl #18
 8007216:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800721a:	6050      	str	r0, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800721c:	b311      	cbz	r1, 8007264 <HAL_OSPIM_Config+0x504>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800721e:	3b01      	subs	r3, #1
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800722a:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007234:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 8007238:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800723c:	605c      	str	r4, [r3, #4]
 800723e:	e792      	b.n	8007166 <HAL_OSPIM_Config+0x406>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007240:	2a00      	cmp	r2, #0
 8007242:	d0eb      	beq.n	800721c <HAL_OSPIM_Config+0x4bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007244:	3a01      	subs	r2, #1
 8007246:	f002 0201 	and.w	r2, r2, #1
 800724a:	0092      	lsls	r2, r2, #2
 800724c:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8007250:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8007254:	6850      	ldr	r0, [r2, #4]
 8007256:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 800725a:	ea40 6084 	orr.w	r0, r0, r4, lsl #26
 800725e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8007262:	e7da      	b.n	800721a <HAL_OSPIM_Config+0x4ba>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007264:	2b00      	cmp	r3, #0
 8007266:	f43f af7e 	beq.w	8007166 <HAL_OSPIM_Config+0x406>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800726a:	3b01      	subs	r3, #1
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007276:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8007280:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 8007284:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 8007288:	e7d8      	b.n	800723c <HAL_OSPIM_Config+0x4dc>
 800728a:	bf00      	nop
 800728c:	5200b400 	.word	0x5200b400
 8007290:	52005000 	.word	0x52005000
 8007294:	5200a000 	.word	0x5200a000

08007298 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007298:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800729a:	4d1d      	ldr	r5, [pc, #116]	; (8007310 <HAL_PWREx_ConfigSupply+0x78>)
{
 800729c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800729e:	68eb      	ldr	r3, [r5, #12]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	2b06      	cmp	r3, #6
 80072a6:	d006      	beq.n	80072b6 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80072a8:	68e8      	ldr	r0, [r5, #12]
 80072aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80072ae:	1b00      	subs	r0, r0, r4
 80072b0:	bf18      	it	ne
 80072b2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80072b6:	68eb      	ldr	r3, [r5, #12]
 80072b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80072bc:	4303      	orrs	r3, r0
 80072be:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 80072c0:	f7fe f8b4 	bl	800542c <HAL_GetTick>
 80072c4:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072c6:	686b      	ldr	r3, [r5, #4]
 80072c8:	049b      	lsls	r3, r3, #18
 80072ca:	d508      	bpl.n	80072de <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80072cc:	f1a4 031d 	sub.w	r3, r4, #29
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d90c      	bls.n	80072ee <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80072d4:	3c2d      	subs	r4, #45	; 0x2d
 80072d6:	2c01      	cmp	r4, #1
 80072d8:	d909      	bls.n	80072ee <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80072da:	2000      	movs	r0, #0
 80072dc:	e7ea      	b.n	80072b4 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80072de:	f7fe f8a5 	bl	800542c <HAL_GetTick>
 80072e2:	1b80      	subs	r0, r0, r6
 80072e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80072e8:	d9ed      	bls.n	80072c6 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 80072ea:	2001      	movs	r0, #1
 80072ec:	e7e2      	b.n	80072b4 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 80072ee:	f7fe f89d 	bl	800542c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80072f2:	4d07      	ldr	r5, [pc, #28]	; (8007310 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 80072f4:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80072f6:	68eb      	ldr	r3, [r5, #12]
 80072f8:	f003 0311 	and.w	r3, r3, #17
 80072fc:	2b11      	cmp	r3, #17
 80072fe:	d0ec      	beq.n	80072da <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007300:	f7fe f894 	bl	800542c <HAL_GetTick>
 8007304:	1b00      	subs	r0, r0, r4
 8007306:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800730a:	d9f4      	bls.n	80072f6 <HAL_PWREx_ConfigSupply+0x5e>
 800730c:	e7ed      	b.n	80072ea <HAL_PWREx_ConfigSupply+0x52>
 800730e:	bf00      	nop
 8007310:	58024800 	.word	0x58024800

08007314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007316:	4604      	mov	r4, r0
 8007318:	b908      	cbnz	r0, 800731e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800731a:	2001      	movs	r0, #1
 800731c:	e07f      	b.n	800741e <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800731e:	6803      	ldr	r3, [r0, #0]
 8007320:	07df      	lsls	r7, r3, #31
 8007322:	d453      	bmi.n	80073cc <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	079e      	lsls	r6, r3, #30
 8007328:	f100 80a3 	bmi.w	8007472 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	06da      	lsls	r2, r3, #27
 8007330:	d51c      	bpl.n	800736c <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007332:	4b98      	ldr	r3, [pc, #608]	; (8007594 <HAL_RCC_OscConfig+0x280>)
 8007334:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007336:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007338:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800733c:	2a08      	cmp	r2, #8
 800733e:	d007      	beq.n	8007350 <HAL_RCC_OscConfig+0x3c>
 8007340:	2a18      	cmp	r2, #24
 8007342:	f040 80e5 	bne.w	8007510 <HAL_RCC_OscConfig+0x1fc>
 8007346:	f001 0203 	and.w	r2, r1, #3
 800734a:	2a01      	cmp	r2, #1
 800734c:	f040 80e0 	bne.w	8007510 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	05db      	lsls	r3, r3, #23
 8007354:	d502      	bpl.n	800735c <HAL_RCC_OscConfig+0x48>
 8007356:	69e3      	ldr	r3, [r4, #28]
 8007358:	2b80      	cmp	r3, #128	; 0x80
 800735a:	d1de      	bne.n	800731a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800735c:	4a8d      	ldr	r2, [pc, #564]	; (8007594 <HAL_RCC_OscConfig+0x280>)
 800735e:	6a21      	ldr	r1, [r4, #32]
 8007360:	68d3      	ldr	r3, [r2, #12]
 8007362:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007366:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800736a:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	0719      	lsls	r1, r3, #28
 8007370:	f100 80fb 	bmi.w	800756a <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	069a      	lsls	r2, r3, #26
 8007378:	f100 8121 	bmi.w	80075be <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	075d      	lsls	r5, r3, #29
 8007380:	d51e      	bpl.n	80073c0 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 8007382:	4d85      	ldr	r5, [pc, #532]	; (8007598 <HAL_RCC_OscConfig+0x284>)
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800738a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800738c:	f7fe f84e 	bl	800542c <HAL_GetTick>
 8007390:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007392:	682b      	ldr	r3, [r5, #0]
 8007394:	05da      	lsls	r2, r3, #23
 8007396:	f140 8137 	bpl.w	8007608 <HAL_RCC_OscConfig+0x2f4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800739a:	68a3      	ldr	r3, [r4, #8]
 800739c:	4d7d      	ldr	r5, [pc, #500]	; (8007594 <HAL_RCC_OscConfig+0x280>)
 800739e:	2b01      	cmp	r3, #1
 80073a0:	f040 8139 	bne.w	8007616 <HAL_RCC_OscConfig+0x302>
 80073a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073ac:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80073b0:	f7fe f83c 	bl	800542c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073b4:	4e77      	ldr	r6, [pc, #476]	; (8007594 <HAL_RCC_OscConfig+0x280>)
      tickstart = HAL_GetTick();
 80073b6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073b8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80073ba:	079b      	lsls	r3, r3, #30
 80073bc:	f140 8151 	bpl.w	8007662 <HAL_RCC_OscConfig+0x34e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f040 8154 	bne.w	8007670 <HAL_RCC_OscConfig+0x35c>
      }
    }
  }
  return HAL_OK;
 80073c8:	2000      	movs	r0, #0
 80073ca:	e028      	b.n	800741e <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073cc:	4b71      	ldr	r3, [pc, #452]	; (8007594 <HAL_RCC_OscConfig+0x280>)
 80073ce:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073d2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80073d6:	2a10      	cmp	r2, #16
 80073d8:	d005      	beq.n	80073e6 <HAL_RCC_OscConfig+0xd2>
 80073da:	2a18      	cmp	r2, #24
 80073dc:	d10a      	bne.n	80073f4 <HAL_RCC_OscConfig+0xe0>
 80073de:	f001 0203 	and.w	r2, r1, #3
 80073e2:	2a02      	cmp	r2, #2
 80073e4:	d106      	bne.n	80073f4 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	039d      	lsls	r5, r3, #14
 80073ea:	d59b      	bpl.n	8007324 <HAL_RCC_OscConfig+0x10>
 80073ec:	6863      	ldr	r3, [r4, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d198      	bne.n	8007324 <HAL_RCC_OscConfig+0x10>
 80073f2:	e792      	b.n	800731a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073f4:	6862      	ldr	r2, [r4, #4]
 80073f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80073fa:	d111      	bne.n	8007420 <HAL_RCC_OscConfig+0x10c>
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007402:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007404:	f7fe f812 	bl	800542c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007408:	4e62      	ldr	r6, [pc, #392]	; (8007594 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800740a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800740c:	6833      	ldr	r3, [r6, #0]
 800740e:	0398      	lsls	r0, r3, #14
 8007410:	d488      	bmi.n	8007324 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007412:	f7fe f80b 	bl	800542c <HAL_GetTick>
 8007416:	1b40      	subs	r0, r0, r5
 8007418:	2864      	cmp	r0, #100	; 0x64
 800741a:	d9f7      	bls.n	800740c <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 800741c:	2003      	movs	r0, #3
}
 800741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007420:	4d5c      	ldr	r5, [pc, #368]	; (8007594 <HAL_RCC_OscConfig+0x280>)
 8007422:	682b      	ldr	r3, [r5, #0]
 8007424:	b99a      	cbnz	r2, 800744e <HAL_RCC_OscConfig+0x13a>
 8007426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007432:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007434:	f7fd fffa 	bl	800542c <HAL_GetTick>
 8007438:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800743a:	682b      	ldr	r3, [r5, #0]
 800743c:	0399      	lsls	r1, r3, #14
 800743e:	f57f af71 	bpl.w	8007324 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007442:	f7fd fff3 	bl	800542c <HAL_GetTick>
 8007446:	1b80      	subs	r0, r0, r6
 8007448:	2864      	cmp	r0, #100	; 0x64
 800744a:	d9f6      	bls.n	800743a <HAL_RCC_OscConfig+0x126>
 800744c:	e7e6      	b.n	800741c <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800744e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8007452:	d107      	bne.n	8007464 <HAL_RCC_OscConfig+0x150>
 8007454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007458:	602b      	str	r3, [r5, #0]
 800745a:	682b      	ldr	r3, [r5, #0]
 800745c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	e7cf      	b.n	8007404 <HAL_RCC_OscConfig+0xf0>
 8007464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007470:	e7f6      	b.n	8007460 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007472:	4b48      	ldr	r3, [pc, #288]	; (8007594 <HAL_RCC_OscConfig+0x280>)
 8007474:	68e1      	ldr	r1, [r4, #12]
 8007476:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007478:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800747a:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800747e:	d003      	beq.n	8007488 <HAL_RCC_OscConfig+0x174>
 8007480:	2a18      	cmp	r2, #24
 8007482:	d121      	bne.n	80074c8 <HAL_RCC_OscConfig+0x1b4>
 8007484:	0782      	lsls	r2, r0, #30
 8007486:	d11f      	bne.n	80074c8 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	075b      	lsls	r3, r3, #29
 800748c:	d502      	bpl.n	8007494 <HAL_RCC_OscConfig+0x180>
 800748e:	2900      	cmp	r1, #0
 8007490:	f43f af43 	beq.w	800731a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007494:	4d3f      	ldr	r5, [pc, #252]	; (8007594 <HAL_RCC_OscConfig+0x280>)
 8007496:	682a      	ldr	r2, [r5, #0]
 8007498:	f022 0219 	bic.w	r2, r2, #25
 800749c:	430a      	orrs	r2, r1
 800749e:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 80074a0:	f7fd ffc4 	bl	800542c <HAL_GetTick>
 80074a4:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074a6:	682b      	ldr	r3, [r5, #0]
 80074a8:	075f      	lsls	r7, r3, #29
 80074aa:	d507      	bpl.n	80074bc <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ac:	686b      	ldr	r3, [r5, #4]
 80074ae:	6922      	ldr	r2, [r4, #16]
 80074b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80074b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80074b8:	606b      	str	r3, [r5, #4]
 80074ba:	e737      	b.n	800732c <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074bc:	f7fd ffb6 	bl	800542c <HAL_GetTick>
 80074c0:	1b80      	subs	r0, r0, r6
 80074c2:	2802      	cmp	r0, #2
 80074c4:	d9ef      	bls.n	80074a6 <HAL_RCC_OscConfig+0x192>
 80074c6:	e7a9      	b.n	800741c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074c8:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074ca:	b181      	cbz	r1, 80074ee <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074cc:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074d0:	4d30      	ldr	r5, [pc, #192]	; (8007594 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074d2:	430a      	orrs	r2, r1
 80074d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80074d6:	f7fd ffa9 	bl	800542c <HAL_GetTick>
 80074da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	0758      	lsls	r0, r3, #29
 80074e0:	d4e4      	bmi.n	80074ac <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074e2:	f7fd ffa3 	bl	800542c <HAL_GetTick>
 80074e6:	1b80      	subs	r0, r0, r6
 80074e8:	2802      	cmp	r0, #2
 80074ea:	d9f7      	bls.n	80074dc <HAL_RCC_OscConfig+0x1c8>
 80074ec:	e796      	b.n	800741c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 80074ee:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074f2:	4e28      	ldr	r6, [pc, #160]	; (8007594 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_DISABLE();
 80074f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80074f6:	f7fd ff99 	bl	800542c <HAL_GetTick>
 80074fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074fc:	6833      	ldr	r3, [r6, #0]
 80074fe:	0759      	lsls	r1, r3, #29
 8007500:	f57f af14 	bpl.w	800732c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007504:	f7fd ff92 	bl	800542c <HAL_GetTick>
 8007508:	1b40      	subs	r0, r0, r5
 800750a:	2802      	cmp	r0, #2
 800750c:	d9f6      	bls.n	80074fc <HAL_RCC_OscConfig+0x1e8>
 800750e:	e785      	b.n	800741c <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007510:	69e2      	ldr	r2, [r4, #28]
 8007512:	b1c2      	cbz	r2, 8007546 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 8007514:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007516:	4d1f      	ldr	r5, [pc, #124]	; (8007594 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_CSI_ENABLE();
 8007518:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800751c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800751e:	f7fd ff85 	bl	800542c <HAL_GetTick>
 8007522:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	05df      	lsls	r7, r3, #23
 8007528:	d507      	bpl.n	800753a <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800752a:	68eb      	ldr	r3, [r5, #12]
 800752c:	6a22      	ldr	r2, [r4, #32]
 800752e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007532:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007536:	60eb      	str	r3, [r5, #12]
 8007538:	e718      	b.n	800736c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800753a:	f7fd ff77 	bl	800542c <HAL_GetTick>
 800753e:	1b80      	subs	r0, r0, r6
 8007540:	2802      	cmp	r0, #2
 8007542:	d9ef      	bls.n	8007524 <HAL_RCC_OscConfig+0x210>
 8007544:	e76a      	b.n	800741c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 8007546:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007548:	4e12      	ldr	r6, [pc, #72]	; (8007594 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_CSI_DISABLE();
 800754a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800754e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007550:	f7fd ff6c 	bl	800542c <HAL_GetTick>
 8007554:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007556:	6833      	ldr	r3, [r6, #0]
 8007558:	05d8      	lsls	r0, r3, #23
 800755a:	f57f af07 	bpl.w	800736c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800755e:	f7fd ff65 	bl	800542c <HAL_GetTick>
 8007562:	1b40      	subs	r0, r0, r5
 8007564:	2802      	cmp	r0, #2
 8007566:	d9f6      	bls.n	8007556 <HAL_RCC_OscConfig+0x242>
 8007568:	e758      	b.n	800741c <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800756a:	6963      	ldr	r3, [r4, #20]
 800756c:	4d09      	ldr	r5, [pc, #36]	; (8007594 <HAL_RCC_OscConfig+0x280>)
 800756e:	b1ab      	cbz	r3, 800759c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8007570:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007578:	f7fd ff58 	bl	800542c <HAL_GetTick>
 800757c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800757e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007580:	079b      	lsls	r3, r3, #30
 8007582:	f53f aef7 	bmi.w	8007374 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007586:	f7fd ff51 	bl	800542c <HAL_GetTick>
 800758a:	1b80      	subs	r0, r0, r6
 800758c:	2802      	cmp	r0, #2
 800758e:	d9f6      	bls.n	800757e <HAL_RCC_OscConfig+0x26a>
 8007590:	e744      	b.n	800741c <HAL_RCC_OscConfig+0x108>
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400
 8007598:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 800759c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80075a4:	f7fd ff42 	bl	800542c <HAL_GetTick>
 80075a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80075ac:	079f      	lsls	r7, r3, #30
 80075ae:	f57f aee1 	bpl.w	8007374 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075b2:	f7fd ff3b 	bl	800542c <HAL_GetTick>
 80075b6:	1b80      	subs	r0, r0, r6
 80075b8:	2802      	cmp	r0, #2
 80075ba:	d9f6      	bls.n	80075aa <HAL_RCC_OscConfig+0x296>
 80075bc:	e72e      	b.n	800741c <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80075be:	69a3      	ldr	r3, [r4, #24]
 80075c0:	4d83      	ldr	r5, [pc, #524]	; (80077d0 <HAL_RCC_OscConfig+0x4bc>)
 80075c2:	b183      	cbz	r3, 80075e6 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI48_ENABLE();
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80075cc:	f7fd ff2e 	bl	800542c <HAL_GetTick>
 80075d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	0498      	lsls	r0, r3, #18
 80075d6:	f53f aed1 	bmi.w	800737c <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80075da:	f7fd ff27 	bl	800542c <HAL_GetTick>
 80075de:	1b80      	subs	r0, r0, r6
 80075e0:	2802      	cmp	r0, #2
 80075e2:	d9f6      	bls.n	80075d2 <HAL_RCC_OscConfig+0x2be>
 80075e4:	e71a      	b.n	800741c <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 80075e6:	682b      	ldr	r3, [r5, #0]
 80075e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80075ee:	f7fd ff1d 	bl	800542c <HAL_GetTick>
 80075f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	0499      	lsls	r1, r3, #18
 80075f8:	f57f aec0 	bpl.w	800737c <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80075fc:	f7fd ff16 	bl	800542c <HAL_GetTick>
 8007600:	1b80      	subs	r0, r0, r6
 8007602:	2802      	cmp	r0, #2
 8007604:	d9f6      	bls.n	80075f4 <HAL_RCC_OscConfig+0x2e0>
 8007606:	e709      	b.n	800741c <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007608:	f7fd ff10 	bl	800542c <HAL_GetTick>
 800760c:	1b80      	subs	r0, r0, r6
 800760e:	2864      	cmp	r0, #100	; 0x64
 8007610:	f67f aebf 	bls.w	8007392 <HAL_RCC_OscConfig+0x7e>
 8007614:	e702      	b.n	800741c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007616:	b9b3      	cbnz	r3, 8007646 <HAL_RCC_OscConfig+0x332>
 8007618:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	672b      	str	r3, [r5, #112]	; 0x70
 8007624:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007626:	f023 0304 	bic.w	r3, r3, #4
 800762a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800762c:	f7fd fefe 	bl	800542c <HAL_GetTick>
 8007630:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007632:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007634:	0798      	lsls	r0, r3, #30
 8007636:	f57f aec3 	bpl.w	80073c0 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800763a:	f7fd fef7 	bl	800542c <HAL_GetTick>
 800763e:	1b80      	subs	r0, r0, r6
 8007640:	42b8      	cmp	r0, r7
 8007642:	d9f6      	bls.n	8007632 <HAL_RCC_OscConfig+0x31e>
 8007644:	e6ea      	b.n	800741c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007646:	2b05      	cmp	r3, #5
 8007648:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800764a:	d103      	bne.n	8007654 <HAL_RCC_OscConfig+0x340>
 800764c:	f043 0304 	orr.w	r3, r3, #4
 8007650:	672b      	str	r3, [r5, #112]	; 0x70
 8007652:	e6a7      	b.n	80073a4 <HAL_RCC_OscConfig+0x90>
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	672b      	str	r3, [r5, #112]	; 0x70
 800765a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800765c:	f023 0304 	bic.w	r3, r3, #4
 8007660:	e6a3      	b.n	80073aa <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007662:	f7fd fee3 	bl	800542c <HAL_GetTick>
 8007666:	1b40      	subs	r0, r0, r5
 8007668:	42b8      	cmp	r0, r7
 800766a:	f67f aea5 	bls.w	80073b8 <HAL_RCC_OscConfig+0xa4>
 800766e:	e6d5      	b.n	800741c <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007670:	4d57      	ldr	r5, [pc, #348]	; (80077d0 <HAL_RCC_OscConfig+0x4bc>)
 8007672:	692b      	ldr	r3, [r5, #16]
 8007674:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007678:	2b18      	cmp	r3, #24
 800767a:	d07a      	beq.n	8007772 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_DISABLE();
 800767c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800767e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007684:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007686:	d167      	bne.n	8007758 <HAL_RCC_OscConfig+0x444>
        tickstart = HAL_GetTick();
 8007688:	f7fd fed0 	bl	800542c <HAL_GetTick>
 800768c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	0199      	lsls	r1, r3, #6
 8007692:	d45b      	bmi.n	800774c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007694:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007696:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007698:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800769c:	f023 0303 	bic.w	r3, r3, #3
 80076a0:	4313      	orrs	r3, r2
 80076a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80076a4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80076a8:	62ab      	str	r3, [r5, #40]	; 0x28
 80076aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80076ae:	3b01      	subs	r3, #1
 80076b0:	3a01      	subs	r2, #1
 80076b2:	025b      	lsls	r3, r3, #9
 80076b4:	0412      	lsls	r2, r2, #16
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80076bc:	4313      	orrs	r3, r2
 80076be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076c0:	3a01      	subs	r2, #1
 80076c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c6:	4313      	orrs	r3, r2
 80076c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80076ca:	3a01      	subs	r2, #1
 80076cc:	0612      	lsls	r2, r2, #24
 80076ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80076d2:	4313      	orrs	r3, r2
 80076d4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80076d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80076e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80076e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80076ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80076ee:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80076f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80076f4:	f023 030c 	bic.w	r3, r3, #12
 80076f8:	4313      	orrs	r3, r2
 80076fa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80076fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007700:	f023 0302 	bic.w	r3, r3, #2
 8007704:	4313      	orrs	r3, r2
 8007706:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007708:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800770a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800770e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007710:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007716:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007718:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800771a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800771e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8007720:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007722:	f043 0301 	orr.w	r3, r3, #1
 8007726:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800772e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007730:	f7fd fe7c 	bl	800542c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007734:	4d26      	ldr	r5, [pc, #152]	; (80077d0 <HAL_RCC_OscConfig+0x4bc>)
        tickstart = HAL_GetTick();
 8007736:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	019a      	lsls	r2, r3, #6
 800773c:	f53f ae44 	bmi.w	80073c8 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007740:	f7fd fe74 	bl	800542c <HAL_GetTick>
 8007744:	1b00      	subs	r0, r0, r4
 8007746:	2802      	cmp	r0, #2
 8007748:	d9f6      	bls.n	8007738 <HAL_RCC_OscConfig+0x424>
 800774a:	e667      	b.n	800741c <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800774c:	f7fd fe6e 	bl	800542c <HAL_GetTick>
 8007750:	1b80      	subs	r0, r0, r6
 8007752:	2802      	cmp	r0, #2
 8007754:	d99b      	bls.n	800768e <HAL_RCC_OscConfig+0x37a>
 8007756:	e661      	b.n	800741c <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 8007758:	f7fd fe68 	bl	800542c <HAL_GetTick>
 800775c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	019b      	lsls	r3, r3, #6
 8007762:	f57f ae31 	bpl.w	80073c8 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007766:	f7fd fe61 	bl	800542c <HAL_GetTick>
 800776a:	1b00      	subs	r0, r0, r4
 800776c:	2802      	cmp	r0, #2
 800776e:	d9f6      	bls.n	800775e <HAL_RCC_OscConfig+0x44a>
 8007770:	e654      	b.n	800741c <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007772:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007774:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007776:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007778:	f43f ae51 	beq.w	800741e <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777c:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007780:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007782:	4281      	cmp	r1, r0
 8007784:	f47f adc9 	bne.w	800731a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007788:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800778e:	428a      	cmp	r2, r1
 8007790:	f47f adc3 	bne.w	800731a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007794:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007796:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800779a:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800779c:	4291      	cmp	r1, r2
 800779e:	f47f adbc 	bne.w	800731a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80077a4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80077a8:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f47f adb5 	bne.w	800731a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80077b2:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80077b6:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077b8:	4291      	cmp	r1, r2
 80077ba:	f47f adae 	bne.w	800731a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80077c0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80077c4:	3801      	subs	r0, #1
  return HAL_OK;
 80077c6:	1a18      	subs	r0, r3, r0
 80077c8:	bf18      	it	ne
 80077ca:	2001      	movne	r0, #1
 80077cc:	e627      	b.n	800741e <HAL_RCC_OscConfig+0x10a>
 80077ce:	bf00      	nop
 80077d0:	58024400 	.word	0x58024400

080077d4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077d4:	4b48      	ldr	r3, [pc, #288]	; (80078f8 <HAL_RCC_GetSysClockFreq+0x124>)
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80077dc:	2a10      	cmp	r2, #16
{
 80077de:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077e0:	f000 8086 	beq.w	80078f0 <HAL_RCC_GetSysClockFreq+0x11c>
 80077e4:	2a18      	cmp	r2, #24
 80077e6:	d00c      	beq.n	8007802 <HAL_RCC_GetSysClockFreq+0x2e>
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	f040 8083 	bne.w	80078f4 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4842      	ldr	r0, [pc, #264]	; (80078fc <HAL_RCC_GetSysClockFreq+0x128>)
 80077f2:	f012 0f20 	tst.w	r2, #32
 80077f6:	d003      	beq.n	8007800 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80077fe:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007800:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007802:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007804:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007806:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8007808:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800780c:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 8007812:	d0f5      	beq.n	8007800 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007814:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007818:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800781c:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007820:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007824:	4362      	muls	r2, r4
 8007826:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800782a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800782e:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007830:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007834:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8007838:	d04c      	beq.n	80078d4 <HAL_RCC_GetSysClockFreq+0x100>
 800783a:	2902      	cmp	r1, #2
 800783c:	d03c      	beq.n	80078b8 <HAL_RCC_GetSysClockFreq+0xe4>
 800783e:	2900      	cmp	r1, #0
 8007840:	d148      	bne.n	80078d4 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	0692      	lsls	r2, r2, #26
 8007846:	d527      	bpl.n	8007898 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007848:	6819      	ldr	r1, [r3, #0]
 800784a:	4a2c      	ldr	r2, [pc, #176]	; (80078fc <HAL_RCC_GetSysClockFreq+0x128>)
 800784c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007852:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007858:	ee07 2a10 	vmov	s14, r2
 800785c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007860:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007864:	ee06 3a90 	vmov	s13, r3
 8007868:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800786c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007870:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007874:	4b20      	ldr	r3, [pc, #128]	; (80078f8 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007876:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007880:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007882:	ee07 3a10 	vmov	s14, r3
 8007886:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800788a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800788e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007892:	ee17 0a90 	vmov	r0, s15
 8007896:	e7b3      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789e:	ee07 3a10 	vmov	s14, r3
 80078a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80078ae:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8007900 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078b2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80078b6:	e7dd      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078be:	ee07 3a10 	vmov	s14, r3
 80078c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 80078ce:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8007904 <HAL_RCC_GetSysClockFreq+0x130>
 80078d2:	e7ee      	b.n	80078b2 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078da:	ee07 3a10 	vmov	s14, r3
 80078de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80078ea:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8007908 <HAL_RCC_GetSysClockFreq+0x134>
 80078ee:	e7e0      	b.n	80078b2 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078f0:	4806      	ldr	r0, [pc, #24]	; (800790c <HAL_RCC_GetSysClockFreq+0x138>)
 80078f2:	e785      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 80078f4:	4806      	ldr	r0, [pc, #24]	; (8007910 <HAL_RCC_GetSysClockFreq+0x13c>)
 80078f6:	e783      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0x2c>
 80078f8:	58024400 	.word	0x58024400
 80078fc:	03d09000 	.word	0x03d09000
 8007900:	4c742400 	.word	0x4c742400
 8007904:	4bbebc20 	.word	0x4bbebc20
 8007908:	4a742400 	.word	0x4a742400
 800790c:	017d7840 	.word	0x017d7840
 8007910:	003d0900 	.word	0x003d0900

08007914 <HAL_RCC_ClockConfig>:
{
 8007914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800791a:	4604      	mov	r4, r0
 800791c:	b910      	cbnz	r0, 8007924 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800791e:	2001      	movs	r0, #1
}
 8007920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007924:	4a88      	ldr	r2, [pc, #544]	; (8007b48 <HAL_RCC_ClockConfig+0x234>)
 8007926:	6813      	ldr	r3, [r2, #0]
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	428b      	cmp	r3, r1
 800792e:	f0c0 8093 	bcc.w	8007a58 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	075f      	lsls	r7, r3, #29
 8007936:	f100 809b 	bmi.w	8007a70 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800793a:	071e      	lsls	r6, r3, #28
 800793c:	d50b      	bpl.n	8007956 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800793e:	4983      	ldr	r1, [pc, #524]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007940:	6966      	ldr	r6, [r4, #20]
 8007942:	69c8      	ldr	r0, [r1, #28]
 8007944:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007948:	4286      	cmp	r6, r0
 800794a:	d904      	bls.n	8007956 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800794c:	69ca      	ldr	r2, [r1, #28]
 800794e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007952:	4332      	orrs	r2, r6
 8007954:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007956:	06d8      	lsls	r0, r3, #27
 8007958:	d50b      	bpl.n	8007972 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800795a:	497c      	ldr	r1, [pc, #496]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 800795c:	69a6      	ldr	r6, [r4, #24]
 800795e:	69c8      	ldr	r0, [r1, #28]
 8007960:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8007964:	4286      	cmp	r6, r0
 8007966:	d904      	bls.n	8007972 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007968:	69ca      	ldr	r2, [r1, #28]
 800796a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800796e:	4332      	orrs	r2, r6
 8007970:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007972:	0699      	lsls	r1, r3, #26
 8007974:	d50b      	bpl.n	800798e <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007976:	4975      	ldr	r1, [pc, #468]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007978:	69e6      	ldr	r6, [r4, #28]
 800797a:	6a08      	ldr	r0, [r1, #32]
 800797c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007980:	4286      	cmp	r6, r0
 8007982:	d904      	bls.n	800798e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007984:	6a0a      	ldr	r2, [r1, #32]
 8007986:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800798a:	4332      	orrs	r2, r6
 800798c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800798e:	079a      	lsls	r2, r3, #30
 8007990:	d50b      	bpl.n	80079aa <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007992:	496e      	ldr	r1, [pc, #440]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007994:	68e6      	ldr	r6, [r4, #12]
 8007996:	6988      	ldr	r0, [r1, #24]
 8007998:	f000 000f 	and.w	r0, r0, #15
 800799c:	4286      	cmp	r6, r0
 800799e:	d904      	bls.n	80079aa <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079a0:	698a      	ldr	r2, [r1, #24]
 80079a2:	f022 020f 	bic.w	r2, r2, #15
 80079a6:	4332      	orrs	r2, r6
 80079a8:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079aa:	07df      	lsls	r7, r3, #31
 80079ac:	d46e      	bmi.n	8007a8c <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	079e      	lsls	r6, r3, #30
 80079b2:	f100 80a1 	bmi.w	8007af8 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079b6:	4964      	ldr	r1, [pc, #400]	; (8007b48 <HAL_RCC_ClockConfig+0x234>)
 80079b8:	680a      	ldr	r2, [r1, #0]
 80079ba:	f002 020f 	and.w	r2, r2, #15
 80079be:	42aa      	cmp	r2, r5
 80079c0:	f200 80a8 	bhi.w	8007b14 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079c4:	0758      	lsls	r0, r3, #29
 80079c6:	f100 80b1 	bmi.w	8007b2c <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ca:	0719      	lsls	r1, r3, #28
 80079cc:	d50b      	bpl.n	80079e6 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079ce:	495f      	ldr	r1, [pc, #380]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 80079d0:	6965      	ldr	r5, [r4, #20]
 80079d2:	69c8      	ldr	r0, [r1, #28]
 80079d4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80079d8:	4285      	cmp	r5, r0
 80079da:	d204      	bcs.n	80079e6 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079dc:	69ca      	ldr	r2, [r1, #28]
 80079de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80079e2:	432a      	orrs	r2, r5
 80079e4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e6:	06da      	lsls	r2, r3, #27
 80079e8:	d50b      	bpl.n	8007a02 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079ea:	4958      	ldr	r1, [pc, #352]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 80079ec:	69a5      	ldr	r5, [r4, #24]
 80079ee:	69c8      	ldr	r0, [r1, #28]
 80079f0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80079f4:	4285      	cmp	r5, r0
 80079f6:	d204      	bcs.n	8007a02 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079f8:	69ca      	ldr	r2, [r1, #28]
 80079fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079fe:	432a      	orrs	r2, r5
 8007a00:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a02:	069b      	lsls	r3, r3, #26
 8007a04:	d50b      	bpl.n	8007a1e <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a06:	4a51      	ldr	r2, [pc, #324]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007a08:	69e0      	ldr	r0, [r4, #28]
 8007a0a:	6a11      	ldr	r1, [r2, #32]
 8007a0c:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8007a10:	4288      	cmp	r0, r1
 8007a12:	d204      	bcs.n	8007a1e <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007a14:	6a13      	ldr	r3, [r2, #32]
 8007a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1a:	4303      	orrs	r3, r0
 8007a1c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a1e:	f7ff fed9 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 8007a22:	494a      	ldr	r1, [pc, #296]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007a24:	4a4a      	ldr	r2, [pc, #296]	; (8007b50 <HAL_RCC_ClockConfig+0x23c>)
 8007a26:	698b      	ldr	r3, [r1, #24]
 8007a28:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007a2c:	5cd3      	ldrb	r3, [r2, r3]
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a34:	698b      	ldr	r3, [r1, #24]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	5cd3      	ldrb	r3, [r2, r3]
 8007a3c:	4a45      	ldr	r2, [pc, #276]	; (8007b54 <HAL_RCC_ClockConfig+0x240>)
 8007a3e:	f003 031f 	and.w	r3, r3, #31
 8007a42:	fa20 f303 	lsr.w	r3, r0, r3
 8007a46:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007a48:	4b43      	ldr	r3, [pc, #268]	; (8007b58 <HAL_RCC_ClockConfig+0x244>)
 8007a4a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8007a4c:	4b43      	ldr	r3, [pc, #268]	; (8007b5c <HAL_RCC_ClockConfig+0x248>)
}
 8007a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	f7f9 ba94 	b.w	8000f80 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a58:	6813      	ldr	r3, [r2, #0]
 8007a5a:	f023 030f 	bic.w	r3, r3, #15
 8007a5e:	430b      	orrs	r3, r1
 8007a60:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a62:	6813      	ldr	r3, [r2, #0]
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	f47f af58 	bne.w	800791e <HAL_RCC_ClockConfig+0xa>
 8007a6e:	e760      	b.n	8007932 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a70:	4936      	ldr	r1, [pc, #216]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007a72:	6926      	ldr	r6, [r4, #16]
 8007a74:	6988      	ldr	r0, [r1, #24]
 8007a76:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007a7a:	4286      	cmp	r6, r0
 8007a7c:	f67f af5d 	bls.w	800793a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a80:	698a      	ldr	r2, [r1, #24]
 8007a82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a86:	4332      	orrs	r2, r6
 8007a88:	618a      	str	r2, [r1, #24]
 8007a8a:	e756      	b.n	800793a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007a8c:	4b2f      	ldr	r3, [pc, #188]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007a8e:	68a1      	ldr	r1, [r4, #8]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8007a96:	430a      	orrs	r2, r1
 8007a98:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a9a:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a9c:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a9e:	2a02      	cmp	r2, #2
 8007aa0:	d11d      	bne.n	8007ade <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007aa2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007aa6:	f43f af3a 	beq.w	800791e <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007aaa:	4e28      	ldr	r6, [pc, #160]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aac:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ab0:	6933      	ldr	r3, [r6, #16]
 8007ab2:	f023 0307 	bic.w	r3, r3, #7
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8007aba:	f7fd fcb7 	bl	800542c <HAL_GetTick>
 8007abe:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ac0:	6933      	ldr	r3, [r6, #16]
 8007ac2:	6862      	ldr	r2, [r4, #4]
 8007ac4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ac8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007acc:	f43f af6f 	beq.w	80079ae <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ad0:	f7fd fcac 	bl	800542c <HAL_GetTick>
 8007ad4:	1bc0      	subs	r0, r0, r7
 8007ad6:	4540      	cmp	r0, r8
 8007ad8:	d9f2      	bls.n	8007ac0 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8007ada:	2003      	movs	r0, #3
 8007adc:	e720      	b.n	8007920 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ade:	2a03      	cmp	r2, #3
 8007ae0:	d102      	bne.n	8007ae8 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ae2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007ae6:	e7de      	b.n	8007aa6 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ae8:	2a01      	cmp	r2, #1
 8007aea:	d102      	bne.n	8007af2 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007af0:	e7d9      	b.n	8007aa6 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007af2:	f013 0f04 	tst.w	r3, #4
 8007af6:	e7d6      	b.n	8007aa6 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007af8:	4914      	ldr	r1, [pc, #80]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007afa:	68e6      	ldr	r6, [r4, #12]
 8007afc:	6988      	ldr	r0, [r1, #24]
 8007afe:	f000 000f 	and.w	r0, r0, #15
 8007b02:	4286      	cmp	r6, r0
 8007b04:	f4bf af57 	bcs.w	80079b6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b08:	698a      	ldr	r2, [r1, #24]
 8007b0a:	f022 020f 	bic.w	r2, r2, #15
 8007b0e:	4332      	orrs	r2, r6
 8007b10:	618a      	str	r2, [r1, #24]
 8007b12:	e750      	b.n	80079b6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b14:	680a      	ldr	r2, [r1, #0]
 8007b16:	f022 020f 	bic.w	r2, r2, #15
 8007b1a:	432a      	orrs	r2, r5
 8007b1c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b1e:	680a      	ldr	r2, [r1, #0]
 8007b20:	f002 020f 	and.w	r2, r2, #15
 8007b24:	42aa      	cmp	r2, r5
 8007b26:	f47f aefa 	bne.w	800791e <HAL_RCC_ClockConfig+0xa>
 8007b2a:	e74b      	b.n	80079c4 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b2c:	4907      	ldr	r1, [pc, #28]	; (8007b4c <HAL_RCC_ClockConfig+0x238>)
 8007b2e:	6925      	ldr	r5, [r4, #16]
 8007b30:	6988      	ldr	r0, [r1, #24]
 8007b32:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007b36:	4285      	cmp	r5, r0
 8007b38:	f4bf af47 	bcs.w	80079ca <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b3c:	698a      	ldr	r2, [r1, #24]
 8007b3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007b42:	432a      	orrs	r2, r5
 8007b44:	618a      	str	r2, [r1, #24]
 8007b46:	e740      	b.n	80079ca <HAL_RCC_ClockConfig+0xb6>
 8007b48:	52002000 	.word	0x52002000
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	0801c8a4 	.word	0x0801c8a4
 8007b54:	24000040 	.word	0x24000040
 8007b58:	2400003c 	.word	0x2400003c
 8007b5c:	24000048 	.word	0x24000048

08007b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b60:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b62:	4c0c      	ldr	r4, [pc, #48]	; (8007b94 <HAL_RCC_GetHCLKFreq+0x34>)
 8007b64:	f7ff fe36 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 8007b68:	490b      	ldr	r1, [pc, #44]	; (8007b98 <HAL_RCC_GetHCLKFreq+0x38>)
 8007b6a:	69a3      	ldr	r3, [r4, #24]
 8007b6c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007b70:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b72:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b74:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b78:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b7c:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b80:	5ccb      	ldrb	r3, [r1, r3]
 8007b82:	f003 031f 	and.w	r3, r3, #31
 8007b86:	fa22 f003 	lsr.w	r0, r2, r3
 8007b8a:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <HAL_RCC_GetHCLKFreq+0x3c>)
 8007b8c:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b8e:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <HAL_RCC_GetHCLKFreq+0x40>)
 8007b90:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007b92:	bd10      	pop	{r4, pc}
 8007b94:	58024400 	.word	0x58024400
 8007b98:	0801c8a4 	.word	0x0801c8a4
 8007b9c:	24000040 	.word	0x24000040
 8007ba0:	2400003c 	.word	0x2400003c

08007ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ba4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ba6:	f7ff ffdb 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 8007baa:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007bac:	4a05      	ldr	r2, [pc, #20]	; (8007bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007bb4:	5cd3      	ldrb	r3, [r2, r3]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007bba:	40d8      	lsrs	r0, r3
 8007bbc:	bd08      	pop	{r3, pc}
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	0801c8a4 	.word	0x0801c8a4

08007bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bc8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007bca:	f7ff ffc9 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007bd0:	4a05      	ldr	r2, [pc, #20]	; (8007be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007bd8:	5cd3      	ldrb	r3, [r2, r3]
 8007bda:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007bde:	40d8      	lsrs	r0, r3
 8007be0:	bd08      	pop	{r3, pc}
 8007be2:	bf00      	nop
 8007be4:	58024400 	.word	0x58024400
 8007be8:	0801c8a4 	.word	0x0801c8a4

08007bec <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007bec:	233f      	movs	r3, #63	; 0x3f
 8007bee:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bf0:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <HAL_RCC_GetClockConfig+0x4c>)
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	f002 0207 	and.w	r2, r2, #7
 8007bf8:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007bfa:	699a      	ldr	r2, [r3, #24]
 8007bfc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8007c00:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	f002 020f 	and.w	r2, r2, #15
 8007c08:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007c0a:	699a      	ldr	r2, [r3, #24]
 8007c0c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007c10:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c12:	69da      	ldr	r2, [r3, #28]
 8007c14:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007c18:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c1a:	69da      	ldr	r2, [r3, #28]
 8007c1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007c20:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c28:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c2a:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <HAL_RCC_GetClockConfig+0x50>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	600b      	str	r3, [r1, #0]
}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	52002000 	.word	0x52002000

08007c40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c42:	4c3a      	ldr	r4, [pc, #232]	; (8007d2c <RCCEx_PLL2_Config+0xec>)
{
 8007c44:	4606      	mov	r6, r0
 8007c46:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d069      	beq.n	8007d26 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c5a:	f7fd fbe7 	bl	800542c <HAL_GetTick>
 8007c5e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	011a      	lsls	r2, r3, #4
 8007c64:	d44b      	bmi.n	8007cfe <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c68:	6832      	ldr	r2, [r6, #0]
 8007c6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007c72:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c74:	68b3      	ldr	r3, [r6, #8]
 8007c76:	68f2      	ldr	r2, [r6, #12]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	3a01      	subs	r2, #1
 8007c7c:	025b      	lsls	r3, r3, #9
 8007c7e:	0412      	lsls	r2, r2, #16
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007c86:	4313      	orrs	r3, r2
 8007c88:	6872      	ldr	r2, [r6, #4]
 8007c8a:	3a01      	subs	r2, #1
 8007c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c90:	4313      	orrs	r3, r2
 8007c92:	6932      	ldr	r2, [r6, #16]
 8007c94:	3a01      	subs	r2, #1
 8007c96:	0612      	lsls	r2, r2, #24
 8007c98:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ca0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ca2:	6972      	ldr	r2, [r6, #20]
 8007ca4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cae:	69b2      	ldr	r2, [r6, #24]
 8007cb0:	f023 0320 	bic.w	r3, r3, #32
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cba:	f023 0310 	bic.w	r3, r3, #16
 8007cbe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007cc2:	69f2      	ldr	r2, [r6, #28]
 8007cc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cc8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ccc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007cd0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cd4:	f043 0310 	orr.w	r3, r3, #16
 8007cd8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007cdc:	b9b5      	cbnz	r5, 8007d0c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ce2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ce4:	4c11      	ldr	r4, [pc, #68]	; (8007d2c <RCCEx_PLL2_Config+0xec>)
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cee:	f7fd fb9d 	bl	800542c <HAL_GetTick>
 8007cf2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	d50f      	bpl.n	8007d1a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e005      	b.n	8007d0a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007cfe:	f7fd fb95 	bl	800542c <HAL_GetTick>
 8007d02:	1bc0      	subs	r0, r0, r7
 8007d04:	2802      	cmp	r0, #2
 8007d06:	d9ab      	bls.n	8007c60 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8007d08:	2003      	movs	r0, #3
}
 8007d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d0c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d0e:	bf0c      	ite	eq
 8007d10:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d14:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007d18:	e7e3      	b.n	8007ce2 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d1a:	f7fd fb87 	bl	800542c <HAL_GetTick>
 8007d1e:	1b40      	subs	r0, r0, r5
 8007d20:	2802      	cmp	r0, #2
 8007d22:	d9e7      	bls.n	8007cf4 <RCCEx_PLL2_Config+0xb4>
 8007d24:	e7f0      	b.n	8007d08 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8007d26:	2001      	movs	r0, #1
 8007d28:	e7ef      	b.n	8007d0a <RCCEx_PLL2_Config+0xca>
 8007d2a:	bf00      	nop
 8007d2c:	58024400 	.word	0x58024400

08007d30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d32:	4c3a      	ldr	r4, [pc, #232]	; (8007e1c <RCCEx_PLL3_Config+0xec>)
{
 8007d34:	4606      	mov	r6, r0
 8007d36:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d069      	beq.n	8007e16 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d48:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d4a:	f7fd fb6f 	bl	800542c <HAL_GetTick>
 8007d4e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	009a      	lsls	r2, r3, #2
 8007d54:	d44b      	bmi.n	8007dee <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d58:	6832      	ldr	r2, [r6, #0]
 8007d5a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007d5e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007d62:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d64:	68b3      	ldr	r3, [r6, #8]
 8007d66:	68f2      	ldr	r2, [r6, #12]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	3a01      	subs	r2, #1
 8007d6c:	025b      	lsls	r3, r3, #9
 8007d6e:	0412      	lsls	r2, r2, #16
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007d76:	4313      	orrs	r3, r2
 8007d78:	6872      	ldr	r2, [r6, #4]
 8007d7a:	3a01      	subs	r2, #1
 8007d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d80:	4313      	orrs	r3, r2
 8007d82:	6932      	ldr	r2, [r6, #16]
 8007d84:	3a01      	subs	r2, #1
 8007d86:	0612      	lsls	r2, r2, #24
 8007d88:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d92:	6972      	ldr	r2, [r6, #20]
 8007d94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d9e:	69b2      	ldr	r2, [r6, #24]
 8007da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007da4:	4313      	orrs	r3, r2
 8007da6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007da8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dae:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007db0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007db2:	69f2      	ldr	r2, [r6, #28]
 8007db4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007db8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007dbc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007dc0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007dc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dc8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007dca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007dcc:	b9b5      	cbnz	r5, 8007dfc <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dd2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007dd4:	4c11      	ldr	r4, [pc, #68]	; (8007e1c <RCCEx_PLL3_Config+0xec>)
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ddc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dde:	f7fd fb25 	bl	800542c <HAL_GetTick>
 8007de2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	d50f      	bpl.n	8007e0a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8007dea:	2000      	movs	r0, #0
 8007dec:	e005      	b.n	8007dfa <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007dee:	f7fd fb1d 	bl	800542c <HAL_GetTick>
 8007df2:	1bc0      	subs	r0, r0, r7
 8007df4:	2802      	cmp	r0, #2
 8007df6:	d9ab      	bls.n	8007d50 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8007df8:	2003      	movs	r0, #3
}
 8007dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8007dfc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007dfe:	bf0c      	ite	eq
 8007e00:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e04:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8007e08:	e7e3      	b.n	8007dd2 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e0a:	f7fd fb0f 	bl	800542c <HAL_GetTick>
 8007e0e:	1b40      	subs	r0, r0, r5
 8007e10:	2802      	cmp	r0, #2
 8007e12:	d9e7      	bls.n	8007de4 <RCCEx_PLL3_Config+0xb4>
 8007e14:	e7f0      	b.n	8007df8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8007e16:	2001      	movs	r0, #1
 8007e18:	e7ef      	b.n	8007dfa <RCCEx_PLL3_Config+0xca>
 8007e1a:	bf00      	nop
 8007e1c:	58024400 	.word	0x58024400

08007e20 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e24:	6806      	ldr	r6, [r0, #0]
{
 8007e26:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e28:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8007e2c:	d009      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e2e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e34:	d02c      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8007e36:	d811      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007e38:	b1e3      	cbz	r3, 8007e74 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3e:	d01f      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007e40:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	05d8      	lsls	r0, r3, #23
 8007e46:	f140 80d7 	bpl.w	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e4a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	f200 80d2 	bhi.w	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8007e52:	e8df f003 	tbb	[pc, r3]
 8007e56:	2922      	.short	0x2922
 8007e58:	27ca      	.short	0x27ca
 8007e5a:	27          	.byte	0x27
 8007e5b:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e60:	d1ee      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e62:	4aac      	ldr	r2, [pc, #688]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e64:	2600      	movs	r6, #0
 8007e66:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007e68:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007e6a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	6513      	str	r3, [r2, #80]	; 0x50
 8007e72:	e7e6      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e74:	4aa7      	ldr	r2, [pc, #668]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007e7e:	e7f0      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e80:	2102      	movs	r1, #2
 8007e82:	3004      	adds	r0, #4
 8007e84:	f7ff fedc 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e88:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d1d9      	bne.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8007e8e:	e7e8      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e90:	2102      	movs	r1, #2
 8007e92:	3024      	adds	r0, #36	; 0x24
 8007e94:	f7ff ff4c 	bl	8007d30 <RCCEx_PLL3_Config>
 8007e98:	e7f6      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9a:	4a9e      	ldr	r2, [pc, #632]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ea4:	4634      	mov	r4, r6
 8007ea6:	e004      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	1d28      	adds	r0, r5, #4
 8007eac:	f7ff fec8 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007eb0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	f040 80a2 	bne.w	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eb8:	4a96      	ldr	r2, [pc, #600]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eba:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007ebc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ebe:	f023 0307 	bic.w	r3, r3, #7
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ec6:	682b      	ldr	r3, [r5, #0]
 8007ec8:	0559      	lsls	r1, r3, #21
 8007eca:	d510      	bpl.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ecc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8007ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed4:	f000 80b3 	beq.w	800803e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007ed8:	f200 8092 	bhi.w	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80a2 	beq.w	8008026 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ee6:	f000 80a4 	beq.w	8008032 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007eea:	2601      	movs	r6, #1
 8007eec:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007eee:	682b      	ldr	r3, [r5, #0]
 8007ef0:	051a      	lsls	r2, r3, #20
 8007ef2:	d510      	bpl.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ef4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8007ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007efc:	f000 80c6 	beq.w	800808c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007f00:	f200 80a5 	bhi.w	800804e <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80b5 	beq.w	8008074 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f0e:	f000 80b7 	beq.w	8008080 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8007f12:	2601      	movs	r6, #1
 8007f14:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	019b      	lsls	r3, r3, #6
 8007f1a:	d50d      	bpl.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 8007f1c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	f000 80ce 	beq.w	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8007f24:	f200 80ba 	bhi.w	800809c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80ba 	beq.w	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8007f2e:	2b10      	cmp	r3, #16
 8007f30:	f000 80c0 	beq.w	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8007f34:	2601      	movs	r6, #1
 8007f36:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	04df      	lsls	r7, r3, #19
 8007f3c:	d50f      	bpl.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007f3e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f44:	f000 80e0 	beq.w	8008108 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007f48:	f200 80c2 	bhi.w	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80cf 	beq.w	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f56:	f000 80d1 	beq.w	80080fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007f5a:	2601      	movs	r6, #1
 8007f5c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f5e:	682b      	ldr	r3, [r5, #0]
 8007f60:	0498      	lsls	r0, r3, #18
 8007f62:	d50f      	bpl.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007f64:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8007f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f6a:	f000 80ef 	beq.w	800814c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8007f6e:	f200 80d5 	bhi.w	800811c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80db 	beq.w	800812e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8007f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7c:	f000 80e0 	beq.w	8008140 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8007f80:	2601      	movs	r6, #1
 8007f82:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	0459      	lsls	r1, r3, #17
 8007f88:	d510      	bpl.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007f8a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8007f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f92:	f000 80fc 	beq.w	800818e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007f96:	f200 80e1 	bhi.w	800815c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 80e7 	beq.w	800816e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fa4:	f000 80ed 	beq.w	8008182 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007fa8:	2601      	movs	r6, #1
 8007faa:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	041a      	lsls	r2, r3, #16
 8007fb0:	d50d      	bpl.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 8007fb2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8007fb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fb8:	f000 80f1 	beq.w	800819e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc0:	f000 80fb 	beq.w	80081ba <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 80ef 	beq.w	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007fca:	2601      	movs	r6, #1
 8007fcc:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	01db      	lsls	r3, r3, #7
 8007fd2:	f140 8108 	bpl.w	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 8007fd6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	f200 8148 	bhi.w	800826e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007fde:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007fe2:	00f9      	.short	0x00f9
 8007fe4:	014000f4 	.word	0x014000f4
 8007fe8:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fea:	2100      	movs	r1, #0
 8007fec:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007ff0:	f7ff fe9e 	bl	8007d30 <RCCEx_PLL3_Config>
 8007ff4:	e75c      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ff6:	2601      	movs	r6, #1
 8007ff8:	4634      	mov	r4, r6
 8007ffa:	e764      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8007ffc:	4626      	mov	r6, r4
 8007ffe:	e762      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008000:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008004:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008008:	d003      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800800a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800800e:	f47f af6c 	bne.w	8007eea <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 8008012:	b9d4      	cbnz	r4, 800804a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008014:	4a3f      	ldr	r2, [pc, #252]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008016:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800801a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800801c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8008020:	430b      	orrs	r3, r1
 8008022:	6593      	str	r3, [r2, #88]	; 0x58
 8008024:	e763      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008026:	4a3b      	ldr	r2, [pc, #236]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008028:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800802a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008030:	e7ef      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008032:	2100      	movs	r1, #0
 8008034:	1d28      	adds	r0, r5, #4
 8008036:	f7ff fe03 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800803a:	4604      	mov	r4, r0
      break;
 800803c:	e7e9      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800803e:	2100      	movs	r1, #0
 8008040:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008044:	f7ff fe74 	bl	8007d30 <RCCEx_PLL3_Config>
 8008048:	e7f7      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800804a:	4626      	mov	r6, r4
 800804c:	e74f      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 800804e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008052:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008056:	d003      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800805c:	f47f af59 	bne.w	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 8008060:	b9d4      	cbnz	r4, 8008098 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008062:	4a2c      	ldr	r2, [pc, #176]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008064:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8008068:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800806a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800806e:	430b      	orrs	r3, r1
 8008070:	6593      	str	r3, [r2, #88]	; 0x58
 8008072:	e750      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008074:	4a27      	ldr	r2, [pc, #156]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008076:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800807c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800807e:	e7ef      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008080:	2100      	movs	r1, #0
 8008082:	1d28      	adds	r0, r5, #4
 8008084:	f7ff fddc 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008088:	4604      	mov	r4, r0
      break;
 800808a:	e7e9      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800808c:	2100      	movs	r1, #0
 800808e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008092:	f7ff fe4d 	bl	8007d30 <RCCEx_PLL3_Config>
 8008096:	e7f7      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8008098:	4626      	mov	r6, r4
 800809a:	e73c      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 800809c:	2b30      	cmp	r3, #48	; 0x30
 800809e:	f47f af49 	bne.w	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 80080a2:	b99c      	cbnz	r4, 80080cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80080a4:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080a6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80080a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80080aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80080ae:	430b      	orrs	r3, r1
 80080b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080b2:	e741      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b4:	4a17      	ldr	r2, [pc, #92]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80080b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080bc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80080be:	e7f0      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080c0:	2102      	movs	r1, #2
 80080c2:	1d28      	adds	r0, r5, #4
 80080c4:	f7ff fdbc 	bl	8007c40 <RCCEx_PLL2_Config>
 80080c8:	4604      	mov	r4, r0
      break;
 80080ca:	e7ea      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x282>
 80080cc:	4626      	mov	r6, r4
 80080ce:	e733      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 80080d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080d4:	d003      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80080d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080da:	f47f af3e 	bne.w	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 80080de:	b9dc      	cbnz	r4, 8008118 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80080e0:	4a0c      	ldr	r2, [pc, #48]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080e2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80080e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ea:	430b      	orrs	r3, r1
 80080ec:	6513      	str	r3, [r2, #80]	; 0x50
 80080ee:	e736      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f0:	4a08      	ldr	r2, [pc, #32]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80080f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80080fa:	e7f0      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080fc:	2100      	movs	r1, #0
 80080fe:	1d28      	adds	r0, r5, #4
 8008100:	f7ff fd9e 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008104:	4604      	mov	r4, r0
      break;
 8008106:	e7ea      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008108:	2100      	movs	r1, #0
 800810a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800810e:	f7ff fe0f 	bl	8007d30 <RCCEx_PLL3_Config>
 8008112:	e7f7      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8008114:	58024400 	.word	0x58024400
 8008118:	4626      	mov	r6, r4
 800811a:	e720      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 800811c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008120:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8008124:	d003      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8008126:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800812a:	f47f af29 	bne.w	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 800812e:	b99c      	cbnz	r4, 8008158 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008130:	4a8f      	ldr	r2, [pc, #572]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008132:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8008134:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008136:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800813a:	430b      	orrs	r3, r1
 800813c:	6513      	str	r3, [r2, #80]	; 0x50
 800813e:	e721      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x164>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008140:	2101      	movs	r1, #1
 8008142:	1d28      	adds	r0, r5, #4
 8008144:	f7ff fd7c 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008148:	4604      	mov	r4, r0
      break;
 800814a:	e7f0      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800814c:	2101      	movs	r1, #1
 800814e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008152:	f7ff fded 	bl	8007d30 <RCCEx_PLL3_Config>
 8008156:	e7f7      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8008158:	4626      	mov	r6, r4
 800815a:	e713      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 800815c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008160:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008164:	d003      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008166:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800816a:	f47f af1d 	bne.w	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 800816e:	b9a4      	cbnz	r4, 800819a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008170:	4a7f      	ldr	r2, [pc, #508]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008172:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8008176:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008178:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800817c:	430b      	orrs	r3, r1
 800817e:	6593      	str	r3, [r2, #88]	; 0x58
 8008180:	e714      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008182:	2101      	movs	r1, #1
 8008184:	1d28      	adds	r0, r5, #4
 8008186:	f7ff fd5b 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800818a:	4604      	mov	r4, r0
      break;
 800818c:	e7ef      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800818e:	2101      	movs	r1, #1
 8008190:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008194:	f7ff fdcc 	bl	8007d30 <RCCEx_PLL3_Config>
 8008198:	e7f7      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800819a:	4626      	mov	r6, r4
 800819c:	e706      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819e:	4a74      	ldr	r2, [pc, #464]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80081a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80081a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081a6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80081a8:	b96c      	cbnz	r4, 80081c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081aa:	4a71      	ldr	r2, [pc, #452]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80081ac:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80081ae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80081b0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80081b4:	430b      	orrs	r3, r1
 80081b6:	6513      	str	r3, [r2, #80]	; 0x50
 80081b8:	e709      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081ba:	2101      	movs	r1, #1
 80081bc:	1d28      	adds	r0, r5, #4
 80081be:	f7ff fd3f 	bl	8007c40 <RCCEx_PLL2_Config>
 80081c2:	4604      	mov	r4, r0
      break;
 80081c4:	e7f0      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80081c6:	4626      	mov	r6, r4
 80081c8:	e701      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ca:	4a69      	ldr	r2, [pc, #420]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80081cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80081ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	d14d      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80081d8:	4a65      	ldr	r2, [pc, #404]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80081da:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80081dc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	430b      	orrs	r3, r1
 80081e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081e6:	682b      	ldr	r3, [r5, #0]
 80081e8:	025f      	lsls	r7, r3, #9
 80081ea:	d54d      	bpl.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081ec:	4f61      	ldr	r7, [pc, #388]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081f4:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80081f6:	f7fd f919 	bl	800542c <HAL_GetTick>
 80081fa:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	05d8      	lsls	r0, r3, #23
 8008200:	d53a      	bpl.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 8008202:	2c00      	cmp	r4, #0
 8008204:	d16c      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008206:	4b5a      	ldr	r3, [pc, #360]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008208:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 800820c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800820e:	4042      	eors	r2, r0
 8008210:	f412 7f40 	tst.w	r2, #768	; 0x300
 8008214:	d00b      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008218:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800821a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800821e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008222:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008224:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008226:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800822a:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800822c:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800822e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008232:	d040      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008234:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8008238:	494d      	ldr	r1, [pc, #308]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800823a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800823e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008242:	d149      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8008244:	6908      	ldr	r0, [r1, #16]
 8008246:	4a4c      	ldr	r2, [pc, #304]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8008248:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800824c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008250:	4302      	orrs	r2, r0
 8008252:	610a      	str	r2, [r1, #16]
 8008254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008258:	4a45      	ldr	r2, [pc, #276]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800825a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800825c:	430b      	orrs	r3, r1
 800825e:	6713      	str	r3, [r2, #112]	; 0x70
 8008260:	e012      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008262:	2102      	movs	r1, #2
 8008264:	1d28      	adds	r0, r5, #4
 8008266:	f7ff fceb 	bl	8007c40 <RCCEx_PLL2_Config>
 800826a:	4604      	mov	r4, r0
      break;
 800826c:	e7b2      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800826e:	2601      	movs	r6, #1
 8008270:	4634      	mov	r4, r6
 8008272:	e7b8      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8008274:	4626      	mov	r6, r4
 8008276:	e7b6      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008278:	f7fd f8d8 	bl	800542c <HAL_GetTick>
 800827c:	eba0 0008 	sub.w	r0, r0, r8
 8008280:	2864      	cmp	r0, #100	; 0x64
 8008282:	d9bb      	bls.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 8008284:	2603      	movs	r6, #3
 8008286:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	07da      	lsls	r2, r3, #31
 800828c:	d508      	bpl.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 800828e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008290:	2b10      	cmp	r3, #16
 8008292:	d03c      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008294:	d826      	bhi.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008296:	b35b      	cbz	r3, 80082f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008298:	2b08      	cmp	r3, #8
 800829a:	d032      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800829c:	2601      	movs	r6, #1
 800829e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	079b      	lsls	r3, r3, #30
 80082a4:	d548      	bpl.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80082a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	d85b      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80082ac:	e8df f003 	tbb	[pc, r3]
 80082b0:	3c54373c 	.word	0x3c54373c
 80082b4:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 80082b6:	f7fd f8b9 	bl	800542c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ba:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 80082be:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082c0:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082c4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80082c8:	0799      	lsls	r1, r3, #30
 80082ca:	d4b3      	bmi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082cc:	f7fd f8ae 	bl	800542c <HAL_GetTick>
 80082d0:	1bc0      	subs	r0, r0, r7
 80082d2:	4548      	cmp	r0, r9
 80082d4:	d9f6      	bls.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80082d6:	e7d5      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082d8:	690a      	ldr	r2, [r1, #16]
 80082da:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80082de:	e7b8      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80082e0:	4626      	mov	r6, r4
 80082e2:	e7d1      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 80082e4:	f023 0208 	bic.w	r2, r3, #8
 80082e8:	2a20      	cmp	r2, #32
 80082ea:	d001      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80082ec:	2b18      	cmp	r3, #24
 80082ee:	d1d5      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 80082f0:	b99c      	cbnz	r4, 800831a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082f2:	4a1f      	ldr	r2, [pc, #124]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80082f4:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80082f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80082f8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6553      	str	r3, [r2, #84]	; 0x54
 8008300:	e7ce      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008302:	2101      	movs	r1, #1
 8008304:	1d28      	adds	r0, r5, #4
 8008306:	f7ff fc9b 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800830a:	4604      	mov	r4, r0
      break;
 800830c:	e7f0      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800830e:	2101      	movs	r1, #1
 8008310:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008314:	f7ff fd0c 	bl	8007d30 <RCCEx_PLL3_Config>
 8008318:	e7f7      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800831a:	4626      	mov	r6, r4
 800831c:	e7c0      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800831e:	2101      	movs	r1, #1
 8008320:	1d28      	adds	r0, r5, #4
 8008322:	f7ff fc8d 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008326:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008328:	b9fc      	cbnz	r4, 800836a <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800832a:	4a11      	ldr	r2, [pc, #68]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800832c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800832e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008330:	f023 0307 	bic.w	r3, r3, #7
 8008334:	430b      	orrs	r3, r1
 8008336:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	075f      	lsls	r7, r3, #29
 800833c:	d52e      	bpl.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800833e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8008342:	2b05      	cmp	r3, #5
 8008344:	f200 8134 	bhi.w	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8008348:	e8df f013 	tbh	[pc, r3, lsl #1]
 800834c:	0018001d 	.word	0x0018001d
 8008350:	001d012c 	.word	0x001d012c
 8008354:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008358:	2101      	movs	r1, #1
 800835a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800835e:	f7ff fce7 	bl	8007d30 <RCCEx_PLL3_Config>
 8008362:	e7e0      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008364:	2601      	movs	r6, #1
 8008366:	4634      	mov	r4, r6
 8008368:	e7e6      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800836a:	4626      	mov	r6, r4
 800836c:	e7e4      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800836e:	bf00      	nop
 8008370:	58024400 	.word	0x58024400
 8008374:	58024800 	.word	0x58024800
 8008378:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800837c:	2101      	movs	r1, #1
 800837e:	1d28      	adds	r0, r5, #4
 8008380:	f7ff fc5e 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008384:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008386:	2c00      	cmp	r4, #0
 8008388:	f040 8115 	bne.w	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800838c:	4aac      	ldr	r2, [pc, #688]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800838e:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8008392:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008394:	f023 0307 	bic.w	r3, r3, #7
 8008398:	430b      	orrs	r3, r1
 800839a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	0698      	lsls	r0, r3, #26
 80083a0:	d510      	bpl.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80083a2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80083a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083aa:	f000 811f 	beq.w	80085ec <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80083ae:	f200 8104 	bhi.w	80085ba <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 810a 	beq.w	80085cc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80083b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083bc:	f000 8110 	beq.w	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80083c0:	2601      	movs	r6, #1
 80083c2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	0659      	lsls	r1, r3, #25
 80083c8:	d510      	bpl.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083ca:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80083ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d2:	f000 812c 	beq.w	800862e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80083d6:	f200 8111 	bhi.w	80085fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8117 	beq.w	800860e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80083e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e4:	f000 811d 	beq.w	8008622 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80083e8:	2601      	movs	r6, #1
 80083ea:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	061a      	lsls	r2, r3, #24
 80083f0:	d510      	bpl.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80083f2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80083f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083fa:	f000 813c 	beq.w	8008676 <HAL_RCCEx_PeriphCLKConfig+0x856>
 80083fe:	f200 8121 	bhi.w	8008644 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 8127 	beq.w	8008656 <HAL_RCCEx_PeriphCLKConfig+0x836>
 8008408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800840c:	f000 812d 	beq.w	800866a <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8008410:	2601      	movs	r6, #1
 8008412:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	071b      	lsls	r3, r3, #28
 8008418:	d512      	bpl.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800841a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800841c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008420:	d107      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008422:	2102      	movs	r1, #2
 8008424:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008428:	f7ff fc82 	bl	8007d30 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800842c:	2800      	cmp	r0, #0
 800842e:	bf18      	it	ne
 8008430:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008432:	4a83      	ldr	r2, [pc, #524]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008434:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8008436:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008438:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800843c:	430b      	orrs	r3, r1
 800843e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	06df      	lsls	r7, r3, #27
 8008444:	d514      	bpl.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008446:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800844a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844e:	d107      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008450:	2102      	movs	r1, #2
 8008452:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008456:	f7ff fc6b 	bl	8007d30 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800845a:	2800      	cmp	r0, #0
 800845c:	bf18      	it	ne
 800845e:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008460:	4a77      	ldr	r2, [pc, #476]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008462:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8008466:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800846c:	430b      	orrs	r3, r1
 800846e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	0318      	lsls	r0, r3, #12
 8008474:	d51a      	bpl.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 8008476:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800847a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800847e:	f000 8102 	beq.w	8008686 <HAL_RCCEx_PeriphCLKConfig+0x866>
 8008482:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8008486:	d006      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008488:	2900      	cmp	r1, #0
 800848a:	f040 8102 	bne.w	8008692 <HAL_RCCEx_PeriphCLKConfig+0x872>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800848e:	1d28      	adds	r0, r5, #4
 8008490:	f7ff fbd6 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008494:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008496:	2c00      	cmp	r4, #0
 8008498:	f040 80fe 	bne.w	8008698 <HAL_RCCEx_PeriphCLKConfig+0x878>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800849c:	4a68      	ldr	r2, [pc, #416]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800849e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80084a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80084a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80084a8:	430b      	orrs	r3, r1
 80084aa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	0359      	lsls	r1, r3, #13
 80084b0:	d51c      	bpl.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 80084b2:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80084b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084ba:	f000 80ef 	beq.w	800869c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80084be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084c2:	d008      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80084c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c8:	f040 80ef 	bne.w	80086aa <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084cc:	4a5c      	ldr	r2, [pc, #368]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80084ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80084d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80084d6:	2c00      	cmp	r4, #0
 80084d8:	f040 80ea 	bne.w	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084dc:	4a58      	ldr	r2, [pc, #352]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80084de:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80084e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80084e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80084e8:	430b      	orrs	r3, r1
 80084ea:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	03da      	lsls	r2, r3, #15
 80084f0:	d509      	bpl.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 80084f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80dd 	beq.w	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 80084fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084fe:	f000 80e7 	beq.w	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8008502:	2601      	movs	r6, #1
 8008504:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008506:	682b      	ldr	r3, [r5, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	d507      	bpl.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800850c:	2102      	movs	r1, #2
 800850e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008512:	f7ff fc0d 	bl	8007d30 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8008516:	2800      	cmp	r0, #0
 8008518:	bf18      	it	ne
 800851a:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	039f      	lsls	r7, r3, #14
 8008520:	d50a      	bpl.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 8008522:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8008524:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008528:	f000 80e8 	beq.w	80086fc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800852c:	f200 80d8 	bhi.w	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008530:	2900      	cmp	r1, #0
 8008532:	f000 80db 	beq.w	80086ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8008536:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008538:	02d8      	lsls	r0, r3, #11
 800853a:	d506      	bpl.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800853c:	4940      	ldr	r1, [pc, #256]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800853e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8008540:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008546:	4302      	orrs	r2, r0
 8008548:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800854a:	0299      	lsls	r1, r3, #10
 800854c:	d506      	bpl.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800854e:	493c      	ldr	r1, [pc, #240]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008550:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8008552:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008554:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008558:	4302      	orrs	r2, r0
 800855a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800855c:	005a      	lsls	r2, r3, #1
 800855e:	d509      	bpl.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008560:	4a37      	ldr	r2, [pc, #220]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008562:	6911      	ldr	r1, [r2, #16]
 8008564:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8008568:	6111      	str	r1, [r2, #16]
 800856a:	6911      	ldr	r1, [r2, #16]
 800856c:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8008570:	4301      	orrs	r1, r0
 8008572:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008574:	2b00      	cmp	r3, #0
 8008576:	da06      	bge.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008578:	4931      	ldr	r1, [pc, #196]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800857a:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800857c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800857e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008582:	4302      	orrs	r2, r0
 8008584:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	d507      	bpl.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800858a:	4a2d      	ldr	r2, [pc, #180]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800858c:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8008590:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008592:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008596:	430b      	orrs	r3, r1
 8008598:	6553      	str	r3, [r2, #84]	; 0x54
}
 800859a:	1e30      	subs	r0, r6, #0
 800859c:	bf18      	it	ne
 800859e:	2001      	movne	r0, #1
 80085a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085a4:	2101      	movs	r1, #1
 80085a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80085aa:	f7ff fbc1 	bl	8007d30 <RCCEx_PLL3_Config>
 80085ae:	e6e9      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80085b0:	2601      	movs	r6, #1
 80085b2:	4634      	mov	r4, r6
 80085b4:	e6f2      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80085b6:	4626      	mov	r6, r4
 80085b8:	e6f0      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80085be:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80085c2:	d003      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80085c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085c8:	f47f aefa 	bne.w	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 80085cc:	b9a4      	cbnz	r4, 80085f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085ce:	4a1c      	ldr	r2, [pc, #112]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80085d0:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80085d4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80085d6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80085da:	430b      	orrs	r3, r1
 80085dc:	6553      	str	r3, [r2, #84]	; 0x54
 80085de:	e6f1      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085e0:	2100      	movs	r1, #0
 80085e2:	1d28      	adds	r0, r5, #4
 80085e4:	f7ff fb2c 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085e8:	4604      	mov	r4, r0
      break;
 80085ea:	e7ef      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085ec:	2102      	movs	r1, #2
 80085ee:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80085f2:	f7ff fb9d 	bl	8007d30 <RCCEx_PLL3_Config>
 80085f6:	e7f7      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80085f8:	4626      	mov	r6, r4
 80085fa:	e6e3      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80085fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008600:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008604:	d003      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8008606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800860a:	f47f aeed 	bne.w	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 800860e:	b9a4      	cbnz	r4, 800863a <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008610:	4a0b      	ldr	r2, [pc, #44]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008612:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8008616:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008618:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800861c:	430b      	orrs	r3, r1
 800861e:	6593      	str	r3, [r2, #88]	; 0x58
 8008620:	e6e4      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008622:	2100      	movs	r1, #0
 8008624:	1d28      	adds	r0, r5, #4
 8008626:	f7ff fb0b 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800862a:	4604      	mov	r4, r0
      break;
 800862c:	e7ef      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800862e:	2102      	movs	r1, #2
 8008630:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008634:	f7ff fb7c 	bl	8007d30 <RCCEx_PLL3_Config>
 8008638:	e7f7      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800863a:	4626      	mov	r6, r4
 800863c:	e6d6      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800863e:	bf00      	nop
 8008640:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008644:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008648:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800864c:	d003      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x836>
 800864e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008652:	f47f aedd 	bne.w	8008410 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 8008656:	b9a4      	cbnz	r4, 8008682 <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008658:	4a2c      	ldr	r2, [pc, #176]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800865a:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800865e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008660:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008664:	430b      	orrs	r3, r1
 8008666:	6593      	str	r3, [r2, #88]	; 0x58
 8008668:	e6d4      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800866a:	2100      	movs	r1, #0
 800866c:	1d28      	adds	r0, r5, #4
 800866e:	f7ff fae7 	bl	8007c40 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008672:	4604      	mov	r4, r0
      break;
 8008674:	e7ef      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x836>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008676:	2102      	movs	r1, #2
 8008678:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800867c:	f7ff fb58 	bl	8007d30 <RCCEx_PLL3_Config>
 8008680:	e7f7      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008682:	4626      	mov	r6, r4
 8008684:	e6c6      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008686:	2102      	movs	r1, #2
 8008688:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800868c:	f7ff fb50 	bl	8007d30 <RCCEx_PLL3_Config>
 8008690:	e700      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 8008692:	2601      	movs	r6, #1
 8008694:	4634      	mov	r4, r6
 8008696:	e709      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008698:	4626      	mov	r6, r4
 800869a:	e707      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800869c:	2101      	movs	r1, #1
 800869e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80086a2:	f7ff fb45 	bl	8007d30 <RCCEx_PLL3_Config>
 80086a6:	4604      	mov	r4, r0
      break;
 80086a8:	e715      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 80086aa:	2601      	movs	r6, #1
 80086ac:	4634      	mov	r4, r6
 80086ae:	e71d      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80086b0:	4626      	mov	r6, r4
 80086b2:	e71b      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80086b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80086b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80086be:	b96c      	cbnz	r4, 80086dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086c0:	4a12      	ldr	r2, [pc, #72]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80086c2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80086c4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80086c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ca:	430b      	orrs	r3, r1
 80086cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086ce:	e71a      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086d0:	2102      	movs	r1, #2
 80086d2:	1d28      	adds	r0, r5, #4
 80086d4:	f7ff fab4 	bl	8007c40 <RCCEx_PLL2_Config>
 80086d8:	4604      	mov	r4, r0
      break;
 80086da:	e7f0      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80086dc:	4626      	mov	r6, r4
 80086de:	e712      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 80086e0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80086e4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80086e8:	f47f af25 	bne.w	8008536 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 80086ec:	b964      	cbnz	r4, 8008708 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086ee:	4807      	ldr	r0, [pc, #28]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80086f0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80086f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80086f6:	430a      	orrs	r2, r1
 80086f8:	6542      	str	r2, [r0, #84]	; 0x54
 80086fa:	e71d      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fc:	4803      	ldr	r0, [pc, #12]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80086fe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008700:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008704:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8008706:	e7f1      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8008708:	4626      	mov	r6, r4
 800870a:	e715      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x718>
 800870c:	58024400 	.word	0x58024400

08008710 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008710:	4770      	bx	lr
	...

08008714 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008714:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008718:	2b01      	cmp	r3, #1
 800871a:	d13b      	bne.n	8008794 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800871c:	2302      	movs	r3, #2
 800871e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008722:	6803      	ldr	r3, [r0, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872c:	4a1a      	ldr	r2, [pc, #104]	; (8008798 <HAL_TIM_Base_Start_IT+0x84>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d022      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008736:	d01f      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008738:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800873c:	4293      	cmp	r3, r2
 800873e:	d01b      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008740:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008744:	4293      	cmp	r3, r2
 8008746:	d017      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800874c:	4293      	cmp	r3, r2
 800874e:	d013      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008750:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008754:	4293      	cmp	r3, r2
 8008756:	d00f      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008758:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800875c:	4293      	cmp	r3, r2
 800875e:	d00b      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008760:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008764:	4293      	cmp	r3, r2
 8008766:	d007      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008768:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x64>
 8008770:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008774:	4293      	cmp	r3, r2
 8008776:	d107      	bne.n	8008788 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008778:	6899      	ldr	r1, [r3, #8]
 800877a:	4a08      	ldr	r2, [pc, #32]	; (800879c <HAL_TIM_Base_Start_IT+0x88>)
 800877c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877e:	2a06      	cmp	r2, #6
 8008780:	d006      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x7c>
 8008782:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008786:	d003      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008790:	2000      	movs	r0, #0
}
 8008792:	4770      	bx	lr
    return HAL_ERROR;
 8008794:	2001      	movs	r0, #1
 8008796:	4770      	bx	lr
 8008798:	40010000 	.word	0x40010000
 800879c:	00010007 	.word	0x00010007

080087a0 <HAL_TIM_OC_DelayElapsedCallback>:
 80087a0:	4770      	bx	lr

080087a2 <HAL_TIM_IC_CaptureCallback>:
 80087a2:	4770      	bx	lr

080087a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80087a4:	4770      	bx	lr

080087a6 <HAL_TIM_TriggerCallback>:
 80087a6:	4770      	bx	lr

080087a8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087a8:	6803      	ldr	r3, [r0, #0]
 80087aa:	691a      	ldr	r2, [r3, #16]
 80087ac:	0791      	lsls	r1, r2, #30
{
 80087ae:	b510      	push	{r4, lr}
 80087b0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087b2:	d50f      	bpl.n	80087d4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	0792      	lsls	r2, r2, #30
 80087b8:	d50c      	bpl.n	80087d4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087ba:	f06f 0202 	mvn.w	r2, #2
 80087be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087c0:	2201      	movs	r2, #1
 80087c2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	0799      	lsls	r1, r3, #30
 80087c8:	f000 8085 	beq.w	80088d6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087cc:	f7ff ffe9 	bl	80087a2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087d0:	2300      	movs	r3, #0
 80087d2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	691a      	ldr	r2, [r3, #16]
 80087d8:	0752      	lsls	r2, r2, #29
 80087da:	d510      	bpl.n	80087fe <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	0750      	lsls	r0, r2, #29
 80087e0:	d50d      	bpl.n	80087fe <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087e2:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087ea:	2202      	movs	r2, #2
 80087ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80087f4:	d075      	beq.n	80088e2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80087f6:	f7ff ffd4 	bl	80087a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	2300      	movs	r3, #0
 80087fc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	691a      	ldr	r2, [r3, #16]
 8008802:	0711      	lsls	r1, r2, #28
 8008804:	d50f      	bpl.n	8008826 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	0712      	lsls	r2, r2, #28
 800880a:	d50c      	bpl.n	8008826 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800880c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008810:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008814:	2204      	movs	r2, #4
 8008816:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	079b      	lsls	r3, r3, #30
 800881c:	d067      	beq.n	80088ee <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800881e:	f7ff ffc0 	bl	80087a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	2300      	movs	r3, #0
 8008824:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	691a      	ldr	r2, [r3, #16]
 800882a:	06d0      	lsls	r0, r2, #27
 800882c:	d510      	bpl.n	8008850 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	06d1      	lsls	r1, r2, #27
 8008832:	d50d      	bpl.n	8008850 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008834:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008838:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800883a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800883c:	2208      	movs	r2, #8
 800883e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008846:	d058      	beq.n	80088fa <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8008848:	f7ff ffab 	bl	80087a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884c:	2300      	movs	r3, #0
 800884e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	07d2      	lsls	r2, r2, #31
 8008856:	d508      	bpl.n	800886a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	07d0      	lsls	r0, r2, #31
 800885c:	d505      	bpl.n	800886a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800885e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008862:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008864:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008866:	f7f8 f88d 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	0611      	lsls	r1, r2, #24
 8008870:	d508      	bpl.n	8008884 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	0612      	lsls	r2, r2, #24
 8008876:	d505      	bpl.n	8008884 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008878:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800887c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800887e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008880:	f000 f8e1 	bl	8008a46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	05d0      	lsls	r0, r2, #23
 800888a:	d508      	bpl.n	800889e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	0611      	lsls	r1, r2, #24
 8008890:	d505      	bpl.n	800889e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008892:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008896:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008898:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800889a:	f000 f8d5 	bl	8008a48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	0652      	lsls	r2, r2, #25
 80088a4:	d508      	bpl.n	80088b8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	0650      	lsls	r0, r2, #25
 80088aa:	d505      	bpl.n	80088b8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80088b4:	f7ff ff77 	bl	80087a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	0691      	lsls	r1, r2, #26
 80088be:	d522      	bpl.n	8008906 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	0692      	lsls	r2, r2, #26
 80088c4:	d51f      	bpl.n	8008906 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088c6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088cc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80088d2:	f000 b8b7 	b.w	8008a44 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088d6:	f7ff ff63 	bl	80087a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff ff62 	bl	80087a4 <HAL_TIM_PWM_PulseFinishedCallback>
 80088e0:	e776      	b.n	80087d0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088e2:	f7ff ff5d 	bl	80087a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088e6:	4620      	mov	r0, r4
 80088e8:	f7ff ff5c 	bl	80087a4 <HAL_TIM_PWM_PulseFinishedCallback>
 80088ec:	e785      	b.n	80087fa <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ee:	f7ff ff57 	bl	80087a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7ff ff56 	bl	80087a4 <HAL_TIM_PWM_PulseFinishedCallback>
 80088f8:	e793      	b.n	8008822 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088fa:	f7ff ff51 	bl	80087a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fe:	4620      	mov	r0, r4
 8008900:	f7ff ff50 	bl	80087a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008904:	e7a2      	b.n	800884c <HAL_TIM_IRQHandler+0xa4>
}
 8008906:	bd10      	pop	{r4, pc}

08008908 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008908:	4a34      	ldr	r2, [pc, #208]	; (80089dc <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 800890a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800890c:	4290      	cmp	r0, r2
 800890e:	d012      	beq.n	8008936 <TIM_Base_SetConfig+0x2e>
 8008910:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008914:	d00f      	beq.n	8008936 <TIM_Base_SetConfig+0x2e>
 8008916:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800891a:	4290      	cmp	r0, r2
 800891c:	d00b      	beq.n	8008936 <TIM_Base_SetConfig+0x2e>
 800891e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008922:	4290      	cmp	r0, r2
 8008924:	d007      	beq.n	8008936 <TIM_Base_SetConfig+0x2e>
 8008926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800892a:	4290      	cmp	r0, r2
 800892c:	d003      	beq.n	8008936 <TIM_Base_SetConfig+0x2e>
 800892e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008932:	4290      	cmp	r0, r2
 8008934:	d119      	bne.n	800896a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8008936:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800893c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800893e:	4a27      	ldr	r2, [pc, #156]	; (80089dc <TIM_Base_SetConfig+0xd4>)
 8008940:	4290      	cmp	r0, r2
 8008942:	d025      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 8008944:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008948:	d022      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 800894a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800894e:	4290      	cmp	r0, r2
 8008950:	d01e      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 8008952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008956:	4290      	cmp	r0, r2
 8008958:	d01a      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 800895a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800895e:	4290      	cmp	r0, r2
 8008960:	d016      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 8008962:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008966:	4290      	cmp	r0, r2
 8008968:	d012      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 800896a:	4a1d      	ldr	r2, [pc, #116]	; (80089e0 <TIM_Base_SetConfig+0xd8>)
 800896c:	4290      	cmp	r0, r2
 800896e:	d00f      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 8008970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008974:	4290      	cmp	r0, r2
 8008976:	d00b      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 8008978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800897c:	4290      	cmp	r0, r2
 800897e:	d007      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 8008980:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 8008984:	4290      	cmp	r0, r2
 8008986:	d003      	beq.n	8008990 <TIM_Base_SetConfig+0x88>
 8008988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800898c:	4290      	cmp	r0, r2
 800898e:	d103      	bne.n	8008998 <TIM_Base_SetConfig+0x90>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008994:	68ca      	ldr	r2, [r1, #12]
 8008996:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008998:	694a      	ldr	r2, [r1, #20]
 800899a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800899e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80089a0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089a2:	688b      	ldr	r3, [r1, #8]
 80089a4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089a6:	680b      	ldr	r3, [r1, #0]
 80089a8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <TIM_Base_SetConfig+0xd4>)
 80089ac:	4298      	cmp	r0, r3
 80089ae:	d00f      	beq.n	80089d0 <TIM_Base_SetConfig+0xc8>
 80089b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089b4:	4298      	cmp	r0, r3
 80089b6:	d00b      	beq.n	80089d0 <TIM_Base_SetConfig+0xc8>
 80089b8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80089bc:	4298      	cmp	r0, r3
 80089be:	d007      	beq.n	80089d0 <TIM_Base_SetConfig+0xc8>
 80089c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c4:	4298      	cmp	r0, r3
 80089c6:	d003      	beq.n	80089d0 <TIM_Base_SetConfig+0xc8>
 80089c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089cc:	4298      	cmp	r0, r3
 80089ce:	d101      	bne.n	80089d4 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089d0:	690b      	ldr	r3, [r1, #16]
 80089d2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089d4:	2301      	movs	r3, #1
 80089d6:	6143      	str	r3, [r0, #20]
}
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40014000 	.word	0x40014000

080089e4 <HAL_TIM_Base_Init>:
{
 80089e4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80089e6:	4604      	mov	r4, r0
 80089e8:	b350      	cbz	r0, 8008a40 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80089ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80089ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80089f2:	b91b      	cbnz	r3, 80089fc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80089f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80089f8:	f7ff fe8a 	bl	8008710 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8008a02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a06:	f7ff ff7f 	bl	8008908 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a0a:	2301      	movs	r3, #1
  return HAL_OK;
 8008a0c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a0e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008a16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008a1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008a1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008a36:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008a3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008a3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008a40:	2001      	movs	r0, #1
 8008a42:	e7fc      	b.n	8008a3e <HAL_TIM_Base_Init+0x5a>

08008a44 <HAL_TIMEx_CommutCallback>:
 8008a44:	4770      	bx	lr

08008a46 <HAL_TIMEx_BreakCallback>:
 8008a46:	4770      	bx	lr

08008a48 <HAL_TIMEx_Break2Callback>:
 8008a48:	4770      	bx	lr

08008a4a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008a4a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008a4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a50:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008a52:	f001 fe35 	bl	800a6c0 <xTaskGetSchedulerState>
 8008a56:	2801      	cmp	r0, #1
 8008a58:	d003      	beq.n	8008a62 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8008a5e:	f000 bbd9 	b.w	8009214 <xPortSysTickHandler>
}
 8008a62:	bd08      	pop	{r3, pc}

08008a64 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a64:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a68:	b92b      	cbnz	r3, 8008a76 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a6a:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <osKernelInitialize+0x20>)
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	b928      	cbnz	r0, 8008a7c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a70:	2201      	movs	r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a74:	4770      	bx	lr
    stat = osErrorISR;
 8008a76:	f06f 0005 	mvn.w	r0, #5
 8008a7a:	4770      	bx	lr
    } else {
      stat = osError;
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	240023f0 	.word	0x240023f0

08008a88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a8e:	b95c      	cbnz	r4, 8008aa8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008a90:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <osKernelStart+0x2c>)
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	2a01      	cmp	r2, #1
 8008a96:	d10a      	bne.n	8008aae <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a98:	4a07      	ldr	r2, [pc, #28]	; (8008ab8 <osKernelStart+0x30>)
 8008a9a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008aa0:	f001 fcb2 	bl	800a408 <vTaskStartScheduler>
      stat = osOK;
 8008aa4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008aa6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008aa8:	f06f 0005 	mvn.w	r0, #5
 8008aac:	e7fb      	b.n	8008aa6 <osKernelStart+0x1e>
      stat = osError;
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008ab2:	e7f8      	b.n	8008aa6 <osKernelStart+0x1e>
 8008ab4:	240023f0 	.word	0x240023f0
 8008ab8:	e000ed00 	.word	0xe000ed00

08008abc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008abe:	4614      	mov	r4, r2
 8008ac0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ac2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ac4:	460b      	mov	r3, r1
  hTask = NULL;
 8008ac6:	9205      	str	r2, [sp, #20]
 8008ac8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008acc:	b9d2      	cbnz	r2, 8008b04 <osThreadNew+0x48>
 8008ace:	b1c8      	cbz	r0, 8008b04 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008ad0:	2c00      	cmp	r4, #0
 8008ad2:	d02f      	beq.n	8008b34 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008ad4:	69a5      	ldr	r5, [r4, #24]
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	bf08      	it	eq
 8008ada:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008adc:	1e69      	subs	r1, r5, #1
 8008ade:	46ac      	mov	ip, r5
 8008ae0:	2937      	cmp	r1, #55	; 0x37
 8008ae2:	d82b      	bhi.n	8008b3c <osThreadNew+0x80>
 8008ae4:	6861      	ldr	r1, [r4, #4]
 8008ae6:	07c9      	lsls	r1, r1, #31
 8008ae8:	d428      	bmi.n	8008b3c <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008aea:	6966      	ldr	r6, [r4, #20]
 8008aec:	b16e      	cbz	r6, 8008b0a <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008aee:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8008af0:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008af2:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8008af6:	b157      	cbz	r7, 8008b0e <osThreadNew+0x52>
 8008af8:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8008afc:	d902      	bls.n	8008b04 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008afe:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b00:	b104      	cbz	r4, 8008b04 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b02:	b9ee      	cbnz	r6, 8008b40 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b04:	9805      	ldr	r0, [sp, #20]
}
 8008b06:	b007      	add	sp, #28
 8008b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008b0a:	2280      	movs	r2, #128	; 0x80
 8008b0c:	e7f0      	b.n	8008af0 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b0e:	f1be 0f00 	cmp.w	lr, #0
 8008b12:	d1f7      	bne.n	8008b04 <osThreadNew+0x48>
      if (mem == 0) {
 8008b14:	6924      	ldr	r4, [r4, #16]
 8008b16:	2c00      	cmp	r4, #0
 8008b18:	d1f4      	bne.n	8008b04 <osThreadNew+0x48>
 8008b1a:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b1c:	a905      	add	r1, sp, #20
 8008b1e:	b292      	uxth	r2, r2
 8008b20:	e9cd c100 	strd	ip, r1, [sp]
 8008b24:	4621      	mov	r1, r4
 8008b26:	f001 faea 	bl	800a0fe <xTaskCreate>
 8008b2a:	2801      	cmp	r0, #1
            hTask = NULL;
 8008b2c:	bf1c      	itt	ne
 8008b2e:	2300      	movne	r3, #0
 8008b30:	9305      	strne	r3, [sp, #20]
 8008b32:	e7e7      	b.n	8008b04 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 8008b34:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8008b38:	2280      	movs	r2, #128	; 0x80
 8008b3a:	e7ef      	b.n	8008b1c <osThreadNew+0x60>
        return (NULL);
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	e7e2      	b.n	8008b06 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b40:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8008b44:	9500      	str	r5, [sp, #0]
 8008b46:	f001 faa2 	bl	800a08e <xTaskCreateStatic>
 8008b4a:	9005      	str	r0, [sp, #20]
 8008b4c:	e7da      	b.n	8008b04 <osThreadNew+0x48>

08008b4e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b4e:	b510      	push	{r4, lr}
 8008b50:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b54:	b924      	cbnz	r4, 8008b60 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008b56:	b110      	cbz	r0, 8008b5e <osDelay+0x10>
      vTaskDelay(ticks);
 8008b58:	f001 fc16 	bl	800a388 <vTaskDelay>
    stat = osOK;
 8008b5c:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 8008b5e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008b60:	f06f 0005 	mvn.w	r0, #5
 8008b64:	e7fb      	b.n	8008b5e <osDelay+0x10>

08008b66 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b68:	4604      	mov	r4, r0
 8008b6a:	460e      	mov	r6, r1
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008b72:	b11a      	cbz	r2, 8008b7c <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8008b74:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008b76:	4620      	mov	r0, r4
 8008b78:	b003      	add	sp, #12
 8008b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d0f9      	beq.n	8008b74 <osSemaphoreNew+0xe>
 8008b80:	4288      	cmp	r0, r1
 8008b82:	d3f7      	bcc.n	8008b74 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8008b84:	b1e5      	cbz	r5, 8008bc0 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b86:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8008b8a:	b1bb      	cbz	r3, 8008bbc <osSemaphoreNew+0x56>
 8008b8c:	2f4f      	cmp	r7, #79	; 0x4f
 8008b8e:	d9f1      	bls.n	8008b74 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8008b90:	2801      	cmp	r0, #1
 8008b92:	d12a      	bne.n	8008bea <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008b94:	2103      	movs	r1, #3
 8008b96:	9100      	str	r1, [sp, #0]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	f000 fce3 	bl	8009564 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8008b9e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d0e7      	beq.n	8008b74 <osSemaphoreNew+0xe>
 8008ba4:	b1de      	cbz	r6, 8008bde <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4619      	mov	r1, r3
 8008bac:	f000 fd8f 	bl	80096ce <xQueueGenericSend>
 8008bb0:	2801      	cmp	r0, #1
 8008bb2:	d014      	beq.n	8008bde <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f001 f8cb 	bl	8009d50 <vQueueDelete>
 8008bba:	e7db      	b.n	8008b74 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	d1d9      	bne.n	8008b74 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8008bc0:	2c01      	cmp	r4, #1
 8008bc2:	d105      	bne.n	8008bd0 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fd19 	bl	8009600 <xQueueGenericCreate>
 8008bce:	e7e6      	b.n	8008b9e <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	f000 fd5d 	bl	8009692 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8008bd8:	4604      	mov	r4, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0ca      	beq.n	8008b74 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 8008bde:	b955      	cbnz	r5, 8008bf6 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 8008be0:	4629      	mov	r1, r5
 8008be2:	4620      	mov	r0, r4
 8008be4:	f001 f88e 	bl	8009d04 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8008be8:	e7c5      	b.n	8008b76 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008bea:	461a      	mov	r2, r3
 8008bec:	f000 fd2f 	bl	800964e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0be      	beq.n	8008b74 <osSemaphoreNew+0xe>
          name = attr->name;
 8008bf6:	682d      	ldr	r5, [r5, #0]
 8008bf8:	e7f2      	b.n	8008be0 <osSemaphoreNew+0x7a>

08008bfa <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008bfa:	b513      	push	{r0, r1, r4, lr}
 8008bfc:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008bfe:	b308      	cbz	r0, 8008c44 <osSemaphoreAcquire+0x4a>
 8008c00:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008c04:	b1b3      	cbz	r3, 8008c34 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 8008c06:	b9e9      	cbnz	r1, 8008c44 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008c08:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008c0a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008c0c:	f001 f82a 	bl	8009c64 <xQueueReceiveFromISR>
 8008c10:	2801      	cmp	r0, #1
 8008c12:	d114      	bne.n	8008c3e <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008c14:	9b01      	ldr	r3, [sp, #4]
 8008c16:	b913      	cbnz	r3, 8008c1e <osSemaphoreAcquire+0x24>
  stat = osOK;
 8008c18:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008c1a:	b002      	add	sp, #8
 8008c1c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8008c1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	e7f1      	b.n	8008c18 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008c34:	f000 ff53 	bl	8009ade <xQueueSemaphoreTake>
 8008c38:	2801      	cmp	r0, #1
 8008c3a:	d0ed      	beq.n	8008c18 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 8008c3c:	b92c      	cbnz	r4, 8008c4a <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 8008c3e:	f06f 0002 	mvn.w	r0, #2
 8008c42:	e7ea      	b.n	8008c1a <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008c44:	f06f 0003 	mvn.w	r0, #3
 8008c48:	e7e7      	b.n	8008c1a <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 8008c4a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008c4e:	e7e4      	b.n	8008c1a <osSemaphoreAcquire+0x20>

08008c50 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008c50:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008c52:	b310      	cbz	r0, 8008c9a <osSemaphoreRelease+0x4a>
 8008c54:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008c58:	b1b3      	cbz	r3, 8008c88 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8008c5a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c5c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8008c5e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c60:	f000 fe4a 	bl	80098f8 <xQueueGiveFromISR>
 8008c64:	2801      	cmp	r0, #1
 8008c66:	d115      	bne.n	8008c94 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8008c68:	9b01      	ldr	r3, [sp, #4]
 8008c6a:	b913      	cbnz	r3, 8008c72 <osSemaphoreRelease+0x22>
  stat = osOK;
 8008c6c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8008c6e:	b002      	add	sp, #8
 8008c70:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8008c72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	e7f1      	b.n	8008c6c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f000 fd1f 	bl	80096ce <xQueueGenericSend>
 8008c90:	2801      	cmp	r0, #1
 8008c92:	d0eb      	beq.n	8008c6c <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8008c94:	f06f 0002 	mvn.w	r0, #2
 8008c98:	e7e9      	b.n	8008c6e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008c9a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008c9e:	e7e6      	b.n	8008c6e <osSemaphoreRelease+0x1e>

08008ca0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	460e      	mov	r6, r1
 8008ca6:	4614      	mov	r4, r2
 8008ca8:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008cac:	b11f      	cbz	r7, 8008cb6 <osMessageQueueNew+0x16>
  hQueue = NULL;
 8008cae:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	b003      	add	sp, #12
 8008cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d0f9      	beq.n	8008cae <osMessageQueueNew+0xe>
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	d0f7      	beq.n	8008cae <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8008cbe:	b1da      	cbz	r2, 8008cf8 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008cc0:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8008cc4:	b183      	cbz	r3, 8008ce8 <osMessageQueueNew+0x48>
 8008cc6:	2a4f      	cmp	r2, #79	; 0x4f
 8008cc8:	d9f1      	bls.n	8008cae <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008cca:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ccc:	2a00      	cmp	r2, #0
 8008cce:	d0ee      	beq.n	8008cae <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008cd0:	434d      	muls	r5, r1
 8008cd2:	6966      	ldr	r6, [r4, #20]
 8008cd4:	42ae      	cmp	r6, r5
 8008cd6:	d3ea      	bcc.n	8008cae <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008cd8:	9700      	str	r7, [sp, #0]
 8008cda:	f000 fc43 	bl	8009564 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8008cde:	4605      	mov	r5, r0
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d0e4      	beq.n	8008cae <osMessageQueueNew+0xe>
        name = attr->name;
 8008ce4:	6824      	ldr	r4, [r4, #0]
 8008ce6:	e011      	b.n	8008d0c <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	d1e0      	bne.n	8008cae <osMessageQueueNew+0xe>
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1dd      	bne.n	8008cae <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008cf2:	6963      	ldr	r3, [r4, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1da      	bne.n	8008cae <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	f000 fc7f 	bl	8009600 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8008d02:	4605      	mov	r5, r0
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d0d2      	beq.n	8008cae <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8008d08:	2c00      	cmp	r4, #0
 8008d0a:	d1eb      	bne.n	8008ce4 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 fff8 	bl	8009d04 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8008d14:	e7cc      	b.n	8008cb0 <osMessageQueueNew+0x10>

08008d16 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d18:	461c      	mov	r4, r3
 8008d1a:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008d1e:	b1c6      	cbz	r6, 8008d52 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d20:	b318      	cbz	r0, 8008d6a <osMessageQueuePut+0x54>
 8008d22:	b311      	cbz	r1, 8008d6a <osMessageQueuePut+0x54>
 8008d24:	bb0b      	cbnz	r3, 8008d6a <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d26:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008d28:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d2a:	f000 fd83 	bl	8009834 <xQueueGenericSendFromISR>
 8008d2e:	2801      	cmp	r0, #1
 8008d30:	d118      	bne.n	8008d64 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	b913      	cbnz	r3, 8008d3c <osMessageQueuePut+0x26>
  stat = osOK;
 8008d36:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008d38:	b002      	add	sp, #8
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8008d3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	e7f1      	b.n	8008d36 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d52:	b150      	cbz	r0, 8008d6a <osMessageQueuePut+0x54>
 8008d54:	b149      	cbz	r1, 8008d6a <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d56:	4633      	mov	r3, r6
 8008d58:	4622      	mov	r2, r4
 8008d5a:	f000 fcb8 	bl	80096ce <xQueueGenericSend>
 8008d5e:	2801      	cmp	r0, #1
 8008d60:	d0e9      	beq.n	8008d36 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 8008d62:	b92c      	cbnz	r4, 8008d70 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 8008d64:	f06f 0002 	mvn.w	r0, #2
 8008d68:	e7e6      	b.n	8008d38 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 8008d6a:	f06f 0003 	mvn.w	r0, #3
 8008d6e:	e7e3      	b.n	8008d38 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 8008d70:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008d74:	e7e0      	b.n	8008d38 <osMessageQueuePut+0x22>

08008d76 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d78:	461c      	mov	r4, r3
 8008d7a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008d7e:	b1c3      	cbz	r3, 8008db2 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d80:	b310      	cbz	r0, 8008dc8 <osMessageQueueGet+0x52>
 8008d82:	b309      	cbz	r1, 8008dc8 <osMessageQueueGet+0x52>
 8008d84:	bb04      	cbnz	r4, 8008dc8 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d86:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008d88:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d8a:	f000 ff6b 	bl	8009c64 <xQueueReceiveFromISR>
 8008d8e:	2801      	cmp	r0, #1
 8008d90:	d117      	bne.n	8008dc2 <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	b913      	cbnz	r3, 8008d9c <osMessageQueueGet+0x26>
  stat = osOK;
 8008d96:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008d98:	b003      	add	sp, #12
 8008d9a:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8008d9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	e7f1      	b.n	8008d96 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008db2:	b148      	cbz	r0, 8008dc8 <osMessageQueueGet+0x52>
 8008db4:	b141      	cbz	r1, 8008dc8 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008db6:	4622      	mov	r2, r4
 8008db8:	f000 fdf2 	bl	80099a0 <xQueueReceive>
 8008dbc:	2801      	cmp	r0, #1
 8008dbe:	d0ea      	beq.n	8008d96 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 8008dc0:	b92c      	cbnz	r4, 8008dce <osMessageQueueGet+0x58>
          stat = osErrorResource;
 8008dc2:	f06f 0002 	mvn.w	r0, #2
 8008dc6:	e7e7      	b.n	8008d98 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 8008dc8:	f06f 0003 	mvn.w	r0, #3
 8008dcc:	e7e4      	b.n	8008d98 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 8008dce:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008dd2:	e7e1      	b.n	8008d98 <osMessageQueueGet+0x22>

08008dd4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008dd4:	4b03      	ldr	r3, [pc, #12]	; (8008de4 <vApplicationGetIdleTaskMemory+0x10>)
 8008dd6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008dd8:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <vApplicationGetIdleTaskMemory+0x14>)
 8008dda:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ddc:	2380      	movs	r3, #128	; 0x80
 8008dde:	6013      	str	r3, [r2, #0]
}
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	24002390 	.word	0x24002390
 8008de8:	24002190 	.word	0x24002190

08008dec <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008dec:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <vApplicationGetTimerTaskMemory+0x10>)
 8008dee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008df0:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <vApplicationGetTimerTaskMemory+0x14>)
 8008df2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df8:	6013      	str	r3, [r2, #0]
}
 8008dfa:	4770      	bx	lr
 8008dfc:	240027f4 	.word	0x240027f4
 8008e00:	240023f4 	.word	0x240023f4

08008e04 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <prvInsertBlockIntoFreeList+0x40>)
{
 8008e06:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e08:	461a      	mov	r2, r3
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4283      	cmp	r3, r0
 8008e0e:	d3fb      	bcc.n	8008e08 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e10:	6854      	ldr	r4, [r2, #4]
 8008e12:	1911      	adds	r1, r2, r4
 8008e14:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e16:	bf01      	itttt	eq
 8008e18:	6841      	ldreq	r1, [r0, #4]
 8008e1a:	4610      	moveq	r0, r2
 8008e1c:	1909      	addeq	r1, r1, r4
 8008e1e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e20:	6844      	ldr	r4, [r0, #4]
 8008e22:	1901      	adds	r1, r0, r4
 8008e24:	428b      	cmp	r3, r1
 8008e26:	d107      	bne.n	8008e38 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e28:	4907      	ldr	r1, [pc, #28]	; (8008e48 <prvInsertBlockIntoFreeList+0x44>)
 8008e2a:	6809      	ldr	r1, [r1, #0]
 8008e2c:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e2e:	bf1f      	itttt	ne
 8008e30:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e32:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e34:	1909      	addne	r1, r1, r4
 8008e36:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e38:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e3a:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e3c:	bf18      	it	ne
 8008e3e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e40:	bd10      	pop	{r4, pc}
 8008e42:	bf00      	nop
 8008e44:	2400646c 	.word	0x2400646c
 8008e48:	24002854 	.word	0x24002854

08008e4c <pvPortMalloc>:
{
 8008e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e50:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008e52:	f001 f981 	bl	800a158 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008e56:	4842      	ldr	r0, [pc, #264]	; (8008f60 <pvPortMalloc+0x114>)
 8008e58:	4d42      	ldr	r5, [pc, #264]	; (8008f64 <pvPortMalloc+0x118>)
 8008e5a:	6803      	ldr	r3, [r0, #0]
 8008e5c:	bb0b      	cbnz	r3, 8008ea2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8008e5e:	4942      	ldr	r1, [pc, #264]	; (8008f68 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e60:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e62:	4e42      	ldr	r6, [pc, #264]	; (8008f6c <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e64:	bf1b      	ittet	ne
 8008e66:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e68:	f501 5270 	addne.w	r2, r1, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e6c:	f44f 5270 	moveq.w	r2, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e70:	f023 0307 	bicne.w	r3, r3, #7
 8008e74:	bf1c      	itt	ne
 8008e76:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e78:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8008e7a:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e7c:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e7e:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e80:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 8008e82:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e84:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8008e88:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e8c:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8008e8e:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e90:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e94:	4a36      	ldr	r2, [pc, #216]	; (8008f70 <pvPortMalloc+0x124>)
 8008e96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e98:	4a36      	ldr	r2, [pc, #216]	; (8008f74 <pvPortMalloc+0x128>)
 8008e9a:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ea0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ea2:	682f      	ldr	r7, [r5, #0]
 8008ea4:	4227      	tst	r7, r4
 8008ea6:	d155      	bne.n	8008f54 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8008ea8:	2c00      	cmp	r4, #0
 8008eaa:	d046      	beq.n	8008f3a <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8008eac:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008eb0:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008eb2:	bf1c      	itt	ne
 8008eb4:	f023 0307 	bicne.w	r3, r3, #7
 8008eb8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d04a      	beq.n	8008f54 <pvPortMalloc+0x108>
 8008ebe:	4c2d      	ldr	r4, [pc, #180]	; (8008f74 <pvPortMalloc+0x128>)
 8008ec0:	6826      	ldr	r6, [r4, #0]
 8008ec2:	429e      	cmp	r6, r3
 8008ec4:	d346      	bcc.n	8008f54 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8008ec6:	4a29      	ldr	r2, [pc, #164]	; (8008f6c <pvPortMalloc+0x120>)
 8008ec8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eca:	6869      	ldr	r1, [r5, #4]
 8008ecc:	4299      	cmp	r1, r3
 8008ece:	d204      	bcs.n	8008eda <pvPortMalloc+0x8e>
 8008ed0:	f8d5 c000 	ldr.w	ip, [r5]
 8008ed4:	f1bc 0f00 	cmp.w	ip, #0
 8008ed8:	d115      	bne.n	8008f06 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	42a8      	cmp	r0, r5
 8008ede:	d039      	beq.n	8008f54 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ee0:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ee2:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ee4:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ee8:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eea:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eec:	d912      	bls.n	8008f14 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008eee:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ef0:	0742      	lsls	r2, r0, #29
 8008ef2:	d00b      	beq.n	8008f0c <pvPortMalloc+0xc0>
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	e7fe      	b.n	8008f04 <pvPortMalloc+0xb8>
 8008f06:	462a      	mov	r2, r5
 8008f08:	4665      	mov	r5, ip
 8008f0a:	e7de      	b.n	8008eca <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f0c:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f0e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f10:	f7ff ff78 	bl	8008e04 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f14:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f16:	4916      	ldr	r1, [pc, #88]	; (8008f70 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f18:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f1a:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 8008f1c:	4a16      	ldr	r2, [pc, #88]	; (8008f78 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 8008f1e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f20:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8008f22:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8008f24:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f26:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f28:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f2a:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 8008f2e:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f32:	bf38      	it	cc
 8008f34:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f36:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8008f38:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8008f3a:	f001 f9b1 	bl	800a2a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f3e:	0763      	lsls	r3, r4, #29
 8008f40:	d00a      	beq.n	8008f58 <pvPortMalloc+0x10c>
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	e7fe      	b.n	8008f52 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8008f54:	2400      	movs	r4, #0
 8008f56:	e7f0      	b.n	8008f3a <pvPortMalloc+0xee>
}
 8008f58:	4620      	mov	r0, r4
 8008f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5e:	bf00      	nop
 8008f60:	24002854 	.word	0x24002854
 8008f64:	24006458 	.word	0x24006458
 8008f68:	24002858 	.word	0x24002858
 8008f6c:	2400646c 	.word	0x2400646c
 8008f70:	24006460 	.word	0x24006460
 8008f74:	2400645c 	.word	0x2400645c
 8008f78:	24006464 	.word	0x24006464

08008f7c <vPortFree>:
{
 8008f7c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008f7e:	4604      	mov	r4, r0
 8008f80:	b390      	cbz	r0, 8008fe8 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f82:	4a1a      	ldr	r2, [pc, #104]	; (8008fec <vPortFree+0x70>)
 8008f84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008f88:	6812      	ldr	r2, [r2, #0]
 8008f8a:	4213      	tst	r3, r2
 8008f8c:	d108      	bne.n	8008fa0 <vPortFree+0x24>
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	e7fe      	b.n	8008f9e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fa0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008fa4:	b141      	cbz	r1, 8008fb8 <vPortFree+0x3c>
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	e7fe      	b.n	8008fb6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fb8:	ea23 0302 	bic.w	r3, r3, r2
 8008fbc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008fc0:	f001 f8ca 	bl	800a158 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fc4:	4a0a      	ldr	r2, [pc, #40]	; (8008ff0 <vPortFree+0x74>)
 8008fc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fca:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fce:	6811      	ldr	r1, [r2, #0]
 8008fd0:	440b      	add	r3, r1
 8008fd2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fd4:	f7ff ff16 	bl	8008e04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fd8:	4a06      	ldr	r2, [pc, #24]	; (8008ff4 <vPortFree+0x78>)
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	3301      	adds	r3, #1
}
 8008fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8008fe2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8008fe4:	f001 b95c 	b.w	800a2a0 <xTaskResumeAll>
}
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	bf00      	nop
 8008fec:	24006458 	.word	0x24006458
 8008ff0:	2400645c 	.word	0x2400645c
 8008ff4:	24006468 	.word	0x24006468

08008ff8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ff8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ffc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009000:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009002:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009004:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800900c:	4770      	bx	lr

0800900e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009012:	4770      	bx	lr

08009014 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009014:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009016:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8009018:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800901a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009020:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009022:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009024:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009026:	3301      	adds	r3, #1
 8009028:	6003      	str	r3, [r0, #0]
}
 800902a:	4770      	bx	lr

0800902c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800902c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800902e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009030:	1c63      	adds	r3, r4, #1
 8009032:	d10a      	bne.n	800904a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009034:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800903a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800903c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800903e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009040:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009042:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009044:	3301      	adds	r3, #1
 8009046:	6003      	str	r3, [r0, #0]
}
 8009048:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800904a:	f100 0208 	add.w	r2, r0, #8
 800904e:	4613      	mov	r3, r2
 8009050:	6852      	ldr	r2, [r2, #4]
 8009052:	6815      	ldr	r5, [r2, #0]
 8009054:	42a5      	cmp	r5, r4
 8009056:	d9fa      	bls.n	800904e <vListInsert+0x22>
 8009058:	e7ed      	b.n	8009036 <vListInsert+0xa>

0800905a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800905a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800905c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009060:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009062:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009064:	6859      	ldr	r1, [r3, #4]
 8009066:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009068:	bf08      	it	eq
 800906a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800906c:	2200      	movs	r2, #0
 800906e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	3a01      	subs	r2, #1
 8009074:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009076:	6818      	ldr	r0, [r3, #0]
}
 8009078:	4770      	bx	lr
	...

0800907c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800907c:	4808      	ldr	r0, [pc, #32]	; (80090a0 <prvPortStartFirstTask+0x24>)
 800907e:	6800      	ldr	r0, [r0, #0]
 8009080:	6800      	ldr	r0, [r0, #0]
 8009082:	f380 8808 	msr	MSP, r0
 8009086:	f04f 0000 	mov.w	r0, #0
 800908a:	f380 8814 	msr	CONTROL, r0
 800908e:	b662      	cpsie	i
 8009090:	b661      	cpsie	f
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	df00      	svc	0
 800909c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800909e:	0000      	.short	0x0000
 80090a0:	e000ed08 	.word	0xe000ed08

080090a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090b4 <vPortEnableVFP+0x10>
 80090a8:	6801      	ldr	r1, [r0, #0]
 80090aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090ae:	6001      	str	r1, [r0, #0]
 80090b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090b2:	0000      	.short	0x0000
 80090b4:	e000ed88 	.word	0xe000ed88

080090b8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80090b8:	2300      	movs	r3, #0
{
 80090ba:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80090bc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80090be:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <prvTaskExitError+0x3c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	d008      	beq.n	80090d8 <prvTaskExitError+0x20>
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	e7fe      	b.n	80090d6 <prvTaskExitError+0x1e>
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0fc      	beq.n	80090e8 <prvTaskExitError+0x30>
}
 80090ee:	b002      	add	sp, #8
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2400004c 	.word	0x2400004c

080090f8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090fc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009100:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009104:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009106:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009108:	4b03      	ldr	r3, [pc, #12]	; (8009118 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800910a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800910c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800910e:	f06f 0302 	mvn.w	r3, #2
 8009112:	6203      	str	r3, [r0, #32]
}
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	080090b9 	.word	0x080090b9
 800911c:	00000000 	.word	0x00000000

08009120 <SVC_Handler>:
	__asm volatile (
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <pxCurrentTCBConst2>)
 8009122:	6819      	ldr	r1, [r3, #0]
 8009124:	6808      	ldr	r0, [r1, #0]
 8009126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912a:	f380 8809 	msr	PSP, r0
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f04f 0000 	mov.w	r0, #0
 8009136:	f380 8811 	msr	BASEPRI, r0
 800913a:	4770      	bx	lr
 800913c:	f3af 8000 	nop.w

08009140 <pxCurrentTCBConst2>:
 8009140:	240064bc 	.word	0x240064bc

08009144 <vPortEnterCritical>:
 8009144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009154:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <vPortEnterCritical+0x3c>)
 8009156:	6813      	ldr	r3, [r2, #0]
 8009158:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800915a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800915c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800915e:	d10e      	bne.n	800917e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009160:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009164:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009168:	b2db      	uxtb	r3, r3
 800916a:	b143      	cbz	r3, 800917e <vPortEnterCritical+0x3a>
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	e7fe      	b.n	800917c <vPortEnterCritical+0x38>
}
 800917e:	4770      	bx	lr
 8009180:	2400004c 	.word	0x2400004c

08009184 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009184:	4a08      	ldr	r2, [pc, #32]	; (80091a8 <vPortExitCritical+0x24>)
 8009186:	6813      	ldr	r3, [r2, #0]
 8009188:	b943      	cbnz	r3, 800919c <vPortExitCritical+0x18>
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	e7fe      	b.n	800919a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800919c:	3b01      	subs	r3, #1
 800919e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091a0:	b90b      	cbnz	r3, 80091a6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091a2:	f383 8811 	msr	BASEPRI, r3
}
 80091a6:	4770      	bx	lr
 80091a8:	2400004c 	.word	0x2400004c
 80091ac:	00000000 	.word	0x00000000

080091b0 <PendSV_Handler>:
	__asm volatile
 80091b0:	f3ef 8009 	mrs	r0, PSP
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	4b15      	ldr	r3, [pc, #84]	; (8009210 <pxCurrentTCBConst>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	f01e 0f10 	tst.w	lr, #16
 80091c0:	bf08      	it	eq
 80091c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ca:	6010      	str	r0, [r2, #0]
 80091cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091d4:	f380 8811 	msr	BASEPRI, r0
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f001 f960 	bl	800a4a4 <vTaskSwitchContext>
 80091e4:	f04f 0000 	mov.w	r0, #0
 80091e8:	f380 8811 	msr	BASEPRI, r0
 80091ec:	bc09      	pop	{r0, r3}
 80091ee:	6819      	ldr	r1, [r3, #0]
 80091f0:	6808      	ldr	r0, [r1, #0]
 80091f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f6:	f01e 0f10 	tst.w	lr, #16
 80091fa:	bf08      	it	eq
 80091fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009200:	f380 8809 	msr	PSP, r0
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	f3af 8000 	nop.w

08009210 <pxCurrentTCBConst>:
 8009210:	240064bc 	.word	0x240064bc

08009214 <xPortSysTickHandler>:
{
 8009214:	b508      	push	{r3, lr}
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009226:	f000 ffa5 	bl	800a174 <xTaskIncrementTick>
 800922a:	b128      	cbz	r0, 8009238 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800922c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009234:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009238:	2300      	movs	r3, #0
 800923a:	f383 8811 	msr	BASEPRI, r3
}
 800923e:	bd08      	pop	{r3, pc}

08009240 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009240:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009244:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009246:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800924a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800924c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800924e:	4b04      	ldr	r3, [pc, #16]	; (8009260 <vPortSetupTimerInterrupt+0x20>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	fbb3 f3f1 	udiv	r3, r3, r1
 8009256:	3b01      	subs	r3, #1
 8009258:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800925a:	2307      	movs	r3, #7
 800925c:	6113      	str	r3, [r2, #16]
}
 800925e:	4770      	bx	lr
 8009260:	2400003c 	.word	0x2400003c

08009264 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009264:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8009268:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800926a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800926e:	4a3a      	ldr	r2, [pc, #232]	; (8009358 <xPortStartScheduler+0xf4>)
 8009270:	4291      	cmp	r1, r2
 8009272:	d108      	bne.n	8009286 <xPortStartScheduler+0x22>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	e7fe      	b.n	8009284 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009286:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800928a:	4b34      	ldr	r3, [pc, #208]	; (800935c <xPortStartScheduler+0xf8>)
 800928c:	429a      	cmp	r2, r3
 800928e:	d108      	bne.n	80092a2 <xPortStartScheduler+0x3e>
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	e7fe      	b.n	80092a0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092a2:	4b2f      	ldr	r3, [pc, #188]	; (8009360 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092a4:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092a6:	781a      	ldrb	r2, [r3, #0]
 80092a8:	b2d2      	uxtb	r2, r2
 80092aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092ac:	22ff      	movs	r2, #255	; 0xff
 80092ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092b0:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092b2:	4a2c      	ldr	r2, [pc, #176]	; (8009364 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80092be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092c4:	2307      	movs	r3, #7
 80092c6:	4a28      	ldr	r2, [pc, #160]	; (8009368 <xPortStartScheduler+0x104>)
 80092c8:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ca:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80092ce:	1e5c      	subs	r4, r3, #1
 80092d0:	0600      	lsls	r0, r0, #24
 80092d2:	d40c      	bmi.n	80092ee <xPortStartScheduler+0x8a>
 80092d4:	b111      	cbz	r1, 80092dc <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	d011      	beq.n	8009300 <xPortStartScheduler+0x9c>
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	e7fe      	b.n	80092ec <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80092f2:	2101      	movs	r1, #1
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	f88d 3003 	strb.w	r3, [sp, #3]
 80092fc:	4623      	mov	r3, r4
 80092fe:	e7e4      	b.n	80092ca <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009300:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009304:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8009308:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800930a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	4a14      	ldr	r2, [pc, #80]	; (8009360 <xPortStartScheduler+0xfc>)
 8009310:	b2db      	uxtb	r3, r3
 8009312:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009314:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800931c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009320:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009324:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009328:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800932c:	f7ff ff88 	bl	8009240 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009330:	4b0e      	ldr	r3, [pc, #56]	; (800936c <xPortStartScheduler+0x108>)
 8009332:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009334:	f7ff feb6 	bl	80090a4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009338:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800933c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009340:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8009344:	f7ff fe9a 	bl	800907c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009348:	f001 f8ac 	bl	800a4a4 <vTaskSwitchContext>
}
 800934c:	4628      	mov	r0, r5
	prvTaskExitError();
 800934e:	f7ff feb3 	bl	80090b8 <prvTaskExitError>
}
 8009352:	b003      	add	sp, #12
 8009354:	bd30      	pop	{r4, r5, pc}
 8009356:	bf00      	nop
 8009358:	410fc271 	.word	0x410fc271
 800935c:	410fc270 	.word	0x410fc270
 8009360:	e000e400 	.word	0xe000e400
 8009364:	24006474 	.word	0x24006474
 8009368:	24006478 	.word	0x24006478
 800936c:	2400004c 	.word	0x2400004c

08009370 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009370:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009374:	2b0f      	cmp	r3, #15
 8009376:	d90e      	bls.n	8009396 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009378:	4a11      	ldr	r2, [pc, #68]	; (80093c0 <vPortValidateInterruptPriority+0x50>)
 800937a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800937c:	4a11      	ldr	r2, [pc, #68]	; (80093c4 <vPortValidateInterruptPriority+0x54>)
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	429a      	cmp	r2, r3
 8009382:	d908      	bls.n	8009396 <vPortValidateInterruptPriority+0x26>
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	e7fe      	b.n	8009394 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009396:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800939a:	4a0b      	ldr	r2, [pc, #44]	; (80093c8 <vPortValidateInterruptPriority+0x58>)
 800939c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d908      	bls.n	80093bc <vPortValidateInterruptPriority+0x4c>
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	e7fe      	b.n	80093ba <vPortValidateInterruptPriority+0x4a>
	}
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	e000e3f0 	.word	0xe000e3f0
 80093c4:	24006474 	.word	0x24006474
 80093c8:	24006478 	.word	0x24006478

080093cc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093cc:	b510      	push	{r4, lr}
 80093ce:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093d0:	f7ff feb8 	bl	8009144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80093d6:	f7ff fed5 	bl	8009184 <vPortExitCritical>

	return xReturn;
}
 80093da:	fab4 f084 	clz	r0, r4
 80093de:	0940      	lsrs	r0, r0, #5
 80093e0:	bd10      	pop	{r4, pc}

080093e2 <prvCopyDataToQueue>:
{
 80093e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80093e8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ea:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093ec:	b952      	cbnz	r2, 8009404 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093ee:	6807      	ldr	r7, [r0, #0]
 80093f0:	bb47      	cbnz	r7, 8009444 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093f2:	6880      	ldr	r0, [r0, #8]
 80093f4:	f001 f9b4 	bl	800a760 <xTaskPriorityDisinherit>
 80093f8:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093fa:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093fc:	3601      	adds	r6, #1
}
 80093fe:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009400:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8009404:	b965      	cbnz	r5, 8009420 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009406:	6840      	ldr	r0, [r0, #4]
 8009408:	f010 fcda 	bl	8019dc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800940c:	6863      	ldr	r3, [r4, #4]
 800940e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009410:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009412:	68a2      	ldr	r2, [r4, #8]
 8009414:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009416:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009418:	d3f0      	bcc.n	80093fc <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	6063      	str	r3, [r4, #4]
 800941e:	e7ed      	b.n	80093fc <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009420:	68c0      	ldr	r0, [r0, #12]
 8009422:	f010 fccd 	bl	8019dc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009426:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009428:	68e3      	ldr	r3, [r4, #12]
 800942a:	4251      	negs	r1, r2
 800942c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800942e:	6822      	ldr	r2, [r4, #0]
 8009430:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009432:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009434:	bf3e      	ittt	cc
 8009436:	68a3      	ldrcc	r3, [r4, #8]
 8009438:	185b      	addcc	r3, r3, r1
 800943a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800943c:	2d02      	cmp	r5, #2
 800943e:	d101      	bne.n	8009444 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009440:	b116      	cbz	r6, 8009448 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8009442:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009444:	2500      	movs	r5, #0
 8009446:	e7d9      	b.n	80093fc <prvCopyDataToQueue+0x1a>
 8009448:	4635      	mov	r5, r6
 800944a:	e7d7      	b.n	80093fc <prvCopyDataToQueue+0x1a>

0800944c <prvCopyDataFromQueue>:
{
 800944c:	4603      	mov	r3, r0
 800944e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8009452:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009454:	b162      	cbz	r2, 8009470 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009456:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009458:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800945a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800945c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800945e:	60dc      	str	r4, [r3, #12]
}
 8009460:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009464:	bf24      	itt	cs
 8009466:	6819      	ldrcs	r1, [r3, #0]
 8009468:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800946a:	68d9      	ldr	r1, [r3, #12]
 800946c:	f010 bca8 	b.w	8019dc0 <memcpy>
}
 8009470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009474:	4770      	bx	lr

08009476 <prvUnlockQueue>:
{
 8009476:	b570      	push	{r4, r5, r6, lr}
 8009478:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800947a:	f7ff fe63 	bl	8009144 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800947e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009482:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8009486:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009488:	2d00      	cmp	r5, #0
 800948a:	dc14      	bgt.n	80094b6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800948c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800948e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009496:	f7ff fe75 	bl	8009184 <vPortExitCritical>
	taskENTER_CRITICAL();
 800949a:	f7ff fe53 	bl	8009144 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800949e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80094a2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094a4:	2d00      	cmp	r5, #0
 80094a6:	dc12      	bgt.n	80094ce <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80094a8:	23ff      	movs	r3, #255	; 0xff
 80094aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80094ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80094b2:	f7ff be67 	b.w	8009184 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0e7      	beq.n	800948c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094bc:	4630      	mov	r0, r6
 80094be:	f001 f86d 	bl	800a59c <xTaskRemoveFromEventList>
 80094c2:	b108      	cbz	r0, 80094c8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80094c4:	f001 f8f6 	bl	800a6b4 <vTaskMissedYield>
			--cTxLock;
 80094c8:	3d01      	subs	r5, #1
 80094ca:	b26d      	sxtb	r5, r5
 80094cc:	e7dc      	b.n	8009488 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0e9      	beq.n	80094a8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094d4:	4630      	mov	r0, r6
 80094d6:	f001 f861 	bl	800a59c <xTaskRemoveFromEventList>
 80094da:	b108      	cbz	r0, 80094e0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80094dc:	f001 f8ea 	bl	800a6b4 <vTaskMissedYield>
				--cRxLock;
 80094e0:	3d01      	subs	r5, #1
 80094e2:	b26d      	sxtb	r5, r5
 80094e4:	e7de      	b.n	80094a4 <prvUnlockQueue+0x2e>

080094e6 <xQueueGenericReset>:
{
 80094e6:	b538      	push	{r3, r4, r5, lr}
 80094e8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80094ea:	4604      	mov	r4, r0
 80094ec:	b940      	cbnz	r0, 8009500 <xQueueGenericReset+0x1a>
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	e7fe      	b.n	80094fe <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8009500:	f7ff fe20 	bl	8009144 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009504:	6822      	ldr	r2, [r4, #0]
 8009506:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800950a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800950c:	434b      	muls	r3, r1
 800950e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009510:	1a5b      	subs	r3, r3, r1
 8009512:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009514:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009516:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009518:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800951a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800951c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800951e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009526:	b9a5      	cbnz	r5, 8009552 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	b173      	cbz	r3, 800954a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800952c:	f104 0010 	add.w	r0, r4, #16
 8009530:	f001 f834 	bl	800a59c <xTaskRemoveFromEventList>
 8009534:	b148      	cbz	r0, 800954a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8009536:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800953a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800954a:	f7ff fe1b 	bl	8009184 <vPortExitCritical>
}
 800954e:	2001      	movs	r0, #1
 8009550:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009552:	f104 0010 	add.w	r0, r4, #16
 8009556:	f7ff fd4f 	bl	8008ff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800955a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800955e:	f7ff fd4b 	bl	8008ff8 <vListInitialise>
 8009562:	e7f2      	b.n	800954a <xQueueGenericReset+0x64>

08009564 <xQueueGenericCreateStatic>:
	{
 8009564:	b513      	push	{r0, r1, r4, lr}
 8009566:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009568:	b940      	cbnz	r0, 800957c <xQueueGenericCreateStatic+0x18>
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	e7fe      	b.n	800957a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800957c:	b943      	cbnz	r3, 8009590 <xQueueGenericCreateStatic+0x2c>
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	e7fe      	b.n	800958e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009590:	b14a      	cbz	r2, 80095a6 <xQueueGenericCreateStatic+0x42>
 8009592:	b991      	cbnz	r1, 80095ba <xQueueGenericCreateStatic+0x56>
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	e7fe      	b.n	80095a4 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095a6:	b141      	cbz	r1, 80095ba <xQueueGenericCreateStatic+0x56>
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	e7fe      	b.n	80095b8 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095ba:	2350      	movs	r3, #80	; 0x50
 80095bc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	2b50      	cmp	r3, #80	; 0x50
 80095c2:	d008      	beq.n	80095d6 <xQueueGenericCreateStatic+0x72>
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	e7fe      	b.n	80095d4 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80095d6:	2900      	cmp	r1, #0
 80095d8:	bf08      	it	eq
 80095da:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095dc:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095de:	2301      	movs	r3, #1
 80095e0:	6022      	str	r2, [r4, #0]
 80095e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80095e6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095ea:	4619      	mov	r1, r3
 80095ec:	4620      	mov	r0, r4
 80095ee:	f7ff ff7a 	bl	80094e6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80095f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 80095f6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80095f8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80095fc:	b002      	add	sp, #8
 80095fe:	bd10      	pop	{r4, pc}

08009600 <xQueueGenericCreate>:
	{
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	460d      	mov	r5, r1
 8009604:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009606:	4606      	mov	r6, r0
 8009608:	b940      	cbnz	r0, 800961c <xQueueGenericCreate+0x1c>
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	e7fe      	b.n	800961a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800961c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800961e:	3050      	adds	r0, #80	; 0x50
 8009620:	f7ff fc14 	bl	8008e4c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009624:	4604      	mov	r4, r0
 8009626:	b170      	cbz	r0, 8009646 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009628:	2300      	movs	r3, #0
 800962a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800962e:	b165      	cbz	r5, 800964a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009630:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009634:	2101      	movs	r1, #1
 8009636:	4620      	mov	r0, r4
 8009638:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800963a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800963e:	f7ff ff52 	bl	80094e6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009642:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8009646:	4620      	mov	r0, r4
 8009648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800964a:	4603      	mov	r3, r0
 800964c:	e7f2      	b.n	8009634 <xQueueGenericCreate+0x34>

0800964e <xQueueCreateCountingSemaphoreStatic>:
	{
 800964e:	b513      	push	{r0, r1, r4, lr}
 8009650:	4613      	mov	r3, r2
 8009652:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009654:	b940      	cbnz	r0, 8009668 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	e7fe      	b.n	8009666 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009668:	4288      	cmp	r0, r1
 800966a:	d208      	bcs.n	800967e <xQueueCreateCountingSemaphoreStatic+0x30>
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	e7fe      	b.n	800967c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800967e:	2202      	movs	r2, #2
 8009680:	9200      	str	r2, [sp, #0]
 8009682:	2200      	movs	r2, #0
 8009684:	4611      	mov	r1, r2
 8009686:	f7ff ff6d 	bl	8009564 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800968a:	b100      	cbz	r0, 800968e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800968c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800968e:	b002      	add	sp, #8
 8009690:	bd10      	pop	{r4, pc}

08009692 <xQueueCreateCountingSemaphore>:
	{
 8009692:	b510      	push	{r4, lr}
 8009694:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009696:	b940      	cbnz	r0, 80096aa <xQueueCreateCountingSemaphore+0x18>
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	e7fe      	b.n	80096a8 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80096aa:	4288      	cmp	r0, r1
 80096ac:	d208      	bcs.n	80096c0 <xQueueCreateCountingSemaphore+0x2e>
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	e7fe      	b.n	80096be <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80096c0:	2202      	movs	r2, #2
 80096c2:	2100      	movs	r1, #0
 80096c4:	f7ff ff9c 	bl	8009600 <xQueueGenericCreate>
		if( xHandle != NULL )
 80096c8:	b100      	cbz	r0, 80096cc <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80096ca:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80096cc:	bd10      	pop	{r4, pc}

080096ce <xQueueGenericSend>:
{
 80096ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096d2:	b085      	sub	sp, #20
 80096d4:	4688      	mov	r8, r1
 80096d6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80096d8:	4604      	mov	r4, r0
{
 80096da:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80096dc:	b940      	cbnz	r0, 80096f0 <xQueueGenericSend+0x22>
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	e7fe      	b.n	80096ee <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f0:	b951      	cbnz	r1, 8009708 <xQueueGenericSend+0x3a>
 80096f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80096f4:	b143      	cbz	r3, 8009708 <xQueueGenericSend+0x3a>
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	e7fe      	b.n	8009706 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009708:	2f02      	cmp	r7, #2
 800970a:	d10b      	bne.n	8009724 <xQueueGenericSend+0x56>
 800970c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800970e:	2b01      	cmp	r3, #1
 8009710:	d008      	beq.n	8009724 <xQueueGenericSend+0x56>
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	e7fe      	b.n	8009722 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009724:	f000 ffcc 	bl	800a6c0 <xTaskGetSchedulerState>
 8009728:	4606      	mov	r6, r0
 800972a:	b950      	cbnz	r0, 8009742 <xQueueGenericSend+0x74>
 800972c:	9b01      	ldr	r3, [sp, #4]
 800972e:	b14b      	cbz	r3, 8009744 <xQueueGenericSend+0x76>
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	e7fe      	b.n	8009740 <xQueueGenericSend+0x72>
 8009742:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009744:	f04f 0900 	mov.w	r9, #0
 8009748:	e037      	b.n	80097ba <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800974a:	9d01      	ldr	r5, [sp, #4]
 800974c:	b91d      	cbnz	r5, 8009756 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800974e:	f7ff fd19 	bl	8009184 <vPortExitCritical>
			return errQUEUE_FULL;
 8009752:	2000      	movs	r0, #0
 8009754:	e052      	b.n	80097fc <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8009756:	b916      	cbnz	r6, 800975e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009758:	a802      	add	r0, sp, #8
 800975a:	f000 ff63 	bl	800a624 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800975e:	f7ff fd11 	bl	8009184 <vPortExitCritical>
		vTaskSuspendAll();
 8009762:	f000 fcf9 	bl	800a158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009766:	f7ff fced 	bl	8009144 <vPortEnterCritical>
 800976a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800976e:	2bff      	cmp	r3, #255	; 0xff
 8009770:	d101      	bne.n	8009776 <xQueueGenericSend+0xa8>
 8009772:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8009776:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800977a:	2bff      	cmp	r3, #255	; 0xff
 800977c:	d101      	bne.n	8009782 <xQueueGenericSend+0xb4>
 800977e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8009782:	f7ff fcff 	bl	8009184 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009786:	a901      	add	r1, sp, #4
 8009788:	a802      	add	r0, sp, #8
 800978a:	f000 ff57 	bl	800a63c <xTaskCheckForTimeOut>
 800978e:	2800      	cmp	r0, #0
 8009790:	d14a      	bne.n	8009828 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009792:	f7ff fcd7 	bl	8009144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009796:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009798:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800979a:	429a      	cmp	r2, r3
 800979c:	d131      	bne.n	8009802 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800979e:	f7ff fcf1 	bl	8009184 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097a2:	9901      	ldr	r1, [sp, #4]
 80097a4:	f104 0010 	add.w	r0, r4, #16
 80097a8:	f000 fec0 	bl	800a52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097ac:	4620      	mov	r0, r4
 80097ae:	f7ff fe62 	bl	8009476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097b2:	f000 fd75 	bl	800a2a0 <xTaskResumeAll>
 80097b6:	b360      	cbz	r0, 8009812 <xQueueGenericSend+0x144>
 80097b8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80097ba:	f7ff fcc3 	bl	8009144 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80097c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d301      	bcc.n	80097ca <xQueueGenericSend+0xfc>
 80097c6:	2f02      	cmp	r7, #2
 80097c8:	d1bf      	bne.n	800974a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097ca:	463a      	mov	r2, r7
 80097cc:	4641      	mov	r1, r8
 80097ce:	4620      	mov	r0, r4
 80097d0:	f7ff fe07 	bl	80093e2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d6:	b11b      	cbz	r3, 80097e0 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097dc:	f000 fede 	bl	800a59c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80097e0:	b148      	cbz	r0, 80097f6 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 80097e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80097e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80097f6:	f7ff fcc5 	bl	8009184 <vPortExitCritical>
				return pdPASS;
 80097fa:	2001      	movs	r0, #1
}
 80097fc:	b005      	add	sp, #20
 80097fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8009802:	f7ff fcbf 	bl	8009184 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009806:	4620      	mov	r0, r4
 8009808:	f7ff fe35 	bl	8009476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800980c:	f000 fd48 	bl	800a2a0 <xTaskResumeAll>
 8009810:	e7d2      	b.n	80097b8 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8009812:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800981a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	e7c7      	b.n	80097b8 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8009828:	4620      	mov	r0, r4
 800982a:	f7ff fe24 	bl	8009476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800982e:	f000 fd37 	bl	800a2a0 <xTaskResumeAll>
 8009832:	e78e      	b.n	8009752 <xQueueGenericSend+0x84>

08009834 <xQueueGenericSendFromISR>:
{
 8009834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009838:	4689      	mov	r9, r1
 800983a:	4690      	mov	r8, r2
 800983c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800983e:	4604      	mov	r4, r0
 8009840:	b940      	cbnz	r0, 8009854 <xQueueGenericSendFromISR+0x20>
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	e7fe      	b.n	8009852 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009854:	b951      	cbnz	r1, 800986c <xQueueGenericSendFromISR+0x38>
 8009856:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009858:	b143      	cbz	r3, 800986c <xQueueGenericSendFromISR+0x38>
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	e7fe      	b.n	800986a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800986c:	2f02      	cmp	r7, #2
 800986e:	d10b      	bne.n	8009888 <xQueueGenericSendFromISR+0x54>
 8009870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009872:	2b01      	cmp	r3, #1
 8009874:	d008      	beq.n	8009888 <xQueueGenericSendFromISR+0x54>
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	e7fe      	b.n	8009886 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009888:	f7ff fd72 	bl	8009370 <vPortValidateInterruptPriority>
	__asm volatile
 800988c:	f3ef 8611 	mrs	r6, BASEPRI
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80098a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d301      	bcc.n	80098ac <xQueueGenericSendFromISR+0x78>
 80098a8:	2f02      	cmp	r7, #2
 80098aa:	d123      	bne.n	80098f4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 80098ac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098b0:	463a      	mov	r2, r7
 80098b2:	4649      	mov	r1, r9
 80098b4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80098b6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098ba:	f7ff fd92 	bl	80093e2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80098be:	1c6b      	adds	r3, r5, #1
 80098c0:	d113      	bne.n	80098ea <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098c4:	b90b      	cbnz	r3, 80098ca <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 80098c6:	2001      	movs	r0, #1
 80098c8:	e00b      	b.n	80098e2 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098ce:	f000 fe65 	bl	800a59c <xTaskRemoveFromEventList>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d0f7      	beq.n	80098c6 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 80098d6:	f1b8 0f00 	cmp.w	r8, #0
 80098da:	d0f4      	beq.n	80098c6 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098dc:	2001      	movs	r0, #1
 80098de:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80098e2:	f386 8811 	msr	BASEPRI, r6
}
 80098e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098ea:	3501      	adds	r5, #1
 80098ec:	b26d      	sxtb	r5, r5
 80098ee:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80098f2:	e7e8      	b.n	80098c6 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 80098f4:	2000      	movs	r0, #0
 80098f6:	e7f4      	b.n	80098e2 <xQueueGenericSendFromISR+0xae>

080098f8 <xQueueGiveFromISR>:
{
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80098fc:	4604      	mov	r4, r0
 80098fe:	b940      	cbnz	r0, 8009912 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	e7fe      	b.n	8009910 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009912:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009914:	b143      	cbz	r3, 8009928 <xQueueGiveFromISR+0x30>
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	e7fe      	b.n	8009926 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009928:	6803      	ldr	r3, [r0, #0]
 800992a:	b953      	cbnz	r3, 8009942 <xQueueGiveFromISR+0x4a>
 800992c:	6883      	ldr	r3, [r0, #8]
 800992e:	b143      	cbz	r3, 8009942 <xQueueGiveFromISR+0x4a>
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	e7fe      	b.n	8009940 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009942:	f7ff fd15 	bl	8009370 <vPortValidateInterruptPriority>
	__asm volatile
 8009946:	f3ef 8611 	mrs	r6, BASEPRI
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800995a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800995c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800995e:	4293      	cmp	r3, r2
 8009960:	d91c      	bls.n	800999c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009962:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009966:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8009968:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800996a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800996c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800996e:	d110      	bne.n	8009992 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009972:	b90b      	cbnz	r3, 8009978 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8009974:	2001      	movs	r0, #1
 8009976:	e009      	b.n	800998c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009978:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800997c:	f000 fe0e 	bl	800a59c <xTaskRemoveFromEventList>
 8009980:	2800      	cmp	r0, #0
 8009982:	d0f7      	beq.n	8009974 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8009984:	2d00      	cmp	r5, #0
 8009986:	d0f5      	beq.n	8009974 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009988:	2001      	movs	r0, #1
 800998a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800998c:	f386 8811 	msr	BASEPRI, r6
}
 8009990:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009992:	3301      	adds	r3, #1
 8009994:	b25b      	sxtb	r3, r3
 8009996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800999a:	e7eb      	b.n	8009974 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800999c:	2000      	movs	r0, #0
 800999e:	e7f5      	b.n	800998c <xQueueGiveFromISR+0x94>

080099a0 <xQueueReceive>:
{
 80099a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80099a4:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80099a6:	4604      	mov	r4, r0
{
 80099a8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80099aa:	b940      	cbnz	r0, 80099be <xQueueReceive+0x1e>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	e7fe      	b.n	80099bc <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099be:	b951      	cbnz	r1, 80099d6 <xQueueReceive+0x36>
 80099c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80099c2:	b143      	cbz	r3, 80099d6 <xQueueReceive+0x36>
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	e7fe      	b.n	80099d4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099d6:	f000 fe73 	bl	800a6c0 <xTaskGetSchedulerState>
 80099da:	4606      	mov	r6, r0
 80099dc:	b950      	cbnz	r0, 80099f4 <xQueueReceive+0x54>
 80099de:	9b01      	ldr	r3, [sp, #4]
 80099e0:	b14b      	cbz	r3, 80099f6 <xQueueReceive+0x56>
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	e7fe      	b.n	80099f2 <xQueueReceive+0x52>
 80099f4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80099f6:	f04f 0800 	mov.w	r8, #0
 80099fa:	e03d      	b.n	8009a78 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80099fc:	9d01      	ldr	r5, [sp, #4]
 80099fe:	b91d      	cbnz	r5, 8009a08 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8009a00:	f7ff fbc0 	bl	8009184 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8009a04:	2000      	movs	r0, #0
 8009a06:	e056      	b.n	8009ab6 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8009a08:	b916      	cbnz	r6, 8009a10 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a0a:	a802      	add	r0, sp, #8
 8009a0c:	f000 fe0a 	bl	800a624 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009a10:	f7ff fbb8 	bl	8009184 <vPortExitCritical>
		vTaskSuspendAll();
 8009a14:	f000 fba0 	bl	800a158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a18:	f7ff fb94 	bl	8009144 <vPortEnterCritical>
 8009a1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009a20:	2bff      	cmp	r3, #255	; 0xff
 8009a22:	d101      	bne.n	8009a28 <xQueueReceive+0x88>
 8009a24:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8009a28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009a2c:	2bff      	cmp	r3, #255	; 0xff
 8009a2e:	d101      	bne.n	8009a34 <xQueueReceive+0x94>
 8009a30:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8009a34:	f7ff fba6 	bl	8009184 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a38:	a901      	add	r1, sp, #4
 8009a3a:	a802      	add	r0, sp, #8
 8009a3c:	f000 fdfe 	bl	800a63c <xTaskCheckForTimeOut>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d141      	bne.n	8009ac8 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a44:	4620      	mov	r0, r4
 8009a46:	f7ff fcc1 	bl	80093cc <prvIsQueueEmpty>
 8009a4a:	b3b8      	cbz	r0, 8009abc <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a4c:	9901      	ldr	r1, [sp, #4]
 8009a4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a52:	f000 fd6b 	bl	800a52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7ff fd0d 	bl	8009476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a5c:	f000 fc20 	bl	800a2a0 <xTaskResumeAll>
 8009a60:	b948      	cbnz	r0, 8009a76 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8009a62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009a78:	f7ff fb64 	bl	8009144 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a7c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a7e:	2d00      	cmp	r5, #0
 8009a80:	d0bc      	beq.n	80099fc <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a82:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a84:	4639      	mov	r1, r7
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7ff fce0 	bl	800944c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a8c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a8e:	6923      	ldr	r3, [r4, #16]
 8009a90:	b173      	cbz	r3, 8009ab0 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a92:	f104 0010 	add.w	r0, r4, #16
 8009a96:	f000 fd81 	bl	800a59c <xTaskRemoveFromEventList>
 8009a9a:	b148      	cbz	r0, 8009ab0 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8009a9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009ab0:	f7ff fb68 	bl	8009184 <vPortExitCritical>
				return pdPASS;
 8009ab4:	2001      	movs	r0, #1
}
 8009ab6:	b004      	add	sp, #16
 8009ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8009abc:	4620      	mov	r0, r4
 8009abe:	f7ff fcda 	bl	8009476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ac2:	f000 fbed 	bl	800a2a0 <xTaskResumeAll>
 8009ac6:	e7d6      	b.n	8009a76 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f7ff fcd4 	bl	8009476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ace:	f000 fbe7 	bl	800a2a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f7ff fc7a 	bl	80093cc <prvIsQueueEmpty>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d0cc      	beq.n	8009a76 <xQueueReceive+0xd6>
 8009adc:	e792      	b.n	8009a04 <xQueueReceive+0x64>

08009ade <xQueueSemaphoreTake>:
{
 8009ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae0:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8009ae2:	4604      	mov	r4, r0
{
 8009ae4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009ae6:	b940      	cbnz	r0, 8009afa <xQueueSemaphoreTake+0x1c>
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	e7fe      	b.n	8009af8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009afa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8009afc:	b145      	cbz	r5, 8009b10 <xQueueSemaphoreTake+0x32>
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	e7fe      	b.n	8009b0e <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b10:	f000 fdd6 	bl	800a6c0 <xTaskGetSchedulerState>
 8009b14:	4606      	mov	r6, r0
 8009b16:	b950      	cbnz	r0, 8009b2e <xQueueSemaphoreTake+0x50>
 8009b18:	9b01      	ldr	r3, [sp, #4]
 8009b1a:	b15b      	cbz	r3, 8009b34 <xQueueSemaphoreTake+0x56>
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	e7fe      	b.n	8009b2c <xQueueSemaphoreTake+0x4e>
 8009b2e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8009b30:	2700      	movs	r7, #0
 8009b32:	e053      	b.n	8009bdc <xQueueSemaphoreTake+0xfe>
 8009b34:	4605      	mov	r5, r0
 8009b36:	e7fb      	b.n	8009b30 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	b963      	cbnz	r3, 8009b56 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b3c:	b145      	cbz	r5, 8009b50 <xQueueSemaphoreTake+0x72>
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	e7fe      	b.n	8009b4e <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8009b50:	f7ff fb18 	bl	8009184 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009b54:	e062      	b.n	8009c1c <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8009b56:	b916      	cbnz	r6, 8009b5e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b58:	a802      	add	r0, sp, #8
 8009b5a:	f000 fd63 	bl	800a624 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009b5e:	f7ff fb11 	bl	8009184 <vPortExitCritical>
		vTaskSuspendAll();
 8009b62:	f000 faf9 	bl	800a158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b66:	f7ff faed 	bl	8009144 <vPortEnterCritical>
 8009b6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009b6e:	2bff      	cmp	r3, #255	; 0xff
 8009b70:	d101      	bne.n	8009b76 <xQueueSemaphoreTake+0x98>
 8009b72:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8009b76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009b7a:	2bff      	cmp	r3, #255	; 0xff
 8009b7c:	d101      	bne.n	8009b82 <xQueueSemaphoreTake+0xa4>
 8009b7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b82:	f7ff faff 	bl	8009184 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b86:	a901      	add	r1, sp, #4
 8009b88:	a802      	add	r0, sp, #8
 8009b8a:	f000 fd57 	bl	800a63c <xTaskCheckForTimeOut>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d14d      	bne.n	8009c2e <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7ff fc1a 	bl	80093cc <prvIsQueueEmpty>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d042      	beq.n	8009c22 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	b93b      	cbnz	r3, 8009bb0 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8009ba0:	f7ff fad0 	bl	8009144 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ba4:	68a0      	ldr	r0, [r4, #8]
 8009ba6:	f000 fd9b 	bl	800a6e0 <xTaskPriorityInherit>
 8009baa:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009bac:	f7ff faea 	bl	8009184 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bb0:	9901      	ldr	r1, [sp, #4]
 8009bb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009bb6:	f000 fcb9 	bl	800a52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f7ff fc5b 	bl	8009476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009bc0:	f000 fb6e 	bl	800a2a0 <xTaskResumeAll>
 8009bc4:	b948      	cbnz	r0, 8009bda <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8009bc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009bdc:	f7ff fab2 	bl	8009144 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009be0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0a8      	beq.n	8009b38 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009be6:	3b01      	subs	r3, #1
 8009be8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	b913      	cbnz	r3, 8009bf4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009bee:	f000 fe4d 	bl	800a88c <pvTaskIncrementMutexHeldCount>
 8009bf2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	b173      	cbz	r3, 8009c16 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bf8:	f104 0010 	add.w	r0, r4, #16
 8009bfc:	f000 fcce 	bl	800a59c <xTaskRemoveFromEventList>
 8009c00:	b148      	cbz	r0, 8009c16 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8009c02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8009c16:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8009c18:	f7ff fab4 	bl	8009184 <vPortExitCritical>
}
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	b005      	add	sp, #20
 8009c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7ff fc27 	bl	8009476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c28:	f000 fb3a 	bl	800a2a0 <xTaskResumeAll>
 8009c2c:	e7d5      	b.n	8009bda <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f7ff fc21 	bl	8009476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c34:	f000 fb34 	bl	800a2a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f7ff fbc7 	bl	80093cc <prvIsQueueEmpty>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d0cb      	beq.n	8009bda <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	d0ea      	beq.n	8009c1c <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 8009c46:	f7ff fa7d 	bl	8009144 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c4c:	b119      	cbz	r1, 8009c56 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c50:	6819      	ldr	r1, [r3, #0]
 8009c52:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c56:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8009c58:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c5a:	f000 fdc5 	bl	800a7e8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009c5e:	f7ff fa91 	bl	8009184 <vPortExitCritical>
 8009c62:	e7db      	b.n	8009c1c <xQueueSemaphoreTake+0x13e>

08009c64 <xQueueReceiveFromISR>:
{
 8009c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c68:	4689      	mov	r9, r1
 8009c6a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	b940      	cbnz	r0, 8009c82 <xQueueReceiveFromISR+0x1e>
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	e7fe      	b.n	8009c80 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c82:	b951      	cbnz	r1, 8009c9a <xQueueReceiveFromISR+0x36>
 8009c84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009c86:	b143      	cbz	r3, 8009c9a <xQueueReceiveFromISR+0x36>
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	e7fe      	b.n	8009c98 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c9a:	f7ff fb69 	bl	8009370 <vPortValidateInterruptPriority>
	__asm volatile
 8009c9e:	f3ef 8711 	mrs	r7, BASEPRI
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cb2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cb4:	b31c      	cbz	r4, 8009cfe <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8009cb6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cba:	4649      	mov	r1, r9
 8009cbc:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cbe:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8009cc0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cc2:	f7ff fbc3 	bl	800944c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cc6:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8009cc8:	1c73      	adds	r3, r6, #1
 8009cca:	d113      	bne.n	8009cf4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ccc:	692b      	ldr	r3, [r5, #16]
 8009cce:	b90b      	cbnz	r3, 8009cd4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	e00b      	b.n	8009cec <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cd4:	f105 0010 	add.w	r0, r5, #16
 8009cd8:	f000 fc60 	bl	800a59c <xTaskRemoveFromEventList>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d0f7      	beq.n	8009cd0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8009ce0:	f1b8 0f00 	cmp.w	r8, #0
 8009ce4:	d0f4      	beq.n	8009cd0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8009cec:	f387 8811 	msr	BASEPRI, r7
}
 8009cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009cf4:	3601      	adds	r6, #1
 8009cf6:	b276      	sxtb	r6, r6
 8009cf8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8009cfc:	e7e8      	b.n	8009cd0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8009cfe:	4620      	mov	r0, r4
 8009d00:	e7f4      	b.n	8009cec <xQueueReceiveFromISR+0x88>
	...

08009d04 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d04:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d06:	4a07      	ldr	r2, [pc, #28]	; (8009d24 <vQueueAddToRegistry+0x20>)
	{
 8009d08:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d0a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8009d0e:	b92c      	cbnz	r4, 8009d1c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d18:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d1a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	2b08      	cmp	r3, #8
 8009d20:	d1f3      	bne.n	8009d0a <vQueueAddToRegistry+0x6>
 8009d22:	e7fa      	b.n	8009d1a <vQueueAddToRegistry+0x16>
 8009d24:	2400647c 	.word	0x2400647c

08009d28 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d28:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009d2a:	4a08      	ldr	r2, [pc, #32]	; (8009d4c <vQueueUnregisterQueue+0x24>)
	{
 8009d2c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009d2e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009d32:	684c      	ldr	r4, [r1, #4]
 8009d34:	4284      	cmp	r4, r0
 8009d36:	d104      	bne.n	8009d42 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009d3e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009d40:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d42:	3301      	adds	r3, #1
 8009d44:	2b08      	cmp	r3, #8
 8009d46:	d1f2      	bne.n	8009d2e <vQueueUnregisterQueue+0x6>
 8009d48:	e7fa      	b.n	8009d40 <vQueueUnregisterQueue+0x18>
 8009d4a:	bf00      	nop
 8009d4c:	2400647c 	.word	0x2400647c

08009d50 <vQueueDelete>:
{
 8009d50:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8009d52:	4604      	mov	r4, r0
 8009d54:	b940      	cbnz	r0, 8009d68 <vQueueDelete+0x18>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	e7fe      	b.n	8009d66 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8009d68:	f7ff ffde 	bl	8009d28 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d6c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009d70:	b923      	cbnz	r3, 8009d7c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8009d72:	4620      	mov	r0, r4
}
 8009d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8009d78:	f7ff b900 	b.w	8008f7c <vPortFree>
}
 8009d7c:	bd10      	pop	{r4, pc}

08009d7e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d7e:	b570      	push	{r4, r5, r6, lr}
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d86:	f7ff f9dd 	bl	8009144 <vPortEnterCritical>
 8009d8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d8e:	2bff      	cmp	r3, #255	; 0xff
 8009d90:	d102      	bne.n	8009d98 <vQueueWaitForMessageRestricted+0x1a>
 8009d92:	2300      	movs	r3, #0
 8009d94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d98:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d9c:	2bff      	cmp	r3, #255	; 0xff
 8009d9e:	d102      	bne.n	8009da6 <vQueueWaitForMessageRestricted+0x28>
 8009da0:	2300      	movs	r3, #0
 8009da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009da6:	f7ff f9ed 	bl	8009184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009daa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009dac:	b92b      	cbnz	r3, 8009dba <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009dae:	4632      	mov	r2, r6
 8009db0:	4629      	mov	r1, r5
 8009db2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009db6:	f000 fbd3 	bl	800a560 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009dba:	4620      	mov	r0, r4
	}
 8009dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8009dc0:	f7ff bb59 	b.w	8009476 <prvUnlockQueue>

08009dc4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009dca:	f7ff f9bb 	bl	8009144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009dce:	4b2f      	ldr	r3, [pc, #188]	; (8009e8c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8009dd0:	4e2f      	ldr	r6, [pc, #188]	; (8009e90 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	4f2f      	ldr	r7, [pc, #188]	; (8009e94 <prvAddNewTaskToReadyList+0xd0>)
 8009dd6:	3201      	adds	r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009dda:	6835      	ldr	r5, [r6, #0]
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	d14a      	bne.n	8009e76 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009de0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d11f      	bne.n	8009e28 <prvAddNewTaskToReadyList+0x64>
 8009de8:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dea:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dec:	4640      	mov	r0, r8
 8009dee:	f7ff f903 	bl	8008ff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009df2:	f108 0814 	add.w	r8, r8, #20
 8009df6:	2d38      	cmp	r5, #56	; 0x38
 8009df8:	d1f7      	bne.n	8009dea <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dfa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009ebc <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8009dfe:	4d26      	ldr	r5, [pc, #152]	; (8009e98 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8009e00:	4640      	mov	r0, r8
 8009e02:	f7ff f8f9 	bl	8008ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7ff f8f6 	bl	8008ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e0c:	4823      	ldr	r0, [pc, #140]	; (8009e9c <prvAddNewTaskToReadyList+0xd8>)
 8009e0e:	f7ff f8f3 	bl	8008ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e12:	4823      	ldr	r0, [pc, #140]	; (8009ea0 <prvAddNewTaskToReadyList+0xdc>)
 8009e14:	f7ff f8f0 	bl	8008ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e18:	4822      	ldr	r0, [pc, #136]	; (8009ea4 <prvAddNewTaskToReadyList+0xe0>)
 8009e1a:	f7ff f8ed 	bl	8008ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e1e:	4b22      	ldr	r3, [pc, #136]	; (8009ea8 <prvAddNewTaskToReadyList+0xe4>)
 8009e20:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e24:	4b21      	ldr	r3, [pc, #132]	; (8009eac <prvAddNewTaskToReadyList+0xe8>)
 8009e26:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8009e28:	4a21      	ldr	r2, [pc, #132]	; (8009eb0 <prvAddNewTaskToReadyList+0xec>)
 8009e2a:	6813      	ldr	r3, [r2, #0]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009e30:	4a20      	ldr	r2, [pc, #128]	; (8009eb4 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e32:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009e34:	6811      	ldr	r1, [r2, #0]
 8009e36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e38:	428b      	cmp	r3, r1
 8009e3a:	d900      	bls.n	8009e3e <prvAddNewTaskToReadyList+0x7a>
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	2014      	movs	r0, #20
 8009e40:	1d21      	adds	r1, r4, #4
 8009e42:	fb00 7003 	mla	r0, r0, r3, r7
 8009e46:	f7ff f8e5 	bl	8009014 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009e4a:	f7ff f99b 	bl	8009184 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009e4e:	4b1a      	ldr	r3, [pc, #104]	; (8009eb8 <prvAddNewTaskToReadyList+0xf4>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	b173      	cbz	r3, 8009e72 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e54:	6833      	ldr	r3, [r6, #0]
 8009e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d209      	bcs.n	8009e72 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8009e5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	f3bf 8f6f 	isb	sy
}
 8009e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8009e76:	4b10      	ldr	r3, [pc, #64]	; (8009eb8 <prvAddNewTaskToReadyList+0xf4>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1d4      	bne.n	8009e28 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e7e:	6833      	ldr	r3, [r6, #0]
 8009e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d8cf      	bhi.n	8009e28 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8009e88:	6034      	str	r4, [r6, #0]
 8009e8a:	e7cd      	b.n	8009e28 <prvAddNewTaskToReadyList+0x64>
 8009e8c:	24006928 	.word	0x24006928
 8009e90:	240064bc 	.word	0x240064bc
 8009e94:	240064c8 	.word	0x240064c8
 8009e98:	24006950 	.word	0x24006950
 8009e9c:	24006970 	.word	0x24006970
 8009ea0:	2400699c 	.word	0x2400699c
 8009ea4:	24006988 	.word	0x24006988
 8009ea8:	240064c0 	.word	0x240064c0
 8009eac:	240064c4 	.word	0x240064c4
 8009eb0:	24006934 	.word	0x24006934
 8009eb4:	24006938 	.word	0x24006938
 8009eb8:	24006984 	.word	0x24006984
 8009ebc:	2400693c 	.word	0x2400693c

08009ec0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ec2:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8009ec4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ec6:	4e15      	ldr	r6, [pc, #84]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8009ec8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8009eca:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ecc:	6830      	ldr	r0, [r6, #0]
 8009ece:	3004      	adds	r0, #4
 8009ed0:	f7ff f8c3 	bl	800905a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ed4:	1c63      	adds	r3, r4, #1
 8009ed6:	d107      	bne.n	8009ee8 <prvAddCurrentTaskToDelayedList+0x28>
 8009ed8:	b137      	cbz	r7, 8009ee8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eda:	6831      	ldr	r1, [r6, #0]
 8009edc:	4810      	ldr	r0, [pc, #64]	; (8009f20 <prvAddCurrentTaskToDelayedList+0x60>)
 8009ede:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee4:	f7ff b896 	b.w	8009014 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ee8:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009eea:	6833      	ldr	r3, [r6, #0]
 8009eec:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009eee:	d307      	bcc.n	8009f00 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ef0:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <prvAddCurrentTaskToDelayedList+0x64>)
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	6831      	ldr	r1, [r6, #0]
}
 8009ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009efa:	3104      	adds	r1, #4
 8009efc:	f7ff b896 	b.w	800902c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f00:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <prvAddCurrentTaskToDelayedList+0x68>)
 8009f02:	6818      	ldr	r0, [r3, #0]
 8009f04:	6831      	ldr	r1, [r6, #0]
 8009f06:	3104      	adds	r1, #4
 8009f08:	f7ff f890 	bl	800902c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f0c:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <prvAddCurrentTaskToDelayedList+0x6c>)
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	42a2      	cmp	r2, r4
 8009f12:	d900      	bls.n	8009f16 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8009f14:	601c      	str	r4, [r3, #0]
}
 8009f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f18:	240069b0 	.word	0x240069b0
 8009f1c:	240064bc 	.word	0x240064bc
 8009f20:	24006988 	.word	0x24006988
 8009f24:	240064c4 	.word	0x240064c4
 8009f28:	240064c0 	.word	0x240064c0
 8009f2c:	24006964 	.word	0x24006964

08009f30 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f30:	4a06      	ldr	r2, [pc, #24]	; (8009f4c <prvResetNextTaskUnblockTime+0x1c>)
 8009f32:	6813      	ldr	r3, [r2, #0]
 8009f34:	6819      	ldr	r1, [r3, #0]
 8009f36:	4b06      	ldr	r3, [pc, #24]	; (8009f50 <prvResetNextTaskUnblockTime+0x20>)
 8009f38:	b919      	cbnz	r1, 8009f42 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f3e:	601a      	str	r2, [r3, #0]
}
 8009f40:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f42:	6812      	ldr	r2, [r2, #0]
 8009f44:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f46:	68d2      	ldr	r2, [r2, #12]
 8009f48:	6852      	ldr	r2, [r2, #4]
 8009f4a:	e7f8      	b.n	8009f3e <prvResetNextTaskUnblockTime+0xe>
 8009f4c:	240064c0 	.word	0x240064c0
 8009f50:	24006964 	.word	0x24006964

08009f54 <prvDeleteTCB>:
	{
 8009f54:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f56:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8009f5a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f5c:	b93b      	cbnz	r3, 8009f6e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8009f5e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009f60:	f7ff f80c 	bl	8008f7c <vPortFree>
				vPortFree( pxTCB );
 8009f64:	4620      	mov	r0, r4
	}
 8009f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8009f6a:	f7ff b807 	b.w	8008f7c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d0f9      	beq.n	8009f66 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d008      	beq.n	8009f88 <prvDeleteTCB+0x34>
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	e7fe      	b.n	8009f86 <prvDeleteTCB+0x32>
	}
 8009f88:	bd10      	pop	{r4, pc}
	...

08009f8c <prvIdleTask>:
{
 8009f8c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f8e:	4c14      	ldr	r4, [pc, #80]	; (8009fe0 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f90:	4f14      	ldr	r7, [pc, #80]	; (8009fe4 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8009f92:	4d15      	ldr	r5, [pc, #84]	; (8009fe8 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	b983      	cbnz	r3, 8009fba <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f98:	4b14      	ldr	r3, [pc, #80]	; (8009fec <prvIdleTask+0x60>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d909      	bls.n	8009fb4 <prvIdleTask+0x28>
				taskYIELD();
 8009fa0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8009fb4:	f7f6 f9fc 	bl	80003b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009fb8:	e7eb      	b.n	8009f92 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8009fba:	f7ff f8c3 	bl	8009144 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fc2:	1d30      	adds	r0, r6, #4
 8009fc4:	f7ff f849 	bl	800905a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009fd4:	f7ff f8d6 	bl	8009184 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f7ff ffbb 	bl	8009f54 <prvDeleteTCB>
 8009fde:	e7d9      	b.n	8009f94 <prvIdleTask+0x8>
 8009fe0:	2400692c 	.word	0x2400692c
 8009fe4:	2400699c 	.word	0x2400699c
 8009fe8:	24006928 	.word	0x24006928
 8009fec:	240064c8 	.word	0x240064c8

08009ff0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ff4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ffc:	21a5      	movs	r1, #165	; 0xa5
 8009ffe:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a000:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a002:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a006:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a00a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a00c:	f00f fee6 	bl	8019ddc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a010:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a012:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a014:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800a018:	b3b5      	cbz	r5, 800a088 <prvInitialiseNewTask.constprop.0+0x98>
 800a01a:	1e6b      	subs	r3, r5, #1
 800a01c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800a020:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a022:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800a026:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800a02a:	b108      	cbz	r0, 800a030 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a02c:	42ab      	cmp	r3, r5
 800a02e:	d1f8      	bne.n	800a022 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a030:	2300      	movs	r3, #0
 800a032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a036:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800a038:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a03c:	1d20      	adds	r0, r4, #4
 800a03e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800a040:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800a044:	bf28      	it	cs
 800a046:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a048:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a04a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a04c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a050:	f7fe ffdd 	bl	800900e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a054:	f104 0018 	add.w	r0, r4, #24
 800a058:	f7fe ffd9 	bl	800900e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800a05c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a060:	463a      	mov	r2, r7
 800a062:	4631      	mov	r1, r6
 800a064:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a066:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a068:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a06a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800a06c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a070:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a074:	f7ff f840 	bl	80090f8 <pxPortInitialiseStack>
 800a078:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a07a:	f1b8 0f00 	cmp.w	r8, #0
 800a07e:	d001      	beq.n	800a084 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a080:	f8c8 4000 	str.w	r4, [r8]
}
 800a084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a088:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800a08c:	e7d3      	b.n	800a036 <prvInitialiseNewTask.constprop.0+0x46>

0800a08e <xTaskCreateStatic>:
	{
 800a08e:	b570      	push	{r4, r5, r6, lr}
 800a090:	b086      	sub	sp, #24
 800a092:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a096:	b945      	cbnz	r5, 800a0aa <xTaskCreateStatic+0x1c>
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	e7fe      	b.n	800a0a8 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800a0aa:	b944      	cbnz	r4, 800a0be <xTaskCreateStatic+0x30>
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	e7fe      	b.n	800a0bc <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0be:	2660      	movs	r6, #96	; 0x60
 800a0c0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0c2:	9e05      	ldr	r6, [sp, #20]
 800a0c4:	2e60      	cmp	r6, #96	; 0x60
 800a0c6:	d008      	beq.n	800a0da <xTaskCreateStatic+0x4c>
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	e7fe      	b.n	800a0d8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0da:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0dc:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a0de:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0e0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a0e4:	ad04      	add	r5, sp, #16
 800a0e6:	9402      	str	r4, [sp, #8]
 800a0e8:	9501      	str	r5, [sp, #4]
 800a0ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a0ec:	9500      	str	r5, [sp, #0]
 800a0ee:	f7ff ff7f 	bl	8009ff0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f7ff fe66 	bl	8009dc4 <prvAddNewTaskToReadyList>
	}
 800a0f8:	9804      	ldr	r0, [sp, #16]
 800a0fa:	b006      	add	sp, #24
 800a0fc:	bd70      	pop	{r4, r5, r6, pc}

0800a0fe <xTaskCreate>:
	{
 800a0fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a102:	4607      	mov	r7, r0
 800a104:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a106:	0090      	lsls	r0, r2, #2
	{
 800a108:	4688      	mov	r8, r1
 800a10a:	4616      	mov	r6, r2
 800a10c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a10e:	f7fe fe9d 	bl	8008e4c <pvPortMalloc>
			if( pxStack != NULL )
 800a112:	4605      	mov	r5, r0
 800a114:	b1e8      	cbz	r0, 800a152 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a116:	2060      	movs	r0, #96	; 0x60
 800a118:	f7fe fe98 	bl	8008e4c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a11c:	4604      	mov	r4, r0
 800a11e:	b1a8      	cbz	r0, 800a14c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a120:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800a122:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a124:	4632      	mov	r2, r6
 800a126:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a128:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a12c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a12e:	9002      	str	r0, [sp, #8]
 800a130:	4638      	mov	r0, r7
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	464b      	mov	r3, r9
 800a13a:	f7ff ff59 	bl	8009ff0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a13e:	4620      	mov	r0, r4
 800a140:	f7ff fe40 	bl	8009dc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a144:	2001      	movs	r0, #1
	}
 800a146:	b005      	add	sp, #20
 800a148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7fe ff15 	bl	8008f7c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a152:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800a156:	e7f6      	b.n	800a146 <xTaskCreate+0x48>

0800a158 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a158:	4a02      	ldr	r2, [pc, #8]	; (800a164 <vTaskSuspendAll+0xc>)
 800a15a:	6813      	ldr	r3, [r2, #0]
 800a15c:	3301      	adds	r3, #1
 800a15e:	6013      	str	r3, [r2, #0]
}
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	24006930 	.word	0x24006930

0800a168 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a168:	4b01      	ldr	r3, [pc, #4]	; (800a170 <xTaskGetTickCount+0x8>)
 800a16a:	6818      	ldr	r0, [r3, #0]
}
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	240069b0 	.word	0x240069b0

0800a174 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a174:	4b3f      	ldr	r3, [pc, #252]	; (800a274 <xTaskIncrementTick+0x100>)
 800a176:	681b      	ldr	r3, [r3, #0]
{
 800a178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d172      	bne.n	800a266 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a180:	4b3d      	ldr	r3, [pc, #244]	; (800a278 <xTaskIncrementTick+0x104>)
 800a182:	681d      	ldr	r5, [r3, #0]
 800a184:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a186:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a188:	b9bd      	cbnz	r5, 800a1ba <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a18a:	4b3c      	ldr	r3, [pc, #240]	; (800a27c <xTaskIncrementTick+0x108>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	6812      	ldr	r2, [r2, #0]
 800a190:	b142      	cbz	r2, 800a1a4 <xTaskIncrementTick+0x30>
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	e7fe      	b.n	800a1a2 <xTaskIncrementTick+0x2e>
 800a1a4:	4a36      	ldr	r2, [pc, #216]	; (800a280 <xTaskIncrementTick+0x10c>)
 800a1a6:	6819      	ldr	r1, [r3, #0]
 800a1a8:	6810      	ldr	r0, [r2, #0]
 800a1aa:	6018      	str	r0, [r3, #0]
 800a1ac:	6011      	str	r1, [r2, #0]
 800a1ae:	4a35      	ldr	r2, [pc, #212]	; (800a284 <xTaskIncrementTick+0x110>)
 800a1b0:	6813      	ldr	r3, [r2, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	f7ff febb 	bl	8009f30 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1ba:	4e33      	ldr	r6, [pc, #204]	; (800a288 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800a1bc:	2400      	movs	r4, #0
 800a1be:	4f33      	ldr	r7, [pc, #204]	; (800a28c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1c0:	6833      	ldr	r3, [r6, #0]
 800a1c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a298 <xTaskIncrementTick+0x124>
 800a1c6:	429d      	cmp	r5, r3
 800a1c8:	d211      	bcs.n	800a1ee <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ce:	2214      	movs	r2, #20
 800a1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d2:	4353      	muls	r3, r2
 800a1d4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800a1d6:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800a1d8:	4b2d      	ldr	r3, [pc, #180]	; (800a290 <xTaskIncrementTick+0x11c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800a1dc:	bf28      	it	cs
 800a1de:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	bf18      	it	ne
 800a1e4:	2401      	movne	r4, #1
}
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	b003      	add	sp, #12
 800a1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a27c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800a1f2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a29c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1f6:	f8d9 3000 	ldr.w	r3, [r9]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	b91b      	cbnz	r3, 800a206 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a202:	6033      	str	r3, [r6, #0]
					break;
 800a204:	e7e1      	b.n	800a1ca <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a206:	f8d9 3000 	ldr.w	r3, [r9]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a210:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800a214:	4295      	cmp	r5, r2
 800a216:	d201      	bcs.n	800a21c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800a218:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a21a:	e7d6      	b.n	800a1ca <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a21c:	f10b 0104 	add.w	r1, fp, #4
 800a220:	4608      	mov	r0, r1
 800a222:	9101      	str	r1, [sp, #4]
 800a224:	f7fe ff19 	bl	800905a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a228:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800a22c:	9901      	ldr	r1, [sp, #4]
 800a22e:	b122      	cbz	r2, 800a23a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a230:	f10b 0018 	add.w	r0, fp, #24
 800a234:	f7fe ff11 	bl	800905a <uxListRemove>
 800a238:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800a23a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800a23e:	f8da 2000 	ldr.w	r2, [sl]
 800a242:	4290      	cmp	r0, r2
 800a244:	d901      	bls.n	800a24a <xTaskIncrementTick+0xd6>
 800a246:	f8ca 0000 	str.w	r0, [sl]
 800a24a:	2314      	movs	r3, #20
 800a24c:	fb03 7000 	mla	r0, r3, r0, r7
 800a250:	f7fe fee0 	bl	8009014 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a254:	f8d8 1000 	ldr.w	r1, [r8]
 800a258:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a25c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800a25e:	429a      	cmp	r2, r3
 800a260:	bf28      	it	cs
 800a262:	2401      	movcs	r4, #1
 800a264:	e7c7      	b.n	800a1f6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800a266:	4a0b      	ldr	r2, [pc, #44]	; (800a294 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800a268:	2400      	movs	r4, #0
		++xPendedTicks;
 800a26a:	6813      	ldr	r3, [r2, #0]
 800a26c:	3301      	adds	r3, #1
 800a26e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800a270:	e7b9      	b.n	800a1e6 <xTaskIncrementTick+0x72>
 800a272:	bf00      	nop
 800a274:	24006930 	.word	0x24006930
 800a278:	240069b0 	.word	0x240069b0
 800a27c:	240064c0 	.word	0x240064c0
 800a280:	240064c4 	.word	0x240064c4
 800a284:	24006968 	.word	0x24006968
 800a288:	24006964 	.word	0x24006964
 800a28c:	240064c8 	.word	0x240064c8
 800a290:	240069b4 	.word	0x240069b4
 800a294:	2400696c 	.word	0x2400696c
 800a298:	240064bc 	.word	0x240064bc
 800a29c:	24006938 	.word	0x24006938

0800a2a0 <xTaskResumeAll>:
{
 800a2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800a2a2:	4c31      	ldr	r4, [pc, #196]	; (800a368 <xTaskResumeAll+0xc8>)
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	b943      	cbnz	r3, 800a2ba <xTaskResumeAll+0x1a>
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	e7fe      	b.n	800a2b8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a2ba:	f7fe ff43 	bl	8009144 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2c4:	6824      	ldr	r4, [r4, #0]
 800a2c6:	b12c      	cbz	r4, 800a2d4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800a2c8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a2ca:	f7fe ff5b 	bl	8009184 <vPortExitCritical>
}
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	b003      	add	sp, #12
 800a2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a2d4:	4b25      	ldr	r3, [pc, #148]	; (800a36c <xTaskResumeAll+0xcc>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d0f5      	beq.n	800a2c8 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2dc:	4d24      	ldr	r5, [pc, #144]	; (800a370 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800a2de:	4e25      	ldr	r6, [pc, #148]	; (800a374 <xTaskResumeAll+0xd4>)
 800a2e0:	4f25      	ldr	r7, [pc, #148]	; (800a378 <xTaskResumeAll+0xd8>)
 800a2e2:	e01e      	b.n	800a322 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e4:	68eb      	ldr	r3, [r5, #12]
 800a2e6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2e8:	f104 0018 	add.w	r0, r4, #24
 800a2ec:	f7fe feb5 	bl	800905a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f0:	1d21      	adds	r1, r4, #4
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	9101      	str	r1, [sp, #4]
 800a2f6:	f7fe feb0 	bl	800905a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2fc:	6832      	ldr	r2, [r6, #0]
 800a2fe:	9901      	ldr	r1, [sp, #4]
 800a300:	4293      	cmp	r3, r2
 800a302:	d900      	bls.n	800a306 <xTaskResumeAll+0x66>
 800a304:	6033      	str	r3, [r6, #0]
 800a306:	2014      	movs	r0, #20
 800a308:	fb00 7003 	mla	r0, r0, r3, r7
 800a30c:	f7fe fe82 	bl	8009014 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a310:	4b1a      	ldr	r3, [pc, #104]	; (800a37c <xTaskResumeAll+0xdc>)
 800a312:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	429a      	cmp	r2, r3
 800a31a:	d302      	bcc.n	800a322 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800a31c:	4b18      	ldr	r3, [pc, #96]	; (800a380 <xTaskResumeAll+0xe0>)
 800a31e:	2201      	movs	r2, #1
 800a320:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a322:	682b      	ldr	r3, [r5, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1dd      	bne.n	800a2e4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800a328:	b10c      	cbz	r4, 800a32e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800a32a:	f7ff fe01 	bl	8009f30 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a32e:	4d15      	ldr	r5, [pc, #84]	; (800a384 <xTaskResumeAll+0xe4>)
 800a330:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a332:	b144      	cbz	r4, 800a346 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800a334:	4e12      	ldr	r6, [pc, #72]	; (800a380 <xTaskResumeAll+0xe0>)
 800a336:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800a338:	f7ff ff1c 	bl	800a174 <xTaskIncrementTick>
 800a33c:	b100      	cbz	r0, 800a340 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800a33e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a340:	3c01      	subs	r4, #1
 800a342:	d1f9      	bne.n	800a338 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800a344:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800a346:	4b0e      	ldr	r3, [pc, #56]	; (800a380 <xTaskResumeAll+0xe0>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0bc      	beq.n	800a2c8 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800a34e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a356:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a362:	2401      	movs	r4, #1
 800a364:	e7b1      	b.n	800a2ca <xTaskResumeAll+0x2a>
 800a366:	bf00      	nop
 800a368:	24006930 	.word	0x24006930
 800a36c:	24006928 	.word	0x24006928
 800a370:	24006970 	.word	0x24006970
 800a374:	24006938 	.word	0x24006938
 800a378:	240064c8 	.word	0x240064c8
 800a37c:	240064bc 	.word	0x240064bc
 800a380:	240069b4 	.word	0x240069b4
 800a384:	2400696c 	.word	0x2400696c

0800a388 <vTaskDelay>:
	{
 800a388:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a38a:	b950      	cbnz	r0, 800a3a2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800a38c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a394:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	f3bf 8f6f 	isb	sy
	}
 800a3a0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a3a2:	4b0a      	ldr	r3, [pc, #40]	; (800a3cc <vTaskDelay+0x44>)
 800a3a4:	6819      	ldr	r1, [r3, #0]
 800a3a6:	b141      	cbz	r1, 800a3ba <vTaskDelay+0x32>
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	e7fe      	b.n	800a3b8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a3ba:	f7ff fecd 	bl	800a158 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a3be:	f7ff fd7f 	bl	8009ec0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a3c2:	f7ff ff6d 	bl	800a2a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d0e0      	beq.n	800a38c <vTaskDelay+0x4>
 800a3ca:	e7e9      	b.n	800a3a0 <vTaskDelay+0x18>
 800a3cc:	24006930 	.word	0x24006930

0800a3d0 <vTaskSetApplicationTaskTag>:
	{
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	460d      	mov	r5, r1
		if( xTask == NULL )
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	b908      	cbnz	r0, 800a3dc <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800a3d8:	4b04      	ldr	r3, [pc, #16]	; (800a3ec <vTaskSetApplicationTaskTag+0x1c>)
 800a3da:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800a3dc:	f7fe feb2 	bl	8009144 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800a3e0:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800a3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800a3e6:	f7fe becd 	b.w	8009184 <vPortExitCritical>
 800a3ea:	bf00      	nop
 800a3ec:	240064bc 	.word	0x240064bc

0800a3f0 <xTaskCallApplicationTaskHook>:
	{
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	4608      	mov	r0, r1
		if( xTask == NULL )
 800a3f4:	b90b      	cbnz	r3, 800a3fa <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800a3f6:	4b03      	ldr	r3, [pc, #12]	; (800a404 <xTaskCallApplicationTaskHook+0x14>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800a3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fc:	b103      	cbz	r3, 800a400 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800a3fe:	4718      	bx	r3
	}
 800a400:	4618      	mov	r0, r3
 800a402:	4770      	bx	lr
 800a404:	240064bc 	.word	0x240064bc

0800a408 <vTaskStartScheduler>:
{
 800a408:	b510      	push	{r4, lr}
 800a40a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a40c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a40e:	aa07      	add	r2, sp, #28
 800a410:	a906      	add	r1, sp, #24
 800a412:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a414:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a418:	f7fe fcdc 	bl	8008dd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a41c:	9b05      	ldr	r3, [sp, #20]
 800a41e:	9a07      	ldr	r2, [sp, #28]
 800a420:	9302      	str	r3, [sp, #8]
 800a422:	9b06      	ldr	r3, [sp, #24]
 800a424:	4919      	ldr	r1, [pc, #100]	; (800a48c <vTaskStartScheduler+0x84>)
 800a426:	481a      	ldr	r0, [pc, #104]	; (800a490 <vTaskStartScheduler+0x88>)
 800a428:	e9cd 4300 	strd	r4, r3, [sp]
 800a42c:	4623      	mov	r3, r4
 800a42e:	f7ff fe2e 	bl	800a08e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a432:	b340      	cbz	r0, 800a486 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800a434:	f000 fa88 	bl	800a948 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a438:	2801      	cmp	r0, #1
 800a43a:	d119      	bne.n	800a470 <vTaskStartScheduler+0x68>
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a44c:	f04f 32ff 	mov.w	r2, #4294967295
 800a450:	4b10      	ldr	r3, [pc, #64]	; (800a494 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800a452:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800a454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a456:	4b10      	ldr	r3, [pc, #64]	; (800a498 <vTaskStartScheduler+0x90>)
 800a458:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a45a:	4b10      	ldr	r3, [pc, #64]	; (800a49c <vTaskStartScheduler+0x94>)
 800a45c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800a45e:	4b10      	ldr	r3, [pc, #64]	; (800a4a0 <vTaskStartScheduler+0x98>)
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f7ff ffc5 	bl	800a3f0 <xTaskCallApplicationTaskHook>
}
 800a466:	b008      	add	sp, #32
 800a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800a46c:	f7fe befa 	b.w	8009264 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a470:	3001      	adds	r0, #1
 800a472:	d108      	bne.n	800a486 <vTaskStartScheduler+0x7e>
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	e7fe      	b.n	800a484 <vTaskStartScheduler+0x7c>
}
 800a486:	b008      	add	sp, #32
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	bf00      	nop
 800a48c:	0801c8b4 	.word	0x0801c8b4
 800a490:	08009f8d 	.word	0x08009f8d
 800a494:	24006964 	.word	0x24006964
 800a498:	24006984 	.word	0x24006984
 800a49c:	240069b0 	.word	0x240069b0
 800a4a0:	240064bc 	.word	0x240064bc

0800a4a4 <vTaskSwitchContext>:
{
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4a6:	4b1c      	ldr	r3, [pc, #112]	; (800a518 <vTaskSwitchContext+0x74>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4b1c      	ldr	r3, [pc, #112]	; (800a51c <vTaskSwitchContext+0x78>)
 800a4ac:	b112      	cbz	r2, 800a4b4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
}
 800a4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800a4b4:	4c1a      	ldr	r4, [pc, #104]	; (800a520 <vTaskSwitchContext+0x7c>)
 800a4b6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4b8:	4e1a      	ldr	r6, [pc, #104]	; (800a524 <vTaskSwitchContext+0x80>)
 800a4ba:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800a4bc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800a4be:	6820      	ldr	r0, [r4, #0]
 800a4c0:	f7ff ff96 	bl	800a3f0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c4:	6832      	ldr	r2, [r6, #0]
 800a4c6:	4918      	ldr	r1, [pc, #96]	; (800a528 <vTaskSwitchContext+0x84>)
 800a4c8:	fb07 f302 	mul.w	r3, r7, r2
 800a4cc:	58cd      	ldr	r5, [r1, r3]
 800a4ce:	18c8      	adds	r0, r1, r3
 800a4d0:	b1ad      	cbz	r5, 800a4fe <vTaskSwitchContext+0x5a>
 800a4d2:	6845      	ldr	r5, [r0, #4]
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	686d      	ldr	r5, [r5, #4]
 800a4d8:	440b      	add	r3, r1
 800a4da:	429d      	cmp	r5, r3
 800a4dc:	6045      	str	r5, [r0, #4]
 800a4de:	bf04      	itt	eq
 800a4e0:	686b      	ldreq	r3, [r5, #4]
 800a4e2:	6043      	streq	r3, [r0, #4]
 800a4e4:	2314      	movs	r3, #20
 800a4e6:	fb03 1102 	mla	r1, r3, r2, r1
 800a4ea:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800a4ec:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800a4f4:	6820      	ldr	r0, [r4, #0]
}
 800a4f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800a4fa:	f7ff bf79 	b.w	800a3f0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4fe:	b942      	cbnz	r2, 800a512 <vTaskSwitchContext+0x6e>
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	e7fe      	b.n	800a510 <vTaskSwitchContext+0x6c>
 800a512:	3a01      	subs	r2, #1
 800a514:	e7d8      	b.n	800a4c8 <vTaskSwitchContext+0x24>
 800a516:	bf00      	nop
 800a518:	24006930 	.word	0x24006930
 800a51c:	240069b4 	.word	0x240069b4
 800a520:	240064bc 	.word	0x240064bc
 800a524:	24006938 	.word	0x24006938
 800a528:	240064c8 	.word	0x240064c8

0800a52c <vTaskPlaceOnEventList>:
{
 800a52c:	b510      	push	{r4, lr}
 800a52e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800a530:	b940      	cbnz	r0, 800a544 <vTaskPlaceOnEventList+0x18>
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	e7fe      	b.n	800a542 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a544:	4b05      	ldr	r3, [pc, #20]	; (800a55c <vTaskPlaceOnEventList+0x30>)
 800a546:	6819      	ldr	r1, [r3, #0]
 800a548:	3118      	adds	r1, #24
 800a54a:	f7fe fd6f 	bl	800902c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a54e:	4620      	mov	r0, r4
 800a550:	2101      	movs	r1, #1
}
 800a552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a556:	f7ff bcb3 	b.w	8009ec0 <prvAddCurrentTaskToDelayedList>
 800a55a:	bf00      	nop
 800a55c:	240064bc 	.word	0x240064bc

0800a560 <vTaskPlaceOnEventListRestricted>:
	{
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	460d      	mov	r5, r1
 800a564:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800a566:	b940      	cbnz	r0, 800a57a <vTaskPlaceOnEventListRestricted+0x1a>
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	e7fe      	b.n	800a578 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a57a:	4b07      	ldr	r3, [pc, #28]	; (800a598 <vTaskPlaceOnEventListRestricted+0x38>)
 800a57c:	6819      	ldr	r1, [r3, #0]
 800a57e:	3118      	adds	r1, #24
 800a580:	f7fe fd48 	bl	8009014 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800a584:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a586:	4621      	mov	r1, r4
 800a588:	bf0c      	ite	eq
 800a58a:	4628      	moveq	r0, r5
 800a58c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800a590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a594:	f7ff bc94 	b.w	8009ec0 <prvAddCurrentTaskToDelayedList>
 800a598:	240064bc 	.word	0x240064bc

0800a59c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59c:	68c3      	ldr	r3, [r0, #12]
{
 800a59e:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a5a2:	b944      	cbnz	r4, 800a5b6 <xTaskRemoveFromEventList+0x1a>
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	e7fe      	b.n	800a5b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5b6:	f104 0118 	add.w	r1, r4, #24
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	9101      	str	r1, [sp, #4]
 800a5be:	f7fe fd4c 	bl	800905a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5c2:	4b12      	ldr	r3, [pc, #72]	; (800a60c <xTaskRemoveFromEventList+0x70>)
 800a5c4:	9901      	ldr	r1, [sp, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	b9e3      	cbnz	r3, 800a604 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5ca:	1d21      	adds	r1, r4, #4
 800a5cc:	4608      	mov	r0, r1
 800a5ce:	9101      	str	r1, [sp, #4]
 800a5d0:	f7fe fd43 	bl	800905a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5d4:	4a0e      	ldr	r2, [pc, #56]	; (800a610 <xTaskRemoveFromEventList+0x74>)
 800a5d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5d8:	6810      	ldr	r0, [r2, #0]
 800a5da:	9901      	ldr	r1, [sp, #4]
 800a5dc:	4283      	cmp	r3, r0
 800a5de:	d900      	bls.n	800a5e2 <xTaskRemoveFromEventList+0x46>
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	4a0c      	ldr	r2, [pc, #48]	; (800a614 <xTaskRemoveFromEventList+0x78>)
 800a5e4:	2014      	movs	r0, #20
 800a5e6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5ea:	f7fe fd13 	bl	8009014 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5ee:	4b0a      	ldr	r3, [pc, #40]	; (800a618 <xTaskRemoveFromEventList+0x7c>)
 800a5f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d906      	bls.n	800a608 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	4b07      	ldr	r3, [pc, #28]	; (800a61c <xTaskRemoveFromEventList+0x80>)
 800a5fe:	6018      	str	r0, [r3, #0]
}
 800a600:	b002      	add	sp, #8
 800a602:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a604:	4806      	ldr	r0, [pc, #24]	; (800a620 <xTaskRemoveFromEventList+0x84>)
 800a606:	e7f0      	b.n	800a5ea <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800a608:	2000      	movs	r0, #0
	return xReturn;
 800a60a:	e7f9      	b.n	800a600 <xTaskRemoveFromEventList+0x64>
 800a60c:	24006930 	.word	0x24006930
 800a610:	24006938 	.word	0x24006938
 800a614:	240064c8 	.word	0x240064c8
 800a618:	240064bc 	.word	0x240064bc
 800a61c:	240069b4 	.word	0x240069b4
 800a620:	24006970 	.word	0x24006970

0800a624 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a624:	4b03      	ldr	r3, [pc, #12]	; (800a634 <vTaskInternalSetTimeOutState+0x10>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a62a:	4b03      	ldr	r3, [pc, #12]	; (800a638 <vTaskInternalSetTimeOutState+0x14>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6043      	str	r3, [r0, #4]
}
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	24006968 	.word	0x24006968
 800a638:	240069b0 	.word	0x240069b0

0800a63c <xTaskCheckForTimeOut>:
{
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800a640:	4605      	mov	r5, r0
 800a642:	b940      	cbnz	r0, 800a656 <xTaskCheckForTimeOut+0x1a>
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	e7fe      	b.n	800a654 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800a656:	b941      	cbnz	r1, 800a66a <xTaskCheckForTimeOut+0x2e>
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	e7fe      	b.n	800a668 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800a66a:	f7fe fd6b 	bl	8009144 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a66e:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <xTaskCheckForTimeOut+0x70>)
 800a670:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	d010      	beq.n	800a69a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a678:	480d      	ldr	r0, [pc, #52]	; (800a6b0 <xTaskCheckForTimeOut+0x74>)
 800a67a:	682e      	ldr	r6, [r5, #0]
 800a67c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a67e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a680:	4286      	cmp	r6, r0
 800a682:	d001      	beq.n	800a688 <xTaskCheckForTimeOut+0x4c>
 800a684:	428a      	cmp	r2, r1
 800a686:	d90f      	bls.n	800a6a8 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a688:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a68a:	4283      	cmp	r3, r0
 800a68c:	d90a      	bls.n	800a6a4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800a68e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a690:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800a692:	4413      	add	r3, r2
 800a694:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a696:	f7ff ffc5 	bl	800a624 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800a69a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a69c:	f7fe fd72 	bl	8009184 <vPortExitCritical>
}
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a6a8:	2401      	movs	r4, #1
 800a6aa:	e7f7      	b.n	800a69c <xTaskCheckForTimeOut+0x60>
 800a6ac:	240069b0 	.word	0x240069b0
 800a6b0:	24006968 	.word	0x24006968

0800a6b4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a6b4:	4b01      	ldr	r3, [pc, #4]	; (800a6bc <vTaskMissedYield+0x8>)
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	601a      	str	r2, [r3, #0]
}
 800a6ba:	4770      	bx	lr
 800a6bc:	240069b4 	.word	0x240069b4

0800a6c0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <xTaskGetSchedulerState+0x18>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	b133      	cbz	r3, 800a6d4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6c6:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <xTaskGetSchedulerState+0x1c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bf0c      	ite	eq
 800a6ce:	2002      	moveq	r0, #2
 800a6d0:	2000      	movne	r0, #0
 800a6d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6d4:	2001      	movs	r0, #1
	}
 800a6d6:	4770      	bx	lr
 800a6d8:	24006984 	.word	0x24006984
 800a6dc:	24006930 	.word	0x24006930

0800a6e0 <xTaskPriorityInherit>:
	{
 800a6e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	b340      	cbz	r0, 800a738 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6e6:	4d1b      	ldr	r5, [pc, #108]	; (800a754 <xTaskPriorityInherit+0x74>)
 800a6e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a6ea:	682a      	ldr	r2, [r5, #0]
 800a6ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d228      	bcs.n	800a744 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6f2:	6982      	ldr	r2, [r0, #24]
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	db04      	blt.n	800a702 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6f8:	682a      	ldr	r2, [r5, #0]
 800a6fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a6fc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a700:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a702:	2214      	movs	r2, #20
 800a704:	4e14      	ldr	r6, [pc, #80]	; (800a758 <xTaskPriorityInherit+0x78>)
 800a706:	fb02 6303 	mla	r3, r2, r3, r6
 800a70a:	6962      	ldr	r2, [r4, #20]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d115      	bne.n	800a73c <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a710:	1d21      	adds	r1, r4, #4
 800a712:	4608      	mov	r0, r1
 800a714:	9101      	str	r1, [sp, #4]
 800a716:	f7fe fca0 	bl	800905a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a71a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a71c:	4a0f      	ldr	r2, [pc, #60]	; (800a75c <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a720:	6810      	ldr	r0, [r2, #0]
 800a722:	9901      	ldr	r1, [sp, #4]
 800a724:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a726:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a728:	d900      	bls.n	800a72c <xTaskPriorityInherit+0x4c>
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	2014      	movs	r0, #20
 800a72e:	fb00 6003 	mla	r0, r0, r3, r6
 800a732:	f7fe fc6f 	bl	8009014 <vListInsertEnd>
				xReturn = pdTRUE;
 800a736:	2001      	movs	r0, #1
	}
 800a738:	b002      	add	sp, #8
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a742:	e7f8      	b.n	800a736 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a748:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a74a:	42a0      	cmp	r0, r4
 800a74c:	bf2c      	ite	cs
 800a74e:	2000      	movcs	r0, #0
 800a750:	2001      	movcc	r0, #1
 800a752:	e7f1      	b.n	800a738 <xTaskPriorityInherit+0x58>
 800a754:	240064bc 	.word	0x240064bc
 800a758:	240064c8 	.word	0x240064c8
 800a75c:	24006938 	.word	0x24006938

0800a760 <xTaskPriorityDisinherit>:
	{
 800a760:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800a762:	b910      	cbnz	r0, 800a76a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800a764:	2000      	movs	r0, #0
	}
 800a766:	b002      	add	sp, #8
 800a768:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800a76a:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <xTaskPriorityDisinherit+0x7c>)
 800a76c:	681c      	ldr	r4, [r3, #0]
 800a76e:	4284      	cmp	r4, r0
 800a770:	d008      	beq.n	800a784 <xTaskPriorityDisinherit+0x24>
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	e7fe      	b.n	800a782 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800a784:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a786:	b943      	cbnz	r3, 800a79a <xTaskPriorityDisinherit+0x3a>
 800a788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	e7fe      	b.n	800a798 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a79a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800a79c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a79e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800a7a0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7a2:	4291      	cmp	r1, r2
 800a7a4:	d0de      	beq.n	800a764 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1dc      	bne.n	800a764 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7aa:	1d21      	adds	r1, r4, #4
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	9101      	str	r1, [sp, #4]
 800a7b0:	f7fe fc53 	bl	800905a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800a7b6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7be:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7c0:	4a07      	ldr	r2, [pc, #28]	; (800a7e0 <xTaskPriorityDisinherit+0x80>)
 800a7c2:	6810      	ldr	r0, [r2, #0]
 800a7c4:	4283      	cmp	r3, r0
 800a7c6:	d900      	bls.n	800a7ca <xTaskPriorityDisinherit+0x6a>
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	4a06      	ldr	r2, [pc, #24]	; (800a7e4 <xTaskPriorityDisinherit+0x84>)
 800a7cc:	2014      	movs	r0, #20
 800a7ce:	fb00 2003 	mla	r0, r0, r3, r2
 800a7d2:	f7fe fc1f 	bl	8009014 <vListInsertEnd>
					xReturn = pdTRUE;
 800a7d6:	2001      	movs	r0, #1
		return xReturn;
 800a7d8:	e7c5      	b.n	800a766 <xTaskPriorityDisinherit+0x6>
 800a7da:	bf00      	nop
 800a7dc:	240064bc 	.word	0x240064bc
 800a7e0:	24006938 	.word	0x24006938
 800a7e4:	240064c8 	.word	0x240064c8

0800a7e8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800a7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d044      	beq.n	800a87a <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7f0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a7f2:	b942      	cbnz	r2, 800a806 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	e7fe      	b.n	800a804 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a806:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a808:	4299      	cmp	r1, r3
 800a80a:	bf38      	it	cc
 800a80c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a80e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a810:	428b      	cmp	r3, r1
 800a812:	d032      	beq.n	800a87a <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a814:	2a01      	cmp	r2, #1
 800a816:	d130      	bne.n	800a87a <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800a818:	4a19      	ldr	r2, [pc, #100]	; (800a880 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a81a:	6812      	ldr	r2, [r2, #0]
 800a81c:	4282      	cmp	r2, r0
 800a81e:	d108      	bne.n	800a832 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	e7fe      	b.n	800a830 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a832:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a834:	4d13      	ldr	r5, [pc, #76]	; (800a884 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a836:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a838:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800a83c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a83e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a842:	bfa8      	it	ge
 800a844:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a848:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a84a:	bfa8      	it	ge
 800a84c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a84e:	429a      	cmp	r2, r3
 800a850:	d113      	bne.n	800a87a <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a852:	1d01      	adds	r1, r0, #4
 800a854:	4608      	mov	r0, r1
 800a856:	9101      	str	r1, [sp, #4]
 800a858:	f7fe fbff 	bl	800905a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800a85c:	4a0a      	ldr	r2, [pc, #40]	; (800a888 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800a85e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a860:	6810      	ldr	r0, [r2, #0]
 800a862:	9901      	ldr	r1, [sp, #4]
 800a864:	4283      	cmp	r3, r0
 800a866:	d900      	bls.n	800a86a <vTaskPriorityDisinheritAfterTimeout+0x82>
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	2014      	movs	r0, #20
 800a86c:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800a870:	b003      	add	sp, #12
 800a872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800a876:	f7fe bbcd 	b.w	8009014 <vListInsertEnd>
	}
 800a87a:	b003      	add	sp, #12
 800a87c:	bd30      	pop	{r4, r5, pc}
 800a87e:	bf00      	nop
 800a880:	240064bc 	.word	0x240064bc
 800a884:	240064c8 	.word	0x240064c8
 800a888:	24006938 	.word	0x24006938

0800a88c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a88c:	4b04      	ldr	r3, [pc, #16]	; (800a8a0 <pvTaskIncrementMutexHeldCount+0x14>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	b11a      	cbz	r2, 800a89a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a892:	6819      	ldr	r1, [r3, #0]
 800a894:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a896:	3201      	adds	r2, #1
 800a898:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800a89a:	6818      	ldr	r0, [r3, #0]
	}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	240064bc 	.word	0x240064bc

0800a8a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800a8a6:	4c11      	ldr	r4, [pc, #68]	; (800a8ec <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800a8a8:	f7fe fc4c 	bl	8009144 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800a8ac:	6825      	ldr	r5, [r4, #0]
 800a8ae:	b9bd      	cbnz	r5, 800a8e0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8b0:	4f0f      	ldr	r7, [pc, #60]	; (800a8f0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800a8b2:	4e10      	ldr	r6, [pc, #64]	; (800a8f4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	f7fe fb9f 	bl	8008ff8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7fe fb9c 	bl	8008ff8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8c0:	4b0d      	ldr	r3, [pc, #52]	; (800a8f8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8c2:	4a0e      	ldr	r2, [pc, #56]	; (800a8fc <prvCheckForValidListAndQueue+0x58>)
 800a8c4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800a8c6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8c8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800a8ca:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <prvCheckForValidListAndQueue+0x5c>)
 800a8cc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8ce:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <prvCheckForValidListAndQueue+0x60>)
 800a8d0:	9500      	str	r5, [sp, #0]
 800a8d2:	f7fe fe47 	bl	8009564 <xQueueGenericCreateStatic>
 800a8d6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8d8:	b110      	cbz	r0, 800a8e0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8da:	490b      	ldr	r1, [pc, #44]	; (800a908 <prvCheckForValidListAndQueue+0x64>)
 800a8dc:	f7ff fa12 	bl	8009d04 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800a8e0:	b003      	add	sp, #12
 800a8e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800a8e6:	f7fe bc4d 	b.w	8009184 <vPortExitCritical>
 800a8ea:	bf00      	nop
 800a8ec:	24006adc 	.word	0x24006adc
 800a8f0:	24006a60 	.word	0x24006a60
 800a8f4:	24006a74 	.word	0x24006a74
 800a8f8:	240069b8 	.word	0x240069b8
 800a8fc:	240069c0 	.word	0x240069c0
 800a900:	240069bc 	.word	0x240069bc
 800a904:	24006a8c 	.word	0x24006a8c
 800a908:	0801c8b9 	.word	0x0801c8b9

0800a90c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800a90c:	4291      	cmp	r1, r2
{
 800a90e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a910:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a912:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800a914:	d80a      	bhi.n	800a92c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a916:	1ad2      	subs	r2, r2, r3
 800a918:	6983      	ldr	r3, [r0, #24]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d20d      	bcs.n	800a93a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a91e:	1d01      	adds	r1, r0, #4
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a922:	6818      	ldr	r0, [r3, #0]
 800a924:	f7fe fb82 	bl	800902c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a928:	2000      	movs	r0, #0
}
 800a92a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d201      	bcs.n	800a934 <prvInsertTimerInActiveList+0x28>
 800a930:	4299      	cmp	r1, r3
 800a932:	d202      	bcs.n	800a93a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a934:	1d01      	adds	r1, r0, #4
 800a936:	4b03      	ldr	r3, [pc, #12]	; (800a944 <prvInsertTimerInActiveList+0x38>)
 800a938:	e7f3      	b.n	800a922 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800a93a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a93c:	e7f5      	b.n	800a92a <prvInsertTimerInActiveList+0x1e>
 800a93e:	bf00      	nop
 800a940:	240069bc 	.word	0x240069bc
 800a944:	240069b8 	.word	0x240069b8

0800a948 <xTimerCreateTimerTask>:
{
 800a948:	b510      	push	{r4, lr}
 800a94a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a94c:	f7ff ffaa 	bl	800a8a4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a950:	4b12      	ldr	r3, [pc, #72]	; (800a99c <xTimerCreateTimerTask+0x54>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	b1b3      	cbz	r3, 800a984 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a956:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a958:	aa07      	add	r2, sp, #28
 800a95a:	a906      	add	r1, sp, #24
 800a95c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a95e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a962:	f7fe fa43 	bl	8008dec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a966:	9b05      	ldr	r3, [sp, #20]
 800a968:	9a07      	ldr	r2, [sp, #28]
 800a96a:	9302      	str	r3, [sp, #8]
 800a96c:	9b06      	ldr	r3, [sp, #24]
 800a96e:	490c      	ldr	r1, [pc, #48]	; (800a9a0 <xTimerCreateTimerTask+0x58>)
 800a970:	9301      	str	r3, [sp, #4]
 800a972:	2302      	movs	r3, #2
 800a974:	480b      	ldr	r0, [pc, #44]	; (800a9a4 <xTimerCreateTimerTask+0x5c>)
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	4623      	mov	r3, r4
 800a97a:	f7ff fb88 	bl	800a08e <xTaskCreateStatic>
 800a97e:	4b0a      	ldr	r3, [pc, #40]	; (800a9a8 <xTimerCreateTimerTask+0x60>)
 800a980:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a982:	b940      	cbnz	r0, 800a996 <xTimerCreateTimerTask+0x4e>
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a994:	e7fe      	b.n	800a994 <xTimerCreateTimerTask+0x4c>
}
 800a996:	2001      	movs	r0, #1
 800a998:	b008      	add	sp, #32
 800a99a:	bd10      	pop	{r4, pc}
 800a99c:	24006adc 	.word	0x24006adc
 800a9a0:	0801c8be 	.word	0x0801c8be
 800a9a4:	0800aaad 	.word	0x0800aaad
 800a9a8:	24006ae0 	.word	0x24006ae0

0800a9ac <xTimerGenericCommand>:
{
 800a9ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a9ae:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800a9b0:	4604      	mov	r4, r0
{
 800a9b2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800a9b4:	b940      	cbnz	r0, 800a9c8 <xTimerGenericCommand+0x1c>
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	e7fe      	b.n	800a9c6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800a9c8:	4d0c      	ldr	r5, [pc, #48]	; (800a9fc <xTimerGenericCommand+0x50>)
 800a9ca:	6828      	ldr	r0, [r5, #0]
 800a9cc:	b178      	cbz	r0, 800a9ee <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9ce:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9d0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9d2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9d6:	dc0c      	bgt.n	800a9f2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9d8:	f7ff fe72 	bl	800a6c0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9dc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9de:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9e0:	4669      	mov	r1, sp
 800a9e2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9e4:	bf0c      	ite	eq
 800a9e6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9e8:	461a      	movne	r2, r3
 800a9ea:	f7fe fe70 	bl	80096ce <xQueueGenericSend>
}
 800a9ee:	b004      	add	sp, #16
 800a9f0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	4669      	mov	r1, sp
 800a9f6:	f7fe ff1d 	bl	8009834 <xQueueGenericSendFromISR>
 800a9fa:	e7f8      	b.n	800a9ee <xTimerGenericCommand+0x42>
 800a9fc:	24006adc 	.word	0x24006adc

0800aa00 <prvSampleTimeNow>:
{
 800aa00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800aa04:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800aaa8 <prvSampleTimeNow+0xa8>
{
 800aa08:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800aa0a:	f7ff fbad 	bl	800a168 <xTaskGetTickCount>
 800aa0e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800aa10:	f8d8 3000 	ldr.w	r3, [r8]
 800aa14:	4283      	cmp	r3, r0
 800aa16:	d940      	bls.n	800aa9a <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa18:	4f21      	ldr	r7, [pc, #132]	; (800aaa0 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa1a:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	b95a      	cbnz	r2, 800aa3c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800aa24:	4a1f      	ldr	r2, [pc, #124]	; (800aaa4 <prvSampleTimeNow+0xa4>)
 800aa26:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa28:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800aa2a:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800aa2c:	6039      	str	r1, [r7, #0]
}
 800aa2e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800aa30:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800aa32:	f8c8 5000 	str.w	r5, [r8]
}
 800aa36:	b004      	add	sp, #16
 800aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa3c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa3e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa40:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa44:	1d21      	adds	r1, r4, #4
 800aa46:	4608      	mov	r0, r1
 800aa48:	9103      	str	r1, [sp, #12]
 800aa4a:	f7fe fb06 	bl	800905a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa4e:	6a23      	ldr	r3, [r4, #32]
 800aa50:	4620      	mov	r0, r4
 800aa52:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa54:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa58:	9903      	ldr	r1, [sp, #12]
 800aa5a:	f013 0f04 	tst.w	r3, #4
 800aa5e:	d0de      	beq.n	800aa1e <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa60:	69a3      	ldr	r3, [r4, #24]
 800aa62:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800aa64:	459a      	cmp	sl, r3
 800aa66:	d205      	bcs.n	800aa74 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa68:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa6a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa6c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa6e:	f7fe fadd 	bl	800902c <vListInsert>
 800aa72:	e7d4      	b.n	800aa1e <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa74:	2300      	movs	r3, #0
 800aa76:	4652      	mov	r2, sl
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f8cd 9000 	str.w	r9, [sp]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	f7ff ff94 	bl	800a9ac <xTimerGenericCommand>
				configASSERT( xResult );
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d1ca      	bne.n	800aa1e <prvSampleTimeNow+0x1e>
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	e7fe      	b.n	800aa98 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e7c7      	b.n	800aa2e <prvSampleTimeNow+0x2e>
 800aa9e:	bf00      	nop
 800aaa0:	240069b8 	.word	0x240069b8
 800aaa4:	240069bc 	.word	0x240069bc
 800aaa8:	24006a88 	.word	0x24006a88

0800aaac <prvTimerTask>:
{
 800aaac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aab0:	4d6e      	ldr	r5, [pc, #440]	; (800ac6c <prvTimerTask+0x1c0>)
{
 800aab2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aab4:	4e6e      	ldr	r6, [pc, #440]	; (800ac70 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	f8d3 8000 	ldr.w	r8, [r3]
 800aabc:	f1b8 0f00 	cmp.w	r8, #0
 800aac0:	d035      	beq.n	800ab2e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aac2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aac4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aac6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800aaca:	f7ff fb45 	bl	800a158 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aace:	a804      	add	r0, sp, #16
 800aad0:	f7ff ff96 	bl	800aa00 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800aad4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aad6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d169      	bne.n	800abb0 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aadc:	2c00      	cmp	r4, #0
 800aade:	d14c      	bne.n	800ab7a <prvTimerTask+0xce>
 800aae0:	4540      	cmp	r0, r8
 800aae2:	d350      	bcc.n	800ab86 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800aae4:	f7ff fbdc 	bl	800a2a0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaee:	1d38      	adds	r0, r7, #4
 800aaf0:	f7fe fab3 	bl	800905a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aaf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aaf8:	0758      	lsls	r0, r3, #29
 800aafa:	d51a      	bpl.n	800ab32 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aafc:	69b9      	ldr	r1, [r7, #24]
 800aafe:	4643      	mov	r3, r8
 800ab00:	464a      	mov	r2, r9
 800ab02:	4638      	mov	r0, r7
 800ab04:	4441      	add	r1, r8
 800ab06:	f7ff ff01 	bl	800a90c <prvInsertTimerInActiveList>
 800ab0a:	b1b0      	cbz	r0, 800ab3a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab0c:	4623      	mov	r3, r4
 800ab0e:	4642      	mov	r2, r8
 800ab10:	4621      	mov	r1, r4
 800ab12:	4638      	mov	r0, r7
 800ab14:	9400      	str	r4, [sp, #0]
 800ab16:	f7ff ff49 	bl	800a9ac <xTimerGenericCommand>
			configASSERT( xResult );
 800ab1a:	b970      	cbnz	r0, 800ab3a <prvTimerTask+0x8e>
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	e7fe      	b.n	800ab2c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab2e:	2401      	movs	r4, #1
 800ab30:	e7cb      	b.n	800aaca <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab32:	f023 0301 	bic.w	r3, r3, #1
 800ab36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab40:	2200      	movs	r2, #0
 800ab42:	a904      	add	r1, sp, #16
 800ab44:	6830      	ldr	r0, [r6, #0]
 800ab46:	f7fe ff2b 	bl	80099a0 <xQueueReceive>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d0b3      	beq.n	800aab6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab4e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab50:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	db2f      	blt.n	800abb6 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab56:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab58:	6963      	ldr	r3, [r4, #20]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d132      	bne.n	800abc4 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab5e:	a803      	add	r0, sp, #12
 800ab60:	f7ff ff4e 	bl	800aa00 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800ab64:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab66:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800ab68:	2b09      	cmp	r3, #9
 800ab6a:	d8e9      	bhi.n	800ab40 <prvTimerTask+0x94>
 800ab6c:	e8df f003 	tbb	[pc, r3]
 800ab70:	572e2e2e 	.word	0x572e2e2e
 800ab74:	2e2e765e 	.word	0x2e2e765e
 800ab78:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab7a:	4b3e      	ldr	r3, [pc, #248]	; (800ac74 <prvTimerTask+0x1c8>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681c      	ldr	r4, [r3, #0]
 800ab80:	fab4 f484 	clz	r4, r4
 800ab84:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab86:	4622      	mov	r2, r4
 800ab88:	eba8 0109 	sub.w	r1, r8, r9
 800ab8c:	6830      	ldr	r0, [r6, #0]
 800ab8e:	f7ff f8f6 	bl	8009d7e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab92:	f7ff fb85 	bl	800a2a0 <xTaskResumeAll>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d1d2      	bne.n	800ab40 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800ab9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	e7c7      	b.n	800ab40 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800abb0:	f7ff fb76 	bl	800a2a0 <xTaskResumeAll>
}
 800abb4:	e7c4      	b.n	800ab40 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abb6:	9b05      	ldr	r3, [sp, #20]
 800abb8:	9907      	ldr	r1, [sp, #28]
 800abba:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dbbe      	blt.n	800ab40 <prvTimerTask+0x94>
 800abc2:	e7c8      	b.n	800ab56 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abc4:	1d20      	adds	r0, r4, #4
 800abc6:	f7fe fa48 	bl	800905a <uxListRemove>
 800abca:	e7c8      	b.n	800ab5e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abcc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abd0:	4620      	mov	r0, r4
 800abd2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abd4:	f043 0301 	orr.w	r3, r3, #1
 800abd8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abdc:	9b05      	ldr	r3, [sp, #20]
 800abde:	4419      	add	r1, r3
 800abe0:	f7ff fe94 	bl	800a90c <prvInsertTimerInActiveList>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d0ab      	beq.n	800ab40 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abe8:	6a23      	ldr	r3, [r4, #32]
 800abea:	4620      	mov	r0, r4
 800abec:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800abf2:	0759      	lsls	r1, r3, #29
 800abf4:	d5a4      	bpl.n	800ab40 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abf6:	69a2      	ldr	r2, [r4, #24]
 800abf8:	2300      	movs	r3, #0
 800abfa:	9905      	ldr	r1, [sp, #20]
 800abfc:	4620      	mov	r0, r4
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	440a      	add	r2, r1
 800ac02:	4619      	mov	r1, r3
 800ac04:	f7ff fed2 	bl	800a9ac <xTimerGenericCommand>
							configASSERT( xResult );
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d199      	bne.n	800ab40 <prvTimerTask+0x94>
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	e7fe      	b.n	800ac1c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac1e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac22:	f023 0301 	bic.w	r3, r3, #1
 800ac26:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800ac2a:	e789      	b.n	800ab40 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac2c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac30:	f043 0301 	orr.w	r3, r3, #1
 800ac34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac38:	9905      	ldr	r1, [sp, #20]
 800ac3a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac3c:	b941      	cbnz	r1, 800ac50 <prvTimerTask+0x1a4>
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	e7fe      	b.n	800ac4e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac50:	4603      	mov	r3, r0
 800ac52:	4401      	add	r1, r0
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7ff fe59 	bl	800a90c <prvInsertTimerInActiveList>
					break;
 800ac5a:	e771      	b.n	800ab40 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac60:	079a      	lsls	r2, r3, #30
 800ac62:	d4de      	bmi.n	800ac22 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800ac64:	4620      	mov	r0, r4
 800ac66:	f7fe f989 	bl	8008f7c <vPortFree>
 800ac6a:	e769      	b.n	800ab40 <prvTimerTask+0x94>
 800ac6c:	240069b8 	.word	0x240069b8
 800ac70:	24006adc 	.word	0x24006adc
 800ac74:	240069bc 	.word	0x240069bc

0800ac78 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800ac78:	8880      	ldrh	r0, [r0, #4]
 800ac7a:	4770      	bx	lr

0800ac7c <_ZN8touchgfx17AbstractPartition5clearEv>:
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	8083      	strh	r3, [r0, #4]
 800ac80:	4770      	bx	lr
	...

0800ac84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac86:	6803      	ldr	r3, [r0, #0]
 800ac88:	460e      	mov	r6, r1
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	4798      	blx	r3
 800ac92:	4604      	mov	r4, r0
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	4628      	mov	r0, r5
 800ac98:	1b34      	subs	r4, r6, r4
 800ac9a:	6a1b      	ldr	r3, [r3, #32]
 800ac9c:	b2a4      	uxth	r4, r4
 800ac9e:	4798      	blx	r3
 800aca0:	88ab      	ldrh	r3, [r5, #4]
 800aca2:	fbb4 f4f0 	udiv	r4, r4, r0
 800aca6:	42a3      	cmp	r3, r4
 800aca8:	d805      	bhi.n	800acb6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800acaa:	4b0e      	ldr	r3, [pc, #56]	; (800ace4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800acac:	211d      	movs	r1, #29
 800acae:	4a0e      	ldr	r2, [pc, #56]	; (800ace8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800acb0:	480e      	ldr	r0, [pc, #56]	; (800acec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800acb2:	f00f f807 	bl	8019cc4 <__assert_func>
 800acb6:	682b      	ldr	r3, [r5, #0]
 800acb8:	2100      	movs	r1, #0
 800acba:	4628      	mov	r0, r5
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	4798      	blx	r3
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	4607      	mov	r7, r0
 800acc4:	4628      	mov	r0, r5
 800acc6:	6a1b      	ldr	r3, [r3, #32]
 800acc8:	4798      	blx	r3
 800acca:	1bf3      	subs	r3, r6, r7
 800accc:	b29b      	uxth	r3, r3
 800acce:	fbb3 f2f0 	udiv	r2, r3, r0
 800acd2:	fb02 3010 	mls	r0, r2, r0, r3
 800acd6:	b118      	cbz	r0, 800ace0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800acd8:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800acda:	211e      	movs	r1, #30
 800acdc:	4a02      	ldr	r2, [pc, #8]	; (800ace8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800acde:	e7e7      	b.n	800acb0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800ace0:	4620      	mov	r0, r4
 800ace2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace4:	0801c8c6 	.word	0x0801c8c6
 800ace8:	0801ca32 	.word	0x0801ca32
 800acec:	0801c8db 	.word	0x0801c8db
 800acf0:	0801c909 	.word	0x0801c909

0800acf4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	6803      	ldr	r3, [r0, #0]
 800acf8:	460d      	mov	r5, r1
 800acfa:	4604      	mov	r4, r0
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	4798      	blx	r3
 800ad00:	4285      	cmp	r5, r0
 800ad02:	d905      	bls.n	800ad10 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800ad04:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800ad06:	212f      	movs	r1, #47	; 0x2f
 800ad08:	4a0c      	ldr	r2, [pc, #48]	; (800ad3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800ad0a:	480d      	ldr	r0, [pc, #52]	; (800ad40 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800ad0c:	f00e ffda 	bl	8019cc4 <__assert_func>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	4620      	mov	r0, r4
 800ad14:	88a5      	ldrh	r5, [r4, #4]
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	4798      	blx	r3
 800ad1a:	4285      	cmp	r5, r0
 800ad1c:	d303      	bcc.n	800ad26 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800ad1e:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800ad20:	2130      	movs	r1, #48	; 0x30
 800ad22:	4a06      	ldr	r2, [pc, #24]	; (800ad3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800ad24:	e7f1      	b.n	800ad0a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	4620      	mov	r0, r4
 800ad2a:	88a1      	ldrh	r1, [r4, #4]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	4798      	blx	r3
 800ad30:	88a3      	ldrh	r3, [r4, #4]
 800ad32:	3301      	adds	r3, #1
 800ad34:	80a3      	strh	r3, [r4, #4]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	0801c983 	.word	0x0801c983
 800ad3c:	0801ca75 	.word	0x0801ca75
 800ad40:	0801c8db 	.word	0x0801c8db
 800ad44:	0801c99a 	.word	0x0801c99a

0800ad48 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	6803      	ldr	r3, [r0, #0]
 800ad4c:	4616      	mov	r6, r2
 800ad4e:	4604      	mov	r4, r0
 800ad50:	460d      	mov	r5, r1
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	4798      	blx	r3
 800ad56:	4286      	cmp	r6, r0
 800ad58:	d905      	bls.n	800ad66 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800ad5a:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800ad5c:	2139      	movs	r1, #57	; 0x39
 800ad5e:	4a06      	ldr	r2, [pc, #24]	; (800ad78 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800ad60:	4806      	ldr	r0, [pc, #24]	; (800ad7c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800ad62:	f00e ffaf 	bl	8019cc4 <__assert_func>
 800ad66:	6823      	ldr	r3, [r4, #0]
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad72:	4718      	bx	r3
 800ad74:	0801c983 	.word	0x0801c983
 800ad78:	0801c9e8 	.word	0x0801c9e8
 800ad7c:	0801c8db 	.word	0x0801c8db

0800ad80 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800ad80:	4770      	bx	lr
	...

0800ad84 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800ad84:	4a02      	ldr	r2, [pc, #8]	; (800ad90 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800ad86:	6002      	str	r2, [r0, #0]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	8082      	strh	r2, [r0, #4]
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	0801c9bc 	.word	0x0801c9bc

0800ad94 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ad94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ad96:	2000      	movs	r0, #0
 800ad98:	b12b      	cbz	r3, 800ada6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ad9a:	b920      	cbnz	r0, 800ada6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ad9c:	1a5a      	subs	r2, r3, r1
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	4250      	negs	r0, r2
 800ada2:	4150      	adcs	r0, r2
 800ada4:	e7f8      	b.n	800ad98 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ada6:	4770      	bx	lr

0800ada8 <_ZN8touchgfx9Container9removeAllEv>:
 800ada8:	2200      	movs	r2, #0
 800adaa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800adac:	b123      	cbz	r3, 800adb8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800adae:	6999      	ldr	r1, [r3, #24]
 800adb0:	6281      	str	r1, [r0, #40]	; 0x28
 800adb2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800adb6:	e7f8      	b.n	800adaa <_ZN8touchgfx9Container9removeAllEv+0x2>
 800adb8:	4770      	bx	lr

0800adba <_ZN8touchgfx9Container6unlinkEv>:
 800adba:	2300      	movs	r3, #0
 800adbc:	6283      	str	r3, [r0, #40]	; 0x28
 800adbe:	4770      	bx	lr

0800adc0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800adc0:	2200      	movs	r2, #0
 800adc2:	8002      	strh	r2, [r0, #0]
 800adc4:	8042      	strh	r2, [r0, #2]
 800adc6:	8082      	strh	r2, [r0, #4]
 800adc8:	80c2      	strh	r2, [r0, #6]
 800adca:	4770      	bx	lr

0800adcc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	460d      	mov	r5, r1
 800add0:	4616      	mov	r6, r2
 800add2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800add4:	b13c      	cbz	r4, 800ade6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	4620      	mov	r0, r4
 800adda:	4632      	mov	r2, r6
 800addc:	4629      	mov	r1, r5
 800adde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade0:	4798      	blx	r3
 800ade2:	69a4      	ldr	r4, [r4, #24]
 800ade4:	e7f6      	b.n	800add4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ade6:	bd70      	pop	{r4, r5, r6, pc}

0800ade8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	460d      	mov	r5, r1
 800adec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800adee:	b134      	cbz	r4, 800adfe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	4621      	mov	r1, r4
 800adf4:	4628      	mov	r0, r5
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	4798      	blx	r3
 800adfa:	69a4      	ldr	r4, [r4, #24]
 800adfc:	e7f7      	b.n	800adee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800adfe:	bd38      	pop	{r3, r4, r5, pc}

0800ae00 <_ZNK8touchgfx9Container17invalidateContentEv>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ae04:	b12c      	cbz	r4, 800ae12 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4620      	mov	r0, r4
 800ae0a:	699b      	ldr	r3, [r3, #24]
 800ae0c:	4798      	blx	r3
 800ae0e:	69a4      	ldr	r4, [r4, #24]
 800ae10:	e7f8      	b.n	800ae04 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800ae12:	bd10      	pop	{r4, pc}

0800ae14 <_ZN8touchgfx9ContainerD1Ev>:
 800ae14:	4770      	bx	lr

0800ae16 <_ZN8touchgfx9ContainerD0Ev>:
 800ae16:	b510      	push	{r4, lr}
 800ae18:	4604      	mov	r4, r0
 800ae1a:	212c      	movs	r1, #44	; 0x2c
 800ae1c:	f00e ff24 	bl	8019c68 <_ZdlPvj>
 800ae20:	4620      	mov	r0, r4
 800ae22:	bd10      	pop	{r4, pc}

0800ae24 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ae24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ae26:	b19b      	cbz	r3, 800ae50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	d109      	bne.n	800ae40 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	6159      	str	r1, [r3, #20]
 800ae32:	6282      	str	r2, [r0, #40]	; 0x28
 800ae34:	b902      	cbnz	r2, 800ae38 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ae36:	4770      	bx	lr
 800ae38:	6199      	str	r1, [r3, #24]
 800ae3a:	4770      	bx	lr
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	b13a      	cbz	r2, 800ae50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ae40:	699a      	ldr	r2, [r3, #24]
 800ae42:	428a      	cmp	r2, r1
 800ae44:	d1fa      	bne.n	800ae3c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ae46:	698a      	ldr	r2, [r1, #24]
 800ae48:	619a      	str	r2, [r3, #24]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ae50:	4770      	bx	lr

0800ae52 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ae52:	b410      	push	{r4}
 800ae54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ae56:	4604      	mov	r4, r0
 800ae58:	b92b      	cbnz	r3, 800ae66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ae5a:	6803      	ldr	r3, [r0, #0]
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae64:	4718      	bx	r3
 800ae66:	b941      	cbnz	r1, 800ae7a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ae68:	6193      	str	r3, [r2, #24]
 800ae6a:	6282      	str	r2, [r0, #40]	; 0x28
 800ae6c:	6154      	str	r4, [r2, #20]
 800ae6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	4603      	mov	r3, r0
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d0f9      	beq.n	800ae6e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ae7a:	4299      	cmp	r1, r3
 800ae7c:	6998      	ldr	r0, [r3, #24]
 800ae7e:	d1f9      	bne.n	800ae74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ae80:	6190      	str	r0, [r2, #24]
 800ae82:	618a      	str	r2, [r1, #24]
 800ae84:	e7f2      	b.n	800ae6c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800ae88 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ae88:	4288      	cmp	r0, r1
 800ae8a:	b508      	push	{r3, lr}
 800ae8c:	d105      	bne.n	800ae9a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800ae8e:	4b11      	ldr	r3, [pc, #68]	; (800aed4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800ae90:	2120      	movs	r1, #32
 800ae92:	4a11      	ldr	r2, [pc, #68]	; (800aed8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800ae94:	4811      	ldr	r0, [pc, #68]	; (800aedc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800ae96:	f00e ff15 	bl	8019cc4 <__assert_func>
 800ae9a:	694b      	ldr	r3, [r1, #20]
 800ae9c:	b11b      	cbz	r3, 800aea6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800ae9e:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800aea0:	2121      	movs	r1, #33	; 0x21
 800aea2:	4a0d      	ldr	r2, [pc, #52]	; (800aed8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800aea4:	e7f6      	b.n	800ae94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800aea6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800aeaa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aeac:	b913      	cbnz	r3, 800aeb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800aeae:	6281      	str	r1, [r0, #40]	; 0x28
 800aeb0:	bd08      	pop	{r3, pc}
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	699a      	ldr	r2, [r3, #24]
 800aeb6:	b12a      	cbz	r2, 800aec4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800aeb8:	428b      	cmp	r3, r1
 800aeba:	d1fa      	bne.n	800aeb2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800aebc:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800aebe:	2132      	movs	r1, #50	; 0x32
 800aec0:	4a05      	ldr	r2, [pc, #20]	; (800aed8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800aec2:	e7e7      	b.n	800ae94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800aec4:	428b      	cmp	r3, r1
 800aec6:	d103      	bne.n	800aed0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800aec8:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800aeca:	2135      	movs	r1, #53	; 0x35
 800aecc:	4a02      	ldr	r2, [pc, #8]	; (800aed8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800aece:	e7e1      	b.n	800ae94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800aed0:	6199      	str	r1, [r3, #24]
 800aed2:	e7ed      	b.n	800aeb0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800aed4:	0801cab3 	.word	0x0801cab3
 800aed8:	0801cc0c 	.word	0x0801cc0c
 800aedc:	0801cadf 	.word	0x0801cadf
 800aee0:	0801cb12 	.word	0x0801cb12
 800aee4:	0801cb48 	.word	0x0801cb48

0800aee8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	461f      	mov	r7, r3
 800aeee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800aef2:	460d      	mov	r5, r1
 800aef4:	4616      	mov	r6, r2
 800aef6:	b103      	cbz	r3, 800aefa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800aef8:	6038      	str	r0, [r7, #0]
 800aefa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800aefc:	b314      	cbz	r4, 800af44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800aefe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800af02:	b1eb      	cbz	r3, 800af40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800af04:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800af08:	428d      	cmp	r5, r1
 800af0a:	db19      	blt.n	800af40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800af0c:	b289      	uxth	r1, r1
 800af0e:	8923      	ldrh	r3, [r4, #8]
 800af10:	440b      	add	r3, r1
 800af12:	b21b      	sxth	r3, r3
 800af14:	429d      	cmp	r5, r3
 800af16:	da13      	bge.n	800af40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800af18:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800af1c:	4296      	cmp	r6, r2
 800af1e:	db0f      	blt.n	800af40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800af20:	b292      	uxth	r2, r2
 800af22:	8963      	ldrh	r3, [r4, #10]
 800af24:	4413      	add	r3, r2
 800af26:	b21b      	sxth	r3, r3
 800af28:	429e      	cmp	r6, r3
 800af2a:	da09      	bge.n	800af40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	1ab2      	subs	r2, r6, r2
 800af30:	1a69      	subs	r1, r5, r1
 800af32:	4620      	mov	r0, r4
 800af34:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800af38:	b212      	sxth	r2, r2
 800af3a:	463b      	mov	r3, r7
 800af3c:	b209      	sxth	r1, r1
 800af3e:	47c0      	blx	r8
 800af40:	69a4      	ldr	r4, [r4, #24]
 800af42:	e7db      	b.n	800aefc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	4c6d      	ldr	r4, [pc, #436]	; (800b104 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800af4e:	b0a1      	sub	sp, #132	; 0x84
 800af50:	4606      	mov	r6, r0
 800af52:	6824      	ldr	r4, [r4, #0]
 800af54:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800af56:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800af5a:	2400      	movs	r4, #0
 800af5c:	9303      	str	r3, [sp, #12]
 800af5e:	802c      	strh	r4, [r5, #0]
 800af60:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800af62:	802c      	strh	r4, [r5, #0]
 800af64:	601c      	str	r4, [r3, #0]
 800af66:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800af6a:	f7ff ffbd 	bl	800aee8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800af6e:	f1b9 0f03 	cmp.w	r9, #3
 800af72:	f340 80c1 	ble.w	800b0f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800af76:	4631      	mov	r1, r6
 800af78:	a80c      	add	r0, sp, #48	; 0x30
 800af7a:	f004 fde9 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800af7e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800af82:	9306      	str	r3, [sp, #24]
 800af84:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800af88:	9307      	str	r3, [sp, #28]
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	f8d3 a000 	ldr.w	sl, [r3]
 800af90:	f1ba 0f00 	cmp.w	sl, #0
 800af94:	f000 80b3 	beq.w	800b0fe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800af98:	4651      	mov	r1, sl
 800af9a:	a810      	add	r0, sp, #64	; 0x40
 800af9c:	f004 fdd8 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800afa0:	2002      	movs	r0, #2
 800afa2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800afa6:	9b01      	ldr	r3, [sp, #4]
 800afa8:	9a06      	ldr	r2, [sp, #24]
 800afaa:	fb91 f1f0 	sdiv	r1, r1, r0
 800afae:	189d      	adds	r5, r3, r2
 800afb0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800afb4:	9a07      	ldr	r2, [sp, #28]
 800afb6:	4419      	add	r1, r3
 800afb8:	9b02      	ldr	r3, [sp, #8]
 800afba:	4413      	add	r3, r2
 800afbc:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800afc0:	1a6d      	subs	r5, r5, r1
 800afc2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800afc6:	fb92 f2f0 	sdiv	r2, r2, r0
 800afca:	440a      	add	r2, r1
 800afcc:	1a9b      	subs	r3, r3, r2
 800afce:	435b      	muls	r3, r3
 800afd0:	fb05 3505 	mla	r5, r5, r5, r3
 800afd4:	4f4c      	ldr	r7, [pc, #304]	; (800b108 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800afd6:	ac10      	add	r4, sp, #64	; 0x40
 800afd8:	f1b9 0f0c 	cmp.w	r9, #12
 800afdc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800afde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afe0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800afe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afe4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800afe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afe8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800afec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aff0:	f04f 0303 	mov.w	r3, #3
 800aff4:	bfd8      	it	le
 800aff6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800affa:	f04f 0400 	mov.w	r4, #0
 800affe:	f8cd 9000 	str.w	r9, [sp]
 800b002:	bfcc      	ite	gt
 800b004:	4698      	movgt	r8, r3
 800b006:	fb92 f8f3 	sdivle	r8, r2, r3
 800b00a:	1c63      	adds	r3, r4, #1
 800b00c:	aa10      	add	r2, sp, #64	; 0x40
 800b00e:	f004 0401 	and.w	r4, r4, #1
 800b012:	f04f 0b00 	mov.w	fp, #0
 800b016:	9308      	str	r3, [sp, #32]
 800b018:	9b00      	ldr	r3, [sp, #0]
 800b01a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800b01e:	fb93 f3f8 	sdiv	r3, r3, r8
 800b022:	3404      	adds	r4, #4
 800b024:	b29b      	uxth	r3, r3
 800b026:	9304      	str	r3, [sp, #16]
 800b028:	9a04      	ldr	r2, [sp, #16]
 800b02a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b02e:	fb13 f302 	smulbb	r3, r3, r2
 800b032:	9a01      	ldr	r2, [sp, #4]
 800b034:	b29b      	uxth	r3, r3
 800b036:	1899      	adds	r1, r3, r2
 800b038:	9305      	str	r3, [sp, #20]
 800b03a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800b03e:	b209      	sxth	r1, r1
 800b040:	4299      	cmp	r1, r3
 800b042:	db4d      	blt.n	800b0e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b044:	8932      	ldrh	r2, [r6, #8]
 800b046:	4413      	add	r3, r2
 800b048:	b21b      	sxth	r3, r3
 800b04a:	4299      	cmp	r1, r3
 800b04c:	da48      	bge.n	800b0e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b04e:	9b04      	ldr	r3, [sp, #16]
 800b050:	6827      	ldr	r7, [r4, #0]
 800b052:	fb17 f703 	smulbb	r7, r7, r3
 800b056:	9b02      	ldr	r3, [sp, #8]
 800b058:	b2bf      	uxth	r7, r7
 800b05a:	18fa      	adds	r2, r7, r3
 800b05c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b060:	b212      	sxth	r2, r2
 800b062:	429a      	cmp	r2, r3
 800b064:	db3c      	blt.n	800b0e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b066:	8970      	ldrh	r0, [r6, #10]
 800b068:	4403      	add	r3, r0
 800b06a:	b21b      	sxth	r3, r3
 800b06c:	429a      	cmp	r2, r3
 800b06e:	da37      	bge.n	800b0e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b070:	2300      	movs	r3, #0
 800b072:	4630      	mov	r0, r6
 800b074:	930b      	str	r3, [sp, #44]	; 0x2c
 800b076:	ab0b      	add	r3, sp, #44	; 0x2c
 800b078:	f7ff ff36 	bl	800aee8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800b07c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b07e:	b37a      	cbz	r2, 800b0e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b080:	4552      	cmp	r2, sl
 800b082:	d02d      	beq.n	800b0e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b084:	4611      	mov	r1, r2
 800b086:	a80e      	add	r0, sp, #56	; 0x38
 800b088:	9209      	str	r2, [sp, #36]	; 0x24
 800b08a:	f004 fd61 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b08e:	f04f 0e02 	mov.w	lr, #2
 800b092:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800b096:	9a06      	ldr	r2, [sp, #24]
 800b098:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800b09c:	9b01      	ldr	r3, [sp, #4]
 800b09e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800b0a2:	4413      	add	r3, r2
 800b0a4:	9a07      	ldr	r2, [sp, #28]
 800b0a6:	fb91 f1fe 	sdiv	r1, r1, lr
 800b0aa:	fb9c fcfe 	sdiv	ip, ip, lr
 800b0ae:	4401      	add	r1, r0
 800b0b0:	1a58      	subs	r0, r3, r1
 800b0b2:	9b02      	ldr	r3, [sp, #8]
 800b0b4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800b0b8:	4413      	add	r3, r2
 800b0ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0bc:	448c      	add	ip, r1
 800b0be:	eba3 030c 	sub.w	r3, r3, ip
 800b0c2:	435b      	muls	r3, r3
 800b0c4:	fb00 3300 	mla	r3, r0, r0, r3
 800b0c8:	42ab      	cmp	r3, r5
 800b0ca:	d208      	bcs.n	800b0de <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800b0cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0ce:	461d      	mov	r5, r3
 800b0d0:	9803      	ldr	r0, [sp, #12]
 800b0d2:	6001      	str	r1, [r0, #0]
 800b0d4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800b0d6:	9805      	ldr	r0, [sp, #20]
 800b0d8:	8008      	strh	r0, [r1, #0]
 800b0da:	992b      	ldr	r1, [sp, #172]	; 0xac
 800b0dc:	800f      	strh	r7, [r1, #0]
 800b0de:	4692      	mov	sl, r2
 800b0e0:	f10b 0b01 	add.w	fp, fp, #1
 800b0e4:	3408      	adds	r4, #8
 800b0e6:	f1bb 0f04 	cmp.w	fp, #4
 800b0ea:	d19d      	bne.n	800b028 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800b0ec:	9b00      	ldr	r3, [sp, #0]
 800b0ee:	9c08      	ldr	r4, [sp, #32]
 800b0f0:	444b      	add	r3, r9
 800b0f2:	4544      	cmp	r4, r8
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	d188      	bne.n	800b00a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800b0f8:	b021      	add	sp, #132	; 0x84
 800b0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fe:	f04f 35ff 	mov.w	r5, #4294967295
 800b102:	e767      	b.n	800afd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800b104:	24006af0 	.word	0x24006af0
 800b108:	0801ae3c 	.word	0x0801ae3c

0800b10c <_ZN8touchgfx4RectaNERKS0_>:
 800b10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b110:	f9b1 7000 	ldrsh.w	r7, [r1]
 800b114:	888c      	ldrh	r4, [r1, #4]
 800b116:	f9b0 9000 	ldrsh.w	r9, [r0]
 800b11a:	443c      	add	r4, r7
 800b11c:	b2a4      	uxth	r4, r4
 800b11e:	fa0f f884 	sxth.w	r8, r4
 800b122:	45c1      	cmp	r9, r8
 800b124:	da2f      	bge.n	800b186 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b126:	8882      	ldrh	r2, [r0, #4]
 800b128:	444a      	add	r2, r9
 800b12a:	b292      	uxth	r2, r2
 800b12c:	fa0f fe82 	sxth.w	lr, r2
 800b130:	4577      	cmp	r7, lr
 800b132:	da28      	bge.n	800b186 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b134:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800b138:	88cb      	ldrh	r3, [r1, #6]
 800b13a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800b13e:	442b      	add	r3, r5
 800b140:	b21b      	sxth	r3, r3
 800b142:	429e      	cmp	r6, r3
 800b144:	da1f      	bge.n	800b186 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b146:	88c3      	ldrh	r3, [r0, #6]
 800b148:	4433      	add	r3, r6
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	fa0f fc83 	sxth.w	ip, r3
 800b150:	4565      	cmp	r5, ip
 800b152:	da18      	bge.n	800b186 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b154:	454f      	cmp	r7, r9
 800b156:	bfb8      	it	lt
 800b158:	464f      	movlt	r7, r9
 800b15a:	42b5      	cmp	r5, r6
 800b15c:	bfb8      	it	lt
 800b15e:	4635      	movlt	r5, r6
 800b160:	45f0      	cmp	r8, lr
 800b162:	bfd8      	it	le
 800b164:	4622      	movle	r2, r4
 800b166:	1bd2      	subs	r2, r2, r7
 800b168:	8082      	strh	r2, [r0, #4]
 800b16a:	884a      	ldrh	r2, [r1, #2]
 800b16c:	88c9      	ldrh	r1, [r1, #6]
 800b16e:	8007      	strh	r7, [r0, #0]
 800b170:	440a      	add	r2, r1
 800b172:	8045      	strh	r5, [r0, #2]
 800b174:	b292      	uxth	r2, r2
 800b176:	b211      	sxth	r1, r2
 800b178:	458c      	cmp	ip, r1
 800b17a:	bfa8      	it	ge
 800b17c:	4613      	movge	r3, r2
 800b17e:	1b5b      	subs	r3, r3, r5
 800b180:	80c3      	strh	r3, [r0, #6]
 800b182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b186:	2300      	movs	r3, #0
 800b188:	8003      	strh	r3, [r0, #0]
 800b18a:	8043      	strh	r3, [r0, #2]
 800b18c:	8083      	strh	r3, [r0, #4]
 800b18e:	80c3      	strh	r3, [r0, #6]
 800b190:	e7f7      	b.n	800b182 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800b192 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800b192:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	dd06      	ble.n	800b1a8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800b19a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	bfcc      	ite	gt
 800b1a2:	2000      	movgt	r0, #0
 800b1a4:	2001      	movle	r0, #1
 800b1a6:	4770      	bx	lr
 800b1a8:	2001      	movs	r0, #1
 800b1aa:	4770      	bx	lr

0800b1ac <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800b1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800b1b6:	8003      	strh	r3, [r0, #0]
 800b1b8:	8043      	strh	r3, [r0, #2]
 800b1ba:	8083      	strh	r3, [r0, #4]
 800b1bc:	80c3      	strh	r3, [r0, #6]
 800b1be:	2d00      	cmp	r5, #0
 800b1c0:	d040      	beq.n	800b244 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800b1c2:	1d28      	adds	r0, r5, #4
 800b1c4:	f7ff ffe5 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b1c8:	b988      	cbnz	r0, 800b1ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7ff ffe1 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b1d0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800b1d4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800b1d8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800b1dc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800b1e0:	b138      	cbz	r0, 800b1f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800b1e2:	8022      	strh	r2, [r4, #0]
 800b1e4:	8063      	strh	r3, [r4, #2]
 800b1e6:	f8a4 e004 	strh.w	lr, [r4, #4]
 800b1ea:	f8a4 c006 	strh.w	ip, [r4, #6]
 800b1ee:	69ad      	ldr	r5, [r5, #24]
 800b1f0:	e7e5      	b.n	800b1be <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800b1f2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800b1f6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b1fa:	4290      	cmp	r0, r2
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800b202:	460e      	mov	r6, r1
 800b204:	bfa8      	it	ge
 800b206:	4617      	movge	r7, r2
 800b208:	4299      	cmp	r1, r3
 800b20a:	4472      	add	r2, lr
 800b20c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800b210:	bfa8      	it	ge
 800b212:	461e      	movge	r6, r3
 800b214:	4440      	add	r0, r8
 800b216:	4471      	add	r1, lr
 800b218:	4463      	add	r3, ip
 800b21a:	b200      	sxth	r0, r0
 800b21c:	8027      	strh	r7, [r4, #0]
 800b21e:	b212      	sxth	r2, r2
 800b220:	8066      	strh	r6, [r4, #2]
 800b222:	b209      	sxth	r1, r1
 800b224:	b21b      	sxth	r3, r3
 800b226:	4290      	cmp	r0, r2
 800b228:	bfac      	ite	ge
 800b22a:	ebc7 0200 	rsbge	r2, r7, r0
 800b22e:	ebc7 0202 	rsblt	r2, r7, r2
 800b232:	4299      	cmp	r1, r3
 800b234:	bfac      	ite	ge
 800b236:	ebc6 0301 	rsbge	r3, r6, r1
 800b23a:	ebc6 0303 	rsblt	r3, r6, r3
 800b23e:	80a2      	strh	r2, [r4, #4]
 800b240:	80e3      	strh	r3, [r4, #6]
 800b242:	e7d4      	b.n	800b1ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800b244:	4620      	mov	r0, r4
 800b246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b24a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800b24a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b24e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b252:	b383      	cbz	r3, 800b2b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800b254:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b256:	b374      	cbz	r4, 800b2b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800b258:	f9b1 5000 	ldrsh.w	r5, [r1]
 800b25c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800b260:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800b264:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800b268:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b26c:	b303      	cbz	r3, 800b2b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800b26e:	4668      	mov	r0, sp
 800b270:	1d21      	adds	r1, r4, #4
 800b272:	f8ad 5000 	strh.w	r5, [sp]
 800b276:	f8ad 6002 	strh.w	r6, [sp, #2]
 800b27a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800b27e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800b282:	f7ff ff43 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800b286:	4668      	mov	r0, sp
 800b288:	f7ff ff83 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b28c:	b980      	cbnz	r0, 800b2b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800b28e:	f8bd 3000 	ldrh.w	r3, [sp]
 800b292:	4669      	mov	r1, sp
 800b294:	88a2      	ldrh	r2, [r4, #4]
 800b296:	4620      	mov	r0, r4
 800b298:	1a9b      	subs	r3, r3, r2
 800b29a:	88e2      	ldrh	r2, [r4, #6]
 800b29c:	f8ad 3000 	strh.w	r3, [sp]
 800b2a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	4798      	blx	r3
 800b2b0:	69a4      	ldr	r4, [r4, #24]
 800b2b2:	2c00      	cmp	r4, #0
 800b2b4:	d1d8      	bne.n	800b268 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800b2b6:	b002      	add	sp, #8
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2bc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800b2bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2be:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b2c2:	460d      	mov	r5, r1
 800b2c4:	4616      	mov	r6, r2
 800b2c6:	b323      	cbz	r3, 800b312 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b2c8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b2ca:	b314      	cbz	r4, 800b312 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b2cc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b2d0:	b1eb      	cbz	r3, 800b30e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b2d2:	6828      	ldr	r0, [r5, #0]
 800b2d4:	466b      	mov	r3, sp
 800b2d6:	6869      	ldr	r1, [r5, #4]
 800b2d8:	c303      	stmia	r3!, {r0, r1}
 800b2da:	4668      	mov	r0, sp
 800b2dc:	1d21      	adds	r1, r4, #4
 800b2de:	f7ff ff15 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800b2e2:	4668      	mov	r0, sp
 800b2e4:	f7ff ff55 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b2e8:	b988      	cbnz	r0, 800b30e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b2ea:	f8bd 3000 	ldrh.w	r3, [sp]
 800b2ee:	4669      	mov	r1, sp
 800b2f0:	88a2      	ldrh	r2, [r4, #4]
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	1a9b      	subs	r3, r3, r2
 800b2f6:	88e2      	ldrh	r2, [r4, #6]
 800b2f8:	f8ad 3000 	strh.w	r3, [sp]
 800b2fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b300:	1a9b      	subs	r3, r3, r2
 800b302:	4632      	mov	r2, r6
 800b304:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b30c:	4798      	blx	r3
 800b30e:	69a4      	ldr	r4, [r4, #24]
 800b310:	e7db      	b.n	800b2ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800b312:	b002      	add	sp, #8
 800b314:	bd70      	pop	{r4, r5, r6, pc}

0800b316 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800b316:	6803      	ldr	r3, [r0, #0]
 800b318:	b513      	push	{r0, r1, r4, lr}
 800b31a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800b31e:	2300      	movs	r3, #0
 800b320:	e9cd 3300 	strd	r3, r3, [sp]
 800b324:	466b      	mov	r3, sp
 800b326:	47a0      	blx	r4
 800b328:	b002      	add	sp, #8
 800b32a:	bd10      	pop	{r4, pc}

0800b32c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800b32c:	2301      	movs	r3, #1
 800b32e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b332:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b336:	4770      	bx	lr

0800b338 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800b338:	2301      	movs	r3, #1
 800b33a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b33e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b342:	4770      	bx	lr

0800b344 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800b344:	6843      	ldr	r3, [r0, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	725a      	strb	r2, [r3, #9]
 800b34a:	6840      	ldr	r0, [r0, #4]
 800b34c:	6803      	ldr	r3, [r0, #0]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	4718      	bx	r3

0800b352 <_ZN8touchgfx3HAL8flushDMAEv>:
 800b352:	6840      	ldr	r0, [r0, #4]
 800b354:	6803      	ldr	r3, [r0, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	4718      	bx	r3

0800b35a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800b35a:	b530      	push	{r4, r5, lr}
 800b35c:	b08b      	sub	sp, #44	; 0x2c
 800b35e:	6804      	ldr	r4, [r0, #0]
 800b360:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800b364:	9509      	str	r5, [sp, #36]	; 0x24
 800b366:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800b36a:	9508      	str	r5, [sp, #32]
 800b36c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800b370:	9507      	str	r5, [sp, #28]
 800b372:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800b376:	9506      	str	r5, [sp, #24]
 800b378:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800b37c:	9505      	str	r5, [sp, #20]
 800b37e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800b382:	9504      	str	r5, [sp, #16]
 800b384:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800b388:	9503      	str	r5, [sp, #12]
 800b38a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800b38e:	9502      	str	r5, [sp, #8]
 800b390:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800b394:	e9cd 3500 	strd	r3, r5, [sp]
 800b398:	4613      	mov	r3, r2
 800b39a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800b39c:	2200      	movs	r2, #0
 800b39e:	47a0      	blx	r4
 800b3a0:	b00b      	add	sp, #44	; 0x2c
 800b3a2:	bd30      	pop	{r4, r5, pc}

0800b3a4 <_ZN8touchgfx3HAL10beginFrameEv>:
 800b3a4:	4b04      	ldr	r3, [pc, #16]	; (800b3b8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	b123      	cbz	r3, 800b3b4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800b3aa:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800b3ae:	f080 0001 	eor.w	r0, r0, #1
 800b3b2:	4770      	bx	lr
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	4770      	bx	lr
 800b3b8:	24006aee 	.word	0x24006aee

0800b3bc <_ZN8touchgfx3HAL8endFrameEv>:
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	4604      	mov	r4, r0
 800b3c0:	6840      	ldr	r0, [r0, #4]
 800b3c2:	6803      	ldr	r3, [r0, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	4798      	blx	r3
 800b3c8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800b3cc:	b113      	cbz	r3, 800b3d4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b3d4:	bd10      	pop	{r4, pc}

0800b3d6 <_ZN8touchgfx3HAL10initializeEv>:
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	4604      	mov	r4, r0
 800b3da:	f7f6 f8c3 	bl	8001564 <_ZN8touchgfx10OSWrappers10initializeEv>
 800b3de:	6860      	ldr	r0, [r4, #4]
 800b3e0:	6803      	ldr	r3, [r0, #0]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	4798      	blx	r3
 800b3e6:	68e0      	ldr	r0, [r4, #12]
 800b3e8:	6803      	ldr	r3, [r0, #0]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	4798      	blx	r3
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	4718      	bx	r3
	...

0800b3fc <_ZN8touchgfx3HAL4tickEv>:
 800b3fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b3fe:	6803      	ldr	r3, [r0, #0]
 800b400:	4604      	mov	r4, r0
 800b402:	4d5b      	ldr	r5, [pc, #364]	; (800b570 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800b404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b408:	4798      	blx	r3
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f000 8095 	beq.w	800b53a <_ZN8touchgfx3HAL4tickEv+0x13e>
 800b410:	2001      	movs	r0, #1
 800b412:	2600      	movs	r6, #0
 800b414:	f7f5 ff1a 	bl	800124c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800b418:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800b41c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800b420:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b424:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b428:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800b42c:	b133      	cbz	r3, 800b43c <_ZN8touchgfx3HAL4tickEv+0x40>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	4620      	mov	r0, r4
 800b432:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b436:	4798      	blx	r3
 800b438:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800b43c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800b440:	2601      	movs	r6, #1
 800b442:	6862      	ldr	r2, [r4, #4]
 800b444:	f083 0301 	eor.w	r3, r3, #1
 800b448:	702e      	strb	r6, [r5, #0]
 800b44a:	7253      	strb	r3, [r2, #9]
 800b44c:	f003 fb56 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 800b450:	6803      	ldr	r3, [r0, #0]
 800b452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b454:	4798      	blx	r3
 800b456:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b45a:	b90b      	cbnz	r3, 800b460 <_ZN8touchgfx3HAL4tickEv+0x64>
 800b45c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800b460:	f003 fb4c 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 800b464:	6803      	ldr	r3, [r0, #0]
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	4798      	blx	r3
 800b46a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b46c:	6803      	ldr	r3, [r0, #0]
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	4798      	blx	r3
 800b472:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b476:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800b47a:	3b01      	subs	r3, #1
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b482:	b10a      	cbz	r2, 800b488 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1eb      	bne.n	800b460 <_ZN8touchgfx3HAL4tickEv+0x64>
 800b488:	4a3a      	ldr	r2, [pc, #232]	; (800b574 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800b48a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800b48e:	7813      	ldrb	r3, [r2, #0]
 800b490:	3301      	adds	r3, #1
 800b492:	b25b      	sxtb	r3, r3
 800b494:	4299      	cmp	r1, r3
 800b496:	7013      	strb	r3, [r2, #0]
 800b498:	dc10      	bgt.n	800b4bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 800b49a:	2300      	movs	r3, #0
 800b49c:	68e0      	ldr	r0, [r4, #12]
 800b49e:	a902      	add	r1, sp, #8
 800b4a0:	7013      	strb	r3, [r2, #0]
 800b4a2:	aa03      	add	r2, sp, #12
 800b4a4:	6803      	ldr	r3, [r0, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	4798      	blx	r3
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d050      	beq.n	800b552 <_ZN8touchgfx3HAL4tickEv+0x156>
 800b4b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b4ba:	4798      	blx	r3
 800b4bc:	2300      	movs	r3, #0
 800b4be:	6960      	ldr	r0, [r4, #20]
 800b4c0:	f88d 3007 	strb.w	r3, [sp, #7]
 800b4c4:	b158      	cbz	r0, 800b4de <_ZN8touchgfx3HAL4tickEv+0xe2>
 800b4c6:	6803      	ldr	r3, [r0, #0]
 800b4c8:	f10d 0107 	add.w	r1, sp, #7
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	4798      	blx	r3
 800b4d0:	b128      	cbz	r0, 800b4de <_ZN8touchgfx3HAL4tickEv+0xe2>
 800b4d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b4d8:	6803      	ldr	r3, [r0, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4798      	blx	r3
 800b4de:	f104 001c 	add.w	r0, r4, #28
 800b4e2:	f00e faed 	bl	8019ac0 <_ZN8touchgfx8Gestures4tickEv>
 800b4e6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800b4ea:	b30b      	cbz	r3, 800b530 <_ZN8touchgfx3HAL4tickEv+0x134>
 800b4ec:	6920      	ldr	r0, [r4, #16]
 800b4ee:	6803      	ldr	r3, [r0, #0]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	4798      	blx	r3
 800b4f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	b903      	cbnz	r3, 800b4fc <_ZN8touchgfx3HAL4tickEv+0x100>
 800b4fa:	6720      	str	r0, [r4, #112]	; 0x70
 800b4fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b4fe:	4a1e      	ldr	r2, [pc, #120]	; (800b578 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800b500:	1af3      	subs	r3, r6, r3
 800b502:	4293      	cmp	r3, r2
 800b504:	d914      	bls.n	800b530 <_ZN8touchgfx3HAL4tickEv+0x134>
 800b506:	6920      	ldr	r0, [r4, #16]
 800b508:	6803      	ldr	r3, [r0, #0]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	4798      	blx	r3
 800b50e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b510:	2264      	movs	r2, #100	; 0x64
 800b512:	1af3      	subs	r3, r6, r3
 800b514:	fbb3 f3f2 	udiv	r3, r3, r2
 800b518:	fbb0 f0f3 	udiv	r0, r0, r3
 800b51c:	2800      	cmp	r0, #0
 800b51e:	dc1d      	bgt.n	800b55c <_ZN8touchgfx3HAL4tickEv+0x160>
 800b520:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800b524:	6920      	ldr	r0, [r4, #16]
 800b526:	2100      	movs	r1, #0
 800b528:	6803      	ldr	r3, [r0, #0]
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	4798      	blx	r3
 800b52e:	6726      	str	r6, [r4, #112]	; 0x70
 800b530:	f003 fae4 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 800b534:	6803      	ldr	r3, [r0, #0]
 800b536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b538:	4798      	blx	r3
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	4620      	mov	r0, r4
 800b53e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b542:	4798      	blx	r3
 800b544:	2001      	movs	r0, #1
 800b546:	f7f5 fe99 	bl	800127c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800b54a:	2300      	movs	r3, #0
 800b54c:	702b      	strb	r3, [r5, #0]
 800b54e:	b004      	add	sp, #16
 800b550:	bd70      	pop	{r4, r5, r6, pc}
 800b552:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b556:	4620      	mov	r0, r4
 800b558:	4798      	blx	r3
 800b55a:	e7af      	b.n	800b4bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 800b55c:	2863      	cmp	r0, #99	; 0x63
 800b55e:	bfcb      	itete	gt
 800b560:	2300      	movgt	r3, #0
 800b562:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800b566:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800b56a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800b56e:	e7d9      	b.n	800b524 <_ZN8touchgfx3HAL4tickEv+0x128>
 800b570:	24006af4 	.word	0x24006af4
 800b574:	24006af5 	.word	0x24006af5
 800b578:	05f5e100 	.word	0x05f5e100

0800b57c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800b57c:	f7f6 b822 	b.w	80015c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800b580 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800b580:	6581      	str	r1, [r0, #88]	; 0x58
 800b582:	301c      	adds	r0, #28
 800b584:	f00e ba9a 	b.w	8019abc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800b588 <_ZN8touchgfx3HAL5touchEll>:
 800b588:	b530      	push	{r4, r5, lr}
 800b58a:	b087      	sub	sp, #28
 800b58c:	4604      	mov	r4, r0
 800b58e:	a804      	add	r0, sp, #16
 800b590:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b594:	f003 f810 	bl	800e5b8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800b598:	9b04      	ldr	r3, [sp, #16]
 800b59a:	a906      	add	r1, sp, #24
 800b59c:	a803      	add	r0, sp, #12
 800b59e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b5a2:	9b05      	ldr	r3, [sp, #20]
 800b5a4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800b5a8:	f003 f858 	bl	800e65c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800b5ac:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800b5b0:	f104 001c 	add.w	r0, r4, #28
 800b5b4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800b5b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b5bc:	b189      	cbz	r1, 800b5e2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800b5be:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b5ca:	462a      	mov	r2, r5
 800b5cc:	f00e fa86 	bl	8019adc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800b5d0:	b128      	cbz	r0, 800b5de <_ZN8touchgfx3HAL5touchEll+0x56>
 800b5d2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800b5d6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800b5d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800b5dc:	6623      	str	r3, [r4, #96]	; 0x60
 800b5de:	b007      	add	sp, #28
 800b5e0:	bd30      	pop	{r4, r5, pc}
 800b5e2:	f00e fabb 	bl	8019b5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b5ec:	e7f1      	b.n	800b5d2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800b5ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800b5ee:	b510      	push	{r4, lr}
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d046      	beq.n	800b682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b5f4:	ea81 0002 	eor.w	r0, r1, r2
 800b5f8:	07c4      	lsls	r4, r0, #31
 800b5fa:	d508      	bpl.n	800b60e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800b5fc:	440b      	add	r3, r1
 800b5fe:	3a01      	subs	r2, #1
 800b600:	428b      	cmp	r3, r1
 800b602:	d93e      	bls.n	800b682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b604:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b608:	f801 0b01 	strb.w	r0, [r1], #1
 800b60c:	e7f8      	b.n	800b600 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800b60e:	07d0      	lsls	r0, r2, #31
 800b610:	bf42      	ittt	mi
 800b612:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800b616:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800b61a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d911      	bls.n	800b646 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b622:	ea81 0402 	eor.w	r4, r1, r2
 800b626:	4610      	mov	r0, r2
 800b628:	07a4      	lsls	r4, r4, #30
 800b62a:	d022      	beq.n	800b672 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800b62c:	f023 0401 	bic.w	r4, r3, #1
 800b630:	440c      	add	r4, r1
 800b632:	428c      	cmp	r4, r1
 800b634:	4602      	mov	r2, r0
 800b636:	d904      	bls.n	800b642 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800b638:	8812      	ldrh	r2, [r2, #0]
 800b63a:	3002      	adds	r0, #2
 800b63c:	f821 2b02 	strh.w	r2, [r1], #2
 800b640:	e7f7      	b.n	800b632 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	f023 0003 	bic.w	r0, r3, #3
 800b64a:	4408      	add	r0, r1
 800b64c:	4288      	cmp	r0, r1
 800b64e:	4614      	mov	r4, r2
 800b650:	d904      	bls.n	800b65c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800b652:	6824      	ldr	r4, [r4, #0]
 800b654:	3204      	adds	r2, #4
 800b656:	f841 4b04 	str.w	r4, [r1], #4
 800b65a:	e7f7      	b.n	800b64c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800b65c:	f003 0303 	and.w	r3, r3, #3
 800b660:	3a01      	subs	r2, #1
 800b662:	440b      	add	r3, r1
 800b664:	428b      	cmp	r3, r1
 800b666:	d90c      	bls.n	800b682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b668:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b66c:	f801 0b01 	strb.w	r0, [r1], #1
 800b670:	e7f8      	b.n	800b664 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800b672:	0790      	lsls	r0, r2, #30
 800b674:	d0e7      	beq.n	800b646 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b676:	f832 0b02 	ldrh.w	r0, [r2], #2
 800b67a:	3b02      	subs	r3, #2
 800b67c:	f821 0b02 	strh.w	r0, [r1], #2
 800b680:	e7e1      	b.n	800b646 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b682:	2001      	movs	r0, #1
 800b684:	bd10      	pop	{r4, pc}

0800b686 <_ZN8touchgfx3HAL7noTouchEv>:
 800b686:	b510      	push	{r4, lr}
 800b688:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800b68c:	4604      	mov	r4, r0
 800b68e:	b153      	cbz	r3, 800b6a6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800b690:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800b694:	2101      	movs	r1, #1
 800b696:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800b69a:	301c      	adds	r0, #28
 800b69c:	f00e fa5e 	bl	8019b5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b6a6:	bd10      	pop	{r4, pc}

0800b6a8 <_ZN8touchgfx3HAL3lcdEv>:
 800b6a8:	4b04      	ldr	r3, [pc, #16]	; (800b6bc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800b6b0:	b10a      	cbz	r2, 800b6b6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800b6b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b6b4:	b900      	cbnz	r0, 800b6b8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800b6b6:	6898      	ldr	r0, [r3, #8]
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	24006af0 	.word	0x24006af0

0800b6c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800b6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	6980      	ldr	r0, [r0, #24]
 800b6c8:	b085      	sub	sp, #20
 800b6ca:	460f      	mov	r7, r1
 800b6cc:	4690      	mov	r8, r2
 800b6ce:	4699      	mov	r9, r3
 800b6d0:	b930      	cbnz	r0, 800b6e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800b6d2:	4b1c      	ldr	r3, [pc, #112]	; (800b744 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800b6d4:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800b6d8:	4a1b      	ldr	r2, [pc, #108]	; (800b748 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800b6da:	481c      	ldr	r0, [pc, #112]	; (800b74c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800b6dc:	f00e faf2 	bl	8019cc4 <__assert_func>
 800b6e0:	ad04      	add	r5, sp, #16
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	f845 6d04 	str.w	r6, [r5, #-4]!
 800b6e8:	6806      	ldr	r6, [r0, #0]
 800b6ea:	9501      	str	r5, [sp, #4]
 800b6ec:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800b6f0:	9500      	str	r5, [sp, #0]
 800b6f2:	6835      	ldr	r5, [r6, #0]
 800b6f4:	47a8      	blx	r5
 800b6f6:	4d16      	ldr	r5, [pc, #88]	; (800b750 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	f8a5 9000 	strh.w	r9, [r5]
 800b6fe:	f7ff ffd3 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800b702:	6803      	ldr	r3, [r0, #0]
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	4798      	blx	r3
 800b708:	2801      	cmp	r0, #1
 800b70a:	d012      	beq.n	800b732 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800b70c:	d306      	bcc.n	800b71c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800b70e:	280d      	cmp	r0, #13
 800b710:	d80b      	bhi.n	800b72a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800b712:	4b10      	ldr	r3, [pc, #64]	; (800b754 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800b714:	f240 115b 	movw	r1, #347	; 0x15b
 800b718:	4a0b      	ldr	r2, [pc, #44]	; (800b748 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800b71a:	e7de      	b.n	800b6da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800b71c:	882b      	ldrh	r3, [r5, #0]
 800b71e:	fb08 7203 	mla	r2, r8, r3, r7
 800b722:	9b03      	ldr	r3, [sp, #12]
 800b724:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800b728:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b72a:	4630      	mov	r0, r6
 800b72c:	b005      	add	sp, #20
 800b72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b732:	882a      	ldrh	r2, [r5, #0]
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	fb08 7202 	mla	r2, r8, r2, r7
 800b73a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b73e:	1a9a      	subs	r2, r3, r2
 800b740:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b742:	e7f2      	b.n	800b72a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800b744:	0801cdad 	.word	0x0801cdad
 800b748:	0801d06b 	.word	0x0801d06b
 800b74c:	0801cdf2 	.word	0x0801cdf2
 800b750:	24006aea 	.word	0x24006aea
 800b754:	0801ce18 	.word	0x0801ce18

0800b758 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800b758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b75a:	b08b      	sub	sp, #44	; 0x2c
 800b75c:	4617      	mov	r7, r2
 800b75e:	4604      	mov	r4, r0
 800b760:	460e      	mov	r6, r1
 800b762:	461d      	mov	r5, r3
 800b764:	f7ff ffa0 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800b768:	6803      	ldr	r3, [r0, #0]
 800b76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76c:	4798      	blx	r3
 800b76e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b772:	9007      	str	r0, [sp, #28]
 800b774:	4631      	mov	r1, r6
 800b776:	6822      	ldr	r2, [r4, #0]
 800b778:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b77c:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800b77e:	4620      	mov	r0, r4
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	9306      	str	r3, [sp, #24]
 800b784:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b788:	9305      	str	r3, [sp, #20]
 800b78a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b794:	9303      	str	r3, [sp, #12]
 800b796:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b79a:	9302      	str	r3, [sp, #8]
 800b79c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b7a0:	e9cd 5300 	strd	r5, r3, [sp]
 800b7a4:	463b      	mov	r3, r7
 800b7a6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	47a8      	blx	r5
 800b7ac:	b00b      	add	sp, #44	; 0x2c
 800b7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b0:	24006aea 	.word	0x24006aea

0800b7b4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800b7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7b8:	4698      	mov	r8, r3
 800b7ba:	6803      	ldr	r3, [r0, #0]
 800b7bc:	b08b      	sub	sp, #44	; 0x2c
 800b7be:	4617      	mov	r7, r2
 800b7c0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800b7c2:	460e      	mov	r6, r1
 800b7c4:	4b13      	ldr	r3, [pc, #76]	; (800b814 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	f8b3 9000 	ldrh.w	r9, [r3]
 800b7cc:	f7ff ff6c 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800b7d0:	6803      	ldr	r3, [r0, #0]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	4798      	blx	r3
 800b7d6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b7da:	2200      	movs	r2, #0
 800b7dc:	4631      	mov	r1, r6
 800b7de:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	9305      	str	r3, [sp, #20]
 800b7ee:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b7f2:	9304      	str	r3, [sp, #16]
 800b7f4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b7f8:	9303      	str	r3, [sp, #12]
 800b7fa:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b7fe:	9302      	str	r3, [sp, #8]
 800b800:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b804:	e9cd 8300 	strd	r8, r3, [sp]
 800b808:	463b      	mov	r3, r7
 800b80a:	47a8      	blx	r5
 800b80c:	b00b      	add	sp, #44	; 0x2c
 800b80e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b812:	bf00      	nop
 800b814:	24006aea 	.word	0x24006aea

0800b818 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800b818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b81c:	4698      	mov	r8, r3
 800b81e:	6803      	ldr	r3, [r0, #0]
 800b820:	b087      	sub	sp, #28
 800b822:	460e      	mov	r6, r1
 800b824:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800b826:	4617      	mov	r7, r2
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800b82a:	4604      	mov	r4, r0
 800b82c:	f8b3 9000 	ldrh.w	r9, [r3]
 800b830:	f7ff ff3a 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800b834:	6803      	ldr	r3, [r0, #0]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	4798      	blx	r3
 800b83a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800b83e:	463a      	mov	r2, r7
 800b840:	4631      	mov	r1, r6
 800b842:	f8cd 900c 	str.w	r9, [sp, #12]
 800b846:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800b84a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800b84e:	4620      	mov	r0, r4
 800b850:	9302      	str	r3, [sp, #8]
 800b852:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	4643      	mov	r3, r8
 800b860:	47a8      	blx	r5
 800b862:	b007      	add	sp, #28
 800b864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b868:	24006aea 	.word	0x24006aea

0800b86c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	4604      	mov	r4, r0
 800b872:	b08f      	sub	sp, #60	; 0x3c
 800b874:	4610      	mov	r0, r2
 800b876:	460d      	mov	r5, r1
 800b878:	4691      	mov	r9, r2
 800b87a:	461e      	mov	r6, r3
 800b87c:	f005 fd22 	bl	80112c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b880:	2800      	cmp	r0, #0
 800b882:	f000 809c 	beq.w	800b9be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	4620      	mov	r0, r4
 800b88a:	f8df b194 	ldr.w	fp, [pc, #404]	; 800ba20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800b88e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b894:	4798      	blx	r3
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	4620      	mov	r0, r4
 800b89a:	f8df a188 	ldr.w	sl, [pc, #392]	; 800ba24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800b89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a0:	4798      	blx	r3
 800b8a2:	f8bb 3000 	ldrh.w	r3, [fp]
 800b8a6:	4f5b      	ldr	r7, [pc, #364]	; (800ba14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	f8ba 3000 	ldrh.w	r3, [sl]
 800b8ae:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	9302      	str	r3, [sp, #8]
 800b8b6:	883b      	ldrh	r3, [r7, #0]
 800b8b8:	9303      	str	r3, [sp, #12]
 800b8ba:	4b57      	ldr	r3, [pc, #348]	; (800ba18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b8bc:	881a      	ldrh	r2, [r3, #0]
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	9204      	str	r2, [sp, #16]
 800b8c2:	f005 fe5f 	bl	8011584 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b8c6:	8038      	strh	r0, [r7, #0]
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	f005 fe9f 	bl	801160c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b8ce:	9b05      	ldr	r3, [sp, #20]
 800b8d0:	8018      	strh	r0, [r3, #0]
 800b8d2:	4b52      	ldr	r3, [pc, #328]	; (800ba1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d174      	bne.n	800b9c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800b8da:	883b      	ldrh	r3, [r7, #0]
 800b8dc:	f8aa 0000 	strh.w	r0, [sl]
 800b8e0:	f8ab 3000 	strh.w	r3, [fp]
 800b8e4:	4648      	mov	r0, r9
 800b8e6:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800b8ea:	f005 fceb 	bl	80112c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800b8fc:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800b900:	f7f7 f8a0 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 800b904:	2301      	movs	r3, #1
 800b906:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800b90a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800b90e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	dd5c      	ble.n	800b9d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800b916:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	dd58      	ble.n	800b9d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800b91e:	462a      	mov	r2, r5
 800b920:	ab0a      	add	r3, sp, #40	; 0x28
 800b922:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b926:	6851      	ldr	r1, [r2, #4]
 800b928:	c303      	stmia	r3!, {r0, r1}
 800b92a:	4631      	mov	r1, r6
 800b92c:	a80a      	add	r0, sp, #40	; 0x28
 800b92e:	f7ff fbed 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800b932:	4b38      	ldr	r3, [pc, #224]	; (800ba14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800b934:	2100      	movs	r1, #0
 800b936:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b93a:	4b37      	ldr	r3, [pc, #220]	; (800ba18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b93c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800b940:	aa0a      	add	r2, sp, #40	; 0x28
 800b942:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b946:	910c      	str	r1, [sp, #48]	; 0x30
 800b948:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800b94c:	ab08      	add	r3, sp, #32
 800b94e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b952:	e883 0003 	stmia.w	r3, {r0, r1}
 800b956:	4618      	mov	r0, r3
 800b958:	a90c      	add	r1, sp, #48	; 0x30
 800b95a:	f7ff fbd7 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800b95e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b960:	2b00      	cmp	r3, #0
 800b962:	d13c      	bne.n	800b9de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800b964:	2000      	movs	r0, #0
 800b966:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800b96a:	2600      	movs	r6, #0
 800b96c:	696b      	ldr	r3, [r5, #20]
 800b96e:	a908      	add	r1, sp, #32
 800b970:	682a      	ldr	r2, [r5, #0]
 800b972:	4628      	mov	r0, r5
 800b974:	9305      	str	r3, [sp, #20]
 800b976:	616e      	str	r6, [r5, #20]
 800b978:	6892      	ldr	r2, [r2, #8]
 800b97a:	4790      	blx	r2
 800b97c:	9b05      	ldr	r3, [sp, #20]
 800b97e:	4652      	mov	r2, sl
 800b980:	4649      	mov	r1, r9
 800b982:	616b      	str	r3, [r5, #20]
 800b984:	4628      	mov	r0, r5
 800b986:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800b98a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800b98e:	f7f7 f859 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 800b992:	9a01      	ldr	r2, [sp, #4]
 800b994:	4b22      	ldr	r3, [pc, #136]	; (800ba20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800b996:	4620      	mov	r0, r4
 800b998:	801a      	strh	r2, [r3, #0]
 800b99a:	9a02      	ldr	r2, [sp, #8]
 800b99c:	4b21      	ldr	r3, [pc, #132]	; (800ba24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800b99e:	801a      	strh	r2, [r3, #0]
 800b9a0:	9a03      	ldr	r2, [sp, #12]
 800b9a2:	4b1c      	ldr	r3, [pc, #112]	; (800ba14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800b9a4:	801a      	strh	r2, [r3, #0]
 800b9a6:	4b1c      	ldr	r3, [pc, #112]	; (800ba18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b9a8:	9a04      	ldr	r2, [sp, #16]
 800b9aa:	801a      	strh	r2, [r3, #0]
 800b9ac:	6823      	ldr	r3, [r4, #0]
 800b9ae:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b4:	4798      	blx	r3
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	4798      	blx	r3
 800b9be:	b00f      	add	sp, #60	; 0x3c
 800b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c4:	883b      	ldrh	r3, [r7, #0]
 800b9c6:	f8ab 0000 	strh.w	r0, [fp]
 800b9ca:	f8aa 3000 	strh.w	r3, [sl]
 800b9ce:	e789      	b.n	800b8e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800b9d0:	462a      	mov	r2, r5
 800b9d2:	ab0a      	add	r3, sp, #40	; 0x28
 800b9d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b9d8:	6851      	ldr	r1, [r2, #4]
 800b9da:	c303      	stmia	r3!, {r0, r1}
 800b9dc:	e7a9      	b.n	800b932 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800b9de:	a807      	add	r0, sp, #28
 800b9e0:	f005 ff3c 	bl	801185c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b9e8:	6803      	ldr	r3, [r0, #0]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	4798      	blx	r3
 800b9ee:	4286      	cmp	r6, r0
 800b9f0:	d1b8      	bne.n	800b964 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800b9f2:	f7ff fe59 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800b9f6:	6803      	ldr	r3, [r0, #0]
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	a807      	add	r0, sp, #28
 800b9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fe:	9305      	str	r3, [sp, #20]
 800ba00:	f005 ff2c 	bl	801185c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ba04:	9b05      	ldr	r3, [sp, #20]
 800ba06:	4601      	mov	r1, r0
 800ba08:	4630      	mov	r0, r6
 800ba0a:	4798      	blx	r3
 800ba0c:	f080 0001 	eor.w	r0, r0, #1
 800ba10:	b2c0      	uxtb	r0, r0
 800ba12:	e7a8      	b.n	800b966 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800ba14:	24006ae4 	.word	0x24006ae4
 800ba18:	24006ae6 	.word	0x24006ae6
 800ba1c:	24006ae8 	.word	0x24006ae8
 800ba20:	24006aea 	.word	0x24006aea
 800ba24:	24006aec 	.word	0x24006aec

0800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800ba28:	4b07      	ldr	r3, [pc, #28]	; (800ba48 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800ba2a:	b510      	push	{r4, lr}
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	4604      	mov	r4, r0
 800ba30:	b13b      	cbz	r3, 800ba42 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ba32:	6803      	ldr	r3, [r0, #0]
 800ba34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba36:	4798      	blx	r3
 800ba38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	d101      	bne.n	800ba42 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ba3e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ba40:	bd10      	pop	{r4, pc}
 800ba42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ba44:	e7fc      	b.n	800ba40 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800ba46:	bf00      	nop
 800ba48:	24006aee 	.word	0x24006aee

0800ba4c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800ba4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba50:	b08a      	sub	sp, #40	; 0x28
 800ba52:	4692      	mov	sl, r2
 800ba54:	461d      	mov	r5, r3
 800ba56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba5a:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 800ba5e:	2400      	movs	r4, #0
 800ba60:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800ba64:	4606      	mov	r6, r0
 800ba66:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800ba6a:	fb09 a505 	mla	r5, r9, r5, sl
 800ba6e:	9404      	str	r4, [sp, #16]
 800ba70:	f8ad 8018 	strh.w	r8, [sp, #24]
 800ba74:	f8ad 701a 	strh.w	r7, [sp, #26]
 800ba78:	f88d 4020 	strb.w	r4, [sp, #32]
 800ba7c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ba80:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800ba84:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ba88:	f7ff ffce 	bl	800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ba8c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ba90:	f8ad 901e 	strh.w	r9, [sp, #30]
 800ba94:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ba98:	9505      	str	r5, [sp, #20]
 800ba9a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800ba9e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800baa2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800baa6:	f1b8 0f00 	cmp.w	r8, #0
 800baaa:	d000      	beq.n	800baae <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 800baac:	b937      	cbnz	r7, 800babc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 800baae:	4b0d      	ldr	r3, [pc, #52]	; (800bae4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800bab0:	f240 2102 	movw	r1, #514	; 0x202
 800bab4:	4a0c      	ldr	r2, [pc, #48]	; (800bae8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800bab6:	480d      	ldr	r0, [pc, #52]	; (800baec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800bab8:	f00e f904 	bl	8019cc4 <__assert_func>
 800babc:	6833      	ldr	r3, [r6, #0]
 800babe:	4630      	mov	r0, r6
 800bac0:	9c01      	ldr	r4, [sp, #4]
 800bac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac4:	4798      	blx	r3
 800bac6:	4220      	tst	r0, r4
 800bac8:	d104      	bne.n	800bad4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 800baca:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 800bacc:	f240 2103 	movw	r1, #515	; 0x203
 800bad0:	4a05      	ldr	r2, [pc, #20]	; (800bae8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800bad2:	e7f0      	b.n	800bab6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 800bad4:	6870      	ldr	r0, [r6, #4]
 800bad6:	a901      	add	r1, sp, #4
 800bad8:	6803      	ldr	r3, [r0, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	4798      	blx	r3
 800bade:	b00a      	add	sp, #40	; 0x28
 800bae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae4:	0801cc47 	.word	0x0801cc47
 800bae8:	0801cea0 	.word	0x0801cea0
 800baec:	0801cdf2 	.word	0x0801cdf2
 800baf0:	0801cc7f 	.word	0x0801cc7f

0800baf4 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800baf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf8:	b08b      	sub	sp, #44	; 0x2c
 800bafa:	4693      	mov	fp, r2
 800bafc:	461d      	mov	r5, r3
 800bafe:	2400      	movs	r4, #0
 800bb00:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 800bb04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb08:	468a      	mov	sl, r1
 800bb0a:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 800bb0e:	fb09 b505 	mla	r5, r9, r5, fp
 800bb12:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800bb16:	4606      	mov	r6, r0
 800bb18:	9404      	str	r4, [sp, #16]
 800bb1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb1e:	f7ff ff83 	bl	800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bb22:	f8ad 8018 	strh.w	r8, [sp, #24]
 800bb26:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800bb2a:	f8ad 701a 	strh.w	r7, [sp, #26]
 800bb2e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800bb32:	9505      	str	r5, [sp, #20]
 800bb34:	f8ad 901e 	strh.w	r9, [sp, #30]
 800bb38:	f8cd a010 	str.w	sl, [sp, #16]
 800bb3c:	f8ad 4020 	strh.w	r4, [sp, #32]
 800bb40:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800bb44:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800bb48:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800bb4c:	f1b8 0f00 	cmp.w	r8, #0
 800bb50:	d000      	beq.n	800bb54 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 800bb52:	b937      	cbnz	r7, 800bb62 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 800bb54:	4b0d      	ldr	r3, [pc, #52]	; (800bb8c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800bb56:	f240 2119 	movw	r1, #537	; 0x219
 800bb5a:	4a0d      	ldr	r2, [pc, #52]	; (800bb90 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800bb5c:	480d      	ldr	r0, [pc, #52]	; (800bb94 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800bb5e:	f00e f8b1 	bl	8019cc4 <__assert_func>
 800bb62:	6833      	ldr	r3, [r6, #0]
 800bb64:	4630      	mov	r0, r6
 800bb66:	9c01      	ldr	r4, [sp, #4]
 800bb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6a:	4798      	blx	r3
 800bb6c:	4220      	tst	r0, r4
 800bb6e:	d104      	bne.n	800bb7a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 800bb70:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 800bb72:	f240 211a 	movw	r1, #538	; 0x21a
 800bb76:	4a06      	ldr	r2, [pc, #24]	; (800bb90 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800bb78:	e7f0      	b.n	800bb5c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 800bb7a:	6870      	ldr	r0, [r6, #4]
 800bb7c:	a901      	add	r1, sp, #4
 800bb7e:	6803      	ldr	r3, [r0, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	4798      	blx	r3
 800bb84:	b00b      	add	sp, #44	; 0x2c
 800bb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8a:	bf00      	nop
 800bb8c:	0801ccc4 	.word	0x0801ccc4
 800bb90:	0801cf16 	.word	0x0801cf16
 800bb94:	0801cdf2 	.word	0x0801cdf2
 800bb98:	0801ccfc 	.word	0x0801ccfc

0800bb9c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800bb9c:	b508      	push	{r3, lr}
 800bb9e:	290d      	cmp	r1, #13
 800bba0:	d817      	bhi.n	800bbd2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800bba2:	e8df f001 	tbb	[pc, r1]
 800bba6:	090b      	.short	0x090b
 800bba8:	0d0d0d07 	.word	0x0d0d0d07
 800bbac:	1414140d 	.word	0x1414140d
 800bbb0:	0d0d1414 	.word	0x0d0d1414
 800bbb4:	2020      	movs	r0, #32
 800bbb6:	bd08      	pop	{r3, pc}
 800bbb8:	2018      	movs	r0, #24
 800bbba:	e7fc      	b.n	800bbb6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800bbbc:	2010      	movs	r0, #16
 800bbbe:	e7fa      	b.n	800bbb6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800bbc0:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800bbc2:	f240 2183 	movw	r1, #643	; 0x283
 800bbc6:	4a05      	ldr	r2, [pc, #20]	; (800bbdc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800bbc8:	4805      	ldr	r0, [pc, #20]	; (800bbe0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800bbca:	f00e f87b 	bl	8019cc4 <__assert_func>
 800bbce:	2008      	movs	r0, #8
 800bbd0:	e7f1      	b.n	800bbb6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	e7ef      	b.n	800bbb6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800bbd6:	bf00      	nop
 800bbd8:	0801ce6e 	.word	0x0801ce6e
 800bbdc:	0801d241 	.word	0x0801d241
 800bbe0:	0801cdf2 	.word	0x0801cdf2

0800bbe4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800bbe4:	b570      	push	{r4, r5, r6, lr}
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800bbec:	4616      	mov	r6, r2
 800bbee:	461c      	mov	r4, r3
 800bbf0:	f7ff ffd4 	bl	800bb9c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800bbf4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800bbf8:	10c0      	asrs	r0, r0, #3
 800bbfa:	fb06 5101 	mla	r1, r6, r1, r5
 800bbfe:	fb00 4001 	mla	r0, r0, r1, r4
 800bc02:	bd70      	pop	{r4, r5, r6, pc}

0800bc04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800bc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	b08c      	sub	sp, #48	; 0x30
 800bc0a:	f04f 0c00 	mov.w	ip, #0
 800bc0e:	4604      	mov	r4, r0
 800bc10:	469a      	mov	sl, r3
 800bc12:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 800bc16:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800bc1a:	2d0b      	cmp	r5, #11
 800bc1c:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 800bc20:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800bc24:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800bc28:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 800bc2c:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 800bc30:	f8cd c018 	str.w	ip, [sp, #24]
 800bc34:	d130      	bne.n	800bc98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 800bc36:	2080      	movs	r0, #128	; 0x80
 800bc38:	9205      	str	r2, [sp, #20]
 800bc3a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800bc3e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bc42:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800bc46:	f8ad 7020 	strh.w	r7, [sp, #32]
 800bc4a:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800bc4e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800bc52:	4620      	mov	r0, r4
 800bc54:	f7ff fee8 	bl	800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bc58:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	4651      	mov	r1, sl
 800bc60:	4620      	mov	r0, r4
 800bc62:	e9cd 9800 	strd	r9, r8, [sp]
 800bc66:	f7ff ffbd 	bl	800bbe4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800bc6a:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800bc6e:	9007      	str	r0, [sp, #28]
 800bc70:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800bc74:	2300      	movs	r3, #0
 800bc76:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 800bc7a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800bc7e:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 800bc82:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800bc86:	b107      	cbz	r7, 800bc8a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 800bc88:	b9d6      	cbnz	r6, 800bcc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 800bc8a:	4b17      	ldr	r3, [pc, #92]	; (800bce8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800bc8c:	f240 11c9 	movw	r1, #457	; 0x1c9
 800bc90:	4a16      	ldr	r2, [pc, #88]	; (800bcec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800bc92:	4817      	ldr	r0, [pc, #92]	; (800bcf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800bc94:	f00e f816 	bl	8019cc4 <__assert_func>
 800bc98:	2d02      	cmp	r5, #2
 800bc9a:	d108      	bne.n	800bcae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800bc9c:	2bff      	cmp	r3, #255	; 0xff
 800bc9e:	d104      	bne.n	800bcaa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	bf14      	ite	ne
 800bca4:	2040      	movne	r0, #64	; 0x40
 800bca6:	2020      	moveq	r0, #32
 800bca8:	e7c6      	b.n	800bc38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800bcaa:	2040      	movs	r0, #64	; 0x40
 800bcac:	e7c4      	b.n	800bc38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800bcae:	2bff      	cmp	r3, #255	; 0xff
 800bcb0:	d104      	bne.n	800bcbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	bf14      	ite	ne
 800bcb6:	2004      	movne	r0, #4
 800bcb8:	2001      	moveq	r0, #1
 800bcba:	e7bd      	b.n	800bc38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800bcbc:	2004      	movs	r0, #4
 800bcbe:	e7bb      	b.n	800bc38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	9d03      	ldr	r5, [sp, #12]
 800bcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc8:	4798      	blx	r3
 800bcca:	4228      	tst	r0, r5
 800bccc:	d104      	bne.n	800bcd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 800bcce:	4b09      	ldr	r3, [pc, #36]	; (800bcf4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 800bcd0:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800bcd4:	4a05      	ldr	r2, [pc, #20]	; (800bcec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800bcd6:	e7dc      	b.n	800bc92 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800bcd8:	6860      	ldr	r0, [r4, #4]
 800bcda:	a903      	add	r1, sp, #12
 800bcdc:	6803      	ldr	r3, [r0, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	4798      	blx	r3
 800bce2:	b00c      	add	sp, #48	; 0x30
 800bce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce8:	0801cc47 	.word	0x0801cc47
 800bcec:	0801d0cf 	.word	0x0801d0cf
 800bcf0:	0801cdf2 	.word	0x0801cdf2
 800bcf4:	0801cc7f 	.word	0x0801cc7f

0800bcf8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	b08d      	sub	sp, #52	; 0x34
 800bcfe:	469b      	mov	fp, r3
 800bd00:	2500      	movs	r5, #0
 800bd02:	4604      	mov	r4, r0
 800bd04:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 800bd08:	4692      	mov	sl, r2
 800bd0a:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 800bd0e:	4689      	mov	r9, r1
 800bd10:	2fff      	cmp	r7, #255	; 0xff
 800bd12:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 800bd16:	9506      	str	r5, [sp, #24]
 800bd18:	bf14      	ite	ne
 800bd1a:	2308      	movne	r3, #8
 800bd1c:	2302      	moveq	r3, #2
 800bd1e:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800bd22:	f7ff fe81 	bl	800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bd26:	465a      	mov	r2, fp
 800bd28:	4603      	mov	r3, r0
 800bd2a:	4651      	mov	r1, sl
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	e9cd 8600 	strd	r8, r6, [sp]
 800bd32:	f7ff ff57 	bl	800bbe4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800bd36:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800bd3a:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 800bd3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bd42:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800bd46:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bd4a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800bd4e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800bd52:	9d03      	ldr	r5, [sp, #12]
 800bd54:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800bd58:	6823      	ldr	r3, [r4, #0]
 800bd5a:	9007      	str	r0, [sp, #28]
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 800bd62:	f8cd 9018 	str.w	r9, [sp, #24]
 800bd66:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800bd6a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800bd6e:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800bd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd74:	4798      	blx	r3
 800bd76:	4228      	tst	r0, r5
 800bd78:	d106      	bne.n	800bd88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 800bd7a:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800bd7c:	f44f 710c 	mov.w	r1, #560	; 0x230
 800bd80:	4a06      	ldr	r2, [pc, #24]	; (800bd9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800bd82:	4807      	ldr	r0, [pc, #28]	; (800bda0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 800bd84:	f00d ff9e 	bl	8019cc4 <__assert_func>
 800bd88:	6860      	ldr	r0, [r4, #4]
 800bd8a:	a903      	add	r1, sp, #12
 800bd8c:	6803      	ldr	r3, [r0, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	4798      	blx	r3
 800bd92:	b00d      	add	sp, #52	; 0x34
 800bd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd98:	0801cc7f 	.word	0x0801cc7f
 800bd9c:	0801d1a6 	.word	0x0801d1a6
 800bda0:	0801cdf2 	.word	0x0801cdf2

0800bda4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800bda4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bda8:	461f      	mov	r7, r3
 800bdaa:	4b0b      	ldr	r3, [pc, #44]	; (800bdd8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800bdac:	460d      	mov	r5, r1
 800bdae:	4616      	mov	r6, r2
 800bdb0:	f8b3 8000 	ldrh.w	r8, [r3]
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	f7ff fc77 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800bdba:	6803      	ldr	r3, [r0, #0]
 800bdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbe:	4798      	blx	r3
 800bdc0:	463b      	mov	r3, r7
 800bdc2:	4632      	mov	r2, r6
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	e9cd 8000 	strd	r8, r0, [sp]
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f7ff ff0a 	bl	800bbe4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800bdd0:	b002      	add	sp, #8
 800bdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd6:	bf00      	nop
 800bdd8:	24006aea 	.word	0x24006aea

0800bddc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800bddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bde0:	b08b      	sub	sp, #44	; 0x2c
 800bde2:	4699      	mov	r9, r3
 800bde4:	4690      	mov	r8, r2
 800bde6:	4604      	mov	r4, r0
 800bde8:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800bdec:	2500      	movs	r5, #0
 800bdee:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 800bdf2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800bdf6:	9504      	str	r5, [sp, #16]
 800bdf8:	f8ad 7018 	strh.w	r7, [sp, #24]
 800bdfc:	f8ad 601a 	strh.w	r6, [sp, #26]
 800be00:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800be04:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800be08:	f8ad 301c 	strh.w	r3, [sp, #28]
 800be0c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800be10:	f88d 3020 	strb.w	r3, [sp, #32]
 800be14:	f7ff fe08 	bl	800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800be18:	464a      	mov	r2, r9
 800be1a:	4603      	mov	r3, r0
 800be1c:	4641      	mov	r1, r8
 800be1e:	4620      	mov	r0, r4
 800be20:	f7ff ffc0 	bl	800bda4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800be24:	4b19      	ldr	r3, [pc, #100]	; (800be8c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800be26:	9005      	str	r0, [sp, #20]
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800be2e:	f7ff fc3b 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800be32:	6803      	ldr	r3, [r0, #0]
 800be34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be36:	4798      	blx	r3
 800be38:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800be3c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800be40:	b107      	cbz	r7, 800be44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800be42:	b936      	cbnz	r6, 800be52 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800be44:	4b12      	ldr	r3, [pc, #72]	; (800be90 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800be46:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800be4a:	4a12      	ldr	r2, [pc, #72]	; (800be94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800be4c:	4812      	ldr	r0, [pc, #72]	; (800be98 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800be4e:	f00d ff39 	bl	8019cc4 <__assert_func>
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	4620      	mov	r0, r4
 800be56:	9e01      	ldr	r6, [sp, #4]
 800be58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5a:	4798      	blx	r3
 800be5c:	4230      	tst	r0, r6
 800be5e:	d104      	bne.n	800be6a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800be60:	4b0e      	ldr	r3, [pc, #56]	; (800be9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 800be62:	f240 11e7 	movw	r1, #487	; 0x1e7
 800be66:	4a0b      	ldr	r2, [pc, #44]	; (800be94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800be68:	e7f0      	b.n	800be4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800be6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be6c:	a901      	add	r1, sp, #4
 800be6e:	6860      	ldr	r0, [r4, #4]
 800be70:	9304      	str	r3, [sp, #16]
 800be72:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800be76:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800be7a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800be7e:	6803      	ldr	r3, [r0, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	4798      	blx	r3
 800be84:	b00b      	add	sp, #44	; 0x2c
 800be86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be8a:	bf00      	nop
 800be8c:	24006aea 	.word	0x24006aea
 800be90:	0801cc47 	.word	0x0801cc47
 800be94:	0801cf7b 	.word	0x0801cf7b
 800be98:	0801cdf2 	.word	0x0801cdf2
 800be9c:	0801cc7f 	.word	0x0801cc7f

0800bea0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800bea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea2:	b08d      	sub	sp, #52	; 0x34
 800bea4:	4604      	mov	r4, r0
 800bea6:	466b      	mov	r3, sp
 800bea8:	e883 0006 	stmia.w	r3, {r1, r2}
 800beac:	4b21      	ldr	r3, [pc, #132]	; (800bf34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	b933      	cbnz	r3, 800bec0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800beb2:	4b21      	ldr	r3, [pc, #132]	; (800bf38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800beb4:	f240 2141 	movw	r1, #577	; 0x241
 800beb8:	4a20      	ldr	r2, [pc, #128]	; (800bf3c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800beba:	4821      	ldr	r0, [pc, #132]	; (800bf40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800bebc:	f00d ff02 	bl	8019cc4 <__assert_func>
 800bec0:	2300      	movs	r3, #0
 800bec2:	2501      	movs	r5, #1
 800bec4:	f8bd 6000 	ldrh.w	r6, [sp]
 800bec8:	9306      	str	r3, [sp, #24]
 800beca:	6803      	ldr	r3, [r0, #0]
 800becc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800bed0:	9503      	str	r5, [sp, #12]
 800bed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed4:	4798      	blx	r3
 800bed6:	463a      	mov	r2, r7
 800bed8:	4631      	mov	r1, r6
 800beda:	4603      	mov	r3, r0
 800bedc:	4620      	mov	r0, r4
 800bede:	f7ff ff61 	bl	800bda4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bee2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bee4:	9004      	str	r0, [sp, #16]
 800bee6:	9307      	str	r3, [sp, #28]
 800bee8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800beec:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bef0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bef4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800bef8:	4b12      	ldr	r3, [pc, #72]	; (800bf44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800bf00:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800bf04:	f7ff fbd0 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800bf08:	6803      	ldr	r3, [r0, #0]
 800bf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0c:	4798      	blx	r3
 800bf0e:	23ff      	movs	r3, #255	; 0xff
 800bf10:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800bf14:	a903      	add	r1, sp, #12
 800bf16:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800bf1a:	6860      	ldr	r0, [r4, #4]
 800bf1c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bf20:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800bf24:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bf28:	6803      	ldr	r3, [r0, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	4798      	blx	r3
 800bf2e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bf30:	b00d      	add	sp, #52	; 0x34
 800bf32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf34:	24006aef 	.word	0x24006aef
 800bf38:	0801cd46 	.word	0x0801cd46
 800bf3c:	0801d025 	.word	0x0801d025
 800bf40:	0801cdf2 	.word	0x0801cdf2
 800bf44:	24006aea 	.word	0x24006aea

0800bf48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800bf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4c:	b08c      	sub	sp, #48	; 0x30
 800bf4e:	461e      	mov	r6, r3
 800bf50:	2300      	movs	r3, #0
 800bf52:	4604      	mov	r4, r0
 800bf54:	466d      	mov	r5, sp
 800bf56:	9306      	str	r3, [sp, #24]
 800bf58:	6803      	ldr	r3, [r0, #0]
 800bf5a:	e885 0006 	stmia.w	r5, {r1, r2}
 800bf5e:	2501      	movs	r5, #1
 800bf60:	f8bd 7000 	ldrh.w	r7, [sp]
 800bf64:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800bf68:	9503      	str	r5, [sp, #12]
 800bf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6c:	4798      	blx	r3
 800bf6e:	4642      	mov	r2, r8
 800bf70:	4639      	mov	r1, r7
 800bf72:	4603      	mov	r3, r0
 800bf74:	4620      	mov	r0, r4
 800bf76:	f7ff ff15 	bl	800bda4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bf7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bf7e:	9004      	str	r0, [sp, #16]
 800bf80:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bf84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bf88:	9607      	str	r6, [sp, #28]
 800bf8a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800bf8e:	4b10      	ldr	r3, [pc, #64]	; (800bfd0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800bf96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf98:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800bf9c:	f7ff fb84 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800bfa0:	6803      	ldr	r3, [r0, #0]
 800bfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa4:	4798      	blx	r3
 800bfa6:	23ff      	movs	r3, #255	; 0xff
 800bfa8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800bfac:	a903      	add	r1, sp, #12
 800bfae:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800bfb2:	6860      	ldr	r0, [r4, #4]
 800bfb4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bfb8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800bfbc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bfc0:	6803      	ldr	r3, [r0, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	4798      	blx	r3
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	b00c      	add	sp, #48	; 0x30
 800bfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfce:	bf00      	nop
 800bfd0:	24006aea 	.word	0x24006aea

0800bfd4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	4605      	mov	r5, r0
 800bfda:	ac02      	add	r4, sp, #8
 800bfdc:	e884 0006 	stmia.w	r4, {r1, r2}
 800bfe0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800bfe4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800bfe8:	f7ff fd1e 	bl	800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bfec:	4631      	mov	r1, r6
 800bfee:	4603      	mov	r3, r0
 800bff0:	463a      	mov	r2, r7
 800bff2:	4628      	mov	r0, r5
 800bff4:	f7ff fed6 	bl	800bda4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bff8:	4a05      	ldr	r2, [pc, #20]	; (800c010 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800bffa:	682b      	ldr	r3, [r5, #0]
 800bffc:	8812      	ldrh	r2, [r2, #0]
 800bffe:	9200      	str	r2, [sp, #0]
 800c000:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800c002:	4603      	mov	r3, r0
 800c004:	4628      	mov	r0, r5
 800c006:	e894 0006 	ldmia.w	r4, {r1, r2}
 800c00a:	47b0      	blx	r6
 800c00c:	b005      	add	sp, #20
 800c00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c010:	24006aea 	.word	0x24006aea

0800c014 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800c01a:	4604      	mov	r4, r0
 800c01c:	b19b      	cbz	r3, 800c046 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800c01e:	2002      	movs	r0, #2
 800c020:	f7f5 f944 	bl	80012ac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800c024:	2300      	movs	r3, #0
 800c026:	4620      	mov	r0, r4
 800c028:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800c02c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800c036:	f7ff fcf7 	bl	800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c03a:	4601      	mov	r1, r0
 800c03c:	4620      	mov	r0, r4
 800c03e:	462b      	mov	r3, r5
 800c040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c044:	4718      	bx	r3
 800c046:	bd70      	pop	{r4, r5, r6, pc}

0800c048 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	4605      	mov	r5, r0
 800c04c:	460c      	mov	r4, r1
 800c04e:	2003      	movs	r0, #3
 800c050:	b149      	cbz	r1, 800c066 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800c052:	f7f5 f8fb 	bl	800124c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800c056:	6928      	ldr	r0, [r5, #16]
 800c058:	b168      	cbz	r0, 800c076 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800c05a:	6803      	ldr	r3, [r0, #0]
 800c05c:	2101      	movs	r1, #1
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c064:	4718      	bx	r3
 800c066:	f7f5 f909 	bl	800127c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c06a:	6928      	ldr	r0, [r5, #16]
 800c06c:	b118      	cbz	r0, 800c076 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800c06e:	6803      	ldr	r3, [r0, #0]
 800c070:	4621      	mov	r1, r4
 800c072:	695b      	ldr	r3, [r3, #20]
 800c074:	e7f4      	b.n	800c060 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800c076:	bd70      	pop	{r4, r5, r6, pc}

0800c078 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800c07e:	4604      	mov	r4, r0
 800c080:	460d      	mov	r5, r1
 800c082:	428b      	cmp	r3, r1
 800c084:	d006      	beq.n	800c094 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800c086:	6803      	ldr	r3, [r0, #0]
 800c088:	b929      	cbnz	r1, 800c096 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800c08a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c08e:	4798      	blx	r3
 800c090:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800c094:	bd38      	pop	{r3, r4, r5, pc}
 800c096:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c09a:	e7f8      	b.n	800c08e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800c09c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800c09c:	4b0d      	ldr	r3, [pc, #52]	; (800c0d4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	b95b      	cbnz	r3, 800c0be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c0a6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d007      	beq.n	800c0be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c0ae:	6840      	ldr	r0, [r0, #4]
 800c0b0:	f000 f93c 	bl	800c32c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800c0b4:	b118      	cbz	r0, 800c0be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c0b6:	6862      	ldr	r2, [r4, #4]
 800c0b8:	7a53      	ldrb	r3, [r2, #9]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0fc      	beq.n	800c0b8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800c0be:	f7f5 fa79 	bl	80015b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	f7ff ffd7 	bl	800c078 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f7ff fcac 	bl	800ba28 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	bf00      	nop
 800c0d4:	24006aee 	.word	0x24006aee

0800c0d8 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800c0d8:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800c0dc:	1a13      	subs	r3, r2, r0
 800c0de:	4258      	negs	r0, r3
 800c0e0:	4158      	adcs	r0, r3
 800c0e2:	4770      	bx	lr

0800c0e4 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800c0e4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800c0e8:	1a9b      	subs	r3, r3, r2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	bfdc      	itt	le
 800c0ee:	6882      	ldrle	r2, [r0, #8]
 800c0f0:	189b      	addle	r3, r3, r2
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	bfcc      	ite	gt
 800c0f6:	2000      	movgt	r0, #0
 800c0f8:	2001      	movle	r0, #1
 800c0fa:	4770      	bx	lr

0800c0fc <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800c0fc:	6902      	ldr	r2, [r0, #16]
 800c0fe:	6843      	ldr	r3, [r0, #4]
 800c100:	2024      	movs	r0, #36	; 0x24
 800c102:	fb00 3002 	mla	r0, r0, r2, r3
 800c106:	4770      	bx	lr

0800c108 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800c108:	6803      	ldr	r3, [r0, #0]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	4718      	bx	r3

0800c10e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800c10e:	4770      	bx	lr

0800c110 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800c110:	4770      	bx	lr

0800c112 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800c112:	4770      	bx	lr

0800c114 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800c114:	2301      	movs	r3, #1
 800c116:	b570      	push	{r4, r5, r6, lr}
 800c118:	7203      	strb	r3, [r0, #8]
 800c11a:	4604      	mov	r4, r0
 800c11c:	6840      	ldr	r0, [r0, #4]
 800c11e:	6803      	ldr	r3, [r0, #0]
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	4798      	blx	r3
 800c124:	6803      	ldr	r3, [r0, #0]
 800c126:	4605      	mov	r5, r0
 800c128:	2b40      	cmp	r3, #64	; 0x40
 800c12a:	d039      	beq.n	800c1a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c12c:	d815      	bhi.n	800c15a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800c12e:	2b04      	cmp	r3, #4
 800c130:	d022      	beq.n	800c178 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800c132:	d808      	bhi.n	800c146 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800c134:	2b01      	cmp	r3, #1
 800c136:	d033      	beq.n	800c1a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d108      	bne.n	800c14e <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	4620      	mov	r0, r4
 800c140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c142:	4798      	blx	r3
 800c144:	e025      	b.n	800c192 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800c146:	2b08      	cmp	r3, #8
 800c148:	d01e      	beq.n	800c188 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800c14a:	2b20      	cmp	r3, #32
 800c14c:	d028      	beq.n	800c1a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c14e:	4b17      	ldr	r3, [pc, #92]	; (800c1ac <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800c150:	2188      	movs	r1, #136	; 0x88
 800c152:	4a17      	ldr	r2, [pc, #92]	; (800c1b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800c154:	4817      	ldr	r0, [pc, #92]	; (800c1b4 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800c156:	f00d fdb5 	bl	8019cc4 <__assert_func>
 800c15a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c15e:	d01f      	beq.n	800c1a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c160:	d804      	bhi.n	800c16c <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800c162:	2b80      	cmp	r3, #128	; 0x80
 800c164:	d01c      	beq.n	800c1a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c16a:	e7ef      	b.n	800c14c <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800c16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c170:	d016      	beq.n	800c1a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c176:	e7e0      	b.n	800c13a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800c178:	6823      	ldr	r3, [r4, #0]
 800c17a:	7f01      	ldrb	r1, [r0, #28]
 800c17c:	4620      	mov	r0, r4
 800c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c180:	4798      	blx	r3
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c186:	e006      	b.n	800c196 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	7f01      	ldrb	r1, [r0, #28]
 800c18c:	4620      	mov	r0, r4
 800c18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c190:	4798      	blx	r3
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c196:	4629      	mov	r1, r5
 800c198:	4620      	mov	r0, r4
 800c19a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c19e:	4718      	bx	r3
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a6:	4798      	blx	r3
 800c1a8:	e7eb      	b.n	800c182 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800c1aa:	bf00      	nop
 800c1ac:	0801d28a 	.word	0x0801d28a
 800c1b0:	0801d34c 	.word	0x0801d34c
 800c1b4:	0801d2af 	.word	0x0801d2af

0800c1b8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800c1b8:	b570      	push	{r4, r5, r6, lr}
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	460e      	mov	r6, r1
 800c1be:	6860      	ldr	r0, [r4, #4]
 800c1c0:	6803      	ldr	r3, [r0, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	4798      	blx	r3
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d1f9      	bne.n	800c1be <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800c1ca:	4d0d      	ldr	r5, [pc, #52]	; (800c200 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800c1cc:	6828      	ldr	r0, [r5, #0]
 800c1ce:	6803      	ldr	r3, [r0, #0]
 800c1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1d2:	4798      	blx	r3
 800c1d4:	f7f5 f9fc 	bl	80015d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800c1d8:	6828      	ldr	r0, [r5, #0]
 800c1da:	2101      	movs	r1, #1
 800c1dc:	f7ff ff4c 	bl	800c078 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800c1e0:	6860      	ldr	r0, [r4, #4]
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	6803      	ldr	r3, [r0, #0]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	4798      	blx	r3
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	4798      	blx	r3
 800c1f2:	6828      	ldr	r0, [r5, #0]
 800c1f4:	6803      	ldr	r3, [r0, #0]
 800c1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1fc:	4718      	bx	r3
 800c1fe:	bf00      	nop
 800c200:	24006af0 	.word	0x24006af0

0800c204 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800c204:	b508      	push	{r3, lr}
 800c206:	f7f5 f9d5 	bl	80015b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800c20a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c20e:	f7f5 b9d9 	b.w	80015c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800c212 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800c212:	b510      	push	{r4, lr}
 800c214:	4604      	mov	r4, r0
 800c216:	2114      	movs	r1, #20
 800c218:	f00d fd26 	bl	8019c68 <_ZdlPvj>
 800c21c:	4620      	mov	r0, r4
 800c21e:	bd10      	pop	{r4, pc}

0800c220 <_ZN8touchgfx13DMA_Interface5startEv>:
 800c220:	b510      	push	{r4, lr}
 800c222:	4604      	mov	r4, r0
 800c224:	6840      	ldr	r0, [r0, #4]
 800c226:	6803      	ldr	r3, [r0, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4798      	blx	r3
 800c22c:	b948      	cbnz	r0, 800c242 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c22e:	7a63      	ldrb	r3, [r4, #9]
 800c230:	b13b      	cbz	r3, 800c242 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c232:	7a23      	ldrb	r3, [r4, #8]
 800c234:	b92b      	cbnz	r3, 800c242 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	4620      	mov	r0, r4
 800c23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c240:	4718      	bx	r3
 800c242:	bd10      	pop	{r4, pc}

0800c244 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800c244:	b510      	push	{r4, lr}
 800c246:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800c24a:	1ad2      	subs	r2, r2, r3
 800c24c:	2a00      	cmp	r2, #0
 800c24e:	bfdc      	itt	le
 800c250:	6884      	ldrle	r4, [r0, #8]
 800c252:	1912      	addle	r2, r2, r4
 800c254:	2a01      	cmp	r2, #1
 800c256:	dd17      	ble.n	800c288 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 800c258:	6842      	ldr	r2, [r0, #4]
 800c25a:	2424      	movs	r4, #36	; 0x24
 800c25c:	fb04 2303 	mla	r3, r4, r3, r2
 800c260:	f101 0220 	add.w	r2, r1, #32
 800c264:	f851 4b04 	ldr.w	r4, [r1], #4
 800c268:	4291      	cmp	r1, r2
 800c26a:	f843 4b04 	str.w	r4, [r3], #4
 800c26e:	d1f9      	bne.n	800c264 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800c270:	780a      	ldrb	r2, [r1, #0]
 800c272:	701a      	strb	r2, [r3, #0]
 800c274:	68c3      	ldr	r3, [r0, #12]
 800c276:	6882      	ldr	r2, [r0, #8]
 800c278:	f3bf 8f5b 	dmb	ish
 800c27c:	3301      	adds	r3, #1
 800c27e:	429a      	cmp	r2, r3
 800c280:	bfd8      	it	le
 800c282:	1a9b      	suble	r3, r3, r2
 800c284:	60c3      	str	r3, [r0, #12]
 800c286:	bd10      	pop	{r4, pc}
 800c288:	4b02      	ldr	r3, [pc, #8]	; (800c294 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800c28a:	2136      	movs	r1, #54	; 0x36
 800c28c:	4a02      	ldr	r2, [pc, #8]	; (800c298 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800c28e:	4803      	ldr	r0, [pc, #12]	; (800c29c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800c290:	f00d fd18 	bl	8019cc4 <__assert_func>
 800c294:	0801d2d5 	.word	0x0801d2d5
 800c298:	0801d37c 	.word	0x0801d37c
 800c29c:	0801d2af 	.word	0x0801d2af

0800c2a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800c2a0:	b510      	push	{r4, lr}
 800c2a2:	6803      	ldr	r3, [r0, #0]
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4798      	blx	r3
 800c2aa:	b128      	cbz	r0, 800c2b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800c2ac:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800c2ae:	213c      	movs	r1, #60	; 0x3c
 800c2b0:	4a07      	ldr	r2, [pc, #28]	; (800c2d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800c2b2:	4808      	ldr	r0, [pc, #32]	; (800c2d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800c2b4:	f00d fd06 	bl	8019cc4 <__assert_func>
 800c2b8:	6923      	ldr	r3, [r4, #16]
 800c2ba:	68a2      	ldr	r2, [r4, #8]
 800c2bc:	f3bf 8f5b 	dmb	ish
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	bfd8      	it	le
 800c2c6:	1a9b      	suble	r3, r3, r2
 800c2c8:	6123      	str	r3, [r4, #16]
 800c2ca:	bd10      	pop	{r4, pc}
 800c2cc:	0801d2f8 	.word	0x0801d2f8
 800c2d0:	0801d3ca 	.word	0x0801d3ca
 800c2d4:	0801d2af 	.word	0x0801d2af

0800c2d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	4604      	mov	r4, r0
 800c2dc:	6840      	ldr	r0, [r0, #4]
 800c2de:	6803      	ldr	r3, [r0, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4798      	blx	r3
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	b930      	cbnz	r0, 800c2f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800c2e8:	7a23      	ldrb	r3, [r4, #8]
 800c2ea:	b123      	cbz	r3, 800c2f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800c2ec:	6860      	ldr	r0, [r4, #4]
 800c2ee:	6803      	ldr	r3, [r0, #0]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	4798      	blx	r3
 800c2f4:	7225      	strb	r5, [r4, #8]
 800c2f6:	6860      	ldr	r0, [r4, #4]
 800c2f8:	6803      	ldr	r3, [r0, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4798      	blx	r3
 800c2fe:	b928      	cbnz	r0, 800c30c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	4620      	mov	r0, r4
 800c304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c30a:	4718      	bx	r3
 800c30c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c310:	f7f5 b966 	b.w	80015e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800c314 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800c314:	b510      	push	{r4, lr}
 800c316:	6082      	str	r2, [r0, #8]
 800c318:	2200      	movs	r2, #0
 800c31a:	4c03      	ldr	r4, [pc, #12]	; (800c328 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800c31c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800c320:	e9c0 4100 	strd	r4, r1, [r0]
 800c324:	bd10      	pop	{r4, pc}
 800c326:	bf00      	nop
 800c328:	0801d330 	.word	0x0801d330

0800c32c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800c32c:	6840      	ldr	r0, [r0, #4]
 800c32e:	6803      	ldr	r3, [r0, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4718      	bx	r3

0800c334 <_ZN8touchgfx8TextArea8setWidthEs>:
 800c334:	b530      	push	{r4, r5, lr}
 800c336:	b085      	sub	sp, #20
 800c338:	6803      	ldr	r3, [r0, #0]
 800c33a:	4604      	mov	r4, r0
 800c33c:	8101      	strh	r1, [r0, #8]
 800c33e:	466d      	mov	r5, sp
 800c340:	4601      	mov	r1, r0
 800c342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c346:	343c      	adds	r4, #60	; 0x3c
 800c348:	4628      	mov	r0, r5
 800c34a:	4798      	blx	r3
 800c34c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c354:	b005      	add	sp, #20
 800c356:	bd30      	pop	{r4, r5, pc}

0800c358 <_ZN8touchgfx8TextArea9setHeightEs>:
 800c358:	b530      	push	{r4, r5, lr}
 800c35a:	b085      	sub	sp, #20
 800c35c:	6803      	ldr	r3, [r0, #0]
 800c35e:	4604      	mov	r4, r0
 800c360:	8141      	strh	r1, [r0, #10]
 800c362:	466d      	mov	r5, sp
 800c364:	4601      	mov	r1, r0
 800c366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c36a:	343c      	adds	r4, #60	; 0x3c
 800c36c:	4628      	mov	r0, r5
 800c36e:	4798      	blx	r3
 800c370:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c374:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c378:	b005      	add	sp, #20
 800c37a:	bd30      	pop	{r4, r5, pc}

0800c37c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800c37c:	2200      	movs	r2, #0
 800c37e:	8002      	strh	r2, [r0, #0]
 800c380:	8042      	strh	r2, [r0, #2]
 800c382:	8082      	strh	r2, [r0, #4]
 800c384:	80c2      	strh	r2, [r0, #6]
 800c386:	4770      	bx	lr

0800c388 <_ZN8touchgfx8TextArea8setAlphaEh>:
 800c388:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 800c38c:	4770      	bx	lr

0800c38e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800c38e:	b570      	push	{r4, r5, r6, lr}
 800c390:	6803      	ldr	r3, [r0, #0]
 800c392:	4604      	mov	r4, r0
 800c394:	4615      	mov	r5, r2
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c398:	4798      	blx	r3
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	4629      	mov	r1, r5
 800c39e:	4620      	mov	r0, r4
 800c3a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3a6:	4718      	bx	r3

0800c3a8 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	4770      	bx	lr

0800c3ac <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	4770      	bx	lr

0800c3b0 <_ZN8touchgfx8TextAreaD1Ev>:
 800c3b0:	4770      	bx	lr
	...

0800c3b4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	6803      	ldr	r3, [r0, #0]
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	b28d      	uxth	r5, r1
 800c3bc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c3be:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800c3c0:	4b10      	ldr	r3, [pc, #64]	; (800c404 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	b92b      	cbnz	r3, 800c3d2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800c3c6:	4b10      	ldr	r3, [pc, #64]	; (800c408 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800c3c8:	21ae      	movs	r1, #174	; 0xae
 800c3ca:	4a10      	ldr	r2, [pc, #64]	; (800c40c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800c3cc:	4810      	ldr	r0, [pc, #64]	; (800c410 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800c3ce:	f00d fc79 	bl	8019cc4 <__assert_func>
 800c3d2:	4910      	ldr	r1, [pc, #64]	; (800c414 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800c3d4:	8809      	ldrh	r1, [r1, #0]
 800c3d6:	4291      	cmp	r1, r2
 800c3d8:	d803      	bhi.n	800c3e2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800c3dc:	21af      	movs	r1, #175	; 0xaf
 800c3de:	4a0b      	ldr	r2, [pc, #44]	; (800c40c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800c3e0:	e7f4      	b.n	800c3cc <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800c3e2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800c3e6:	4b0d      	ldr	r3, [pc, #52]	; (800c41c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c3ee:	6803      	ldr	r3, [r0, #0]
 800c3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f2:	4798      	blx	r3
 800c3f4:	1a29      	subs	r1, r5, r0
 800c3f6:	4633      	mov	r3, r6
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	b209      	sxth	r1, r1
 800c3fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c400:	4718      	bx	r3
 800c402:	bf00      	nop
 800c404:	24006b40 	.word	0x24006b40
 800c408:	0801d3fa 	.word	0x0801d3fa
 800c40c:	0801d534 	.word	0x0801d534
 800c410:	0801d43c 	.word	0x0801d43c
 800c414:	24006b44 	.word	0x24006b44
 800c418:	0801d465 	.word	0x0801d465
 800c41c:	24006b48 	.word	0x24006b48

0800c420 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800c420:	4b1b      	ldr	r3, [pc, #108]	; (800c490 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800c422:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c426:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800c428:	4604      	mov	r4, r0
 800c42a:	881b      	ldrh	r3, [r3, #0]
 800c42c:	428b      	cmp	r3, r1
 800c42e:	d92d      	bls.n	800c48c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>
 800c430:	4b18      	ldr	r3, [pc, #96]	; (800c494 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	b92b      	cbnz	r3, 800c442 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x22>
 800c436:	4b18      	ldr	r3, [pc, #96]	; (800c498 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800c438:	21ae      	movs	r1, #174	; 0xae
 800c43a:	4a18      	ldr	r2, [pc, #96]	; (800c49c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800c43c:	4818      	ldr	r0, [pc, #96]	; (800c4a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800c43e:	f00d fc41 	bl	8019cc4 <__assert_func>
 800c442:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800c446:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800c44a:	4b16      	ldr	r3, [pc, #88]	; (800c4a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x84>)
 800c44c:	7855      	ldrb	r5, [r2, #1]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800c454:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800c458:	6833      	ldr	r3, [r6, #0]
 800c45a:	69df      	ldr	r7, [r3, #28]
 800c45c:	4b12      	ldr	r3, [pc, #72]	; (800c4a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x88>)
 800c45e:	6818      	ldr	r0, [r3, #0]
 800c460:	f7f7 fb6e 	bl	8003b40 <_ZNK8touchgfx5Texts7getTextEt>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	4680      	mov	r8, r0
 800c468:	4620      	mov	r0, r4
 800c46a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46c:	4798      	blx	r3
 800c46e:	6823      	ldr	r3, [r4, #0]
 800c470:	4681      	mov	r9, r0
 800c472:	4620      	mov	r0, r4
 800c474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c478:	4798      	blx	r3
 800c47a:	464b      	mov	r3, r9
 800c47c:	9000      	str	r0, [sp, #0]
 800c47e:	4642      	mov	r2, r8
 800c480:	4629      	mov	r1, r5
 800c482:	4630      	mov	r0, r6
 800c484:	47b8      	blx	r7
 800c486:	b003      	add	sp, #12
 800c488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c48c:	2000      	movs	r0, #0
 800c48e:	e7fa      	b.n	800c486 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x66>
 800c490:	24006b44 	.word	0x24006b44
 800c494:	24006b40 	.word	0x24006b40
 800c498:	0801d3fa 	.word	0x0801d3fa
 800c49c:	0801d534 	.word	0x0801d534
 800c4a0:	0801d43c 	.word	0x0801d43c
 800c4a4:	24006b48 	.word	0x24006b48
 800c4a8:	24006b4c 	.word	0x24006b4c

0800c4ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800c4ac:	b40e      	push	{r1, r2, r3}
 800c4ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800c5a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 800c4b6:	b09c      	sub	sp, #112	; 0x70
 800c4b8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	f8b9 3000 	ldrh.w	r3, [r9]
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d965      	bls.n	800c590 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 800c4c4:	ab26      	add	r3, sp, #152	; 0x98
 800c4c6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800c5a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 800c4ca:	9302      	str	r3, [sp, #8]
 800c4cc:	f8da 3000 	ldr.w	r3, [sl]
 800c4d0:	b92b      	cbnz	r3, 800c4de <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x32>
 800c4d2:	4b30      	ldr	r3, [pc, #192]	; (800c594 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 800c4d4:	21ae      	movs	r1, #174	; 0xae
 800c4d6:	4a30      	ldr	r2, [pc, #192]	; (800c598 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 800c4d8:	4830      	ldr	r0, [pc, #192]	; (800c59c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800c4da:	f00d fbf3 	bl	8019cc4 <__assert_func>
 800c4de:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800c5ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800c4e2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800c4e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c4ee:	682b      	ldr	r3, [r5, #0]
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f4:	4798      	blx	r3
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	b207      	sxth	r7, r0
 800c4fa:	a803      	add	r0, sp, #12
 800c4fc:	f003 fee0 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	4628      	mov	r0, r5
 800c504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c506:	4798      	blx	r3
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	4683      	mov	fp, r0
 800c50c:	4628      	mov	r0, r5
 800c50e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c510:	4798      	blx	r3
 800c512:	465b      	mov	r3, fp
 800c514:	9000      	str	r0, [sp, #0]
 800c516:	a803      	add	r0, sp, #12
 800c518:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c51a:	9a02      	ldr	r2, [sp, #8]
 800c51c:	f003 ff3c 	bl	8010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c520:	f8da 3000 	ldr.w	r3, [sl]
 800c524:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d0d2      	beq.n	800c4d2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x26>
 800c52c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c52e:	f8b9 0000 	ldrh.w	r0, [r9]
 800c532:	4290      	cmp	r0, r2
 800c534:	d926      	bls.n	800c584 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 800c536:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800c53a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800c53e:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800c542:	786a      	ldrb	r2, [r5, #1]
 800c544:	8925      	ldrh	r5, [r4, #8]
 800c546:	f8d8 3000 	ldr.w	r3, [r8]
 800c54a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800c54e:	eba5 050c 	sub.w	r5, r5, ip
 800c552:	b22d      	sxth	r5, r5
 800c554:	9500      	str	r5, [sp, #0]
 800c556:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c55a:	a803      	add	r0, sp, #12
 800c55c:	f001 fdca 	bl	800e0f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800c560:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800c564:	b203      	sxth	r3, r0
 800c566:	18b9      	adds	r1, r7, r2
 800c568:	2900      	cmp	r1, #0
 800c56a:	dd0f      	ble.n	800c58c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 800c56c:	3b01      	subs	r3, #1
 800c56e:	fb13 f302 	smulbb	r3, r3, r2
 800c572:	fb16 3300 	smlabb	r3, r6, r0, r3
 800c576:	b21f      	sxth	r7, r3
 800c578:	4638      	mov	r0, r7
 800c57a:	b01c      	add	sp, #112	; 0x70
 800c57c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	b003      	add	sp, #12
 800c582:	4770      	bx	lr
 800c584:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800c586:	21af      	movs	r1, #175	; 0xaf
 800c588:	4a03      	ldr	r2, [pc, #12]	; (800c598 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 800c58a:	e7a5      	b.n	800c4d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2c>
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	dcf3      	bgt.n	800c578 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800c590:	2700      	movs	r7, #0
 800c592:	e7f1      	b.n	800c578 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800c594:	0801d3fa 	.word	0x0801d3fa
 800c598:	0801d534 	.word	0x0801d534
 800c59c:	0801d43c 	.word	0x0801d43c
 800c5a0:	0801d465 	.word	0x0801d465
 800c5a4:	24006b44 	.word	0x24006b44
 800c5a8:	24006b40 	.word	0x24006b40
 800c5ac:	24006b48 	.word	0x24006b48

0800c5b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800c5b0:	4b6d      	ldr	r3, [pc, #436]	; (800c768 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b8>)
 800c5b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	881a      	ldrh	r2, [r3, #0]
 800c5ba:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800c5bc:	b0b9      	sub	sp, #228	; 0xe4
 800c5be:	4681      	mov	r9, r0
 800c5c0:	428a      	cmp	r2, r1
 800c5c2:	9302      	str	r3, [sp, #8]
 800c5c4:	d809      	bhi.n	800c5da <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2a>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5cc:	6083      	str	r3, [r0, #8]
 800c5ce:	e9c0 3200 	strd	r3, r2, [r0]
 800c5d2:	4648      	mov	r0, r9
 800c5d4:	b039      	add	sp, #228	; 0xe4
 800c5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5da:	4a64      	ldr	r2, [pc, #400]	; (800c76c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1bc>)
 800c5dc:	6813      	ldr	r3, [r2, #0]
 800c5de:	4692      	mov	sl, r2
 800c5e0:	b92b      	cbnz	r3, 800c5ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3e>
 800c5e2:	4b63      	ldr	r3, [pc, #396]	; (800c770 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c0>)
 800c5e4:	21ae      	movs	r1, #174	; 0xae
 800c5e6:	4a63      	ldr	r2, [pc, #396]	; (800c774 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 800c5e8:	4863      	ldr	r0, [pc, #396]	; (800c778 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c8>)
 800c5ea:	f00d fb6b 	bl	8019cc4 <__assert_func>
 800c5ee:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800c5f2:	4b62      	ldr	r3, [pc, #392]	; (800c77c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1cc>)
 800c5f4:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800c784 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d4>
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f8db 0000 	ldr.w	r0, [fp]
 800c5fe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c602:	f7f7 fa9d 	bl	8003b40 <_ZNK8touchgfx5Texts7getTextEt>
 800c606:	4680      	mov	r8, r0
 800c608:	682b      	ldr	r3, [r5, #0]
 800c60a:	4628      	mov	r0, r5
 800c60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c60e:	4798      	blx	r3
 800c610:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 800c612:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
 800c616:	4406      	add	r6, r0
 800c618:	f8cd b00c 	str.w	fp, [sp, #12]
 800c61c:	b2b6      	uxth	r6, r6
 800c61e:	2f00      	cmp	r7, #0
 800c620:	f040 80b2 	bne.w	800c788 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d8>
 800c624:	a806      	add	r0, sp, #24
 800c626:	f003 fe4b 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800c62a:	682b      	ldr	r3, [r5, #0]
 800c62c:	4628      	mov	r0, r5
 800c62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c630:	4798      	blx	r3
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	4683      	mov	fp, r0
 800c636:	4628      	mov	r0, r5
 800c638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c63a:	4798      	blx	r3
 800c63c:	6822      	ldr	r2, [r4, #0]
 800c63e:	9005      	str	r0, [sp, #20]
 800c640:	4620      	mov	r0, r4
 800c642:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c644:	4790      	blx	r2
 800c646:	6821      	ldr	r1, [r4, #0]
 800c648:	9004      	str	r0, [sp, #16]
 800c64a:	4620      	mov	r0, r4
 800c64c:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 800c650:	4788      	blx	r1
 800c652:	9a04      	ldr	r2, [sp, #16]
 800c654:	4641      	mov	r1, r8
 800c656:	46b8      	mov	r8, r7
 800c658:	9001      	str	r0, [sp, #4]
 800c65a:	a806      	add	r0, sp, #24
 800c65c:	9200      	str	r2, [sp, #0]
 800c65e:	465a      	mov	r2, fp
 800c660:	9b05      	ldr	r3, [sp, #20]
 800c662:	f003 feae 	bl	80103c2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800c666:	f8da 3000 	ldr.w	r3, [sl]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0b9      	beq.n	800c5e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 800c66e:	9902      	ldr	r1, [sp, #8]
 800c670:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c672:	8809      	ldrh	r1, [r1, #0]
 800c674:	4291      	cmp	r1, r2
 800c676:	d803      	bhi.n	800c680 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xd0>
 800c678:	4b41      	ldr	r3, [pc, #260]	; (800c780 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d0>)
 800c67a:	21af      	movs	r1, #175	; 0xaf
 800c67c:	4a3d      	ldr	r2, [pc, #244]	; (800c774 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 800c67e:	e7b3      	b.n	800c5e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x38>
 800c680:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800c684:	4629      	mov	r1, r5
 800c686:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c68a:	a806      	add	r0, sp, #24
 800c68c:	785b      	ldrb	r3, [r3, #1]
 800c68e:	3701      	adds	r7, #1
 800c690:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c694:	b2bf      	uxth	r7, r7
 800c696:	f001 fa81 	bl	800db9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800c69a:	4580      	cmp	r8, r0
 800c69c:	bfb8      	it	lt
 800c69e:	fa0f f880 	sxthlt.w	r8, r0
 800c6a2:	a806      	add	r0, sp, #24
 800c6a4:	f003 fe34 	bl	8010310 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d0dc      	beq.n	800c666 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb6>
 800c6ac:	fb16 f607 	smulbb	r6, r6, r7
 800c6b0:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 800c6b2:	1bf6      	subs	r6, r6, r7
 800c6b4:	b2b6      	uxth	r6, r6
 800c6b6:	fa0f fb86 	sxth.w	fp, r6
 800c6ba:	f1bb 0f00 	cmp.w	fp, #0
 800c6be:	dd06      	ble.n	800c6ce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x11e>
 800c6c0:	682b      	ldr	r3, [r5, #0]
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	4798      	blx	r3
 800c6c8:	4430      	add	r0, r6
 800c6ca:	fa0f fb80 	sxth.w	fp, r0
 800c6ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6dc:	bf0c      	ite	eq
 800c6de:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 800c6e2:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 800c6e6:	4798      	blx	r3
 800c6e8:	2801      	cmp	r0, #1
 800c6ea:	fa1f f288 	uxth.w	r2, r8
 800c6ee:	f000 80f7 	beq.w	800c8e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x330>
 800c6f2:	2802      	cmp	r0, #2
 800c6f4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800c6f8:	f000 80f9 	beq.w	800c8ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x33e>
 800c6fc:	7a29      	ldrb	r1, [r5, #8]
 800c6fe:	b21b      	sxth	r3, r3
 800c700:	7a68      	ldrb	r0, [r5, #9]
 800c702:	1a5b      	subs	r3, r3, r1
 800c704:	4401      	add	r1, r0
 800c706:	b29b      	uxth	r3, r3
 800c708:	440a      	add	r2, r1
 800c70a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800c70e:	b21e      	sxth	r6, r3
 800c710:	b292      	uxth	r2, r2
 800c712:	2902      	cmp	r1, #2
 800c714:	b217      	sxth	r7, r2
 800c716:	f000 80ed 	beq.w	800c8f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x344>
 800c71a:	2903      	cmp	r1, #3
 800c71c:	f000 80f3 	beq.w	800c906 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x356>
 800c720:	2901      	cmp	r1, #1
 800c722:	f040 80f9 	bne.w	800c918 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x368>
 800c726:	8923      	ldrh	r3, [r4, #8]
 800c728:	463a      	mov	r2, r7
 800c72a:	4635      	mov	r5, r6
 800c72c:	465f      	mov	r7, fp
 800c72e:	eba3 030b 	sub.w	r3, r3, fp
 800c732:	4693      	mov	fp, r2
 800c734:	b21e      	sxth	r6, r3
 800c736:	f8da 3000 	ldr.w	r3, [sl]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f43f af51 	beq.w	800c5e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 800c740:	9b02      	ldr	r3, [sp, #8]
 800c742:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	428b      	cmp	r3, r1
 800c748:	d996      	bls.n	800c678 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	6818      	ldr	r0, [r3, #0]
 800c74e:	f7f7 f9f7 	bl	8003b40 <_ZNK8touchgfx5Texts7getTextEt>
 800c752:	f8a9 6000 	strh.w	r6, [r9]
 800c756:	f8a9 5002 	strh.w	r5, [r9, #2]
 800c75a:	f8a9 7004 	strh.w	r7, [r9, #4]
 800c75e:	f8a9 b006 	strh.w	fp, [r9, #6]
 800c762:	f8c9 0008 	str.w	r0, [r9, #8]
 800c766:	e734      	b.n	800c5d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x22>
 800c768:	24006b44 	.word	0x24006b44
 800c76c:	24006b40 	.word	0x24006b40
 800c770:	0801d3fa 	.word	0x0801d3fa
 800c774:	0801d534 	.word	0x0801d534
 800c778:	0801d43c 	.word	0x0801d43c
 800c77c:	24006b48 	.word	0x24006b48
 800c780:	0801d465 	.word	0x0801d465
 800c784:	24006b4c 	.word	0x24006b4c
 800c788:	af1f      	add	r7, sp, #124	; 0x7c
 800c78a:	4638      	mov	r0, r7
 800c78c:	f003 fd98 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	4628      	mov	r0, r5
 800c794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c796:	4798      	blx	r3
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	4683      	mov	fp, r0
 800c79c:	4628      	mov	r0, r5
 800c79e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7a0:	4798      	blx	r3
 800c7a2:	6822      	ldr	r2, [r4, #0]
 800c7a4:	9005      	str	r0, [sp, #20]
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c7aa:	4790      	blx	r2
 800c7ac:	6821      	ldr	r1, [r4, #0]
 800c7ae:	9004      	str	r0, [sp, #16]
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 800c7b6:	4788      	blx	r1
 800c7b8:	9a04      	ldr	r2, [sp, #16]
 800c7ba:	9001      	str	r0, [sp, #4]
 800c7bc:	4641      	mov	r1, r8
 800c7be:	9200      	str	r2, [sp, #0]
 800c7c0:	4638      	mov	r0, r7
 800c7c2:	465a      	mov	r2, fp
 800c7c4:	9b05      	ldr	r3, [sp, #20]
 800c7c6:	f003 fdfc 	bl	80103c2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800c7ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c7ce:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c7d2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800c7d6:	f9b4 b008 	ldrsh.w	fp, [r4, #8]
 800c7da:	bf12      	itee	ne
 800c7dc:	4613      	movne	r3, r2
 800c7de:	465b      	moveq	r3, fp
 800c7e0:	4693      	moveq	fp, r2
 800c7e2:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 800c7e6:	1a9b      	subs	r3, r3, r2
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	f8da 3000 	ldr.w	r3, [sl]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f43f aef7 	beq.w	800c5e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 800c7f4:	9802      	ldr	r0, [sp, #8]
 800c7f6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800c7f8:	8800      	ldrh	r0, [r0, #0]
 800c7fa:	4288      	cmp	r0, r1
 800c7fc:	f67f af3c 	bls.w	800c678 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 800c800:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800c804:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800c808:	7859      	ldrb	r1, [r3, #1]
 800c80a:	2300      	movs	r3, #0
 800c80c:	9707      	str	r7, [sp, #28]
 800c80e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800c812:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c816:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800c81a:	f88d 1020 	strb.w	r1, [sp, #32]
 800c81e:	9509      	str	r5, [sp, #36]	; 0x24
 800c820:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800c824:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800c828:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800c82c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800c830:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800c834:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800c838:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800c83c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 800c840:	b350      	cbz	r0, 800c898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 800c842:	682b      	ldr	r3, [r5, #0]
 800c844:	4628      	mov	r0, r5
 800c846:	695b      	ldr	r3, [r3, #20]
 800c848:	4798      	blx	r3
 800c84a:	4680      	mov	r8, r0
 800c84c:	b320      	cbz	r0, 800c898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 800c84e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c850:	4641      	mov	r1, r8
 800c852:	6803      	ldr	r3, [r0, #0]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	4798      	blx	r3
 800c858:	4607      	mov	r7, r0
 800c85a:	b1e8      	cbz	r0, 800c898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 800c85c:	7b43      	ldrb	r3, [r0, #13]
 800c85e:	7a82      	ldrb	r2, [r0, #10]
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c866:	4313      	orrs	r3, r2
 800c868:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800c86c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 800c870:	2b04      	cmp	r3, #4
 800c872:	d111      	bne.n	800c898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 800c874:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c876:	463a      	mov	r2, r7
 800c878:	4641      	mov	r1, r8
 800c87a:	6803      	ldr	r3, [r0, #0]
 800c87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87e:	4798      	blx	r3
 800c880:	7b7b      	ldrb	r3, [r7, #13]
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800c888:	7abb      	ldrb	r3, [r7, #10]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	4418      	add	r0, r3
 800c88e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800c892:	4418      	add	r0, r3
 800c894:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 800c898:	b233      	sxth	r3, r6
 800c89a:	2700      	movs	r7, #0
 800c89c:	005a      	lsls	r2, r3, #1
 800c89e:	46b8      	mov	r8, r7
 800c8a0:	455a      	cmp	r2, fp
 800c8a2:	a806      	add	r0, sp, #24
 800c8a4:	9305      	str	r3, [sp, #20]
 800c8a6:	f107 0701 	add.w	r7, r7, #1
 800c8aa:	bfd4      	ite	le
 800c8ac:	2100      	movle	r1, #0
 800c8ae:	2101      	movgt	r1, #1
 800c8b0:	9204      	str	r2, [sp, #16]
 800c8b2:	f001 fb50 	bl	800df56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800c8b6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800c8ba:	ebab 0b06 	sub.w	fp, fp, r6
 800c8be:	b2bf      	uxth	r7, r7
 800c8c0:	4588      	cmp	r8, r1
 800c8c2:	fa0f fb8b 	sxth.w	fp, fp
 800c8c6:	bfb8      	it	lt
 800c8c8:	fa0f f881 	sxthlt.w	r8, r1
 800c8cc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800c8d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8d4:	2900      	cmp	r1, #0
 800c8d6:	f43f aee9 	beq.w	800c6ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800c8da:	455b      	cmp	r3, fp
 800c8dc:	dbe0      	blt.n	800c8a0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f0>
 800c8de:	e6e5      	b.n	800c6ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800c8e0:	eba6 0308 	sub.w	r3, r6, r8
 800c8e4:	f04f 0802 	mov.w	r8, #2
 800c8e8:	fb93 f3f8 	sdiv	r3, r3, r8
 800c8ec:	e706      	b.n	800c6fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 800c8ee:	4413      	add	r3, r2
 800c8f0:	1af3      	subs	r3, r6, r3
 800c8f2:	e703      	b.n	800c6fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 800c8f4:	8926      	ldrh	r6, [r4, #8]
 800c8f6:	8965      	ldrh	r5, [r4, #10]
 800c8f8:	1ab2      	subs	r2, r6, r2
 800c8fa:	eba5 050b 	sub.w	r5, r5, fp
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	b22d      	sxth	r5, r5
 800c902:	b21e      	sxth	r6, r3
 800c904:	e717      	b.n	800c736 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 800c906:	8965      	ldrh	r5, [r4, #10]
 800c908:	2600      	movs	r6, #0
 800c90a:	1aaa      	subs	r2, r5, r2
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	b21d      	sxth	r5, r3
 800c910:	463b      	mov	r3, r7
 800c912:	465f      	mov	r7, fp
 800c914:	469b      	mov	fp, r3
 800c916:	e70e      	b.n	800c736 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 800c918:	2500      	movs	r5, #0
 800c91a:	e70c      	b.n	800c736 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>

0800c91c <_ZN8touchgfx8TextAreaD0Ev>:
 800c91c:	b510      	push	{r4, lr}
 800c91e:	4604      	mov	r4, r0
 800c920:	2148      	movs	r1, #72	; 0x48
 800c922:	f00d f9a1 	bl	8019c68 <_ZdlPvj>
 800c926:	4620      	mov	r0, r4
 800c928:	bd10      	pop	{r4, pc}
	...

0800c92c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800c92c:	b508      	push	{r3, lr}
 800c92e:	4b0b      	ldr	r3, [pc, #44]	; (800c95c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x30>)
 800c930:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c932:	881b      	ldrh	r3, [r3, #0]
 800c934:	4293      	cmp	r3, r2
 800c936:	d90e      	bls.n	800c956 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x2a>
 800c938:	4b09      	ldr	r3, [pc, #36]	; (800c960 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x34>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	b92b      	cbnz	r3, 800c94a <_ZNK8touchgfx8TextArea12getAlignmentEv+0x1e>
 800c93e:	4b09      	ldr	r3, [pc, #36]	; (800c964 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x38>)
 800c940:	21ae      	movs	r1, #174	; 0xae
 800c942:	4a09      	ldr	r2, [pc, #36]	; (800c968 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x3c>)
 800c944:	4809      	ldr	r0, [pc, #36]	; (800c96c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x40>)
 800c946:	f00d f9bd 	bl	8019cc4 <__assert_func>
 800c94a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800c94e:	7858      	ldrb	r0, [r3, #1]
 800c950:	f000 0003 	and.w	r0, r0, #3
 800c954:	bd08      	pop	{r3, pc}
 800c956:	2000      	movs	r0, #0
 800c958:	e7fc      	b.n	800c954 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x28>
 800c95a:	bf00      	nop
 800c95c:	24006b44 	.word	0x24006b44
 800c960:	24006b40 	.word	0x24006b40
 800c964:	0801d3fa 	.word	0x0801d3fa
 800c968:	0801d534 	.word	0x0801d534
 800c96c:	0801d43c 	.word	0x0801d43c

0800c970 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800c970:	4b16      	ldr	r3, [pc, #88]	; (800c9cc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800c972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c976:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800c978:	4604      	mov	r4, r0
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	428b      	cmp	r3, r1
 800c97e:	d921      	bls.n	800c9c4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x54>
 800c980:	6803      	ldr	r3, [r0, #0]
 800c982:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800c984:	4b12      	ldr	r3, [pc, #72]	; (800c9d0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x60>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	b92b      	cbnz	r3, 800c996 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x26>
 800c98a:	4b12      	ldr	r3, [pc, #72]	; (800c9d4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x64>)
 800c98c:	21ae      	movs	r1, #174	; 0xae
 800c98e:	4a12      	ldr	r2, [pc, #72]	; (800c9d8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x68>)
 800c990:	4812      	ldr	r0, [pc, #72]	; (800c9dc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x6c>)
 800c992:	f00d f997 	bl	8019cc4 <__assert_func>
 800c996:	4b12      	ldr	r3, [pc, #72]	; (800c9e0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x70>)
 800c998:	6818      	ldr	r0, [r3, #0]
 800c99a:	f7f7 f8d1 	bl	8003b40 <_ZNK8touchgfx5Texts7getTextEt>
 800c99e:	6823      	ldr	r3, [r4, #0]
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9a6:	4798      	blx	r3
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	4607      	mov	r7, r0
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9b2:	4798      	blx	r3
 800c9b4:	463a      	mov	r2, r7
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	46ac      	mov	ip, r5
 800c9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c2:	4760      	bx	ip
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ca:	bf00      	nop
 800c9cc:	24006b44 	.word	0x24006b44
 800c9d0:	24006b40 	.word	0x24006b40
 800c9d4:	0801d3fa 	.word	0x0801d3fa
 800c9d8:	0801d534 	.word	0x0801d534
 800c9dc:	0801d43c 	.word	0x0801d43c
 800c9e0:	24006b4c 	.word	0x24006b4c

0800c9e4 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800c9e4:	b513      	push	{r0, r1, r4, lr}
 800c9e6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	b343      	cbz	r3, 800ca40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800c9ee:	4b1b      	ldr	r3, [pc, #108]	; (800ca5c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x78>)
 800c9f0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	428b      	cmp	r3, r1
 800c9f6:	d923      	bls.n	800ca40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800c9f8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dd1f      	ble.n	800ca40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800ca00:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dd1b      	ble.n	800ca40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800ca08:	4b15      	ldr	r3, [pc, #84]	; (800ca60 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x7c>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	b92b      	cbnz	r3, 800ca1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x36>
 800ca0e:	4b15      	ldr	r3, [pc, #84]	; (800ca64 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x80>)
 800ca10:	21ae      	movs	r1, #174	; 0xae
 800ca12:	4a15      	ldr	r2, [pc, #84]	; (800ca68 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x84>)
 800ca14:	4815      	ldr	r0, [pc, #84]	; (800ca6c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x88>)
 800ca16:	f00d f955 	bl	8019cc4 <__assert_func>
 800ca1a:	4b15      	ldr	r3, [pc, #84]	; (800ca70 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x8c>)
 800ca1c:	6818      	ldr	r0, [r3, #0]
 800ca1e:	f7f7 f88f 	bl	8003b40 <_ZNK8touchgfx5Texts7getTextEt>
 800ca22:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800ca26:	6822      	ldr	r2, [r4, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	db06      	blt.n	800ca3a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x56>
 800ca2c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	db02      	blt.n	800ca3a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x56>
 800ca34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ca36:	4298      	cmp	r0, r3
 800ca38:	d004      	beq.n	800ca44 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x60>
 800ca3a:	6953      	ldr	r3, [r2, #20]
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	4798      	blx	r3
 800ca40:	b002      	add	sp, #8
 800ca42:	bd10      	pop	{r4, pc}
 800ca44:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ca48:	466b      	mov	r3, sp
 800ca4a:	6912      	ldr	r2, [r2, #16]
 800ca4c:	c903      	ldmia	r1, {r0, r1}
 800ca4e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ca52:	4619      	mov	r1, r3
 800ca54:	4620      	mov	r0, r4
 800ca56:	4790      	blx	r2
 800ca58:	e7f2      	b.n	800ca40 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800ca5a:	bf00      	nop
 800ca5c:	24006b44 	.word	0x24006b44
 800ca60:	24006b40 	.word	0x24006b40
 800ca64:	0801d3fa 	.word	0x0801d3fa
 800ca68:	0801d534 	.word	0x0801d534
 800ca6c:	0801d43c 	.word	0x0801d43c
 800ca70:	24006b4c 	.word	0x24006b4c

0800ca74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800ca74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	4d56      	ldr	r5, [pc, #344]	; (800cbd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x160>)
 800ca7a:	b08e      	sub	sp, #56	; 0x38
 800ca7c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800ca7e:	4604      	mov	r4, r0
 800ca80:	882b      	ldrh	r3, [r5, #0]
 800ca82:	4293      	cmp	r3, r2
 800ca84:	f240 80a3 	bls.w	800cbce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 800ca88:	6808      	ldr	r0, [r1, #0]
 800ca8a:	ab05      	add	r3, sp, #20
 800ca8c:	6849      	ldr	r1, [r1, #4]
 800ca8e:	4e52      	ldr	r6, [pc, #328]	; (800cbd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x164>)
 800ca90:	c303      	stmia	r3!, {r0, r1}
 800ca92:	6833      	ldr	r3, [r6, #0]
 800ca94:	b92b      	cbnz	r3, 800caa2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800ca96:	4b51      	ldr	r3, [pc, #324]	; (800cbdc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x168>)
 800ca98:	21ae      	movs	r1, #174	; 0xae
 800ca9a:	4a51      	ldr	r2, [pc, #324]	; (800cbe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16c>)
 800ca9c:	4851      	ldr	r0, [pc, #324]	; (800cbe4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x170>)
 800ca9e:	f00d f911 	bl	8019cc4 <__assert_func>
 800caa2:	4f51      	ldr	r7, [pc, #324]	; (800cbe8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x174>)
 800caa4:	4611      	mov	r1, r2
 800caa6:	6838      	ldr	r0, [r7, #0]
 800caa8:	f7f7 f84a 	bl	8003b40 <_ZNK8touchgfx5Texts7getTextEt>
 800caac:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	db11      	blt.n	800cad8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 800cab4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800cab8:	2b00      	cmp	r3, #0
 800caba:	db0d      	blt.n	800cad8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 800cabc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cabe:	4298      	cmp	r0, r3
 800cac0:	d10a      	bne.n	800cad8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 800cac2:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800cac6:	ab09      	add	r3, sp, #36	; 0x24
 800cac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cacc:	e883 0003 	stmia.w	r3, {r0, r1}
 800cad0:	4619      	mov	r1, r3
 800cad2:	a805      	add	r0, sp, #20
 800cad4:	f7fe fb1a 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800cad8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	dd76      	ble.n	800cbce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 800cae0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	dd72      	ble.n	800cbce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 800cae8:	6833      	ldr	r3, [r6, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0d3      	beq.n	800ca96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 800caee:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800caf0:	8829      	ldrh	r1, [r5, #0]
 800caf2:	4291      	cmp	r1, r2
 800caf4:	d803      	bhi.n	800cafe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x8a>
 800caf6:	4b3d      	ldr	r3, [pc, #244]	; (800cbec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x178>)
 800caf8:	21af      	movs	r1, #175	; 0xaf
 800cafa:	4a39      	ldr	r2, [pc, #228]	; (800cbe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16c>)
 800cafc:	e7ce      	b.n	800ca9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
 800cafe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800cb02:	4b3b      	ldr	r3, [pc, #236]	; (800cbf0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x17c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800cb0a:	f1b8 0f00 	cmp.w	r8, #0
 800cb0e:	d05e      	beq.n	800cbce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	4620      	mov	r0, r4
 800cb14:	f894 9036 	ldrb.w	r9, [r4, #54]	; 0x36
 800cb18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb1a:	4798      	blx	r3
 800cb1c:	6833      	ldr	r3, [r6, #0]
 800cb1e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800cb22:	f894 c038 	ldrb.w	ip, [r4, #56]	; 0x38
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d0b5      	beq.n	800ca96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 800cb2a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800cb2c:	f8b5 e000 	ldrh.w	lr, [r5]
 800cb30:	4596      	cmp	lr, r2
 800cb32:	d9e0      	bls.n	800caf6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 800cb34:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800cb38:	f894 a037 	ldrb.w	sl, [r4, #55]	; 0x37
 800cb3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cb3e:	785b      	ldrb	r3, [r3, #1]
 800cb40:	f894 e039 	ldrb.w	lr, [r4, #57]	; 0x39
 800cb44:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800cb48:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800cb4c:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 800cb50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb54:	4b27      	ldr	r3, [pc, #156]	; (800cbf4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x180>)
 800cb56:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb5e:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800cb62:	f88d 9032 	strb.w	r9, [sp, #50]	; 0x32
 800cb66:	f88d a033 	strb.w	sl, [sp, #51]	; 0x33
 800cb6a:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 800cb6e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cb72:	b122      	cbz	r2, 800cb7e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x10a>
 800cb74:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 800cb78:	f1b8 0f00 	cmp.w	r8, #0
 800cb7c:	d101      	bne.n	800cb82 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x10e>
 800cb7e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800cb82:	f10d 091c 	add.w	r9, sp, #28
 800cb86:	4621      	mov	r1, r4
 800cb88:	4648      	mov	r0, r9
 800cb8a:	f002 ffe1 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cb8e:	6833      	ldr	r3, [r6, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d080      	beq.n	800ca96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 800cb94:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800cb96:	882b      	ldrh	r3, [r5, #0]
 800cb98:	428b      	cmp	r3, r1
 800cb9a:	d9ac      	bls.n	800caf6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 800cb9c:	6838      	ldr	r0, [r7, #0]
 800cb9e:	f7f6 ffcf 	bl	8003b40 <_ZNK8touchgfx5Texts7getTextEt>
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	4605      	mov	r5, r0
 800cba6:	4620      	mov	r0, r4
 800cba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbaa:	4798      	blx	r3
 800cbac:	6823      	ldr	r3, [r4, #0]
 800cbae:	4606      	mov	r6, r0
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbb6:	4798      	blx	r3
 800cbb8:	ab09      	add	r3, sp, #36	; 0x24
 800cbba:	9501      	str	r5, [sp, #4]
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	ab05      	add	r3, sp, #20
 800cbc0:	e9cd 6002 	strd	r6, r0, [sp, #8]
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	e899 0006 	ldmia.w	r9, {r1, r2}
 800cbca:	f7f6 ff6b 	bl	8003aa4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800cbce:	b00e      	add	sp, #56	; 0x38
 800cbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd4:	24006b44 	.word	0x24006b44
 800cbd8:	24006b40 	.word	0x24006b40
 800cbdc:	0801d3fa 	.word	0x0801d3fa
 800cbe0:	0801d534 	.word	0x0801d534
 800cbe4:	0801d43c 	.word	0x0801d43c
 800cbe8:	24006b4c 	.word	0x24006b4c
 800cbec:	0801d465 	.word	0x0801d465
 800cbf0:	24006b48 	.word	0x24006b48
 800cbf4:	24006af0 	.word	0x24006af0

0800cbf8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	6803      	ldr	r3, [r0, #0]
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	4615      	mov	r5, r2
 800cc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc02:	4798      	blx	r3
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	4629      	mov	r1, r5
 800cc08:	4620      	mov	r0, r4
 800cc0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc10:	4718      	bx	r3
	...

0800cc14 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800cc14:	b538      	push	{r3, r4, r5, lr}
 800cc16:	4b0e      	ldr	r3, [pc, #56]	; (800cc50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800cc18:	4604      	mov	r4, r0
 800cc1a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d214      	bcs.n	800cc4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800cc22:	6803      	ldr	r3, [r0, #0]
 800cc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc26:	4798      	blx	r3
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc30:	4798      	blx	r3
 800cc32:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800cc36:	b22d      	sxth	r5, r5
 800cc38:	4601      	mov	r1, r0
 800cc3a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800cc3e:	bf06      	itte	eq
 800cc40:	4602      	moveq	r2, r0
 800cc42:	4629      	moveq	r1, r5
 800cc44:	462a      	movne	r2, r5
 800cc46:	4620      	mov	r0, r4
 800cc48:	f7ff ffd6 	bl	800cbf8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800cc4c:	bd38      	pop	{r3, r4, r5, pc}
 800cc4e:	bf00      	nop
 800cc50:	24006b44 	.word	0x24006b44

0800cc54 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800cc54:	b530      	push	{r4, r5, lr}
 800cc56:	888b      	ldrh	r3, [r1, #4]
 800cc58:	b085      	sub	sp, #20
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	8583      	strh	r3, [r0, #44]	; 0x2c
 800cc5e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800cc62:	b923      	cbnz	r3, 800cc6e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800cc64:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800cc68:	b90b      	cbnz	r3, 800cc6e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800cc6a:	f7ff ffd3 	bl	800cc14 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	466d      	mov	r5, sp
 800cc72:	4621      	mov	r1, r4
 800cc74:	343c      	adds	r4, #60	; 0x3c
 800cc76:	4628      	mov	r0, r5
 800cc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc7c:	4798      	blx	r3
 800cc7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cc82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc86:	b005      	add	sp, #20
 800cc88:	bd30      	pop	{r4, r5, pc}

0800cc8a <_ZNK8touchgfx3Box12getSolidRectEv>:
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	8083      	strh	r3, [r0, #4]
 800cc8e:	80c3      	strh	r3, [r0, #6]
 800cc90:	8003      	strh	r3, [r0, #0]
 800cc92:	8043      	strh	r3, [r0, #2]
 800cc94:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800cc98:	2bff      	cmp	r3, #255	; 0xff
 800cc9a:	bf01      	itttt	eq
 800cc9c:	890b      	ldrheq	r3, [r1, #8]
 800cc9e:	8083      	strheq	r3, [r0, #4]
 800cca0:	894b      	ldrheq	r3, [r1, #10]
 800cca2:	80c3      	strheq	r3, [r0, #6]
 800cca4:	4770      	bx	lr
	...

0800cca8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800cca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccaa:	4604      	mov	r4, r0
 800ccac:	466b      	mov	r3, sp
 800ccae:	6808      	ldr	r0, [r1, #0]
 800ccb0:	6849      	ldr	r1, [r1, #4]
 800ccb2:	c303      	stmia	r3!, {r0, r1}
 800ccb4:	6823      	ldr	r3, [r4, #0]
 800ccb6:	4669      	mov	r1, sp
 800ccb8:	4620      	mov	r0, r4
 800ccba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbc:	4798      	blx	r3
 800ccbe:	4b08      	ldr	r3, [pc, #32]	; (800cce0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ccc6:	b10a      	cbz	r2, 800cccc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800ccc8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ccca:	b900      	cbnz	r0, 800ccce <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800cccc:	6898      	ldr	r0, [r3, #8]
 800ccce:	6803      	ldr	r3, [r0, #0]
 800ccd0:	4669      	mov	r1, sp
 800ccd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ccd4:	6a1d      	ldr	r5, [r3, #32]
 800ccd6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800ccda:	47a8      	blx	r5
 800ccdc:	b003      	add	sp, #12
 800ccde:	bd30      	pop	{r4, r5, pc}
 800cce0:	24006af0 	.word	0x24006af0

0800cce4 <_ZN8touchgfx3BoxD1Ev>:
 800cce4:	4770      	bx	lr

0800cce6 <_ZN8touchgfx3BoxD0Ev>:
 800cce6:	b510      	push	{r4, lr}
 800cce8:	4604      	mov	r4, r0
 800ccea:	212c      	movs	r1, #44	; 0x2c
 800ccec:	f00c ffbc 	bl	8019c68 <_ZdlPvj>
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	bd10      	pop	{r4, pc}

0800ccf4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800ccf4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800ccf8:	b12a      	cbz	r2, 800cd06 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800ccfa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800ccfe:	b112      	cbz	r2, 800cd06 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800cd00:	6803      	ldr	r3, [r0, #0]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	4718      	bx	r3
 800cd06:	4770      	bx	lr

0800cd08 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800cd08:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800cd0c:	4770      	bx	lr

0800cd0e <_ZN8touchgfx6ButtonD1Ev>:
 800cd0e:	4770      	bx	lr

0800cd10 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	880b      	ldrh	r3, [r1, #0]
 800cd14:	4605      	mov	r5, r0
 800cd16:	4604      	mov	r4, r0
 800cd18:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800cd1a:	8813      	ldrh	r3, [r2, #0]
 800cd1c:	f825 3f30 	strh.w	r3, [r5, #48]!
 800cd20:	4628      	mov	r0, r5
 800cd22:	f004 fc2f 	bl	8011584 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cd26:	4606      	mov	r6, r0
 800cd28:	4628      	mov	r0, r5
 800cd2a:	f004 fc6f 	bl	801160c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	4605      	mov	r5, r0
 800cd32:	b231      	sxth	r1, r6
 800cd34:	4620      	mov	r0, r4
 800cd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd38:	4798      	blx	r3
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	b229      	sxth	r1, r5
 800cd3e:	4620      	mov	r0, r4
 800cd40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd46:	4718      	bx	r3

0800cd48 <_ZN8touchgfx6ButtonD0Ev>:
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	2134      	movs	r1, #52	; 0x34
 800cd4e:	f00c ff8b 	bl	8019c68 <_ZdlPvj>
 800cd52:	4620      	mov	r0, r4
 800cd54:	bd10      	pop	{r4, pc}

0800cd56 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800cd56:	b510      	push	{r4, lr}
 800cd58:	4604      	mov	r4, r0
 800cd5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800cd5c:	b150      	cbz	r0, 800cd74 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800cd5e:	6803      	ldr	r3, [r0, #0]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	4798      	blx	r3
 800cd64:	b130      	cbz	r0, 800cd74 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800cd66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800cd68:	4621      	mov	r1, r4
 800cd6a:	6803      	ldr	r3, [r0, #0]
 800cd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	4718      	bx	r3
 800cd74:	bd10      	pop	{r4, pc}

0800cd76 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800cd76:	b510      	push	{r4, lr}
 800cd78:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	2bff      	cmp	r3, #255	; 0xff
 800cd80:	d006      	beq.n	800cd90 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800cd82:	2300      	movs	r3, #0
 800cd84:	8003      	strh	r3, [r0, #0]
 800cd86:	8043      	strh	r3, [r0, #2]
 800cd88:	8083      	strh	r3, [r0, #4]
 800cd8a:	80c3      	strh	r3, [r0, #6]
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	bd10      	pop	{r4, pc}
 800cd90:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800cd94:	b11b      	cbz	r3, 800cd9e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800cd96:	3130      	adds	r1, #48	; 0x30
 800cd98:	f004 fc7c 	bl	8011694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800cd9c:	e7f6      	b.n	800cd8c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800cd9e:	312e      	adds	r1, #46	; 0x2e
 800cda0:	e7fa      	b.n	800cd98 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800cda4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800cda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800cdac:	b08a      	sub	sp, #40	; 0x28
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4688      	mov	r8, r1
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d044      	beq.n	800ce40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800cdb6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800cdb8:	a805      	add	r0, sp, #20
 800cdba:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdbe:	f004 fbe1 	bl	8011584 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	b206      	sxth	r6, r0
 800cdc6:	a805      	add	r0, sp, #20
 800cdc8:	f004 fc20 	bl	801160c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cdcc:	f9b8 2000 	ldrsh.w	r2, [r8]
 800cdd0:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	fa0f fc80 	sxth.w	ip, r0
 800cdda:	4417      	add	r7, r2
 800cddc:	9306      	str	r3, [sp, #24]
 800cdde:	b2bf      	uxth	r7, r7
 800cde0:	fa0f fe87 	sxth.w	lr, r7
 800cde4:	459e      	cmp	lr, r3
 800cde6:	dd2d      	ble.n	800ce44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800cde8:	4296      	cmp	r6, r2
 800cdea:	dd2b      	ble.n	800ce44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800cdec:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800cdf0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800cdf4:	4419      	add	r1, r3
 800cdf6:	b289      	uxth	r1, r1
 800cdf8:	fa0f f881 	sxth.w	r8, r1
 800cdfc:	f1b8 0f00 	cmp.w	r8, #0
 800ce00:	dd20      	ble.n	800ce44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800ce02:	459c      	cmp	ip, r3
 800ce04:	dd1e      	ble.n	800ce44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800ce06:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800ce0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ce0e:	4576      	cmp	r6, lr
 800ce10:	bfa8      	it	ge
 800ce12:	463d      	movge	r5, r7
 800ce14:	45c4      	cmp	ip, r8
 800ce16:	bfa8      	it	ge
 800ce18:	4608      	movge	r0, r1
 800ce1a:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ce1e:	1aad      	subs	r5, r5, r2
 800ce20:	1ac0      	subs	r0, r0, r3
 800ce22:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ce26:	f8ad 501c 	strh.w	r5, [sp, #28]
 800ce2a:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ce2e:	4b1f      	ldr	r3, [pc, #124]	; (800ceac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	b953      	cbnz	r3, 800ce4a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800ce34:	4b1e      	ldr	r3, [pc, #120]	; (800ceb0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800ce36:	2187      	movs	r1, #135	; 0x87
 800ce38:	4a1e      	ldr	r2, [pc, #120]	; (800ceb4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800ce3a:	481f      	ldr	r0, [pc, #124]	; (800ceb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800ce3c:	f00c ff42 	bl	8019cc4 <__assert_func>
 800ce40:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800ce42:	e7b9      	b.n	800cdb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800ce44:	2300      	movs	r3, #0
 800ce46:	9307      	str	r3, [sp, #28]
 800ce48:	e7f1      	b.n	800ce2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800ce4a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ce4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d026      	beq.n	800cea4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800ce56:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	dd22      	ble.n	800cea4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800ce5e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dd1e      	ble.n	800cea4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800ce66:	2300      	movs	r3, #0
 800ce68:	a908      	add	r1, sp, #32
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce74:	4798      	blx	r3
 800ce76:	4b11      	ldr	r3, [pc, #68]	; (800cebc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ce7e:	b10a      	cbz	r2, 800ce84 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800ce80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ce82:	b900      	cbnz	r0, 800ce86 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800ce84:	6898      	ldr	r0, [r3, #8]
 800ce86:	2501      	movs	r5, #1
 800ce88:	6801      	ldr	r1, [r0, #0]
 800ce8a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800ce8e:	9502      	str	r5, [sp, #8]
 800ce90:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800ce94:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800ce98:	9401      	str	r4, [sp, #4]
 800ce9a:	ac06      	add	r4, sp, #24
 800ce9c:	9400      	str	r4, [sp, #0]
 800ce9e:	688c      	ldr	r4, [r1, #8]
 800cea0:	a905      	add	r1, sp, #20
 800cea2:	47a0      	blx	r4
 800cea4:	b00a      	add	sp, #40	; 0x28
 800cea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceaa:	bf00      	nop
 800ceac:	24006b78 	.word	0x24006b78
 800ceb0:	0801d5cc 	.word	0x0801d5cc
 800ceb4:	0801d6a4 	.word	0x0801d6a4
 800ceb8:	0801d608 	.word	0x0801d608
 800cebc:	24006af0 	.word	0x24006af0

0800cec0 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800cec0:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 800cec4:	b12a      	cbz	r2, 800ced2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800cec6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800ceca:	b112      	cbz	r2, 800ced2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800cecc:	6803      	ldr	r3, [r0, #0]
 800cece:	695b      	ldr	r3, [r3, #20]
 800ced0:	4718      	bx	r3
 800ced2:	4770      	bx	lr

0800ced4 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800ced4:	4770      	bx	lr

0800ced6 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800ced6:	b510      	push	{r4, lr}
 800ced8:	4604      	mov	r4, r0
 800ceda:	2134      	movs	r1, #52	; 0x34
 800cedc:	f00c fec4 	bl	8019c68 <_ZdlPvj>
 800cee0:	4620      	mov	r0, r4
 800cee2:	bd10      	pop	{r4, pc}

0800cee4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800ceea:	4604      	mov	r4, r0
 800ceec:	460e      	mov	r6, r1
 800ceee:	b08e      	sub	sp, #56	; 0x38
 800cef0:	b218      	sxth	r0, r3
 800cef2:	8921      	ldrh	r1, [r4, #8]
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	8962      	ldrh	r2, [r4, #10]
 800cef8:	f8ad 0000 	strh.w	r0, [sp]
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	f8ad 0002 	strh.w	r0, [sp, #2]
 800cf02:	1ac9      	subs	r1, r1, r3
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	b209      	sxth	r1, r1
 800cf08:	b21b      	sxth	r3, r3
 800cf0a:	2900      	cmp	r1, #0
 800cf0c:	f8ad 1004 	strh.w	r1, [sp, #4]
 800cf10:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cf14:	dd5e      	ble.n	800cfd4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	dd5c      	ble.n	800cfd4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800cf1a:	6830      	ldr	r0, [r6, #0]
 800cf1c:	ab02      	add	r3, sp, #8
 800cf1e:	6871      	ldr	r1, [r6, #4]
 800cf20:	c303      	stmia	r3!, {r0, r1}
 800cf22:	4669      	mov	r1, sp
 800cf24:	a802      	add	r0, sp, #8
 800cf26:	f7fe f8f1 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	a902      	add	r1, sp, #8
 800cf2e:	f7ff febb 	bl	800cca8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800cf32:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d05f      	beq.n	800cff8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800cf38:	8963      	ldrh	r3, [r4, #10]
 800cf3a:	b202      	sxth	r2, r0
 800cf3c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800cf40:	2500      	movs	r5, #0
 800cf42:	1a1f      	subs	r7, r3, r0
 800cf44:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800cf48:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cf4c:	b21b      	sxth	r3, r3
 800cf4e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800cf52:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800cf56:	af04      	add	r7, sp, #16
 800cf58:	1a09      	subs	r1, r1, r0
 800cf5a:	9506      	str	r5, [sp, #24]
 800cf5c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800cf60:	f8ad 5020 	strh.w	r5, [sp, #32]
 800cf64:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800cf68:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800cf6c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800cf70:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800cf74:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800cf78:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800cf7c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800cf80:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800cf84:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800cf88:	ab06      	add	r3, sp, #24
 800cf8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cf8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf92:	e887 0003 	stmia.w	r7, {r0, r1}
 800cf96:	4631      	mov	r1, r6
 800cf98:	4638      	mov	r0, r7
 800cf9a:	f7fe f8b7 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800cf9e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dd12      	ble.n	800cfcc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800cfa6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	dd0e      	ble.n	800cfcc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	4798      	blx	r3
 800cfb8:	f7fe fb76 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800cfbc:	6803      	ldr	r3, [r0, #0]
 800cfbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800cfc6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800cfca:	47c0      	blx	r8
 800cfcc:	3501      	adds	r5, #1
 800cfce:	2d04      	cmp	r5, #4
 800cfd0:	d1da      	bne.n	800cf88 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800cfd2:	e011      	b.n	800cff8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800cfd4:	6830      	ldr	r0, [r6, #0]
 800cfd6:	ab06      	add	r3, sp, #24
 800cfd8:	6871      	ldr	r1, [r6, #4]
 800cfda:	c303      	stmia	r3!, {r0, r1}
 800cfdc:	6823      	ldr	r3, [r4, #0]
 800cfde:	a906      	add	r1, sp, #24
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe4:	4798      	blx	r3
 800cfe6:	f7fe fb5f 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 800cfea:	6803      	ldr	r3, [r0, #0]
 800cfec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cfee:	a906      	add	r1, sp, #24
 800cff0:	6a1d      	ldr	r5, [r3, #32]
 800cff2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800cff6:	47a8      	blx	r5
 800cff8:	b00e      	add	sp, #56	; 0x38
 800cffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cffe <_ZN8touchgfx5ImageD1Ev>:
 800cffe:	4770      	bx	lr

0800d000 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	880b      	ldrh	r3, [r1, #0]
 800d004:	460d      	mov	r5, r1
 800d006:	4604      	mov	r4, r0
 800d008:	84c3      	strh	r3, [r0, #38]	; 0x26
 800d00a:	4608      	mov	r0, r1
 800d00c:	f004 faba 	bl	8011584 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d010:	4606      	mov	r6, r0
 800d012:	4628      	mov	r0, r5
 800d014:	f004 fafa 	bl	801160c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d018:	6823      	ldr	r3, [r4, #0]
 800d01a:	4605      	mov	r5, r0
 800d01c:	b231      	sxth	r1, r6
 800d01e:	4620      	mov	r0, r4
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	4798      	blx	r3
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	b229      	sxth	r1, r5
 800d028:	4620      	mov	r0, r4
 800d02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d030:	4718      	bx	r3

0800d032 <_ZN8touchgfx5ImageD0Ev>:
 800d032:	b510      	push	{r4, lr}
 800d034:	4604      	mov	r4, r0
 800d036:	212c      	movs	r1, #44	; 0x2c
 800d038:	f00c fe16 	bl	8019c68 <_ZdlPvj>
 800d03c:	4620      	mov	r0, r4
 800d03e:	bd10      	pop	{r4, pc}

0800d040 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800d040:	b510      	push	{r4, lr}
 800d042:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800d046:	4604      	mov	r4, r0
 800d048:	2bff      	cmp	r3, #255	; 0xff
 800d04a:	d006      	beq.n	800d05a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800d04c:	2300      	movs	r3, #0
 800d04e:	8003      	strh	r3, [r0, #0]
 800d050:	8043      	strh	r3, [r0, #2]
 800d052:	8083      	strh	r3, [r0, #4]
 800d054:	80c3      	strh	r3, [r0, #6]
 800d056:	4620      	mov	r0, r4
 800d058:	bd10      	pop	{r4, pc}
 800d05a:	3126      	adds	r1, #38	; 0x26
 800d05c:	f004 fb1a 	bl	8011694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800d060:	e7f9      	b.n	800d056 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800d062 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800d062:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800d066:	b12a      	cbz	r2, 800d074 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800d068:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800d06c:	b112      	cbz	r2, 800d074 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800d06e:	6803      	ldr	r3, [r0, #0]
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	4718      	bx	r3
 800d074:	4770      	bx	lr
	...

0800d078 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800d078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d07c:	4604      	mov	r4, r0
 800d07e:	b088      	sub	sp, #32
 800d080:	2500      	movs	r5, #0
 800d082:	460f      	mov	r7, r1
 800d084:	f854 3b26 	ldr.w	r3, [r4], #38
 800d088:	a904      	add	r1, sp, #16
 800d08a:	4606      	mov	r6, r0
 800d08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d092:	4798      	blx	r3
 800d094:	4620      	mov	r0, r4
 800d096:	f004 fa75 	bl	8011584 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d09a:	4680      	mov	r8, r0
 800d09c:	4620      	mov	r0, r4
 800d09e:	f004 fab5 	bl	801160c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d0a2:	9506      	str	r5, [sp, #24]
 800d0a4:	ad06      	add	r5, sp, #24
 800d0a6:	f8ad 001e 	strh.w	r0, [sp, #30]
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	f8ad 801c 	strh.w	r8, [sp, #28]
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	f7fe f82b 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800d0b6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dd19      	ble.n	800d0f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800d0be:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	dd15      	ble.n	800d0f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800d0c6:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d0ce:	b10a      	cbz	r2, 800d0d4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800d0d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d0d2:	b900      	cbnz	r0, 800d0d6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800d0d4:	6898      	ldr	r0, [r3, #8]
 800d0d6:	2701      	movs	r7, #1
 800d0d8:	6801      	ldr	r1, [r0, #0]
 800d0da:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800d0de:	9702      	str	r7, [sp, #8]
 800d0e0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800d0e4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d0e8:	e9cd 5600 	strd	r5, r6, [sp]
 800d0ec:	688d      	ldr	r5, [r1, #8]
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	47a8      	blx	r5
 800d0f2:	b008      	add	sp, #32
 800d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f8:	24006af0 	.word	0x24006af0

0800d0fc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800d0fc:	b510      	push	{r4, lr}
 800d0fe:	6803      	ldr	r3, [r0, #0]
 800d100:	460c      	mov	r4, r1
 800d102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d104:	4798      	blx	r3
 800d106:	1b03      	subs	r3, r0, r4
 800d108:	4258      	negs	r0, r3
 800d10a:	4158      	adcs	r0, r3
 800d10c:	bd10      	pop	{r4, pc}
	...

0800d110 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800d110:	4b01      	ldr	r3, [pc, #4]	; (800d118 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800d112:	6019      	str	r1, [r3, #0]
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	24006af8 	.word	0x24006af8

0800d11c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d120:	4696      	mov	lr, r2
 800d122:	b097      	sub	sp, #92	; 0x5c
 800d124:	4605      	mov	r5, r0
 800d126:	4614      	mov	r4, r2
 800d128:	460e      	mov	r6, r1
 800d12a:	461f      	mov	r7, r3
 800d12c:	f10d 0c1c 	add.w	ip, sp, #28
 800d130:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800d134:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800d138:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800d13c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d140:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d144:	f8de 3000 	ldr.w	r3, [lr]
 800d148:	f104 0e14 	add.w	lr, r4, #20
 800d14c:	f8cc 3000 	str.w	r3, [ip]
 800d150:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d154:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d158:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d15c:	f8de 3000 	ldr.w	r3, [lr]
 800d160:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800d164:	f8cc 3000 	str.w	r3, [ip]
 800d168:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d16c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d170:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d174:	f8de 3000 	ldr.w	r3, [lr]
 800d178:	4631      	mov	r1, r6
 800d17a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d17c:	4628      	mov	r0, r5
 800d17e:	f8cc 3000 	str.w	r3, [ip]
 800d182:	682b      	ldr	r3, [r5, #0]
 800d184:	9201      	str	r2, [sp, #4]
 800d186:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d188:	f8cd 8008 	str.w	r8, [sp, #8]
 800d18c:	9200      	str	r2, [sp, #0]
 800d18e:	aa07      	add	r2, sp, #28
 800d190:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800d194:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800d198:	463b      	mov	r3, r7
 800d19a:	47d8      	blx	fp
 800d19c:	46a6      	mov	lr, r4
 800d19e:	f10d 0c1c 	add.w	ip, sp, #28
 800d1a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d1a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1aa:	f8de 3000 	ldr.w	r3, [lr]
 800d1ae:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800d1b2:	343c      	adds	r4, #60	; 0x3c
 800d1b4:	f8cc 3000 	str.w	r3, [ip]
 800d1b8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d1bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d1c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1c4:	f8de 3000 	ldr.w	r3, [lr]
 800d1c8:	f8cc 3000 	str.w	r3, [ip]
 800d1cc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d1d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1d6:	6823      	ldr	r3, [r4, #0]
 800d1d8:	4631      	mov	r1, r6
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f8cc 3000 	str.w	r3, [ip]
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800d1e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d1e8:	f8cd 8008 	str.w	r8, [sp, #8]
 800d1ec:	9201      	str	r2, [sp, #4]
 800d1ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d1f0:	9200      	str	r2, [sp, #0]
 800d1f2:	aa07      	add	r2, sp, #28
 800d1f4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800d1f6:	463b      	mov	r3, r7
 800d1f8:	47a0      	blx	r4
 800d1fa:	b017      	add	sp, #92	; 0x5c
 800d1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d200 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	b08d      	sub	sp, #52	; 0x34
 800d206:	4688      	mov	r8, r1
 800d208:	f8d3 c000 	ldr.w	ip, [r3]
 800d20c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d20e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800d212:	680f      	ldr	r7, [r1, #0]
 800d214:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800d218:	eba7 070c 	sub.w	r7, r7, ip
 800d21c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800d220:	edd3 6a07 	vldr	s13, [r3, #28]
 800d224:	42bc      	cmp	r4, r7
 800d226:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d228:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800d22c:	bfa8      	it	ge
 800d22e:	463c      	movge	r4, r7
 800d230:	f9b1 9000 	ldrsh.w	r9, [r1]
 800d234:	f9ba 1000 	ldrsh.w	r1, [sl]
 800d238:	ee07 4a90 	vmov	s15, r4
 800d23c:	eb09 0e0c 	add.w	lr, r9, ip
 800d240:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800d244:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800d248:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800d24c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800d250:	4571      	cmp	r1, lr
 800d252:	ee25 4a04 	vmul.f32	s8, s10, s8
 800d256:	ee65 4a24 	vmul.f32	s9, s10, s9
 800d25a:	ee25 5a27 	vmul.f32	s10, s10, s15
 800d25e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d262:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800d266:	ee32 1a05 	vadd.f32	s2, s4, s10
 800d26a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d26e:	ee36 0a84 	vadd.f32	s0, s13, s8
 800d272:	ee61 1a87 	vmul.f32	s3, s3, s14
 800d276:	ee22 2a07 	vmul.f32	s4, s4, s14
 800d27a:	f340 808c 	ble.w	800d396 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800d27e:	eba1 060e 	sub.w	r6, r1, lr
 800d282:	fb96 f5f4 	sdiv	r5, r6, r4
 800d286:	ee07 5a10 	vmov	s14, r5
 800d28a:	2d00      	cmp	r5, #0
 800d28c:	fb04 6615 	mls	r6, r4, r5, r6
 800d290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d294:	eea7 0a04 	vfma.f32	s0, s14, s8
 800d298:	eee7 0a24 	vfma.f32	s1, s14, s9
 800d29c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800d2a0:	dd12      	ble.n	800d2c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800d2a2:	ee70 6a44 	vsub.f32	s13, s0, s8
 800d2a6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800d2aa:	ee31 2a45 	vsub.f32	s4, s2, s10
 800d2ae:	eef5 6a40 	vcmp.f32	s13, #0.0
 800d2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b6:	bf14      	ite	ne
 800d2b8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800d2bc:	eeb0 7a67 	vmoveq.f32	s14, s15
 800d2c0:	ee61 1a87 	vmul.f32	s3, s3, s14
 800d2c4:	ee22 2a07 	vmul.f32	s4, s4, s14
 800d2c8:	fb05 f204 	mul.w	r2, r5, r4
 800d2cc:	1abf      	subs	r7, r7, r2
 800d2ce:	4494      	add	ip, r2
 800d2d0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800d2d4:	4411      	add	r1, r2
 800d2d6:	eb09 020c 	add.w	r2, r9, ip
 800d2da:	b209      	sxth	r1, r1
 800d2dc:	443a      	add	r2, r7
 800d2de:	428a      	cmp	r2, r1
 800d2e0:	bfc4      	itt	gt
 800d2e2:	eba1 0209 	subgt.w	r2, r1, r9
 800d2e6:	eba2 070c 	subgt.w	r7, r2, ip
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	dd50      	ble.n	800d390 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800d2ee:	fb97 f1f4 	sdiv	r1, r7, r4
 800d2f2:	fb04 7211 	mls	r2, r4, r1, r7
 800d2f6:	b90a      	cbnz	r2, 800d2fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800d2f8:	3901      	subs	r1, #1
 800d2fa:	4622      	mov	r2, r4
 800d2fc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800d300:	6840      	ldr	r0, [r0, #4]
 800d302:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800d306:	44b6      	add	lr, r6
 800d308:	f8d0 a000 	ldr.w	sl, [r0]
 800d30c:	2900      	cmp	r1, #0
 800d30e:	bfcc      	ite	gt
 800d310:	46a1      	movgt	r9, r4
 800d312:	4691      	movle	r9, r2
 800d314:	900b      	str	r0, [sp, #44]	; 0x2c
 800d316:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d318:	fb04 e505 	mla	r5, r4, r5, lr
 800d31c:	eef0 6a42 	vmov.f32	s13, s4
 800d320:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d324:	9008      	str	r0, [sp, #32]
 800d326:	eeb0 7a61 	vmov.f32	s14, s3
 800d32a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800d332:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800d336:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800d33a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d33c:	445b      	add	r3, fp
 800d33e:	9307      	str	r3, [sp, #28]
 800d340:	ee16 3a90 	vmov	r3, s13
 800d344:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800d348:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800d34c:	ee21 3a23 	vmul.f32	s6, s2, s7
 800d350:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800d354:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800d358:	ee17 7a90 	vmov	r7, s15
 800d35c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800d360:	fb97 f7f4 	sdiv	r7, r7, r4
 800d364:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800d368:	ee17 ca90 	vmov	ip, s15
 800d36c:	fb9c fcf4 	sdiv	ip, ip, r4
 800d370:	fb0c 3306 	mla	r3, ip, r6, r3
 800d374:	9302      	str	r3, [sp, #8]
 800d376:	ee17 3a10 	vmov	r3, s14
 800d37a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800d37e:	fb07 3706 	mla	r7, r7, r6, r3
 800d382:	eba9 0306 	sub.w	r3, r9, r6
 800d386:	e9cd 4700 	strd	r4, r7, [sp]
 800d38a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800d38e:	47a0      	blx	r4
 800d390:	b00d      	add	sp, #52	; 0x34
 800d392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d396:	2500      	movs	r5, #0
 800d398:	462e      	mov	r6, r5
 800d39a:	e799      	b.n	800d2d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800d39c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	b0db      	sub	sp, #364	; 0x16c
 800d3a2:	461d      	mov	r5, r3
 800d3a4:	4614      	mov	r4, r2
 800d3a6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800d3aa:	910f      	str	r1, [sp, #60]	; 0x3c
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d3b0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800d3b4:	9009      	str	r0, [sp, #36]	; 0x24
 800d3b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3b8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800d3bc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800d3c0:	9310      	str	r3, [sp, #64]	; 0x40
 800d3c2:	6803      	ldr	r3, [r0, #0]
 800d3c4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800d3c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d3ca:	47b8      	blx	r7
 800d3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ce:	6058      	str	r0, [r3, #4]
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	f000 83a1 	beq.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d3d6:	682b      	ldr	r3, [r5, #0]
 800d3d8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800d3dc:	ed94 7a02 	vldr	s14, [r4, #8]
 800d3e0:	9314      	str	r3, [sp, #80]	; 0x50
 800d3e2:	686b      	ldr	r3, [r5, #4]
 800d3e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3e8:	9315      	str	r3, [sp, #84]	; 0x54
 800d3ea:	4bc1      	ldr	r3, [pc, #772]	; (800d6f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800d3ec:	7819      	ldrb	r1, [r3, #0]
 800d3ee:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800d3f2:	2900      	cmp	r1, #0
 800d3f4:	bf16      	itet	ne
 800d3f6:	4619      	movne	r1, r3
 800d3f8:	4611      	moveq	r1, r2
 800d3fa:	4613      	movne	r3, r2
 800d3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d400:	9116      	str	r1, [sp, #88]	; 0x58
 800d402:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800d406:	f240 8387 	bls.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d40a:	ed94 7a07 	vldr	s14, [r4, #28]
 800d40e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d416:	f240 837f 	bls.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d41a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800d41e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d426:	f240 8377 	bls.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d42a:	6822      	ldr	r2, [r4, #0]
 800d42c:	4bb1      	ldr	r3, [pc, #708]	; (800d6f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800d42e:	429a      	cmp	r2, r3
 800d430:	f2c0 8372 	blt.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d434:	49b0      	ldr	r1, [pc, #704]	; (800d6f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800d436:	6963      	ldr	r3, [r4, #20]
 800d438:	428a      	cmp	r2, r1
 800d43a:	f300 836d 	bgt.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d43e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800d442:	48ae      	ldr	r0, [pc, #696]	; (800d6fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800d444:	33ff      	adds	r3, #255	; 0xff
 800d446:	4283      	cmp	r3, r0
 800d448:	f200 8366 	bhi.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d44c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d44e:	4dac      	ldr	r5, [pc, #688]	; (800d700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800d450:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800d454:	33ff      	adds	r3, #255	; 0xff
 800d456:	42ab      	cmp	r3, r5
 800d458:	f200 835e 	bhi.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d45c:	6862      	ldr	r2, [r4, #4]
 800d45e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800d462:	33ff      	adds	r3, #255	; 0xff
 800d464:	4283      	cmp	r3, r0
 800d466:	f200 8357 	bhi.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d46a:	69a1      	ldr	r1, [r4, #24]
 800d46c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800d470:	33ff      	adds	r3, #255	; 0xff
 800d472:	4283      	cmp	r3, r0
 800d474:	f200 8350 	bhi.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d47a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800d47e:	30ff      	adds	r0, #255	; 0xff
 800d480:	42a8      	cmp	r0, r5
 800d482:	f200 8349 	bhi.w	800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d486:	428a      	cmp	r2, r1
 800d488:	f280 8110 	bge.w	800d6ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800d48c:	429a      	cmp	r2, r3
 800d48e:	f300 8119 	bgt.w	800d6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800d492:	4299      	cmp	r1, r3
 800d494:	f280 811d 	bge.w	800d6d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800d498:	2502      	movs	r5, #2
 800d49a:	2701      	movs	r7, #1
 800d49c:	46a9      	mov	r9, r5
 800d49e:	46b8      	mov	r8, r7
 800d4a0:	f04f 0a00 	mov.w	sl, #0
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	a849      	add	r0, sp, #292	; 0x124
 800d4a8:	f003 fccc 	bl	8010e44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800d4ac:	4622      	mov	r2, r4
 800d4ae:	4653      	mov	r3, sl
 800d4b0:	a949      	add	r1, sp, #292	; 0x124
 800d4b2:	f8cd 9000 	str.w	r9, [sp]
 800d4b6:	a819      	add	r0, sp, #100	; 0x64
 800d4b8:	f003 fdf4 	bl	80110a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d4bc:	4622      	mov	r2, r4
 800d4be:	4653      	mov	r3, sl
 800d4c0:	a949      	add	r1, sp, #292	; 0x124
 800d4c2:	f8cd 8000 	str.w	r8, [sp]
 800d4c6:	a829      	add	r0, sp, #164	; 0xa4
 800d4c8:	f003 fdec 	bl	80110a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d4cc:	4643      	mov	r3, r8
 800d4ce:	4622      	mov	r2, r4
 800d4d0:	a949      	add	r1, sp, #292	; 0x124
 800d4d2:	f8cd 9000 	str.w	r9, [sp]
 800d4d6:	a839      	add	r0, sp, #228	; 0xe4
 800d4d8:	f003 fde4 	bl	80110a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d4dc:	42af      	cmp	r7, r5
 800d4de:	af12      	add	r7, sp, #72	; 0x48
 800d4e0:	bfb7      	itett	lt
 800d4e2:	2300      	movlt	r3, #0
 800d4e4:	2301      	movge	r3, #1
 800d4e6:	ad29      	addlt	r5, sp, #164	; 0xa4
 800d4e8:	ac19      	addlt	r4, sp, #100	; 0x64
 800d4ea:	bfb1      	iteee	lt
 800d4ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d4ee:	ad19      	addge	r5, sp, #100	; 0x64
 800d4f0:	930e      	strge	r3, [sp, #56]	; 0x38
 800d4f2:	ac29      	addge	r4, sp, #164	; 0xa4
 800d4f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d4fa:	e887 0003 	stmia.w	r7, {r0, r1}
 800d4fe:	b928      	cbnz	r0, 800d50c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800d500:	4b80      	ldr	r3, [pc, #512]	; (800d704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800d502:	6818      	ldr	r0, [r3, #0]
 800d504:	6803      	ldr	r3, [r0, #0]
 800d506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d508:	4798      	blx	r3
 800d50a:	6038      	str	r0, [r7, #0]
 800d50c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d50e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800d512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d516:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800d518:	930c      	str	r3, [sp, #48]	; 0x30
 800d51a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d51c:	6963      	ldr	r3, [r4, #20]
 800d51e:	440b      	add	r3, r1
 800d520:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800d524:	4408      	add	r0, r1
 800d526:	b200      	sxth	r0, r0
 800d528:	4283      	cmp	r3, r0
 800d52a:	900d      	str	r0, [sp, #52]	; 0x34
 800d52c:	f280 80dd 	bge.w	800d6ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800d530:	428b      	cmp	r3, r1
 800d532:	da08      	bge.n	800d546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800d534:	2a00      	cmp	r2, #0
 800d536:	dd06      	ble.n	800d546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800d538:	1acb      	subs	r3, r1, r3
 800d53a:	429a      	cmp	r2, r3
 800d53c:	f2c0 80e4 	blt.w	800d708 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800d540:	2b00      	cmp	r3, #0
 800d542:	f300 80e2 	bgt.w	800d70a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800d546:	6967      	ldr	r7, [r4, #20]
 800d548:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800d54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d54e:	443b      	add	r3, r7
 800d550:	461f      	mov	r7, r3
 800d552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d554:	1bdf      	subs	r7, r3, r7
 800d556:	4297      	cmp	r7, r2
 800d558:	bfa8      	it	ge
 800d55a:	4617      	movge	r7, r2
 800d55c:	2f00      	cmp	r7, #0
 800d55e:	f340 8166 	ble.w	800d82e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800d562:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d564:	6829      	ldr	r1, [r5, #0]
 800d566:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d56a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800d56e:	4411      	add	r1, r2
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	4299      	cmp	r1, r3
 800d574:	dd1a      	ble.n	800d5ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800d576:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800d57a:	4402      	add	r2, r0
 800d57c:	440b      	add	r3, r1
 800d57e:	b21b      	sxth	r3, r3
 800d580:	429a      	cmp	r2, r3
 800d582:	dc13      	bgt.n	800d5ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800d584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d586:	a912      	add	r1, sp, #72	; 0x48
 800d588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	9206      	str	r2, [sp, #24]
 800d590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d592:	9500      	str	r5, [sp, #0]
 800d594:	9205      	str	r2, [sp, #20]
 800d596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d598:	e9cd b203 	strd	fp, r2, [sp, #12]
 800d59c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d59e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800d5a2:	aa49      	add	r2, sp, #292	; 0x124
 800d5a4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800d5a8:	4623      	mov	r3, r4
 800d5aa:	47c8      	blx	r9
 800d5ac:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800d5b0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800d5b4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800d5b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d5bc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800d5c0:	68a1      	ldr	r1, [r4, #8]
 800d5c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c6:	ed94 6a08 	vldr	s12, [r4, #32]
 800d5ca:	edd4 6a07 	vldr	s13, [r4, #28]
 800d5ce:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d5d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d5d6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d5da:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d5de:	edc4 6a07 	vstr	s13, [r4, #28]
 800d5e2:	441a      	add	r2, r3
 800d5e4:	6963      	ldr	r3, [r4, #20]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	6022      	str	r2, [r4, #0]
 800d5ea:	6163      	str	r3, [r4, #20]
 800d5ec:	69a3      	ldr	r3, [r4, #24]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	61a3      	str	r3, [r4, #24]
 800d5f2:	6923      	ldr	r3, [r4, #16]
 800d5f4:	440b      	add	r3, r1
 800d5f6:	68e1      	ldr	r1, [r4, #12]
 800d5f8:	428b      	cmp	r3, r1
 800d5fa:	6123      	str	r3, [r4, #16]
 800d5fc:	db15      	blt.n	800d62a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800d5fe:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800d602:	3201      	adds	r2, #1
 800d604:	1a5b      	subs	r3, r3, r1
 800d606:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d60a:	6022      	str	r2, [r4, #0]
 800d60c:	6123      	str	r3, [r4, #16]
 800d60e:	edc4 6a07 	vstr	s13, [r4, #28]
 800d612:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800d616:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d61a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d61e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800d622:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d626:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d62a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800d62e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800d632:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800d636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d63a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800d63e:	68a9      	ldr	r1, [r5, #8]
 800d640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d644:	ed95 6a08 	vldr	s12, [r5, #32]
 800d648:	edd5 6a07 	vldr	s13, [r5, #28]
 800d64c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d650:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d654:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d65c:	edc5 6a07 	vstr	s13, [r5, #28]
 800d660:	441a      	add	r2, r3
 800d662:	696b      	ldr	r3, [r5, #20]
 800d664:	3301      	adds	r3, #1
 800d666:	602a      	str	r2, [r5, #0]
 800d668:	616b      	str	r3, [r5, #20]
 800d66a:	69ab      	ldr	r3, [r5, #24]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	61ab      	str	r3, [r5, #24]
 800d670:	692b      	ldr	r3, [r5, #16]
 800d672:	440b      	add	r3, r1
 800d674:	68e9      	ldr	r1, [r5, #12]
 800d676:	428b      	cmp	r3, r1
 800d678:	612b      	str	r3, [r5, #16]
 800d67a:	db15      	blt.n	800d6a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800d67c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800d680:	3201      	adds	r2, #1
 800d682:	1a5b      	subs	r3, r3, r1
 800d684:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d688:	602a      	str	r2, [r5, #0]
 800d68a:	612b      	str	r3, [r5, #16]
 800d68c:	edc5 6a07 	vstr	s13, [r5, #28]
 800d690:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800d694:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d698:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d69c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800d6a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6a4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d6a8:	3f01      	subs	r7, #1
 800d6aa:	e757      	b.n	800d55c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800d6ac:	4299      	cmp	r1, r3
 800d6ae:	dc13      	bgt.n	800d6d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	da14      	bge.n	800d6de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800d6b4:	2502      	movs	r5, #2
 800d6b6:	2703      	movs	r7, #3
 800d6b8:	f04f 0800 	mov.w	r8, #0
 800d6bc:	46a9      	mov	r9, r5
 800d6be:	f04f 0a01 	mov.w	sl, #1
 800d6c2:	e6ef      	b.n	800d4a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800d6c4:	2501      	movs	r5, #1
 800d6c6:	2700      	movs	r7, #0
 800d6c8:	46a9      	mov	r9, r5
 800d6ca:	46b8      	mov	r8, r7
 800d6cc:	f04f 0a02 	mov.w	sl, #2
 800d6d0:	e6e8      	b.n	800d4a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800d6d2:	2501      	movs	r5, #1
 800d6d4:	2702      	movs	r7, #2
 800d6d6:	e6e1      	b.n	800d49c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800d6d8:	2500      	movs	r5, #0
 800d6da:	2701      	movs	r7, #1
 800d6dc:	e7f4      	b.n	800d6c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800d6de:	2702      	movs	r7, #2
 800d6e0:	2503      	movs	r5, #3
 800d6e2:	f04f 0900 	mov.w	r9, #0
 800d6e6:	46b8      	mov	r8, r7
 800d6e8:	e7e9      	b.n	800d6be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	e728      	b.n	800d540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800d6ee:	bf00      	nop
 800d6f0:	24006ae8 	.word	0x24006ae8
 800d6f4:	fffd8f01 	.word	0xfffd8f01
 800d6f8:	00027100 	.word	0x00027100
 800d6fc:	0004e1ff 	.word	0x0004e1ff
 800d700:	0004e1fe 	.word	0x0004e1fe
 800d704:	24006af0 	.word	0x24006af0
 800d708:	4613      	mov	r3, r2
 800d70a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d70c:	469e      	mov	lr, r3
 800d70e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800d710:	469c      	mov	ip, r3
 800d712:	9111      	str	r1, [sp, #68]	; 0x44
 800d714:	f04f 0900 	mov.w	r9, #0
 800d718:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800d71c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800d720:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800d724:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800d728:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800d72c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800d730:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800d734:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800d738:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800d73c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800d740:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800d744:	f1bc 0f00 	cmp.w	ip, #0
 800d748:	d147      	bne.n	800d7da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800d74a:	eb03 0c07 	add.w	ip, r3, r7
 800d74e:	1ad7      	subs	r7, r2, r3
 800d750:	f1b9 0f00 	cmp.w	r9, #0
 800d754:	d009      	beq.n	800d76a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800d756:	9029      	str	r0, [sp, #164]	; 0xa4
 800d758:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800d75c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800d760:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800d764:	912d      	str	r1, [sp, #180]	; 0xb4
 800d766:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800d76a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d76c:	f04f 0800 	mov.w	r8, #0
 800d770:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800d774:	9111      	str	r1, [sp, #68]	; 0x44
 800d776:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800d77a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800d77e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800d782:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800d786:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800d78a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800d78e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800d792:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800d796:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800d79a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800d79e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800d7a2:	f1be 0f00 	cmp.w	lr, #0
 800d7a6:	d031      	beq.n	800d80c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800d7a8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d7aa:	4450      	add	r0, sl
 800d7ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d7b0:	4431      	add	r1, r6
 800d7b2:	ee37 7a04 	vadd.f32	s14, s14, s8
 800d7b6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d7ba:	4549      	cmp	r1, r9
 800d7bc:	db08      	blt.n	800d7d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800d7be:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d7c2:	3001      	adds	r0, #1
 800d7c4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d7c8:	eba1 0109 	sub.w	r1, r1, r9
 800d7cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d7d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800d7d4:	f04f 0801 	mov.w	r8, #1
 800d7d8:	e7e3      	b.n	800d7a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800d7da:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d7dc:	4450      	add	r0, sl
 800d7de:	ee37 7a24 	vadd.f32	s14, s14, s9
 800d7e2:	4431      	add	r1, r6
 800d7e4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d7e8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800d7ec:	4541      	cmp	r1, r8
 800d7ee:	db08      	blt.n	800d802 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800d7f0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d7f4:	3001      	adds	r0, #1
 800d7f6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d7fa:	eba1 0108 	sub.w	r1, r1, r8
 800d7fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d802:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d806:	f04f 0901 	mov.w	r9, #1
 800d80a:	e79b      	b.n	800d744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800d80c:	449c      	add	ip, r3
 800d80e:	1aff      	subs	r7, r7, r3
 800d810:	f1b8 0f00 	cmp.w	r8, #0
 800d814:	d009      	beq.n	800d82a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800d816:	9019      	str	r0, [sp, #100]	; 0x64
 800d818:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800d81c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800d820:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800d824:	911d      	str	r1, [sp, #116]	; 0x74
 800d826:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800d82a:	1ad2      	subs	r2, r2, r3
 800d82c:	e68b      	b.n	800d546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800d82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d830:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 80d1 	beq.w	800d9da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800d838:	ad19      	add	r5, sp, #100	; 0x64
 800d83a:	ac39      	add	r4, sp, #228	; 0xe4
 800d83c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d83e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800d842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d846:	930c      	str	r3, [sp, #48]	; 0x30
 800d848:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d84a:	6963      	ldr	r3, [r4, #20]
 800d84c:	440b      	add	r3, r1
 800d84e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800d852:	4408      	add	r0, r1
 800d854:	b200      	sxth	r0, r0
 800d856:	4283      	cmp	r3, r0
 800d858:	900d      	str	r0, [sp, #52]	; 0x34
 800d85a:	f280 80c1 	bge.w	800d9e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800d85e:	428b      	cmp	r3, r1
 800d860:	da08      	bge.n	800d874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800d862:	2a00      	cmp	r2, #0
 800d864:	dd06      	ble.n	800d874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800d866:	1acb      	subs	r3, r1, r3
 800d868:	429a      	cmp	r2, r3
 800d86a:	f2c0 80bb 	blt.w	800d9e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f300 80b9 	bgt.w	800d9e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800d874:	6967      	ldr	r7, [r4, #20]
 800d876:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800d87a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d87c:	443b      	add	r3, r7
 800d87e:	461f      	mov	r7, r3
 800d880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d882:	1bdf      	subs	r7, r3, r7
 800d884:	4297      	cmp	r7, r2
 800d886:	bfa8      	it	ge
 800d888:	4617      	movge	r7, r2
 800d88a:	2f00      	cmp	r7, #0
 800d88c:	f340 813c 	ble.w	800db08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800d890:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d892:	6829      	ldr	r1, [r5, #0]
 800d894:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d898:	f9bb 3000 	ldrsh.w	r3, [fp]
 800d89c:	4411      	add	r1, r2
 800d89e:	6820      	ldr	r0, [r4, #0]
 800d8a0:	4299      	cmp	r1, r3
 800d8a2:	dd1a      	ble.n	800d8da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800d8a4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800d8a8:	4402      	add	r2, r0
 800d8aa:	440b      	add	r3, r1
 800d8ac:	b21b      	sxth	r3, r3
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	dc13      	bgt.n	800d8da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800d8b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d8b4:	a912      	add	r1, sp, #72	; 0x48
 800d8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	9206      	str	r2, [sp, #24]
 800d8be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8c0:	9500      	str	r5, [sp, #0]
 800d8c2:	9205      	str	r2, [sp, #20]
 800d8c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8c6:	e9cd b203 	strd	fp, r2, [sp, #12]
 800d8ca:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d8cc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800d8d0:	aa49      	add	r2, sp, #292	; 0x124
 800d8d2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800d8d6:	4623      	mov	r3, r4
 800d8d8:	47c8      	blx	r9
 800d8da:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800d8de:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800d8e2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800d8e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8ea:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800d8ee:	68a1      	ldr	r1, [r4, #8]
 800d8f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8f4:	ed94 6a08 	vldr	s12, [r4, #32]
 800d8f8:	edd4 6a07 	vldr	s13, [r4, #28]
 800d8fc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d900:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d904:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d908:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d90c:	edc4 6a07 	vstr	s13, [r4, #28]
 800d910:	441a      	add	r2, r3
 800d912:	6963      	ldr	r3, [r4, #20]
 800d914:	3301      	adds	r3, #1
 800d916:	6022      	str	r2, [r4, #0]
 800d918:	6163      	str	r3, [r4, #20]
 800d91a:	69a3      	ldr	r3, [r4, #24]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	61a3      	str	r3, [r4, #24]
 800d920:	6923      	ldr	r3, [r4, #16]
 800d922:	440b      	add	r3, r1
 800d924:	68e1      	ldr	r1, [r4, #12]
 800d926:	428b      	cmp	r3, r1
 800d928:	6123      	str	r3, [r4, #16]
 800d92a:	db15      	blt.n	800d958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800d92c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800d930:	3201      	adds	r2, #1
 800d932:	1a5b      	subs	r3, r3, r1
 800d934:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d938:	6022      	str	r2, [r4, #0]
 800d93a:	6123      	str	r3, [r4, #16]
 800d93c:	edc4 6a07 	vstr	s13, [r4, #28]
 800d940:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800d944:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d948:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d94c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800d950:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d954:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d958:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800d95c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800d960:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800d964:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d968:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800d96c:	68a9      	ldr	r1, [r5, #8]
 800d96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d972:	ed95 6a08 	vldr	s12, [r5, #32]
 800d976:	edd5 6a07 	vldr	s13, [r5, #28]
 800d97a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d97e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d982:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d986:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d98a:	edc5 6a07 	vstr	s13, [r5, #28]
 800d98e:	441a      	add	r2, r3
 800d990:	696b      	ldr	r3, [r5, #20]
 800d992:	3301      	adds	r3, #1
 800d994:	602a      	str	r2, [r5, #0]
 800d996:	616b      	str	r3, [r5, #20]
 800d998:	69ab      	ldr	r3, [r5, #24]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	61ab      	str	r3, [r5, #24]
 800d99e:	692b      	ldr	r3, [r5, #16]
 800d9a0:	440b      	add	r3, r1
 800d9a2:	68e9      	ldr	r1, [r5, #12]
 800d9a4:	428b      	cmp	r3, r1
 800d9a6:	612b      	str	r3, [r5, #16]
 800d9a8:	db15      	blt.n	800d9d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800d9aa:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800d9ae:	3201      	adds	r2, #1
 800d9b0:	1a5b      	subs	r3, r3, r1
 800d9b2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d9b6:	602a      	str	r2, [r5, #0]
 800d9b8:	612b      	str	r3, [r5, #16]
 800d9ba:	edc5 6a07 	vstr	s13, [r5, #28]
 800d9be:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800d9c2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d9c6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d9ca:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800d9ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9d2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d9d6:	3f01      	subs	r7, #1
 800d9d8:	e757      	b.n	800d88a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800d9da:	ad39      	add	r5, sp, #228	; 0xe4
 800d9dc:	ac19      	add	r4, sp, #100	; 0x64
 800d9de:	e72d      	b.n	800d83c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	e744      	b.n	800d86e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800d9e8:	469e      	mov	lr, r3
 800d9ea:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800d9ee:	461f      	mov	r7, r3
 800d9f0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800d9f4:	f04f 0900 	mov.w	r9, #0
 800d9f8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800d9fc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800da00:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800da04:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800da08:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800da0c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800da0e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800da12:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800da16:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800da1a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800da1e:	960e      	str	r6, [sp, #56]	; 0x38
 800da20:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800da24:	2f00      	cmp	r7, #0
 800da26:	d146      	bne.n	800dab6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800da28:	449c      	add	ip, r3
 800da2a:	1ad7      	subs	r7, r2, r3
 800da2c:	f1b9 0f00 	cmp.w	r9, #0
 800da30:	d009      	beq.n	800da46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800da32:	9039      	str	r0, [sp, #228]	; 0xe4
 800da34:	913d      	str	r1, [sp, #244]	; 0xf4
 800da36:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800da3a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800da3e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800da42:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800da46:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800da48:	f04f 0800 	mov.w	r8, #0
 800da4c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800da50:	910e      	str	r1, [sp, #56]	; 0x38
 800da52:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800da56:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800da5a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800da5e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800da62:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800da66:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800da6a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800da6e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800da72:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800da76:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800da7a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800da7e:	f1be 0f00 	cmp.w	lr, #0
 800da82:	d030      	beq.n	800dae6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800da84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800da86:	4450      	add	r0, sl
 800da88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800da8c:	4431      	add	r1, r6
 800da8e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800da92:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800da96:	4549      	cmp	r1, r9
 800da98:	db08      	blt.n	800daac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800da9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800da9e:	3001      	adds	r0, #1
 800daa0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800daa4:	eba1 0109 	sub.w	r1, r1, r9
 800daa8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800daac:	f10e 3eff 	add.w	lr, lr, #4294967295
 800dab0:	f04f 0801 	mov.w	r8, #1
 800dab4:	e7e3      	b.n	800da7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800dab6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800dab8:	4450      	add	r0, sl
 800daba:	ee37 7a24 	vadd.f32	s14, s14, s9
 800dabe:	4431      	add	r1, r6
 800dac0:	ee77 7a84 	vadd.f32	s15, s15, s8
 800dac4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800dac8:	4541      	cmp	r1, r8
 800daca:	db08      	blt.n	800dade <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800dacc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800dad0:	3001      	adds	r0, #1
 800dad2:	ee37 7a25 	vadd.f32	s14, s14, s11
 800dad6:	eba1 0108 	sub.w	r1, r1, r8
 800dada:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dade:	3f01      	subs	r7, #1
 800dae0:	f04f 0901 	mov.w	r9, #1
 800dae4:	e79e      	b.n	800da24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800dae6:	449c      	add	ip, r3
 800dae8:	1aff      	subs	r7, r7, r3
 800daea:	f1b8 0f00 	cmp.w	r8, #0
 800daee:	d009      	beq.n	800db04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800daf0:	9019      	str	r0, [sp, #100]	; 0x64
 800daf2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800daf6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800dafa:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800dafe:	911d      	str	r1, [sp, #116]	; 0x74
 800db00:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800db04:	1ad2      	subs	r2, r2, r3
 800db06:	e6b5      	b.n	800d874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800db08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	b923      	cbnz	r3, 800db18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800db0e:	4b04      	ldr	r3, [pc, #16]	; (800db20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800db10:	6818      	ldr	r0, [r3, #0]
 800db12:	6803      	ldr	r3, [r0, #0]
 800db14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db16:	4798      	blx	r3
 800db18:	b05b      	add	sp, #364	; 0x16c
 800db1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1e:	bf00      	nop
 800db20:	24006af0 	.word	0x24006af0

0800db24 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800db24:	b570      	push	{r4, r5, r6, lr}
 800db26:	4604      	mov	r4, r0
 800db28:	2500      	movs	r5, #0
 800db2a:	9804      	ldr	r0, [sp, #16]
 800db2c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800db30:	8025      	strh	r5, [r4, #0]
 800db32:	6061      	str	r1, [r4, #4]
 800db34:	7223      	strb	r3, [r4, #8]
 800db36:	7266      	strb	r6, [r4, #9]
 800db38:	60e0      	str	r0, [r4, #12]
 800db3a:	8222      	strh	r2, [r4, #16]
 800db3c:	8265      	strh	r5, [r4, #18]
 800db3e:	82a5      	strh	r5, [r4, #20]
 800db40:	82e5      	strh	r5, [r4, #22]
 800db42:	8325      	strh	r5, [r4, #24]
 800db44:	8365      	strh	r5, [r4, #26]
 800db46:	83a5      	strh	r5, [r4, #28]
 800db48:	77a5      	strb	r5, [r4, #30]
 800db4a:	b32e      	cbz	r6, 800db98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800db4c:	6803      	ldr	r3, [r0, #0]
 800db4e:	695b      	ldr	r3, [r3, #20]
 800db50:	4798      	blx	r3
 800db52:	4606      	mov	r6, r0
 800db54:	b300      	cbz	r0, 800db98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800db56:	68e0      	ldr	r0, [r4, #12]
 800db58:	4631      	mov	r1, r6
 800db5a:	6803      	ldr	r3, [r0, #0]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	4798      	blx	r3
 800db60:	4605      	mov	r5, r0
 800db62:	b1c8      	cbz	r0, 800db98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800db64:	7b43      	ldrb	r3, [r0, #13]
 800db66:	7a82      	ldrb	r2, [r0, #10]
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db6e:	4313      	orrs	r3, r2
 800db70:	83a3      	strh	r3, [r4, #28]
 800db72:	7a63      	ldrb	r3, [r4, #9]
 800db74:	2b04      	cmp	r3, #4
 800db76:	d10f      	bne.n	800db98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800db78:	68e0      	ldr	r0, [r4, #12]
 800db7a:	462a      	mov	r2, r5
 800db7c:	4631      	mov	r1, r6
 800db7e:	6803      	ldr	r3, [r0, #0]
 800db80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db82:	4798      	blx	r3
 800db84:	7b6b      	ldrb	r3, [r5, #13]
 800db86:	005b      	lsls	r3, r3, #1
 800db88:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800db8c:	7aab      	ldrb	r3, [r5, #10]
 800db8e:	4313      	orrs	r3, r2
 800db90:	4418      	add	r0, r3
 800db92:	8ba3      	ldrh	r3, [r4, #28]
 800db94:	4418      	add	r0, r3
 800db96:	83a0      	strh	r0, [r4, #28]
 800db98:	4620      	mov	r0, r4
 800db9a:	bd70      	pop	{r4, r5, r6, pc}

0800db9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800db9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba0:	2400      	movs	r4, #0
 800dba2:	b085      	sub	sp, #20
 800dba4:	4681      	mov	r9, r0
 800dba6:	4688      	mov	r8, r1
 800dba8:	4692      	mov	sl, r2
 800dbaa:	469b      	mov	fp, r3
 800dbac:	4627      	mov	r7, r4
 800dbae:	4625      	mov	r5, r4
 800dbb0:	4626      	mov	r6, r4
 800dbb2:	4554      	cmp	r4, sl
 800dbb4:	da2a      	bge.n	800dc0c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	9303      	str	r3, [sp, #12]
 800dbba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800dbbe:	429d      	cmp	r5, r3
 800dbc0:	d004      	beq.n	800dbcc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800dbc2:	f242 030b 	movw	r3, #8203	; 0x200b
 800dbc6:	429d      	cmp	r5, r3
 800dbc8:	bf18      	it	ne
 800dbca:	462f      	movne	r7, r5
 800dbcc:	ab03      	add	r3, sp, #12
 800dbce:	4642      	mov	r2, r8
 800dbd0:	4659      	mov	r1, fp
 800dbd2:	4648      	mov	r0, r9
 800dbd4:	f002 fef2 	bl	80109bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dbd8:	4605      	mov	r5, r0
 800dbda:	b1b8      	cbz	r0, 800dc0c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800dbdc:	280a      	cmp	r0, #10
 800dbde:	d015      	beq.n	800dc0c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800dbe0:	9a03      	ldr	r2, [sp, #12]
 800dbe2:	b18a      	cbz	r2, 800dc08 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800dbe4:	7b50      	ldrb	r0, [r2, #13]
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	7a93      	ldrb	r3, [r2, #10]
 800dbea:	0040      	lsls	r0, r0, #1
 800dbec:	8895      	ldrh	r5, [r2, #4]
 800dbee:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800dbf2:	4303      	orrs	r3, r0
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	9301      	str	r3, [sp, #4]
 800dbf8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbfe:	4798      	blx	r3
 800dc00:	9b01      	ldr	r3, [sp, #4]
 800dc02:	4418      	add	r0, r3
 800dc04:	4406      	add	r6, r0
 800dc06:	b2b6      	uxth	r6, r6
 800dc08:	3401      	adds	r4, #1
 800dc0a:	e7d2      	b.n	800dbb2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	b005      	add	sp, #20
 800dc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800dc14:	2a02      	cmp	r2, #2
 800dc16:	b530      	push	{r4, r5, lr}
 800dc18:	d011      	beq.n	800dc3e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800dc1a:	2a03      	cmp	r2, #3
 800dc1c:	d01c      	beq.n	800dc58 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800dc1e:	2a01      	cmp	r2, #1
 800dc20:	d10c      	bne.n	800dc3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800dc22:	888b      	ldrh	r3, [r1, #4]
 800dc24:	8801      	ldrh	r1, [r0, #0]
 800dc26:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800dc2a:	1a5b      	subs	r3, r3, r1
 800dc2c:	8844      	ldrh	r4, [r0, #2]
 800dc2e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800dc32:	1a9b      	subs	r3, r3, r2
 800dc34:	8004      	strh	r4, [r0, #0]
 800dc36:	8081      	strh	r1, [r0, #4]
 800dc38:	8043      	strh	r3, [r0, #2]
 800dc3a:	80c2      	strh	r2, [r0, #6]
 800dc3c:	bd30      	pop	{r4, r5, pc}
 800dc3e:	88cb      	ldrh	r3, [r1, #6]
 800dc40:	8842      	ldrh	r2, [r0, #2]
 800dc42:	1a9b      	subs	r3, r3, r2
 800dc44:	88c2      	ldrh	r2, [r0, #6]
 800dc46:	1a9b      	subs	r3, r3, r2
 800dc48:	888a      	ldrh	r2, [r1, #4]
 800dc4a:	8801      	ldrh	r1, [r0, #0]
 800dc4c:	8043      	strh	r3, [r0, #2]
 800dc4e:	1a52      	subs	r2, r2, r1
 800dc50:	8881      	ldrh	r1, [r0, #4]
 800dc52:	1a52      	subs	r2, r2, r1
 800dc54:	8002      	strh	r2, [r0, #0]
 800dc56:	e7f1      	b.n	800dc3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800dc58:	88cb      	ldrh	r3, [r1, #6]
 800dc5a:	8841      	ldrh	r1, [r0, #2]
 800dc5c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800dc60:	1a5b      	subs	r3, r3, r1
 800dc62:	f9b0 5000 	ldrsh.w	r5, [r0]
 800dc66:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	8045      	strh	r5, [r0, #2]
 800dc6e:	8082      	strh	r2, [r0, #4]
 800dc70:	8003      	strh	r3, [r0, #0]
 800dc72:	80c4      	strh	r4, [r0, #6]
 800dc74:	e7e2      	b.n	800dc3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800dc76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800dc76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7a:	b09f      	sub	sp, #124	; 0x7c
 800dc7c:	9116      	str	r1, [sp, #88]	; 0x58
 800dc7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc80:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800dc82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800dc84:	8809      	ldrh	r1, [r1, #0]
 800dc86:	889b      	ldrh	r3, [r3, #4]
 800dc88:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800dc8c:	440b      	add	r3, r1
 800dc8e:	9212      	str	r2, [sp, #72]	; 0x48
 800dc90:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800dc94:	b21b      	sxth	r3, r3
 800dc96:	9011      	str	r0, [sp, #68]	; 0x44
 800dc98:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800dc9c:	9310      	str	r3, [sp, #64]	; 0x40
 800dc9e:	f8d8 3000 	ldr.w	r3, [r8]
 800dca2:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 800dca6:	7a59      	ldrb	r1, [r3, #9]
 800dca8:	7a1b      	ldrb	r3, [r3, #8]
 800dcaa:	9114      	str	r1, [sp, #80]	; 0x50
 800dcac:	9315      	str	r3, [sp, #84]	; 0x54
 800dcae:	2a00      	cmp	r2, #0
 800dcb0:	d067      	beq.n	800dd82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10c>
 800dcb2:	f898 3010 	ldrb.w	r3, [r8, #16]
 800dcb6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800dcb8:	2b04      	cmp	r3, #4
 800dcba:	bf14      	ite	ne
 800dcbc:	2301      	movne	r3, #1
 800dcbe:	2302      	moveq	r3, #2
 800dcc0:	4413      	add	r3, r2
 800dcc2:	f04f 0900 	mov.w	r9, #0
 800dcc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcc8:	464c      	mov	r4, r9
 800dcca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dcce:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800dcd2:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	f280 808c 	bge.w	800ddf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	931c      	str	r3, [sp, #112]	; 0x70
 800dce0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800dce4:	429c      	cmp	r4, r3
 800dce6:	d006      	beq.n	800dcf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x80>
 800dce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcea:	f242 020b 	movw	r2, #8203	; 0x200b
 800dcee:	4294      	cmp	r4, r2
 800dcf0:	bf18      	it	ne
 800dcf2:	4623      	movne	r3, r4
 800dcf4:	930d      	str	r3, [sp, #52]	; 0x34
 800dcf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcf8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800dcfa:	f8d8 2000 	ldr.w	r2, [r8]
 800dcfe:	428b      	cmp	r3, r1
 800dd00:	db41      	blt.n	800dd86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x110>
 800dd02:	6813      	ldr	r3, [r2, #0]
 800dd04:	4610      	mov	r0, r2
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	4798      	blx	r3
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	f8d8 0000 	ldr.w	r0, [r8]
 800dd10:	aa1d      	add	r2, sp, #116	; 0x74
 800dd12:	4621      	mov	r1, r4
 800dd14:	6803      	ldr	r3, [r0, #0]
 800dd16:	689e      	ldr	r6, [r3, #8]
 800dd18:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800dd1c:	47b0      	blx	r6
 800dd1e:	901c      	str	r0, [sp, #112]	; 0x70
 800dd20:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800dd24:	429c      	cmp	r4, r3
 800dd26:	f000 80ea 	beq.w	800defe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800dd2a:	f242 030b 	movw	r3, #8203	; 0x200b
 800dd2e:	429c      	cmp	r4, r3
 800dd30:	f000 80e5 	beq.w	800defe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800dd34:	2c00      	cmp	r4, #0
 800dd36:	f000 80f7 	beq.w	800df28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 800dd3a:	2c0a      	cmp	r4, #10
 800dd3c:	d060      	beq.n	800de00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 800dd3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dd40:	b36a      	cbz	r2, 800dd9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x128>
 800dd42:	8894      	ldrh	r4, [r2, #4]
 800dd44:	f1bb 0f00 	cmp.w	fp, #0
 800dd48:	d03b      	beq.n	800ddc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14c>
 800dd4a:	f892 900d 	ldrb.w	r9, [r2, #13]
 800dd4e:	f1bb 0f01 	cmp.w	fp, #1
 800dd52:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800dd56:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800dd5a:	f892 900a 	ldrb.w	r9, [r2, #10]
 800dd5e:	ea49 0903 	orr.w	r9, r9, r3
 800dd62:	d134      	bne.n	800ddce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x158>
 800dd64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd66:	eba5 0509 	sub.w	r5, r5, r9
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d14f      	bne.n	800de0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 800dd6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd70:	eb09 0305 	add.w	r3, r9, r5
 800dd74:	4413      	add	r3, r2
 800dd76:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800dd78:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	da51      	bge.n	800de24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800dd80:	e038      	b.n	800ddf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 800dd82:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd84:	e79d      	b.n	800dcc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 800dd86:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800dd8a:	4659      	mov	r1, fp
 800dd8c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800dd8e:	9301      	str	r3, [sp, #4]
 800dd90:	ab1d      	add	r3, sp, #116	; 0x74
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	ab1c      	add	r3, sp, #112	; 0x70
 800dd96:	f002 fe69 	bl	8010a6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	e7c0      	b.n	800dd20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xaa>
 800dd9e:	f8d8 0000 	ldr.w	r0, [r8]
 800dda2:	6803      	ldr	r3, [r0, #0]
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	4798      	blx	r3
 800dda8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ddac:	4298      	cmp	r0, r3
 800ddae:	f000 80a6 	beq.w	800defe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800ddb2:	f242 030b 	movw	r3, #8203	; 0x200b
 800ddb6:	4298      	cmp	r0, r3
 800ddb8:	f000 80a1 	beq.w	800defe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800ddbc:	f1bb 0f00 	cmp.w	fp, #0
 800ddc0:	d100      	bne.n	800ddc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800ddc2:	444d      	add	r5, r9
 800ddc4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ddc6:	2a00      	cmp	r2, #0
 800ddc8:	d1bf      	bne.n	800dd4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd4>
 800ddca:	4691      	mov	r9, r2
 800ddcc:	e097      	b.n	800defe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800ddce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 80ab 	beq.w	800df2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 800ddd6:	f1bb 0f00 	cmp.w	fp, #0
 800ddda:	d118      	bne.n	800de0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 800dddc:	f8d8 0000 	ldr.w	r0, [r8]
 800dde0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dde2:	6803      	ldr	r3, [r0, #0]
 800dde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde6:	4798      	blx	r3
 800dde8:	4405      	add	r5, r0
 800ddea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ddee:	1aeb      	subs	r3, r5, r3
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	dd17      	ble.n	800de24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800ddf4:	2c00      	cmp	r4, #0
 800ddf6:	f000 8097 	beq.w	800df28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 800ddfa:	2c0a      	cmp	r4, #10
 800ddfc:	f040 8085 	bne.w	800df0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 800de00:	240a      	movs	r4, #10
 800de02:	fab4 f084 	clz	r0, r4
 800de06:	0940      	lsrs	r0, r0, #5
 800de08:	b01f      	add	sp, #124	; 0x7c
 800de0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de0e:	f8d8 0000 	ldr.w	r0, [r8]
 800de12:	990d      	ldr	r1, [sp, #52]	; 0x34
 800de14:	6803      	ldr	r3, [r0, #0]
 800de16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de18:	4798      	blx	r3
 800de1a:	f1bb 0f01 	cmp.w	fp, #1
 800de1e:	eba5 0500 	sub.w	r5, r5, r0
 800de22:	d0a4      	beq.n	800dd6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf8>
 800de24:	981c      	ldr	r0, [sp, #112]	; 0x70
 800de26:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800de28:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800de2c:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de30:	7b43      	ldrb	r3, [r0, #13]
 800de32:	4429      	add	r1, r5
 800de34:	015b      	lsls	r3, r3, #5
 800de36:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800de3a:	7983      	ldrb	r3, [r0, #6]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	440b      	add	r3, r1
 800de40:	42b3      	cmp	r3, r6
 800de42:	db5c      	blt.n	800defe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800de44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de46:	4299      	cmp	r1, r3
 800de48:	da59      	bge.n	800defe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800de4a:	f8d8 0000 	ldr.w	r0, [r8]
 800de4e:	42ae      	cmp	r6, r5
 800de50:	6803      	ldr	r3, [r0, #0]
 800de52:	bfcc      	ite	gt
 800de54:	1b76      	subgt	r6, r6, r5
 800de56:	2600      	movle	r6, #0
 800de58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5a:	bfc8      	it	gt
 800de5c:	b2b6      	uxthgt	r6, r6
 800de5e:	4798      	blx	r3
 800de60:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800de62:	7b5a      	ldrb	r2, [r3, #13]
 800de64:	00d1      	lsls	r1, r2, #3
 800de66:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800de6a:	7a19      	ldrb	r1, [r3, #8]
 800de6c:	4339      	orrs	r1, r7
 800de6e:	0657      	lsls	r7, r2, #25
 800de70:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800de72:	bf48      	it	mi
 800de74:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800de78:	4407      	add	r7, r0
 800de7a:	bf48      	it	mi
 800de7c:	b209      	sxthmi	r1, r1
 800de7e:	1a7f      	subs	r7, r7, r1
 800de80:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800de82:	b2bf      	uxth	r7, r7
 800de84:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800de88:	fa0f fa87 	sxth.w	sl, r7
 800de8c:	4551      	cmp	r1, sl
 800de8e:	dd3a      	ble.n	800df06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800de90:	0112      	lsls	r2, r2, #4
 800de92:	79d8      	ldrb	r0, [r3, #7]
 800de94:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800de98:	4302      	orrs	r2, r0
 800de9a:	4492      	add	sl, r2
 800de9c:	4551      	cmp	r1, sl
 800de9e:	dc2e      	bgt.n	800defe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800dea0:	1bcf      	subs	r7, r1, r7
 800dea2:	468a      	mov	sl, r1
 800dea4:	b2bf      	uxth	r7, r7
 800dea6:	9319      	str	r3, [sp, #100]	; 0x64
 800dea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deaa:	f8d8 0000 	ldr.w	r0, [r8]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	6801      	ldr	r1, [r0, #0]
 800deb2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800deb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800deb6:	9313      	str	r3, [sp, #76]	; 0x4c
 800deb8:	9218      	str	r2, [sp, #96]	; 0x60
 800deba:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800debc:	4788      	blx	r1
 800debe:	f898 1006 	ldrb.w	r1, [r8, #6]
 800dec2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dec4:	910b      	str	r1, [sp, #44]	; 0x2c
 800dec6:	f898 100e 	ldrb.w	r1, [r8, #14]
 800deca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800decc:	910a      	str	r1, [sp, #40]	; 0x28
 800dece:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800ded2:	9109      	str	r1, [sp, #36]	; 0x24
 800ded4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ded8:	9305      	str	r3, [sp, #20]
 800deda:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800dedc:	9206      	str	r2, [sp, #24]
 800dede:	e9cd a601 	strd	sl, r6, [sp, #4]
 800dee2:	442e      	add	r6, r5
 800dee4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800dee8:	b236      	sxth	r6, r6
 800deea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800deec:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800def0:	9600      	str	r6, [sp, #0]
 800def2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800defc:	47b0      	blx	r6
 800defe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df00:	3301      	adds	r3, #1
 800df02:	930e      	str	r3, [sp, #56]	; 0x38
 800df04:	e6e5      	b.n	800dcd2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 800df06:	2700      	movs	r7, #0
 800df08:	e7cd      	b.n	800dea6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 800df0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800df0c:	3501      	adds	r5, #1
 800df0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df10:	429d      	cmp	r5, r3
 800df12:	f6bf af76 	bge.w	800de02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800df16:	4659      	mov	r1, fp
 800df18:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800df1a:	f7f5 fd7f 	bl	8003a1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800df1e:	4604      	mov	r4, r0
 800df20:	b110      	cbz	r0, 800df28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 800df22:	280a      	cmp	r0, #10
 800df24:	d1f2      	bne.n	800df0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800df26:	e76b      	b.n	800de00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 800df28:	2400      	movs	r4, #0
 800df2a:	e76a      	b.n	800de02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800df2c:	f1bb 0f00 	cmp.w	fp, #0
 800df30:	f43f af5b 	beq.w	800ddea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 800df34:	e776      	b.n	800de24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800df36 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800df36:	b530      	push	{r4, r5, lr}
 800df38:	8a44      	ldrh	r4, [r0, #18]
 800df3a:	8ac5      	ldrh	r5, [r0, #22]
 800df3c:	82c3      	strh	r3, [r0, #22]
 800df3e:	442c      	add	r4, r5
 800df40:	1ae4      	subs	r4, r4, r3
 800df42:	8b03      	ldrh	r3, [r0, #24]
 800df44:	8244      	strh	r4, [r0, #18]
 800df46:	8a84      	ldrh	r4, [r0, #20]
 800df48:	4422      	add	r2, r4
 800df4a:	440c      	add	r4, r1
 800df4c:	1a59      	subs	r1, r3, r1
 800df4e:	8342      	strh	r2, [r0, #26]
 800df50:	8284      	strh	r4, [r0, #20]
 800df52:	8301      	strh	r1, [r0, #24]
 800df54:	bd30      	pop	{r4, r5, pc}

0800df56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800df56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5a:	7a43      	ldrb	r3, [r0, #9]
 800df5c:	b087      	sub	sp, #28
 800df5e:	4604      	mov	r4, r0
 800df60:	460f      	mov	r7, r1
 800df62:	1eda      	subs	r2, r3, #3
 800df64:	b2d2      	uxtb	r2, r2
 800df66:	2900      	cmp	r1, #0
 800df68:	d036      	beq.n	800dfd8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800df6a:	2a01      	cmp	r2, #1
 800df6c:	d932      	bls.n	800dfd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800df6e:	1e58      	subs	r0, r3, #1
 800df70:	f1d0 0b00 	rsbs	fp, r0, #0
 800df74:	eb4b 0b00 	adc.w	fp, fp, r0
 800df78:	1e99      	subs	r1, r3, #2
 800df7a:	424b      	negs	r3, r1
 800df7c:	414b      	adcs	r3, r1
 800df7e:	9303      	str	r3, [sp, #12]
 800df80:	2300      	movs	r3, #0
 800df82:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800df86:	2500      	movs	r5, #0
 800df88:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800df8c:	46a9      	mov	r9, r5
 800df8e:	8265      	strh	r5, [r4, #18]
 800df90:	82a5      	strh	r5, [r4, #20]
 800df92:	2300      	movs	r3, #0
 800df94:	9305      	str	r3, [sp, #20]
 800df96:	8823      	ldrh	r3, [r4, #0]
 800df98:	2b20      	cmp	r3, #32
 800df9a:	d02b      	beq.n	800dff4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800df9c:	eba3 020a 	sub.w	r2, r3, sl
 800dfa0:	4256      	negs	r6, r2
 800dfa2:	4156      	adcs	r6, r2
 800dfa4:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d004      	beq.n	800dfb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800dfac:	4553      	cmp	r3, sl
 800dfae:	bf16      	itet	ne
 800dfb0:	4699      	movne	r9, r3
 800dfb2:	2601      	moveq	r6, #1
 800dfb4:	2600      	movne	r6, #0
 800dfb6:	ab05      	add	r3, sp, #20
 800dfb8:	68e2      	ldr	r2, [r4, #12]
 800dfba:	7a21      	ldrb	r1, [r4, #8]
 800dfbc:	6860      	ldr	r0, [r4, #4]
 800dfbe:	f002 fcfd 	bl	80109bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dfc2:	8020      	strh	r0, [r4, #0]
 800dfc4:	b9c8      	cbnz	r0, 800dffa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800dfc6:	8b22      	ldrh	r2, [r4, #24]
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4611      	mov	r1, r2
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f7ff ffb2 	bl	800df36 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800dfd2:	e066      	b.n	800e0a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800dfd4:	468b      	mov	fp, r1
 800dfd6:	e7cf      	b.n	800df78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	2a01      	cmp	r2, #1
 800dfdc:	9103      	str	r1, [sp, #12]
 800dfde:	468b      	mov	fp, r1
 800dfe0:	bf8c      	ite	hi
 800dfe2:	2200      	movhi	r2, #0
 800dfe4:	2201      	movls	r2, #1
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	9202      	str	r2, [sp, #8]
 800dfea:	bf8c      	ite	hi
 800dfec:	2300      	movhi	r3, #0
 800dfee:	2301      	movls	r3, #1
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	e7c8      	b.n	800df86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800dff4:	4699      	mov	r9, r3
 800dff6:	2601      	movs	r6, #1
 800dff8:	e7dd      	b.n	800dfb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800dffa:	8ae3      	ldrh	r3, [r4, #22]
 800dffc:	280a      	cmp	r0, #10
 800dffe:	f103 0301 	add.w	r3, r3, #1
 800e002:	82e3      	strh	r3, [r4, #22]
 800e004:	d0df      	beq.n	800dfc6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800e006:	9a05      	ldr	r2, [sp, #20]
 800e008:	bb42      	cbnz	r2, 800e05c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800e00a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e00e:	4298      	cmp	r0, r3
 800e010:	d001      	beq.n	800e016 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800e012:	4550      	cmp	r0, sl
 800e014:	d1bd      	bne.n	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e016:	8823      	ldrh	r3, [r4, #0]
 800e018:	8b21      	ldrh	r1, [r4, #24]
 800e01a:	2b20      	cmp	r3, #32
 800e01c:	d001      	beq.n	800e022 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800e01e:	4553      	cmp	r3, sl
 800e020:	d131      	bne.n	800e086 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800e022:	2e00      	cmp	r6, #0
 800e024:	bf0a      	itet	eq
 800e026:	460d      	moveq	r5, r1
 800e028:	4630      	movne	r0, r6
 800e02a:	2001      	moveq	r0, #1
 800e02c:	440a      	add	r2, r1
 800e02e:	8aa3      	ldrh	r3, [r4, #20]
 800e030:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800e034:	b292      	uxth	r2, r2
 800e036:	8322      	strh	r2, [r4, #24]
 800e038:	4413      	add	r3, r2
 800e03a:	2f00      	cmp	r7, #0
 800e03c:	d03a      	beq.n	800e0b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800e03e:	f1bb 0f00 	cmp.w	fp, #0
 800e042:	d102      	bne.n	800e04a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800e044:	9903      	ldr	r1, [sp, #12]
 800e046:	b301      	cbz	r1, 800e08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800e048:	b1f8      	cbz	r0, 800e08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800e04a:	8ba1      	ldrh	r1, [r4, #28]
 800e04c:	4419      	add	r1, r3
 800e04e:	458c      	cmp	ip, r1
 800e050:	da2a      	bge.n	800e0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800e052:	8a61      	ldrh	r1, [r4, #18]
 800e054:	b341      	cbz	r1, 800e0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800e056:	4563      	cmp	r3, ip
 800e058:	dd9b      	ble.n	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e05a:	e01c      	b.n	800e096 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800e05c:	8893      	ldrh	r3, [r2, #4]
 800e05e:	4649      	mov	r1, r9
 800e060:	8023      	strh	r3, [r4, #0]
 800e062:	f892 800d 	ldrb.w	r8, [r2, #13]
 800e066:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800e06a:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800e06e:	f892 800a 	ldrb.w	r8, [r2, #10]
 800e072:	ea48 0800 	orr.w	r8, r8, r0
 800e076:	68e0      	ldr	r0, [r4, #12]
 800e078:	6803      	ldr	r3, [r0, #0]
 800e07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07c:	4798      	blx	r3
 800e07e:	eb08 0200 	add.w	r2, r8, r0
 800e082:	b292      	uxth	r2, r2
 800e084:	e7c7      	b.n	800e016 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800e086:	2000      	movs	r0, #0
 800e088:	e7d0      	b.n	800e02c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800e08a:	4563      	cmp	r3, ip
 800e08c:	dd81      	ble.n	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e08e:	8a63      	ldrh	r3, [r4, #18]
 800e090:	2b00      	cmp	r3, #0
 800e092:	f43f af7e 	beq.w	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e096:	2301      	movs	r3, #1
 800e098:	8ba2      	ldrh	r2, [r4, #28]
 800e09a:	77a3      	strb	r3, [r4, #30]
 800e09c:	8b63      	ldrh	r3, [r4, #26]
 800e09e:	4413      	add	r3, r2
 800e0a0:	8363      	strh	r3, [r4, #26]
 800e0a2:	b007      	add	sp, #28
 800e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f7ff ff42 	bl	800df36 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800e0b2:	e76e      	b.n	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e0b4:	4563      	cmp	r3, ip
 800e0b6:	dd14      	ble.n	800e0e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800e0b8:	9b02      	ldr	r3, [sp, #8]
 800e0ba:	b113      	cbz	r3, 800e0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800e0bc:	2301      	movs	r3, #1
 800e0be:	460a      	mov	r2, r1
 800e0c0:	e783      	b.n	800dfca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800e0c2:	9b01      	ldr	r3, [sp, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f43f af64 	beq.w	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	f47f af61 	bne.w	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e0d0:	b116      	cbz	r6, 800e0d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	462a      	mov	r2, r5
 800e0d6:	e779      	b.n	800dfcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800e0d8:	8a63      	ldrh	r3, [r4, #18]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f43f af59 	beq.w	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e0e0:	e7df      	b.n	800e0a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	f47f af55 	bne.w	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e0e8:	2e00      	cmp	r6, #0
 800e0ea:	f43f af52 	beq.w	800df92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	462a      	mov	r2, r5
 800e0f2:	e7db      	b.n	800e0ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800e0f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800e0f4:	b530      	push	{r4, r5, lr}
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	b08b      	sub	sp, #44	; 0x2c
 800e0fa:	b191      	cbz	r1, 800e122 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800e0fc:	2401      	movs	r4, #1
 800e0fe:	e9cd 3100 	strd	r3, r1, [sp]
 800e102:	4613      	mov	r3, r2
 800e104:	4601      	mov	r1, r0
 800e106:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800e10a:	a802      	add	r0, sp, #8
 800e10c:	f7ff fd0a 	bl	800db24 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800e110:	2100      	movs	r1, #0
 800e112:	a802      	add	r0, sp, #8
 800e114:	f7ff ff1f 	bl	800df56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e118:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e11c:	b163      	cbz	r3, 800e138 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800e11e:	3401      	adds	r4, #1
 800e120:	e7f6      	b.n	800e110 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800e122:	2401      	movs	r4, #1
 800e124:	f002 fd44 	bl	8010bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e128:	280a      	cmp	r0, #10
 800e12a:	4628      	mov	r0, r5
 800e12c:	bf08      	it	eq
 800e12e:	3401      	addeq	r4, #1
 800e130:	f002 fd3e 	bl	8010bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e134:	2800      	cmp	r0, #0
 800e136:	d1f7      	bne.n	800e128 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800e138:	b2a0      	uxth	r0, r4
 800e13a:	b00b      	add	sp, #44	; 0x2c
 800e13c:	bd30      	pop	{r4, r5, pc}

0800e13e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800e13e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e142:	b0e5      	sub	sp, #404	; 0x194
 800e144:	4689      	mov	r9, r1
 800e146:	461c      	mov	r4, r3
 800e148:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800e14c:	900a      	str	r0, [sp, #40]	; 0x28
 800e14e:	f1ba 0f00 	cmp.w	sl, #0
 800e152:	f000 80b4 	beq.w	800e2be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f000 80b0 	beq.w	800e2be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800e15e:	7ba3      	ldrb	r3, [r4, #14]
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 80ac 	beq.w	800e2be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800e166:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800e16a:	6810      	ldr	r0, [r2, #0]
 800e16c:	6851      	ldr	r1, [r2, #4]
 800e16e:	2500      	movs	r5, #0
 800e170:	4643      	mov	r3, r8
 800e172:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800e176:	950f      	str	r5, [sp, #60]	; 0x3c
 800e178:	af19      	add	r7, sp, #100	; 0x64
 800e17a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800e17e:	79a2      	ldrb	r2, [r4, #6]
 800e180:	c303      	stmia	r3!, {r0, r1}
 800e182:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800e186:	a90f      	add	r1, sp, #60	; 0x3c
 800e188:	4640      	mov	r0, r8
 800e18a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800e18e:	f7ff fd41 	bl	800dc14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800e192:	a90f      	add	r1, sp, #60	; 0x3c
 800e194:	79a2      	ldrb	r2, [r4, #6]
 800e196:	4608      	mov	r0, r1
 800e198:	f7ff fd3c 	bl	800dc14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800e19c:	4638      	mov	r0, r7
 800e19e:	f002 f88f 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800e1a2:	6820      	ldr	r0, [r4, #0]
 800e1a4:	6803      	ldr	r3, [r0, #0]
 800e1a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1a8:	4798      	blx	r3
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	6820      	ldr	r0, [r4, #0]
 800e1ae:	6803      	ldr	r3, [r0, #0]
 800e1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1b2:	4798      	blx	r3
 800e1b4:	4633      	mov	r3, r6
 800e1b6:	9000      	str	r0, [sp, #0]
 800e1b8:	4651      	mov	r1, sl
 800e1ba:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800e1bc:	4638      	mov	r0, r7
 800e1be:	f002 f8eb 	bl	8010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e1c2:	7923      	ldrb	r3, [r4, #4]
 800e1c4:	6820      	ldr	r0, [r4, #0]
 800e1c6:	9308      	str	r3, [sp, #32]
 800e1c8:	6803      	ldr	r3, [r0, #0]
 800e1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1cc:	4798      	blx	r3
 800e1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d2:	181e      	adds	r6, r3, r0
 800e1d4:	42ae      	cmp	r6, r5
 800e1d6:	dd06      	ble.n	800e1e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800e1d8:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800e1dc:	4282      	cmp	r2, r0
 800e1de:	bfa4      	itt	ge
 800e1e0:	189d      	addge	r5, r3, r2
 800e1e2:	fb95 f5f6 	sdivge	r5, r5, r6
 800e1e6:	a832      	add	r0, sp, #200	; 0xc8
 800e1e8:	f002 f86a 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800e1ec:	7c23      	ldrb	r3, [r4, #16]
 800e1ee:	b17b      	cbz	r3, 800e210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800e1f0:	6820      	ldr	r0, [r4, #0]
 800e1f2:	6803      	ldr	r3, [r0, #0]
 800e1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f6:	4798      	blx	r3
 800e1f8:	4683      	mov	fp, r0
 800e1fa:	6820      	ldr	r0, [r4, #0]
 800e1fc:	6803      	ldr	r3, [r0, #0]
 800e1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e200:	4798      	blx	r3
 800e202:	465b      	mov	r3, fp
 800e204:	9000      	str	r0, [sp, #0]
 800e206:	4651      	mov	r1, sl
 800e208:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800e20a:	a832      	add	r0, sp, #200	; 0xc8
 800e20c:	f002 f8c4 	bl	8010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e210:	7be1      	ldrb	r1, [r4, #15]
 800e212:	a811      	add	r0, sp, #68	; 0x44
 800e214:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800e218:	7963      	ldrb	r3, [r4, #5]
 800e21a:	1a52      	subs	r2, r2, r1
 800e21c:	7c21      	ldrb	r1, [r4, #16]
 800e21e:	9101      	str	r1, [sp, #4]
 800e220:	b292      	uxth	r2, r2
 800e222:	6821      	ldr	r1, [r4, #0]
 800e224:	9100      	str	r1, [sp, #0]
 800e226:	a932      	add	r1, sp, #200	; 0xc8
 800e228:	f7ff fc7c 	bl	800db24 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800e22c:	7c23      	ldrb	r3, [r4, #16]
 800e22e:	b9bb      	cbnz	r3, 800e260 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800e230:	fa1f fa86 	uxth.w	sl, r6
 800e234:	2d00      	cmp	r5, #0
 800e236:	dd45      	ble.n	800e2c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800e238:	4638      	mov	r0, r7
 800e23a:	f002 fcb9 	bl	8010bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d03d      	beq.n	800e2be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800e242:	280a      	cmp	r0, #10
 800e244:	d1f6      	bne.n	800e234 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800e246:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800e24a:	3d01      	subs	r5, #1
 800e24c:	4453      	add	r3, sl
 800e24e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800e252:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800e256:	eba3 030a 	sub.w	r3, r3, sl
 800e25a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800e25e:	e7e9      	b.n	800e234 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800e260:	0073      	lsls	r3, r6, #1
 800e262:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800e266:	fa1f fa86 	uxth.w	sl, r6
 800e26a:	9309      	str	r3, [sp, #36]	; 0x24
 800e26c:	2d00      	cmp	r5, #0
 800e26e:	dd29      	ble.n	800e2c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800e270:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800e274:	a811      	add	r0, sp, #68	; 0x44
 800e276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e278:	428b      	cmp	r3, r1
 800e27a:	bfd4      	ite	le
 800e27c:	2100      	movle	r1, #0
 800e27e:	2101      	movgt	r1, #1
 800e280:	f7ff fe69 	bl	800df56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e284:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800e288:	3b01      	subs	r3, #1
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	455b      	cmp	r3, fp
 800e28e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e290:	d005      	beq.n	800e29e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800e292:	7961      	ldrb	r1, [r4, #5]
 800e294:	4638      	mov	r0, r7
 800e296:	f7f5 fbc1 	bl	8003a1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e29c:	e7f4      	b.n	800e288 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800e29e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800e2a2:	3d01      	subs	r5, #1
 800e2a4:	4453      	add	r3, sl
 800e2a6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800e2aa:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800e2ae:	eba3 030a 	sub.w	r3, r3, sl
 800e2b2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800e2b6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1d6      	bne.n	800e26c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800e2be:	b065      	add	sp, #404	; 0x194
 800e2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c4:	0075      	lsls	r5, r6, #1
 800e2c6:	f04f 0a00 	mov.w	sl, #0
 800e2ca:	7c23      	ldrb	r3, [r4, #16]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d066      	beq.n	800e39e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800e2d0:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800e2d4:	a811      	add	r0, sp, #68	; 0x44
 800e2d6:	428d      	cmp	r5, r1
 800e2d8:	bfd4      	ite	le
 800e2da:	2100      	movle	r1, #0
 800e2dc:	2101      	movgt	r1, #1
 800e2de:	f7ff fe3a 	bl	800df56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e2e2:	9b08      	ldr	r3, [sp, #32]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d055      	beq.n	800e394 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800e2e8:	f894 b010 	ldrb.w	fp, [r4, #16]
 800e2ec:	2264      	movs	r2, #100	; 0x64
 800e2ee:	4639      	mov	r1, r7
 800e2f0:	a84b      	add	r0, sp, #300	; 0x12c
 800e2f2:	f00b fd65 	bl	8019dc0 <memcpy>
 800e2f6:	f1bb 0f00 	cmp.w	fp, #0
 800e2fa:	d058      	beq.n	800e3ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 800e2fc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800e300:	7922      	ldrb	r2, [r4, #4]
 800e302:	2a01      	cmp	r2, #1
 800e304:	d13c      	bne.n	800e380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 800e306:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800e30a:	1ac0      	subs	r0, r0, r3
 800e30c:	2302      	movs	r3, #2
 800e30e:	fb90 f0f3 	sdiv	r0, r0, r3
 800e312:	b200      	sxth	r0, r0
 800e314:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e318:	4418      	add	r0, r3
 800e31a:	7c23      	ldrb	r3, [r4, #16]
 800e31c:	b200      	sxth	r0, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d03a      	beq.n	800e398 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 800e322:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800e326:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800e32a:	9000      	str	r0, [sp, #0]
 800e32c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800e330:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e332:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800e336:	e9cd a703 	strd	sl, r7, [sp, #12]
 800e33a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800e33e:	464a      	mov	r2, r9
 800e340:	2100      	movs	r1, #0
 800e342:	f7ff fc98 	bl	800dc76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800e346:	2800      	cmp	r0, #0
 800e348:	d1b9      	bne.n	800e2be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800e34a:	b2b2      	uxth	r2, r6
 800e34c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800e350:	4611      	mov	r1, r2
 800e352:	4413      	add	r3, r2
 800e354:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800e358:	b21b      	sxth	r3, r3
 800e35a:	1a52      	subs	r2, r2, r1
 800e35c:	7c21      	ldrb	r1, [r4, #16]
 800e35e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800e362:	b212      	sxth	r2, r2
 800e364:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 800e368:	b109      	cbz	r1, 800e36e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 800e36a:	42b2      	cmp	r2, r6
 800e36c:	dba7      	blt.n	800e2be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800e36e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800e372:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800e376:	440a      	add	r2, r1
 800e378:	b212      	sxth	r2, r2
 800e37a:	4293      	cmp	r3, r2
 800e37c:	dda5      	ble.n	800e2ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 800e37e:	e79e      	b.n	800e2be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800e380:	2a02      	cmp	r2, #2
 800e382:	d105      	bne.n	800e390 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800e384:	7be2      	ldrb	r2, [r4, #15]
 800e386:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800e38a:	1a80      	subs	r0, r0, r2
 800e38c:	1ac0      	subs	r0, r0, r3
 800e38e:	e7c0      	b.n	800e312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 800e390:	2000      	movs	r0, #0
 800e392:	e7bf      	b.n	800e314 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 800e394:	7be0      	ldrb	r0, [r4, #15]
 800e396:	e7bd      	b.n	800e314 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 800e398:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e39c:	e7c3      	b.n	800e326 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 800e39e:	9b08      	ldr	r3, [sp, #32]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d0f7      	beq.n	800e394 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800e3a4:	2264      	movs	r2, #100	; 0x64
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	a84b      	add	r0, sp, #300	; 0x12c
 800e3aa:	f00b fd09 	bl	8019dc0 <memcpy>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e3b4:	6821      	ldr	r1, [r4, #0]
 800e3b6:	a84b      	add	r0, sp, #300	; 0x12c
 800e3b8:	f7ff fbf0 	bl	800db9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800e3bc:	b203      	sxth	r3, r0
 800e3be:	e79f      	b.n	800e300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0800e3c0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800e3c0:	2b02      	cmp	r3, #2
 800e3c2:	b510      	push	{r4, lr}
 800e3c4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e3c8:	d00b      	beq.n	800e3e2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800e3ca:	2b03      	cmp	r3, #3
 800e3cc:	d00e      	beq.n	800e3ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d001      	beq.n	800e3d6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800e3d2:	1860      	adds	r0, r4, r1
 800e3d4:	bd10      	pop	{r4, pc}
 800e3d6:	8880      	ldrh	r0, [r0, #4]
 800e3d8:	4420      	add	r0, r4
 800e3da:	b200      	sxth	r0, r0
 800e3dc:	1a80      	subs	r0, r0, r2
 800e3de:	3801      	subs	r0, #1
 800e3e0:	e7f8      	b.n	800e3d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800e3e2:	8880      	ldrh	r0, [r0, #4]
 800e3e4:	4420      	add	r0, r4
 800e3e6:	b200      	sxth	r0, r0
 800e3e8:	1a40      	subs	r0, r0, r1
 800e3ea:	e7f8      	b.n	800e3de <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800e3ec:	18a0      	adds	r0, r4, r2
 800e3ee:	e7f1      	b.n	800e3d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800e3f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	b510      	push	{r4, lr}
 800e3f4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800e3f8:	d006      	beq.n	800e408 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800e3fa:	2b03      	cmp	r3, #3
 800e3fc:	d00a      	beq.n	800e414 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	bf14      	ite	ne
 800e402:	18a0      	addne	r0, r4, r2
 800e404:	1860      	addeq	r0, r4, r1
 800e406:	bd10      	pop	{r4, pc}
 800e408:	88c0      	ldrh	r0, [r0, #6]
 800e40a:	4420      	add	r0, r4
 800e40c:	b200      	sxth	r0, r0
 800e40e:	1a80      	subs	r0, r0, r2
 800e410:	3801      	subs	r0, #1
 800e412:	e7f8      	b.n	800e406 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800e414:	88c0      	ldrh	r0, [r0, #6]
 800e416:	4420      	add	r0, r4
 800e418:	b200      	sxth	r0, r0
 800e41a:	1a40      	subs	r0, r0, r1
 800e41c:	e7f8      	b.n	800e410 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800e420 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800e420:	4b01      	ldr	r3, [pc, #4]	; (800e428 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	4770      	bx	lr
 800e428:	24006af8 	.word	0x24006af8

0800e42c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800e42c:	4603      	mov	r3, r0
 800e42e:	b1c8      	cbz	r0, 800e464 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800e430:	0c02      	lsrs	r2, r0, #16
 800e432:	0412      	lsls	r2, r2, #16
 800e434:	b9a2      	cbnz	r2, 800e460 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800e436:	0403      	lsls	r3, r0, #16
 800e438:	2010      	movs	r0, #16
 800e43a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e43e:	bf04      	itt	eq
 800e440:	021b      	lsleq	r3, r3, #8
 800e442:	3008      	addeq	r0, #8
 800e444:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e448:	bf04      	itt	eq
 800e44a:	011b      	lsleq	r3, r3, #4
 800e44c:	3004      	addeq	r0, #4
 800e44e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e452:	bf04      	itt	eq
 800e454:	009b      	lsleq	r3, r3, #2
 800e456:	3002      	addeq	r0, #2
 800e458:	2b00      	cmp	r3, #0
 800e45a:	db04      	blt.n	800e466 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800e45c:	3001      	adds	r0, #1
 800e45e:	4770      	bx	lr
 800e460:	2000      	movs	r0, #0
 800e462:	e7ea      	b.n	800e43a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800e464:	2020      	movs	r0, #32
 800e466:	4770      	bx	lr

0800e468 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800e468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46c:	b087      	sub	sp, #28
 800e46e:	4681      	mov	r9, r0
 800e470:	4698      	mov	r8, r3
 800e472:	4610      	mov	r0, r2
 800e474:	460d      	mov	r5, r1
 800e476:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800e47a:	b981      	cbnz	r1, 800e49e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800e47c:	b14b      	cbz	r3, 800e492 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800e47e:	460b      	mov	r3, r1
 800e480:	464a      	mov	r2, r9
 800e482:	4641      	mov	r1, r8
 800e484:	e9cd 4700 	strd	r4, r7, [sp]
 800e488:	f7ff ffee 	bl	800e468 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e48c:	b007      	add	sp, #28
 800e48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e492:	f04f 33ff 	mov.w	r3, #4294967295
 800e496:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800e49a:	603b      	str	r3, [r7, #0]
 800e49c:	e7f6      	b.n	800e48c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800e49e:	fa32 fa01 	lsrs.w	sl, r2, r1
 800e4a2:	d107      	bne.n	800e4b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800e4a4:	fb09 f602 	mul.w	r6, r9, r2
 800e4a8:	fbb6 f0f4 	udiv	r0, r6, r4
 800e4ac:	fb04 6610 	mls	r6, r4, r0, r6
 800e4b0:	603e      	str	r6, [r7, #0]
 800e4b2:	e7eb      	b.n	800e48c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800e4b4:	2601      	movs	r6, #1
 800e4b6:	fa09 fb01 	lsl.w	fp, r9, r1
 800e4ba:	408e      	lsls	r6, r1
 800e4bc:	fbbb f3f4 	udiv	r3, fp, r4
 800e4c0:	3e01      	subs	r6, #1
 800e4c2:	9302      	str	r3, [sp, #8]
 800e4c4:	fb0a f303 	mul.w	r3, sl, r3
 800e4c8:	4016      	ands	r6, r2
 800e4ca:	9303      	str	r3, [sp, #12]
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	f7ff ffad 	bl	800e42c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800e4d2:	464a      	mov	r2, r9
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	4601      	mov	r1, r0
 800e4d8:	4630      	mov	r0, r6
 800e4da:	e9cd 4700 	strd	r4, r7, [sp]
 800e4de:	f7ff ffc3 	bl	800e468 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e4e2:	9b02      	ldr	r3, [sp, #8]
 800e4e4:	4606      	mov	r6, r0
 800e4e6:	eb05 0108 	add.w	r1, r5, r8
 800e4ea:	fb04 bb13 	mls	fp, r4, r3, fp
 800e4ee:	4658      	mov	r0, fp
 800e4f0:	f7ff ff9c 	bl	800e42c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800e4f4:	ab05      	add	r3, sp, #20
 800e4f6:	465a      	mov	r2, fp
 800e4f8:	e9cd 4300 	strd	r4, r3, [sp]
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	4650      	mov	r0, sl
 800e500:	f7ff ffb2 	bl	800e468 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	9a05      	ldr	r2, [sp, #20]
 800e508:	9b03      	ldr	r3, [sp, #12]
 800e50a:	4411      	add	r1, r2
 800e50c:	fbb1 f2f4 	udiv	r2, r1, r4
 800e510:	18d3      	adds	r3, r2, r3
 800e512:	fb04 1412 	mls	r4, r4, r2, r1
 800e516:	441e      	add	r6, r3
 800e518:	603c      	str	r4, [r7, #0]
 800e51a:	4430      	add	r0, r6
 800e51c:	e7b6      	b.n	800e48c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800e51e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800e51e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e522:	b085      	sub	sp, #20
 800e524:	f1b0 0900 	subs.w	r9, r0, #0
 800e528:	461d      	mov	r5, r3
 800e52a:	4617      	mov	r7, r2
 800e52c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e52e:	bfbb      	ittet	lt
 800e530:	f1c9 0900 	rsblt	r9, r9, #0
 800e534:	f04f 36ff 	movlt.w	r6, #4294967295
 800e538:	2601      	movge	r6, #1
 800e53a:	6823      	ldrlt	r3, [r4, #0]
 800e53c:	bfbc      	itt	lt
 800e53e:	425b      	neglt	r3, r3
 800e540:	6023      	strlt	r3, [r4, #0]
 800e542:	2a00      	cmp	r2, #0
 800e544:	da04      	bge.n	800e550 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	4257      	negs	r7, r2
 800e54a:	4276      	negs	r6, r6
 800e54c:	425b      	negs	r3, r3
 800e54e:	6023      	str	r3, [r4, #0]
 800e550:	2d00      	cmp	r5, #0
 800e552:	4638      	mov	r0, r7
 800e554:	bfba      	itte	lt
 800e556:	426d      	neglt	r5, r5
 800e558:	f04f 38ff 	movlt.w	r8, #4294967295
 800e55c:	f04f 0801 	movge.w	r8, #1
 800e560:	f7ff ff64 	bl	800e42c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800e564:	ab03      	add	r3, sp, #12
 800e566:	463a      	mov	r2, r7
 800e568:	e9cd 5300 	strd	r5, r3, [sp]
 800e56c:	4603      	mov	r3, r0
 800e56e:	4648      	mov	r0, r9
 800e570:	f7ff ff7a 	bl	800e468 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e574:	6823      	ldr	r3, [r4, #0]
 800e576:	9a03      	ldr	r2, [sp, #12]
 800e578:	4546      	cmp	r6, r8
 800e57a:	441a      	add	r2, r3
 800e57c:	fb92 f3f5 	sdiv	r3, r2, r5
 800e580:	4418      	add	r0, r3
 800e582:	fb05 2313 	mls	r3, r5, r3, r2
 800e586:	bf18      	it	ne
 800e588:	4240      	negne	r0, r0
 800e58a:	1c72      	adds	r2, r6, #1
 800e58c:	6023      	str	r3, [r4, #0]
 800e58e:	d105      	bne.n	800e59c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800e590:	2b00      	cmp	r3, #0
 800e592:	f1c3 0200 	rsb	r2, r3, #0
 800e596:	db0b      	blt.n	800e5b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800e598:	6022      	str	r2, [r4, #0]
 800e59a:	e006      	b.n	800e5aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800e59c:	2e01      	cmp	r6, #1
 800e59e:	d104      	bne.n	800e5aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	da02      	bge.n	800e5aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800e5a4:	442b      	add	r3, r5
 800e5a6:	3801      	subs	r0, #1
 800e5a8:	6023      	str	r3, [r4, #0]
 800e5aa:	b005      	add	sp, #20
 800e5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5b0:	3801      	subs	r0, #1
 800e5b2:	1b52      	subs	r2, r2, r5
 800e5b4:	e7f0      	b.n	800e598 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800e5b8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800e5b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e5bc:	4c1c      	ldr	r4, [pc, #112]	; (800e630 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800e5be:	4605      	mov	r5, r0
 800e5c0:	6807      	ldr	r7, [r0, #0]
 800e5c2:	69a3      	ldr	r3, [r4, #24]
 800e5c4:	b92b      	cbnz	r3, 800e5d2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800e5c6:	6840      	ldr	r0, [r0, #4]
 800e5c8:	e9c5 7000 	strd	r7, r0, [r5]
 800e5cc:	b004      	add	sp, #16
 800e5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d2:	f04f 0802 	mov.w	r8, #2
 800e5d6:	68a2      	ldr	r2, [r4, #8]
 800e5d8:	ae04      	add	r6, sp, #16
 800e5da:	6820      	ldr	r0, [r4, #0]
 800e5dc:	fb93 f1f8 	sdiv	r1, r3, r8
 800e5e0:	440a      	add	r2, r1
 800e5e2:	69e1      	ldr	r1, [r4, #28]
 800e5e4:	f846 2d04 	str.w	r2, [r6, #-4]!
 800e5e8:	463a      	mov	r2, r7
 800e5ea:	9600      	str	r6, [sp, #0]
 800e5ec:	f7ff ff97 	bl	800e51e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e5f0:	69a3      	ldr	r3, [r4, #24]
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	686a      	ldr	r2, [r5, #4]
 800e5f6:	6a21      	ldr	r1, [r4, #32]
 800e5f8:	9600      	str	r6, [sp, #0]
 800e5fa:	6860      	ldr	r0, [r4, #4]
 800e5fc:	f7ff ff8f 	bl	800e51e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e600:	69a3      	ldr	r3, [r4, #24]
 800e602:	6962      	ldr	r2, [r4, #20]
 800e604:	4407      	add	r7, r0
 800e606:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e608:	9600      	str	r6, [sp, #0]
 800e60a:	68e0      	ldr	r0, [r4, #12]
 800e60c:	fb93 f8f8 	sdiv	r8, r3, r8
 800e610:	4442      	add	r2, r8
 800e612:	9203      	str	r2, [sp, #12]
 800e614:	682a      	ldr	r2, [r5, #0]
 800e616:	f7ff ff82 	bl	800e51e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e61a:	4680      	mov	r8, r0
 800e61c:	9600      	str	r6, [sp, #0]
 800e61e:	69a3      	ldr	r3, [r4, #24]
 800e620:	686a      	ldr	r2, [r5, #4]
 800e622:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e624:	6920      	ldr	r0, [r4, #16]
 800e626:	f7ff ff7a 	bl	800e51e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e62a:	4440      	add	r0, r8
 800e62c:	e7cc      	b.n	800e5c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800e62e:	bf00      	nop
 800e630:	24006afc 	.word	0x24006afc

0800e634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800e634:	4b07      	ldr	r3, [pc, #28]	; (800e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d109      	bne.n	800e650 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800e63c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800e640:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e644:	8003      	strh	r3, [r0, #0]
 800e646:	4b04      	ldr	r3, [pc, #16]	; (800e658 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800e648:	881b      	ldrh	r3, [r3, #0]
 800e64a:	3b01      	subs	r3, #1
 800e64c:	1a9b      	subs	r3, r3, r2
 800e64e:	800b      	strh	r3, [r1, #0]
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	24006ae8 	.word	0x24006ae8
 800e658:	24006ae4 	.word	0x24006ae4

0800e65c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800e65c:	4b07      	ldr	r3, [pc, #28]	; (800e67c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800e65e:	b510      	push	{r4, lr}
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d108      	bne.n	800e678 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800e666:	4b06      	ldr	r3, [pc, #24]	; (800e680 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800e668:	880c      	ldrh	r4, [r1, #0]
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e670:	3b01      	subs	r3, #1
 800e672:	1b1b      	subs	r3, r3, r4
 800e674:	8003      	strh	r3, [r0, #0]
 800e676:	800a      	strh	r2, [r1, #0]
 800e678:	bd10      	pop	{r4, pc}
 800e67a:	bf00      	nop
 800e67c:	24006ae8 	.word	0x24006ae8
 800e680:	24006ae4 	.word	0x24006ae4

0800e684 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800e684:	4b0a      	ldr	r3, [pc, #40]	; (800e6b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800e686:	b510      	push	{r4, lr}
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d10e      	bne.n	800e6ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800e68e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800e692:	8843      	ldrh	r3, [r0, #2]
 800e694:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e698:	18ca      	adds	r2, r1, r3
 800e69a:	4b06      	ldr	r3, [pc, #24]	; (800e6b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800e69c:	8044      	strh	r4, [r0, #2]
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	1a9b      	subs	r3, r3, r2
 800e6a2:	8003      	strh	r3, [r0, #0]
 800e6a4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e6a8:	8081      	strh	r1, [r0, #4]
 800e6aa:	80c3      	strh	r3, [r0, #6]
 800e6ac:	bd10      	pop	{r4, pc}
 800e6ae:	bf00      	nop
 800e6b0:	24006ae8 	.word	0x24006ae8
 800e6b4:	24006ae4 	.word	0x24006ae4

0800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800e6b8:	4b08      	ldr	r3, [pc, #32]	; (800e6dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d10c      	bne.n	800e6da <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800e6c0:	8803      	ldrh	r3, [r0, #0]
 800e6c2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800e6c6:	8842      	ldrh	r2, [r0, #2]
 800e6c8:	8002      	strh	r2, [r0, #0]
 800e6ca:	185a      	adds	r2, r3, r1
 800e6cc:	4b04      	ldr	r3, [pc, #16]	; (800e6e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800e6ce:	881b      	ldrh	r3, [r3, #0]
 800e6d0:	1a9b      	subs	r3, r3, r2
 800e6d2:	8043      	strh	r3, [r0, #2]
 800e6d4:	88c3      	ldrh	r3, [r0, #6]
 800e6d6:	80c1      	strh	r1, [r0, #6]
 800e6d8:	8083      	strh	r3, [r0, #4]
 800e6da:	4770      	bx	lr
 800e6dc:	24006ae8 	.word	0x24006ae8
 800e6e0:	24006ae4 	.word	0x24006ae4

0800e6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800e6e4:	4b07      	ldr	r3, [pc, #28]	; (800e704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800e6e6:	b510      	push	{r4, lr}
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d108      	bne.n	800e700 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800e6ee:	f9b1 3000 	ldrsh.w	r3, [r1]
 800e6f2:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e6f6:	8003      	strh	r3, [r0, #0]
 800e6f8:	8893      	ldrh	r3, [r2, #4]
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	1b1b      	subs	r3, r3, r4
 800e6fe:	800b      	strh	r3, [r1, #0]
 800e700:	bd10      	pop	{r4, pc}
 800e702:	bf00      	nop
 800e704:	24006ae8 	.word	0x24006ae8

0800e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800e708:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800e70a:	460a      	mov	r2, r1
 800e70c:	b510      	push	{r4, lr}
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b01      	cmp	r3, #1
 800e712:	d10d      	bne.n	800e730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800e714:	8881      	ldrh	r1, [r0, #4]
 800e716:	8803      	ldrh	r3, [r0, #0]
 800e718:	440b      	add	r3, r1
 800e71a:	4601      	mov	r1, r0
 800e71c:	3b01      	subs	r3, #1
 800e71e:	f821 3b02 	strh.w	r3, [r1], #2
 800e722:	f7ff ffdf 	bl	800e6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800e726:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e72a:	88c2      	ldrh	r2, [r0, #6]
 800e72c:	80c3      	strh	r3, [r0, #6]
 800e72e:	8082      	strh	r2, [r0, #4]
 800e730:	bd10      	pop	{r4, pc}
 800e732:	bf00      	nop
 800e734:	24006ae8 	.word	0x24006ae8

0800e738 <_ZN8touchgfx11Application13requestRedrawEv>:
 800e738:	4b06      	ldr	r3, [pc, #24]	; (800e754 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800e73a:	2100      	movs	r1, #0
 800e73c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e740:	4b05      	ldr	r3, [pc, #20]	; (800e758 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800e742:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800e746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e74a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800e74e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800e752:	4770      	bx	lr
 800e754:	24006ae4 	.word	0x24006ae4
 800e758:	24006ae6 	.word	0x24006ae6

0800e75c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800e75c:	4b03      	ldr	r3, [pc, #12]	; (800e76c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800e75e:	6818      	ldr	r0, [r3, #0]
 800e760:	b110      	cbz	r0, 800e768 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800e762:	6803      	ldr	r3, [r0, #0]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	4718      	bx	r3
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	24006b2c 	.word	0x24006b2c

0800e770 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800e770:	4770      	bx	lr
	...

0800e774 <_ZN8touchgfx11Application4drawEv>:
 800e774:	4b09      	ldr	r3, [pc, #36]	; (800e79c <_ZN8touchgfx11Application4drawEv+0x28>)
 800e776:	b507      	push	{r0, r1, r2, lr}
 800e778:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e77c:	2100      	movs	r1, #0
 800e77e:	4b08      	ldr	r3, [pc, #32]	; (800e7a0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800e780:	9100      	str	r1, [sp, #0]
 800e782:	4669      	mov	r1, sp
 800e784:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e788:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e78c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e790:	6803      	ldr	r3, [r0, #0]
 800e792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e794:	4798      	blx	r3
 800e796:	b003      	add	sp, #12
 800e798:	f85d fb04 	ldr.w	pc, [sp], #4
 800e79c:	24006ae4 	.word	0x24006ae4
 800e7a0:	24006ae6 	.word	0x24006ae6

0800e7a4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800e7a4:	4b03      	ldr	r3, [pc, #12]	; (800e7b4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800e7a6:	6818      	ldr	r0, [r3, #0]
 800e7a8:	b110      	cbz	r0, 800e7b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800e7aa:	6803      	ldr	r3, [r0, #0]
 800e7ac:	69db      	ldr	r3, [r3, #28]
 800e7ae:	4718      	bx	r3
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	24006b2c 	.word	0x24006b2c

0800e7b8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800e7b8:	4b03      	ldr	r3, [pc, #12]	; (800e7c8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800e7ba:	6818      	ldr	r0, [r3, #0]
 800e7bc:	b110      	cbz	r0, 800e7c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800e7be:	6803      	ldr	r3, [r0, #0]
 800e7c0:	6a1b      	ldr	r3, [r3, #32]
 800e7c2:	4718      	bx	r3
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	24006b2c 	.word	0x24006b2c

0800e7cc <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800e7d2:	4770      	bx	lr

0800e7d4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800e7d4:	4b03      	ldr	r3, [pc, #12]	; (800e7e4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800e7d6:	6818      	ldr	r0, [r3, #0]
 800e7d8:	b110      	cbz	r0, 800e7e0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800e7da:	6803      	ldr	r3, [r0, #0]
 800e7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7de:	4718      	bx	r3
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	24006b2c 	.word	0x24006b2c

0800e7e8 <_ZN8touchgfx11ApplicationD1Ev>:
 800e7e8:	4770      	bx	lr

0800e7ea <_ZN8touchgfx11ApplicationD0Ev>:
 800e7ea:	b510      	push	{r4, lr}
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	f44f 719c 	mov.w	r1, #312	; 0x138
 800e7f2:	f00b fa39 	bl	8019c68 <_ZdlPvj>
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	bd10      	pop	{r4, pc}
	...

0800e7fc <_ZN8touchgfx11Application15handleTickEventEv>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4d38      	ldr	r5, [pc, #224]	; (800e8e0 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 800e800:	4604      	mov	r4, r0
 800e802:	6828      	ldr	r0, [r5, #0]
 800e804:	b140      	cbz	r0, 800e818 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800e806:	7a03      	ldrb	r3, [r0, #8]
 800e808:	b933      	cbnz	r3, 800e818 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800e80a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800e80e:	6803      	ldr	r3, [r0, #0]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e816:	4718      	bx	r3
 800e818:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800e81c:	b97b      	cbnz	r3, 800e83e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800e81e:	b170      	cbz	r0, 800e83e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800e820:	7a03      	ldrb	r3, [r0, #8]
 800e822:	b163      	cbz	r3, 800e83e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800e824:	4b2f      	ldr	r3, [pc, #188]	; (800e8e4 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800e826:	6818      	ldr	r0, [r3, #0]
 800e828:	b110      	cbz	r0, 800e830 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800e82a:	6803      	ldr	r3, [r0, #0]
 800e82c:	691b      	ldr	r3, [r3, #16]
 800e82e:	4798      	blx	r3
 800e830:	6828      	ldr	r0, [r5, #0]
 800e832:	6803      	ldr	r3, [r0, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	4798      	blx	r3
 800e838:	2301      	movs	r3, #1
 800e83a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800e83e:	2500      	movs	r5, #0
 800e840:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800e844:	42a8      	cmp	r0, r5
 800e846:	dd0c      	ble.n	800e862 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800e848:	1963      	adds	r3, r4, r5
 800e84a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800e84e:	b132      	cbz	r2, 800e85e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800e850:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800e854:	4413      	add	r3, r2
 800e856:	6858      	ldr	r0, [r3, #4]
 800e858:	6803      	ldr	r3, [r0, #0]
 800e85a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e85c:	4798      	blx	r3
 800e85e:	3501      	adds	r5, #1
 800e860:	e7ee      	b.n	800e840 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800e862:	2300      	movs	r3, #0
 800e864:	461a      	mov	r2, r3
 800e866:	4298      	cmp	r0, r3
 800e868:	d10f      	bne.n	800e88a <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 800e86a:	1d25      	adds	r5, r4, #4
 800e86c:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800e870:	4291      	cmp	r1, r2
 800e872:	dd2d      	ble.n	800e8d0 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 800e874:	1e48      	subs	r0, r1, #1
 800e876:	b280      	uxth	r0, r0
 800e878:	4288      	cmp	r0, r1
 800e87a:	d31a      	bcc.n	800e8b2 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800e87c:	4b1a      	ldr	r3, [pc, #104]	; (800e8e8 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800e87e:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800e882:	4a1a      	ldr	r2, [pc, #104]	; (800e8ec <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800e884:	481a      	ldr	r0, [pc, #104]	; (800e8f0 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800e886:	f00b fa1d 	bl	8019cc4 <__assert_func>
 800e88a:	18e1      	adds	r1, r4, r3
 800e88c:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800e890:	b16d      	cbz	r5, 800e8ae <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 800e892:	429a      	cmp	r2, r3
 800e894:	d00a      	beq.n	800e8ac <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 800e896:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800e89a:	4431      	add	r1, r6
 800e89c:	684e      	ldr	r6, [r1, #4]
 800e89e:	b291      	uxth	r1, r2
 800e8a0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800e8a4:	604e      	str	r6, [r1, #4]
 800e8a6:	18a1      	adds	r1, r4, r2
 800e8a8:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800e8ac:	3201      	adds	r2, #1
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	e7d9      	b.n	800e866 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800e8b2:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800e8b6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	428b      	cmp	r3, r1
 800e8be:	d004      	beq.n	800e8ca <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 800e8c0:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800e8c4:	f843 6c04 	str.w	r6, [r3, #-4]
 800e8c8:	e7f8      	b.n	800e8bc <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800e8ca:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800e8ce:	e7cd      	b.n	800e86c <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800e8d0:	4b04      	ldr	r3, [pc, #16]	; (800e8e4 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800e8d2:	6818      	ldr	r0, [r3, #0]
 800e8d4:	b110      	cbz	r0, 800e8dc <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800e8d6:	6803      	ldr	r3, [r0, #0]
 800e8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8da:	e79a      	b.n	800e812 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800e8dc:	bd70      	pop	{r4, r5, r6, pc}
 800e8de:	bf00      	nop
 800e8e0:	24006b30 	.word	0x24006b30
 800e8e4:	24006b2c 	.word	0x24006b2c
 800e8e8:	0801d7e0 	.word	0x0801d7e0
 800e8ec:	0801d9d4 	.word	0x0801d9d4
 800e8f0:	0801d7ee 	.word	0x0801d7ee

0800e8f4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800e8f4:	b570      	push	{r4, r5, r6, lr}
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	b929      	cbnz	r1, 800e908 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800e8fc:	4b0c      	ldr	r3, [pc, #48]	; (800e930 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800e8fe:	215e      	movs	r1, #94	; 0x5e
 800e900:	4a0c      	ldr	r2, [pc, #48]	; (800e934 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800e902:	480d      	ldr	r0, [pc, #52]	; (800e938 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800e904:	f00b f9de 	bl	8019cc4 <__assert_func>
 800e908:	2300      	movs	r3, #0
 800e90a:	4d0c      	ldr	r5, [pc, #48]	; (800e93c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800e90c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800e910:	6828      	ldr	r0, [r5, #0]
 800e912:	b110      	cbz	r0, 800e91a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800e914:	6803      	ldr	r3, [r0, #0]
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	4798      	blx	r3
 800e91a:	602c      	str	r4, [r5, #0]
 800e91c:	4620      	mov	r0, r4
 800e91e:	6823      	ldr	r3, [r4, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	4798      	blx	r3
 800e924:	6833      	ldr	r3, [r6, #0]
 800e926:	4630      	mov	r0, r6
 800e928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e92e:	4718      	bx	r3
 800e930:	0801d7ac 	.word	0x0801d7ac
 800e934:	0801d894 	.word	0x0801d894
 800e938:	0801d7b6 	.word	0x0801d7b6
 800e93c:	24006b2c 	.word	0x24006b2c

0800e940 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800e940:	b510      	push	{r4, lr}
 800e942:	f9b1 4000 	ldrsh.w	r4, [r1]
 800e946:	888a      	ldrh	r2, [r1, #4]
 800e948:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e94c:	4422      	add	r2, r4
 800e94e:	b212      	sxth	r2, r2
 800e950:	4293      	cmp	r3, r2
 800e952:	da15      	bge.n	800e980 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e954:	8882      	ldrh	r2, [r0, #4]
 800e956:	4413      	add	r3, r2
 800e958:	b21b      	sxth	r3, r3
 800e95a:	429c      	cmp	r4, r3
 800e95c:	da10      	bge.n	800e980 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e95e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800e962:	88c9      	ldrh	r1, [r1, #6]
 800e964:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e968:	4419      	add	r1, r3
 800e96a:	b209      	sxth	r1, r1
 800e96c:	428a      	cmp	r2, r1
 800e96e:	da07      	bge.n	800e980 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e970:	88c0      	ldrh	r0, [r0, #6]
 800e972:	4410      	add	r0, r2
 800e974:	b200      	sxth	r0, r0
 800e976:	4283      	cmp	r3, r0
 800e978:	bfac      	ite	ge
 800e97a:	2000      	movge	r0, #0
 800e97c:	2001      	movlt	r0, #1
 800e97e:	bd10      	pop	{r4, pc}
 800e980:	2000      	movs	r0, #0
 800e982:	e7fc      	b.n	800e97e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800e984 <_ZN8touchgfx4Rect10restrictToEss>:
 800e984:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	b510      	push	{r4, lr}
 800e98c:	da04      	bge.n	800e998 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800e98e:	8884      	ldrh	r4, [r0, #4]
 800e990:	4423      	add	r3, r4
 800e992:	8083      	strh	r3, [r0, #4]
 800e994:	2300      	movs	r3, #0
 800e996:	8003      	strh	r3, [r0, #0]
 800e998:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e99c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e9a0:	1b09      	subs	r1, r1, r4
 800e9a2:	428b      	cmp	r3, r1
 800e9a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800e9a8:	bfc8      	it	gt
 800e9aa:	8081      	strhgt	r1, [r0, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	da04      	bge.n	800e9ba <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800e9b0:	88c1      	ldrh	r1, [r0, #6]
 800e9b2:	440b      	add	r3, r1
 800e9b4:	80c3      	strh	r3, [r0, #6]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	8043      	strh	r3, [r0, #2]
 800e9ba:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800e9be:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800e9c2:	1a52      	subs	r2, r2, r1
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	bfc8      	it	gt
 800e9c8:	80c2      	strhgt	r2, [r0, #6]
 800e9ca:	bd10      	pop	{r4, pc}

0800e9cc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800e9cc:	4b10      	ldr	r3, [pc, #64]	; (800ea10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800e9ce:	b510      	push	{r4, lr}
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ea14 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e9de:	f7ff ffd1 	bl	800e984 <_ZN8touchgfx4Rect10restrictToEss>
 800e9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ea18 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800e9e4:	6818      	ldr	r0, [r3, #0]
 800e9e6:	b190      	cbz	r0, 800ea0e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800e9e8:	6803      	ldr	r3, [r0, #0]
 800e9ea:	4621      	mov	r1, r4
 800e9ec:	689b      	ldr	r3, [r3, #8]
 800e9ee:	4798      	blx	r3
 800e9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ea1c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800e9f2:	6818      	ldr	r0, [r3, #0]
 800e9f4:	b118      	cbz	r0, 800e9fe <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800e9f6:	6803      	ldr	r3, [r0, #0]
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	4798      	blx	r3
 800e9fe:	4b08      	ldr	r3, [pc, #32]	; (800ea20 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800ea00:	4621      	mov	r1, r4
 800ea02:	6818      	ldr	r0, [r3, #0]
 800ea04:	6803      	ldr	r3, [r0, #0]
 800ea06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea0a:	69db      	ldr	r3, [r3, #28]
 800ea0c:	4718      	bx	r3
 800ea0e:	bd10      	pop	{r4, pc}
 800ea10:	24006ae6 	.word	0x24006ae6
 800ea14:	24006ae4 	.word	0x24006ae4
 800ea18:	24006b2c 	.word	0x24006b2c
 800ea1c:	24006b28 	.word	0x24006b28
 800ea20:	24006af0 	.word	0x24006af0

0800ea24 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea26:	4606      	mov	r6, r0
 800ea28:	4608      	mov	r0, r1
 800ea2a:	460f      	mov	r7, r1
 800ea2c:	f7fc fbb1 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ea30:	b9e8      	cbnz	r0, 800ea6e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ea32:	f9b7 5000 	ldrsh.w	r5, [r7]
 800ea36:	f9b6 4000 	ldrsh.w	r4, [r6]
 800ea3a:	42a5      	cmp	r5, r4
 800ea3c:	db17      	blt.n	800ea6e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ea3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ea42:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	db11      	blt.n	800ea6e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ea4a:	88b9      	ldrh	r1, [r7, #4]
 800ea4c:	440d      	add	r5, r1
 800ea4e:	88b1      	ldrh	r1, [r6, #4]
 800ea50:	440c      	add	r4, r1
 800ea52:	b22d      	sxth	r5, r5
 800ea54:	b224      	sxth	r4, r4
 800ea56:	42a5      	cmp	r5, r4
 800ea58:	dc09      	bgt.n	800ea6e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ea5a:	88f8      	ldrh	r0, [r7, #6]
 800ea5c:	4410      	add	r0, r2
 800ea5e:	88f2      	ldrh	r2, [r6, #6]
 800ea60:	4413      	add	r3, r2
 800ea62:	b200      	sxth	r0, r0
 800ea64:	b21b      	sxth	r3, r3
 800ea66:	4298      	cmp	r0, r3
 800ea68:	bfcc      	ite	gt
 800ea6a:	2000      	movgt	r0, #0
 800ea6c:	2001      	movle	r0, #1
 800ea6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea70 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea72:	4604      	mov	r4, r0
 800ea74:	4608      	mov	r0, r1
 800ea76:	460d      	mov	r5, r1
 800ea78:	f7fc fb8b 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ea7c:	b978      	cbnz	r0, 800ea9e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f7fc fb87 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ea84:	f9b5 6000 	ldrsh.w	r6, [r5]
 800ea88:	b150      	cbz	r0, 800eaa0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800ea8a:	8026      	strh	r6, [r4, #0]
 800ea8c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800ea90:	8063      	strh	r3, [r4, #2]
 800ea92:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ea96:	80a3      	strh	r3, [r4, #4]
 800ea98:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ea9c:	80e3      	strh	r3, [r4, #6]
 800ea9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaa0:	f9b4 1000 	ldrsh.w	r1, [r4]
 800eaa4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800eaa8:	42b1      	cmp	r1, r6
 800eaaa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800eaae:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800eab2:	460f      	mov	r7, r1
 800eab4:	88ed      	ldrh	r5, [r5, #6]
 800eab6:	bfa8      	it	ge
 800eab8:	4637      	movge	r7, r6
 800eaba:	4293      	cmp	r3, r2
 800eabc:	4618      	mov	r0, r3
 800eabe:	4466      	add	r6, ip
 800eac0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800eac4:	bfa8      	it	ge
 800eac6:	4610      	movge	r0, r2
 800eac8:	442a      	add	r2, r5
 800eaca:	88e5      	ldrh	r5, [r4, #6]
 800eacc:	4461      	add	r1, ip
 800eace:	b236      	sxth	r6, r6
 800ead0:	8027      	strh	r7, [r4, #0]
 800ead2:	442b      	add	r3, r5
 800ead4:	b209      	sxth	r1, r1
 800ead6:	b212      	sxth	r2, r2
 800ead8:	8060      	strh	r0, [r4, #2]
 800eada:	b21b      	sxth	r3, r3
 800eadc:	428e      	cmp	r6, r1
 800eade:	bfac      	ite	ge
 800eae0:	ebc7 0106 	rsbge	r1, r7, r6
 800eae4:	ebc7 0101 	rsblt	r1, r7, r1
 800eae8:	429a      	cmp	r2, r3
 800eaea:	bfac      	ite	ge
 800eaec:	ebc0 0202 	rsbge	r2, r0, r2
 800eaf0:	ebc0 0203 	rsblt	r2, r0, r3
 800eaf4:	80a1      	strh	r1, [r4, #4]
 800eaf6:	80e2      	strh	r2, [r4, #6]
 800eaf8:	e7d1      	b.n	800ea9e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800eafc <_ZN8touchgfx11Application11getInstanceEv>:
 800eafc:	4b01      	ldr	r3, [pc, #4]	; (800eb04 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800eafe:	6818      	ldr	r0, [r3, #0]
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	24006b3c 	.word	0x24006b3c

0800eb08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800eb08:	2300      	movs	r3, #0
 800eb0a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800eb0e:	30a8      	adds	r0, #168	; 0xa8
 800eb10:	f820 3c24 	strh.w	r3, [r0, #-36]
 800eb14:	f802 3b01 	strb.w	r3, [r2], #1
 800eb18:	4282      	cmp	r2, r0
 800eb1a:	d1fb      	bne.n	800eb14 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800eb1c:	4770      	bx	lr

0800eb1e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800eb1e:	4603      	mov	r3, r0
 800eb20:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800eb24:	2200      	movs	r2, #0
 800eb26:	801a      	strh	r2, [r3, #0]
 800eb28:	3308      	adds	r3, #8
 800eb2a:	f823 2c06 	strh.w	r2, [r3, #-6]
 800eb2e:	f823 2c04 	strh.w	r2, [r3, #-4]
 800eb32:	f823 2c02 	strh.w	r2, [r3, #-2]
 800eb36:	428b      	cmp	r3, r1
 800eb38:	d1f5      	bne.n	800eb26 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800eb3a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800eb3e:	4770      	bx	lr

0800eb40 <_ZN8touchgfx11ApplicationC1Ev>:
 800eb40:	b570      	push	{r4, r5, r6, lr}
 800eb42:	4b19      	ldr	r3, [pc, #100]	; (800eba8 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 800eb44:	2500      	movs	r5, #0
 800eb46:	4604      	mov	r4, r0
 800eb48:	30a8      	adds	r0, #168	; 0xa8
 800eb4a:	f840 3ca8 	str.w	r3, [r0, #-168]
 800eb4e:	f820 5c24 	strh.w	r5, [r0, #-36]
 800eb52:	f7ff ffe4 	bl	800eb1e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800eb56:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800eb5a:	f7ff ffe0 	bl	800eb1e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800eb5e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800eb62:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800eb66:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800eb6a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800eb6e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800eb72:	490e      	ldr	r1, [pc, #56]	; (800ebac <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800eb74:	480e      	ldr	r0, [pc, #56]	; (800ebb0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800eb76:	f00a ff4f 	bl	8019a18 <CRC_Lock>
 800eb7a:	4e0e      	ldr	r6, [pc, #56]	; (800ebb4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800eb7c:	4b0e      	ldr	r3, [pc, #56]	; (800ebb8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800eb7e:	b158      	cbz	r0, 800eb98 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 800eb80:	801d      	strh	r5, [r3, #0]
 800eb82:	2300      	movs	r3, #0
 800eb84:	4a0d      	ldr	r2, [pc, #52]	; (800ebbc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800eb86:	4620      	mov	r0, r4
 800eb88:	6013      	str	r3, [r2, #0]
 800eb8a:	4a0d      	ldr	r2, [pc, #52]	; (800ebc0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800eb8c:	6033      	str	r3, [r6, #0]
 800eb8e:	6013      	str	r3, [r2, #0]
 800eb90:	f7ff ffba 	bl	800eb08 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800eb94:	4620      	mov	r0, r4
 800eb96:	bd70      	pop	{r4, r5, r6, pc}
 800eb98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb9c:	2002      	movs	r0, #2
 800eb9e:	801a      	strh	r2, [r3, #0]
 800eba0:	6030      	str	r0, [r6, #0]
 800eba2:	f001 fa13 	bl	800ffcc <_ZN8touchgfx6Screen4drawEv>
 800eba6:	e7ec      	b.n	800eb82 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 800eba8:	0801d850 	.word	0x0801d850
 800ebac:	b5e8b5cd 	.word	0xb5e8b5cd
 800ebb0:	f407a5c2 	.word	0xf407a5c2
 800ebb4:	24006b2c 	.word	0x24006b2c
 800ebb8:	24000050 	.word	0x24000050
 800ebbc:	24006b3c 	.word	0x24006b3c
 800ebc0:	24006b30 	.word	0x24006b30

0800ebc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800ebc4:	b510      	push	{r4, lr}
 800ebc6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800ebca:	428b      	cmp	r3, r1
 800ebcc:	d806      	bhi.n	800ebdc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 800ebce:	4b0b      	ldr	r3, [pc, #44]	; (800ebfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 800ebd0:	f240 11dd 	movw	r1, #477	; 0x1dd
 800ebd4:	4a0a      	ldr	r2, [pc, #40]	; (800ec00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 800ebd6:	480b      	ldr	r0, [pc, #44]	; (800ec04 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 800ebd8:	f00b f874 	bl	8019cc4 <__assert_func>
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	428b      	cmp	r3, r1
 800ebe2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800ebe6:	d908      	bls.n	800ebfa <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 800ebe8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ebec:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800ebf6:	685a      	ldr	r2, [r3, #4]
 800ebf8:	6062      	str	r2, [r4, #4]
 800ebfa:	bd10      	pop	{r4, pc}
 800ebfc:	0801d7e0 	.word	0x0801d7e0
 800ec00:	0801d8d8 	.word	0x0801d8d8
 800ec04:	0801d7ee 	.word	0x0801d7ee

0800ec08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800ec08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec0a:	466b      	mov	r3, sp
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	e883 0006 	stmia.w	r3, {r1, r2}
 800ec12:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800ec16:	2a07      	cmp	r2, #7
 800ec18:	d906      	bls.n	800ec28 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800ec1a:	4b09      	ldr	r3, [pc, #36]	; (800ec40 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800ec1c:	f240 11a3 	movw	r1, #419	; 0x1a3
 800ec20:	4a08      	ldr	r2, [pc, #32]	; (800ec44 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800ec22:	4809      	ldr	r0, [pc, #36]	; (800ec48 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800ec24:	f00b f84e 	bl	8019cc4 <__assert_func>
 800ec28:	1c51      	adds	r1, r2, #1
 800ec2a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800ec2e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800ec32:	cb03      	ldmia	r3!, {r0, r1}
 800ec34:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800ec38:	6069      	str	r1, [r5, #4]
 800ec3a:	b003      	add	sp, #12
 800ec3c:	bd30      	pop	{r4, r5, pc}
 800ec3e:	bf00      	nop
 800ec40:	0801d817 	.word	0x0801d817
 800ec44:	0801d96e 	.word	0x0801d96e
 800ec48:	0801d7ee 	.word	0x0801d7ee

0800ec4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec50:	b08d      	sub	sp, #52	; 0x34
 800ec52:	4b94      	ldr	r3, [pc, #592]	; (800eea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 800ec54:	4683      	mov	fp, r0
 800ec56:	ac08      	add	r4, sp, #32
 800ec58:	e884 0006 	stmia.w	r4, {r1, r2}
 800ec5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ec60:	4620      	mov	r0, r4
 800ec62:	4b91      	ldr	r3, [pc, #580]	; (800eea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 800ec64:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ec68:	f7ff fe8c 	bl	800e984 <_ZN8touchgfx4Rect10restrictToEss>
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f7fc fa90 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d16a      	bne.n	800ed4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ec76:	9402      	str	r4, [sp, #8]
 800ec78:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800ec7c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800ec80:	2400      	movs	r4, #0
 800ec82:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800ec86:	9301      	str	r3, [sp, #4]
 800ec88:	36a0      	adds	r6, #160	; 0xa0
 800ec8a:	42a5      	cmp	r5, r4
 800ec8c:	d00d      	beq.n	800ecaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 800ec8e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800ec92:	9802      	ldr	r0, [sp, #8]
 800ec94:	f7ff fec6 	bl	800ea24 <_ZNK8touchgfx4Rect8includesERKS0_>
 800ec98:	b128      	cbz	r0, 800eca6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800ec9a:	1e69      	subs	r1, r5, #1
 800ec9c:	9801      	ldr	r0, [sp, #4]
 800ec9e:	1b09      	subs	r1, r1, r4
 800eca0:	b289      	uxth	r1, r1
 800eca2:	f7ff ff8f 	bl	800ebc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800eca6:	3401      	adds	r4, #1
 800eca8:	e7ef      	b.n	800ec8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 800ecaa:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800ecae:	1e7b      	subs	r3, r7, #1
 800ecb0:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800ecb4:	9703      	str	r7, [sp, #12]
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	2400      	movs	r4, #0
 800ecba:	4655      	mov	r5, sl
 800ecbc:	9704      	str	r7, [sp, #16]
 800ecbe:	4626      	mov	r6, r4
 800ecc0:	9b04      	ldr	r3, [sp, #16]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d078      	beq.n	800edb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 800ecc6:	9902      	ldr	r1, [sp, #8]
 800ecc8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800eccc:	f7ff fe38 	bl	800e940 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800ecd0:	b360      	cbz	r0, 800ed2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800ecd2:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 800ecd6:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800ecda:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 800ecde:	45e6      	cmp	lr, ip
 800ece0:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800ece4:	db35      	blt.n	800ed52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800ece6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ecea:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800ecee:	4472      	add	r2, lr
 800ecf0:	4463      	add	r3, ip
 800ecf2:	b212      	sxth	r2, r2
 800ecf4:	b21b      	sxth	r3, r3
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	dc2b      	bgt.n	800ed52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800ecfa:	fa1f f288 	uxth.w	r2, r8
 800ecfe:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800ed02:	45c1      	cmp	r9, r8
 800ed04:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800ed08:	4413      	add	r3, r2
 800ed0a:	fa1f fc89 	uxth.w	ip, r9
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	fa0f fe83 	sxth.w	lr, r3
 800ed14:	db0f      	blt.n	800ed36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800ed16:	eba3 030c 	sub.w	r3, r3, ip
 800ed1a:	1ac9      	subs	r1, r1, r3
 800ed1c:	b209      	sxth	r1, r1
 800ed1e:	2900      	cmp	r1, #0
 800ed20:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800ed24:	dd12      	ble.n	800ed4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ed26:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	9b04      	ldr	r3, [sp, #16]
 800ed2e:	3d08      	subs	r5, #8
 800ed30:	3b01      	subs	r3, #1
 800ed32:	9304      	str	r3, [sp, #16]
 800ed34:	e7c4      	b.n	800ecc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 800ed36:	4461      	add	r1, ip
 800ed38:	b209      	sxth	r1, r1
 800ed3a:	4571      	cmp	r1, lr
 800ed3c:	dc3a      	bgt.n	800edb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800ed3e:	eba2 020c 	sub.w	r2, r2, ip
 800ed42:	b212      	sxth	r2, r2
 800ed44:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800ed48:	2a00      	cmp	r2, #0
 800ed4a:	dcee      	bgt.n	800ed2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800ed4c:	b00d      	add	sp, #52	; 0x34
 800ed4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed52:	45c1      	cmp	r9, r8
 800ed54:	db2e      	blt.n	800edb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800ed56:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ed5a:	4499      	add	r9, r3
 800ed5c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800ed60:	4498      	add	r8, r3
 800ed62:	fa0f f989 	sxth.w	r9, r9
 800ed66:	fa0f f888 	sxth.w	r8, r8
 800ed6a:	45c1      	cmp	r9, r8
 800ed6c:	dc22      	bgt.n	800edb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800ed6e:	fa1f f28c 	uxth.w	r2, ip
 800ed72:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800ed76:	45e6      	cmp	lr, ip
 800ed78:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800ed7c:	4413      	add	r3, r2
 800ed7e:	fa1f f88e 	uxth.w	r8, lr
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	fa0f f983 	sxth.w	r9, r3
 800ed88:	db0a      	blt.n	800eda0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 800ed8a:	eba3 0308 	sub.w	r3, r3, r8
 800ed8e:	1ac9      	subs	r1, r1, r3
 800ed90:	b209      	sxth	r1, r1
 800ed92:	2900      	cmp	r1, #0
 800ed94:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800ed98:	ddd8      	ble.n	800ed4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ed9a:	f8ad 9020 	strh.w	r9, [sp, #32]
 800ed9e:	e7c4      	b.n	800ed2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800eda0:	4441      	add	r1, r8
 800eda2:	b209      	sxth	r1, r1
 800eda4:	4549      	cmp	r1, r9
 800eda6:	dc05      	bgt.n	800edb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800eda8:	eba2 0208 	sub.w	r2, r2, r8
 800edac:	b212      	sxth	r2, r2
 800edae:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800edb2:	e7c9      	b.n	800ed48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800edb4:	4606      	mov	r6, r0
 800edb6:	e7b9      	b.n	800ed2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800edb8:	2c00      	cmp	r4, #0
 800edba:	f47f af7d 	bne.w	800ecb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 800edbe:	2e00      	cmp	r6, #0
 800edc0:	f000 81e0 	beq.w	800f184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 800edc4:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 800edc8:	4655      	mov	r5, sl
 800edca:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800edce:	b2b9      	uxth	r1, r7
 800edd0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800edd4:	b2b3      	uxth	r3, r6
 800edd6:	9104      	str	r1, [sp, #16]
 800edd8:	9804      	ldr	r0, [sp, #16]
 800edda:	441a      	add	r2, r3
 800eddc:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800ede0:	b292      	uxth	r2, r2
 800ede2:	4401      	add	r1, r0
 800ede4:	fa0f f882 	sxth.w	r8, r2
 800ede8:	b289      	uxth	r1, r1
 800edea:	9105      	str	r1, [sp, #20]
 800edec:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800edf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800edf4:	9b03      	ldr	r3, [sp, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d058      	beq.n	800eeac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 800edfa:	9902      	ldr	r1, [sp, #8]
 800edfc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800ee00:	f7ff fd9e 	bl	800e940 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800ee04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee08:	b1d8      	cbz	r0, 800ee42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800ee0a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800ee0e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800ee12:	4576      	cmp	r6, lr
 800ee14:	dc26      	bgt.n	800ee64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800ee16:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800ee1a:	44f4      	add	ip, lr
 800ee1c:	fa0f fc8c 	sxth.w	ip, ip
 800ee20:	45e0      	cmp	r8, ip
 800ee22:	db1f      	blt.n	800ee64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800ee24:	428f      	cmp	r7, r1
 800ee26:	fa1f fc81 	uxth.w	ip, r1
 800ee2a:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800ee2e:	dc0f      	bgt.n	800ee50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 800ee30:	9805      	ldr	r0, [sp, #20]
 800ee32:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800ee36:	eba0 0c0c 	sub.w	ip, r0, ip
 800ee3a:	eba1 010c 	sub.w	r1, r1, ip
 800ee3e:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800ee42:	4620      	mov	r0, r4
 800ee44:	9903      	ldr	r1, [sp, #12]
 800ee46:	3d08      	subs	r5, #8
 800ee48:	4604      	mov	r4, r0
 800ee4a:	3901      	subs	r1, #1
 800ee4c:	9103      	str	r1, [sp, #12]
 800ee4e:	e7cf      	b.n	800edf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 800ee50:	4461      	add	r1, ip
 800ee52:	b209      	sxth	r1, r1
 800ee54:	4549      	cmp	r1, r9
 800ee56:	dcf5      	bgt.n	800ee44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800ee58:	9904      	ldr	r1, [sp, #16]
 800ee5a:	eba1 0c0c 	sub.w	ip, r1, ip
 800ee5e:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800ee62:	e7ee      	b.n	800ee42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800ee64:	428f      	cmp	r7, r1
 800ee66:	dced      	bgt.n	800ee44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800ee68:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800ee6c:	4461      	add	r1, ip
 800ee6e:	b209      	sxth	r1, r1
 800ee70:	4589      	cmp	r9, r1
 800ee72:	dbe7      	blt.n	800ee44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800ee74:	4576      	cmp	r6, lr
 800ee76:	fa1f fc8e 	uxth.w	ip, lr
 800ee7a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800ee7e:	dc08      	bgt.n	800ee92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800ee80:	eba2 0c0c 	sub.w	ip, r2, ip
 800ee84:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800ee88:	eba1 010c 	sub.w	r1, r1, ip
 800ee8c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800ee90:	e7d7      	b.n	800ee42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800ee92:	4461      	add	r1, ip
 800ee94:	b209      	sxth	r1, r1
 800ee96:	4588      	cmp	r8, r1
 800ee98:	dbd4      	blt.n	800ee44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800ee9a:	eba3 0c0c 	sub.w	ip, r3, ip
 800ee9e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800eea2:	e7ce      	b.n	800ee42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800eea4:	24006ae6 	.word	0x24006ae6
 800eea8:	24006ae4 	.word	0x24006ae4
 800eeac:	2c00      	cmp	r4, #0
 800eeae:	f000 8169 	beq.w	800f184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 800eeb2:	9b00      	ldr	r3, [sp, #0]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	f000 8165 	beq.w	800f184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 800eeba:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800eebe:	9802      	ldr	r0, [sp, #8]
 800eec0:	4621      	mov	r1, r4
 800eec2:	f7ff fdaf 	bl	800ea24 <_ZNK8touchgfx4Rect8includesERKS0_>
 800eec6:	b120      	cbz	r0, 800eed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 800eec8:	f8bd 1000 	ldrh.w	r1, [sp]
 800eecc:	9801      	ldr	r0, [sp, #4]
 800eece:	f7ff fe79 	bl	800ebc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800eed2:	9902      	ldr	r1, [sp, #8]
 800eed4:	4620      	mov	r0, r4
 800eed6:	f7ff fd33 	bl	800e940 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	f000 809b 	beq.w	800f016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800eee0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800eee4:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800eee8:	fa1f f288 	uxth.w	r2, r8
 800eeec:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 800eef0:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 800eef4:	19d5      	adds	r5, r2, r7
 800eef6:	b2a1      	uxth	r1, r4
 800eef8:	45a0      	cmp	r8, r4
 800eefa:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800eefe:	fa1f f985 	uxth.w	r9, r5
 800ef02:	440b      	add	r3, r1
 800ef04:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 800ef08:	fa0f f589 	sxth.w	r5, r9
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	9503      	str	r5, [sp, #12]
 800ef10:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800ef14:	9507      	str	r5, [sp, #28]
 800ef16:	f340 809d 	ble.w	800f054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 800ef1a:	1a52      	subs	r2, r2, r1
 800ef1c:	4584      	cmp	ip, r0
 800ef1e:	fa0f fe83 	sxth.w	lr, r3
 800ef22:	b292      	uxth	r2, r2
 800ef24:	b215      	sxth	r5, r2
 800ef26:	dd2f      	ble.n	800ef88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33c>
 800ef28:	9e00      	ldr	r6, [sp, #0]
 800ef2a:	fa1f fc8c 	uxth.w	ip, ip
 800ef2e:	b280      	uxth	r0, r0
 800ef30:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800ef34:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 800ef38:	9e03      	ldr	r6, [sp, #12]
 800ef3a:	ebac 0300 	sub.w	r3, ip, r0
 800ef3e:	448c      	add	ip, r1
 800ef40:	eba6 060e 	sub.w	r6, r6, lr
 800ef44:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	4470      	add	r0, lr
 800ef4c:	fa0f fc8c 	sxth.w	ip, ip
 800ef50:	b21c      	sxth	r4, r3
 800ef52:	b200      	sxth	r0, r0
 800ef54:	4366      	muls	r6, r4
 800ef56:	ebac 0000 	sub.w	r0, ip, r0
 800ef5a:	4368      	muls	r0, r5
 800ef5c:	4286      	cmp	r6, r0
 800ef5e:	db09      	blt.n	800ef74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 800ef60:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 800ef64:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800ef68:	4417      	add	r7, r2
 800ef6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ef6e:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800ef72:	e681      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ef74:	440b      	add	r3, r1
 800ef76:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 800ef7a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800ef7e:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800ef82:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ef86:	e677      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ef88:	9e03      	ldr	r6, [sp, #12]
 800ef8a:	45b6      	cmp	lr, r6
 800ef8c:	da28      	bge.n	800efe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 800ef8e:	9b00      	ldr	r3, [sp, #0]
 800ef90:	eba6 060e 	sub.w	r6, r6, lr
 800ef94:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 800ef98:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 800ef9c:	eb04 030c 	add.w	r3, r4, ip
 800efa0:	fa1f f883 	uxth.w	r8, r3
 800efa4:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 800efa8:	4403      	add	r3, r0
 800efaa:	fa0f f988 	sxth.w	r9, r8
 800efae:	eba0 000c 	sub.w	r0, r0, ip
 800efb2:	eba3 0308 	sub.w	r3, r3, r8
 800efb6:	4368      	muls	r0, r5
 800efb8:	b29b      	uxth	r3, r3
 800efba:	fa0f f883 	sxth.w	r8, r3
 800efbe:	fb08 f606 	mul.w	r6, r8, r6
 800efc2:	42b0      	cmp	r0, r6
 800efc4:	dc06      	bgt.n	800efd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800efc6:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 800efca:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 800efce:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 800efd2:	e7c9      	b.n	800ef68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31c>
 800efd4:	4423      	add	r3, r4
 800efd6:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 800efda:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800efde:	e64b      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800efe0:	eba3 0309 	sub.w	r3, r3, r9
 800efe4:	9807      	ldr	r0, [sp, #28]
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	2806      	cmp	r0, #6
 800efea:	fa0f fc83 	sxth.w	ip, r3
 800efee:	d818      	bhi.n	800f022 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 800eff0:	4652      	mov	r2, sl
 800eff2:	ab0a      	add	r3, sp, #40	; 0x28
 800eff4:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 800eff8:	6851      	ldr	r1, [r2, #4]
 800effa:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 800effe:	c303      	stmia	r3!, {r0, r1}
 800f000:	9b03      	ldr	r3, [sp, #12]
 800f002:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800f006:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800f00a:	ab0a      	add	r3, sp, #40	; 0x28
 800f00c:	9801      	ldr	r0, [sp, #4]
 800f00e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f012:	f7ff fdf9 	bl	800ec08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f016:	9b00      	ldr	r3, [sp, #0]
 800f018:	f1aa 0a08 	sub.w	sl, sl, #8
 800f01c:	3b01      	subs	r3, #1
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	e747      	b.n	800eeb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 800f022:	9800      	ldr	r0, [sp, #0]
 800f024:	45ac      	cmp	ip, r5
 800f026:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800f02a:	db0c      	blt.n	800f046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fa>
 800f02c:	4417      	add	r7, r2
 800f02e:	4458      	add	r0, fp
 800f030:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f034:	b2bf      	uxth	r7, r7
 800f036:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 800f03a:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800f03e:	440f      	add	r7, r1
 800f040:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 800f044:	e618      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f046:	4458      	add	r0, fp
 800f048:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 800f04c:	443b      	add	r3, r7
 800f04e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800f052:	e611      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f054:	fa1f f18c 	uxth.w	r1, ip
 800f058:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 800f05c:	b282      	uxth	r2, r0
 800f05e:	4584      	cmp	ip, r0
 800f060:	eb01 0e05 	add.w	lr, r1, r5
 800f064:	9204      	str	r2, [sp, #16]
 800f066:	fa1f fe8e 	uxth.w	lr, lr
 800f06a:	9e04      	ldr	r6, [sp, #16]
 800f06c:	fa0f f28e 	sxth.w	r2, lr
 800f070:	9205      	str	r2, [sp, #20]
 800f072:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 800f076:	4432      	add	r2, r6
 800f078:	b292      	uxth	r2, r2
 800f07a:	9206      	str	r2, [sp, #24]
 800f07c:	da26      	bge.n	800f0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x480>
 800f07e:	eba3 0309 	sub.w	r3, r3, r9
 800f082:	eba2 020e 	sub.w	r2, r2, lr
 800f086:	eba0 000c 	sub.w	r0, r0, ip
 800f08a:	eba4 0408 	sub.w	r4, r4, r8
 800f08e:	b29b      	uxth	r3, r3
 800f090:	b292      	uxth	r2, r2
 800f092:	fa0f fa83 	sxth.w	sl, r3
 800f096:	b211      	sxth	r1, r2
 800f098:	fb0a f000 	mul.w	r0, sl, r0
 800f09c:	434c      	muls	r4, r1
 800f09e:	42a0      	cmp	r0, r4
 800f0a0:	9800      	ldr	r0, [sp, #0]
 800f0a2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800f0a6:	dc06      	bgt.n	800f0b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 800f0a8:	4458      	add	r0, fp
 800f0aa:	9a05      	ldr	r2, [sp, #20]
 800f0ac:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 800f0b0:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800f0b4:	e7ca      	b.n	800f04c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 800f0b6:	eb0b 0300 	add.w	r3, fp, r0
 800f0ba:	9903      	ldr	r1, [sp, #12]
 800f0bc:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 800f0c0:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 800f0c4:	442a      	add	r2, r5
 800f0c6:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800f0ca:	e5d5      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f0cc:	9e04      	ldr	r6, [sp, #16]
 800f0ce:	9a03      	ldr	r2, [sp, #12]
 800f0d0:	1b89      	subs	r1, r1, r6
 800f0d2:	b21e      	sxth	r6, r3
 800f0d4:	b289      	uxth	r1, r1
 800f0d6:	4296      	cmp	r6, r2
 800f0d8:	fa0f fc81 	sxth.w	ip, r1
 800f0dc:	dd25      	ble.n	800f12a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4de>
 800f0de:	eba3 0309 	sub.w	r3, r3, r9
 800f0e2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800f0e6:	9e05      	ldr	r6, [sp, #20]
 800f0e8:	eba4 0408 	sub.w	r4, r4, r8
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	eba6 0902 	sub.w	r9, r6, r2
 800f0f2:	fb0c f404 	mul.w	r4, ip, r4
 800f0f6:	b218      	sxth	r0, r3
 800f0f8:	9a00      	ldr	r2, [sp, #0]
 800f0fa:	fb00 f909 	mul.w	r9, r0, r9
 800f0fe:	00d2      	lsls	r2, r2, #3
 800f100:	454c      	cmp	r4, r9
 800f102:	db03      	blt.n	800f10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 800f104:	445a      	add	r2, fp
 800f106:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 800f10a:	e79f      	b.n	800f04c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 800f10c:	eb0b 0302 	add.w	r3, fp, r2
 800f110:	9a03      	ldr	r2, [sp, #12]
 800f112:	4429      	add	r1, r5
 800f114:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800f118:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 800f11c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800f120:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800f124:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f128:	e5a6      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f12a:	9b06      	ldr	r3, [sp, #24]
 800f12c:	9c07      	ldr	r4, [sp, #28]
 800f12e:	eba3 020e 	sub.w	r2, r3, lr
 800f132:	2c06      	cmp	r4, #6
 800f134:	b292      	uxth	r2, r2
 800f136:	b213      	sxth	r3, r2
 800f138:	d80d      	bhi.n	800f156 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50a>
 800f13a:	4651      	mov	r1, sl
 800f13c:	aa0a      	add	r2, sp, #40	; 0x28
 800f13e:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 800f142:	6849      	ldr	r1, [r1, #4]
 800f144:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 800f148:	9b05      	ldr	r3, [sp, #20]
 800f14a:	c203      	stmia	r2!, {r0, r1}
 800f14c:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800f150:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 800f154:	e759      	b.n	800f00a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800f156:	9c00      	ldr	r4, [sp, #0]
 800f158:	4563      	cmp	r3, ip
 800f15a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800f15e:	db0d      	blt.n	800f17c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x530>
 800f160:	4429      	add	r1, r5
 800f162:	9a04      	ldr	r2, [sp, #16]
 800f164:	445c      	add	r4, fp
 800f166:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800f16a:	b289      	uxth	r1, r1
 800f16c:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 800f170:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800f174:	4411      	add	r1, r2
 800f176:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 800f17a:	e57d      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f17c:	445c      	add	r4, fp
 800f17e:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 800f182:	e79f      	b.n	800f0c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x478>
 800f184:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800f188:	2f07      	cmp	r7, #7
 800f18a:	d806      	bhi.n	800f19a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 800f18c:	ab08      	add	r3, sp, #32
 800f18e:	9801      	ldr	r0, [sp, #4]
 800f190:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f194:	f7ff fd38 	bl	800ec08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f198:	e5d8      	b.n	800ed4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800f19a:	f107 39ff 	add.w	r9, r7, #4294967295
 800f19e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800f1a2:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800f1a6:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800f1aa:	f04f 35ff 	mov.w	r5, #4294967295
 800f1ae:	2400      	movs	r4, #0
 800f1b0:	9304      	str	r3, [sp, #16]
 800f1b2:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800f1b6:	f109 32ff 	add.w	r2, r9, #4294967295
 800f1ba:	9300      	str	r3, [sp, #0]
 800f1bc:	4690      	mov	r8, r2
 800f1be:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800f1c2:	9303      	str	r3, [sp, #12]
 800f1c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800f1c8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f1cc:	6818      	ldr	r0, [r3, #0]
 800f1ce:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800f1d2:	9206      	str	r2, [sp, #24]
 800f1d4:	bf16      	itet	ne
 800f1d6:	9904      	ldrne	r1, [sp, #16]
 800f1d8:	f8dd e008 	ldreq.w	lr, [sp, #8]
 800f1dc:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 800f1e0:	9305      	str	r3, [sp, #20]
 800f1e2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800f1e6:	f8be 6004 	ldrh.w	r6, [lr, #4]
 800f1ea:	fb16 f601 	smulbb	r6, r6, r1
 800f1ee:	6859      	ldr	r1, [r3, #4]
 800f1f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f1f4:	4671      	mov	r1, lr
 800f1f6:	a80a      	add	r0, sp, #40	; 0x28
 800f1f8:	f7ff fc3a 	bl	800ea70 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f1fc:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800f200:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	9a00      	ldr	r2, [sp, #0]
 800f208:	fb11 f100 	smulbb	r1, r1, r0
 800f20c:	2008      	movs	r0, #8
 800f20e:	fb02 6603 	mla	r6, r2, r3, r6
 800f212:	1b8e      	subs	r6, r1, r6
 800f214:	fb91 f1f0 	sdiv	r1, r1, r0
 800f218:	42b1      	cmp	r1, r6
 800f21a:	dc21      	bgt.n	800f260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 800f21c:	4556      	cmp	r6, sl
 800f21e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f222:	da03      	bge.n	800f22c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 800f224:	b1e6      	cbz	r6, 800f260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 800f226:	46b2      	mov	sl, r6
 800f228:	4645      	mov	r5, r8
 800f22a:	464c      	mov	r4, r9
 800f22c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f230:	f118 0f02 	cmn.w	r8, #2
 800f234:	d1c8      	bne.n	800f1c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 800f236:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f23a:	f1a7 0708 	sub.w	r7, r7, #8
 800f23e:	4691      	mov	r9, r2
 800f240:	d1b7      	bne.n	800f1b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x566>
 800f242:	9b01      	ldr	r3, [sp, #4]
 800f244:	b2a6      	uxth	r6, r4
 800f246:	00e4      	lsls	r4, r4, #3
 800f248:	1918      	adds	r0, r3, r4
 800f24a:	1c6b      	adds	r3, r5, #1
 800f24c:	d10b      	bne.n	800f266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x61a>
 800f24e:	4601      	mov	r1, r0
 800f250:	9802      	ldr	r0, [sp, #8]
 800f252:	f7ff fc0d 	bl	800ea70 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f256:	4631      	mov	r1, r6
 800f258:	9801      	ldr	r0, [sp, #4]
 800f25a:	f7ff fcb3 	bl	800ebc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f25e:	e50b      	b.n	800ec78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f260:	4645      	mov	r5, r8
 800f262:	464c      	mov	r4, r9
 800f264:	e7ed      	b.n	800f242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f6>
 800f266:	9b01      	ldr	r3, [sp, #4]
 800f268:	00ed      	lsls	r5, r5, #3
 800f26a:	445c      	add	r4, fp
 800f26c:	1959      	adds	r1, r3, r5
 800f26e:	445d      	add	r5, fp
 800f270:	f7ff fbfe 	bl	800ea70 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f274:	9b02      	ldr	r3, [sp, #8]
 800f276:	cb03      	ldmia	r3!, {r0, r1}
 800f278:	9b02      	ldr	r3, [sp, #8]
 800f27a:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800f27e:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 800f282:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 800f286:	6861      	ldr	r1, [r4, #4]
 800f288:	c303      	stmia	r3!, {r0, r1}
 800f28a:	e7e4      	b.n	800f256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60a>

0800f28c <_ZN8touchgfx11Application10invalidateEv>:
 800f28c:	4b09      	ldr	r3, [pc, #36]	; (800f2b4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800f28e:	b082      	sub	sp, #8
 800f290:	2100      	movs	r1, #0
 800f292:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f296:	4b08      	ldr	r3, [pc, #32]	; (800f2b8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800f298:	9100      	str	r1, [sp, #0]
 800f29a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f29e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f2a2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f2a6:	ab02      	add	r3, sp, #8
 800f2a8:	e913 0006 	ldmdb	r3, {r1, r2}
 800f2ac:	b002      	add	sp, #8
 800f2ae:	f7ff bccd 	b.w	800ec4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f2b2:	bf00      	nop
 800f2b4:	24006ae4 	.word	0x24006ae4
 800f2b8:	24006ae6 	.word	0x24006ae6

0800f2bc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800f2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c0:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800f2c4:	b09b      	sub	sp, #108	; 0x6c
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f7fb ff62 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f2ce:	4605      	mov	r5, r0
 800f2d0:	b940      	cbnz	r0, 800f2e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	e896 0006 	ldmia.w	r6, {r1, r2}
 800f2d8:	f7ff fcb8 	bl	800ec4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f2dc:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800f2e0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800f2e4:	4bc6      	ldr	r3, [pc, #792]	; (800f600 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	b33b      	cbz	r3, 800f33a <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 800f2ea:	4dc6      	ldr	r5, [pc, #792]	; (800f604 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	f7fb ff50 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f2f2:	4606      	mov	r6, r0
 800f2f4:	bb08      	cbnz	r0, 800f33a <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	f7ff f9c4 	bl	800e684 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800f2fc:	6829      	ldr	r1, [r5, #0]
 800f2fe:	686a      	ldr	r2, [r5, #4]
 800f300:	4620      	mov	r0, r4
 800f302:	f7ff fca3 	bl	800ec4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f306:	802e      	strh	r6, [r5, #0]
 800f308:	806e      	strh	r6, [r5, #2]
 800f30a:	80ae      	strh	r6, [r5, #4]
 800f30c:	80ee      	strh	r6, [r5, #6]
 800f30e:	4dbe      	ldr	r5, [pc, #760]	; (800f608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800f310:	a809      	add	r0, sp, #36	; 0x24
 800f312:	f7ff fc04 	bl	800eb1e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f316:	882f      	ldrh	r7, [r5, #0]
 800f318:	463e      	mov	r6, r7
 800f31a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800f31e:	42b3      	cmp	r3, r6
 800f320:	d912      	bls.n	800f348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x8c>
 800f322:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800f326:	3601      	adds	r6, #1
 800f328:	a809      	add	r0, sp, #36	; 0x24
 800f32a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800f32e:	b2b6      	uxth	r6, r6
 800f330:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800f334:	f7ff fc68 	bl	800ec08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f338:	e7ef      	b.n	800f31a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5e>
 800f33a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1e5      	bne.n	800f30e <_ZN8touchgfx11Application15drawCachedAreasEv+0x52>
 800f342:	b01b      	add	sp, #108	; 0x6c
 800f344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f348:	463e      	mov	r6, r7
 800f34a:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800f34e:	42b3      	cmp	r3, r6
 800f350:	d90b      	bls.n	800f36a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800f352:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800f356:	3601      	adds	r6, #1
 800f358:	4620      	mov	r0, r4
 800f35a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800f35e:	b2b6      	uxth	r6, r6
 800f360:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800f364:	f7ff fc72 	bl	800ec4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f368:	e7ef      	b.n	800f34a <_ZN8touchgfx11Application15drawCachedAreasEv+0x8e>
 800f36a:	4ea8      	ldr	r6, [pc, #672]	; (800f60c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800f36c:	6833      	ldr	r3, [r6, #0]
 800f36e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f372:	2b01      	cmp	r3, #1
 800f374:	f040 80d2 	bne.w	800f51c <_ZN8touchgfx11Application15drawCachedAreasEv+0x260>
 800f378:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800f37c:	4639      	mov	r1, r7
 800f37e:	f8b4 c0e8 	ldrh.w	ip, [r4, #232]	; 0xe8
 800f382:	2700      	movs	r7, #0
 800f384:	33aa      	adds	r3, #170	; 0xaa
 800f386:	458c      	cmp	ip, r1
 800f388:	f103 0308 	add.w	r3, r3, #8
 800f38c:	dd0a      	ble.n	800f3a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe8>
 800f38e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800f392:	3101      	adds	r1, #1
 800f394:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800f398:	4402      	add	r2, r0
 800f39a:	b212      	sxth	r2, r2
 800f39c:	4297      	cmp	r7, r2
 800f39e:	bfb8      	it	lt
 800f3a0:	4617      	movlt	r7, r2
 800f3a2:	e7f0      	b.n	800f386 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 800f3a4:	4b9a      	ldr	r3, [pc, #616]	; (800f610 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800f3a6:	f8b3 9000 	ldrh.w	r9, [r3]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	f1b9 0f0f 	cmp.w	r9, #15
 800f3b0:	bf8c      	ite	hi
 800f3b2:	ea4f 09d9 	movhi.w	r9, r9, lsr #3
 800f3b6:	f04f 0901 	movls.w	r9, #1
 800f3ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f3be:	f8bd 801a 	ldrh.w	r8, [sp, #26]
 800f3c2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800f3c6:	4440      	add	r0, r8
 800f3c8:	fa0f f880 	sxth.w	r8, r0
 800f3cc:	6830      	ldr	r0, [r6, #0]
 800f3ce:	4547      	cmp	r7, r8
 800f3d0:	6803      	ldr	r3, [r0, #0]
 800f3d2:	f340 8086 	ble.w	800f4e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x226>
 800f3d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f3da:	4798      	blx	r3
 800f3dc:	eb08 0309 	add.w	r3, r8, r9
 800f3e0:	4298      	cmp	r0, r3
 800f3e2:	da08      	bge.n	800f3f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 800f3e4:	4287      	cmp	r7, r0
 800f3e6:	dd06      	ble.n	800f3f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 800f3e8:	4580      	cmp	r8, r0
 800f3ea:	dd70      	ble.n	800f4ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 800f3ec:	f1b8 0f00 	cmp.w	r8, #0
 800f3f0:	dd6d      	ble.n	800f4ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	e004      	b.n	800f400 <_ZN8touchgfx11Application15drawCachedAreasEv+0x144>
 800f3f6:	4580      	cmp	r8, r0
 800f3f8:	dcfb      	bgt.n	800f3f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800f3fa:	42b8      	cmp	r0, r7
 800f3fc:	bfa8      	it	ge
 800f3fe:	4638      	movge	r0, r7
 800f400:	4b84      	ldr	r3, [pc, #528]	; (800f614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800f402:	eba0 0008 	sub.w	r0, r0, r8
 800f406:	2200      	movs	r2, #0
 800f408:	f8ad 8016 	strh.w	r8, [sp, #22]
 800f40c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f410:	f8b5 8000 	ldrh.w	r8, [r5]
 800f414:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f418:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f41c:	f8ad 001a 	strh.w	r0, [sp, #26]
 800f420:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800f424:	4543      	cmp	r3, r8
 800f426:	d9ca      	bls.n	800f3be <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 800f428:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 800f42c:	ab07      	add	r3, sp, #28
 800f42e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800f432:	6851      	ldr	r1, [r2, #4]
 800f434:	c303      	stmia	r3!, {r0, r1}
 800f436:	a905      	add	r1, sp, #20
 800f438:	a807      	add	r0, sp, #28
 800f43a:	f7ff fa81 	bl	800e940 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d04c      	beq.n	800f4dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x220>
 800f442:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800f446:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800f44a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800f44e:	4686      	mov	lr, r0
 800f450:	4290      	cmp	r0, r2
 800f452:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800f456:	4450      	add	r0, sl
 800f458:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800f45c:	bfb8      	it	lt
 800f45e:	4696      	movlt	lr, r2
 800f460:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800f464:	4452      	add	r2, sl
 800f466:	b280      	uxth	r0, r0
 800f468:	4299      	cmp	r1, r3
 800f46a:	468c      	mov	ip, r1
 800f46c:	b292      	uxth	r2, r2
 800f46e:	f8ad e01c 	strh.w	lr, [sp, #28]
 800f472:	fa0f fb80 	sxth.w	fp, r0
 800f476:	bfb8      	it	lt
 800f478:	469c      	movlt	ip, r3
 800f47a:	fa0f fa82 	sxth.w	sl, r2
 800f47e:	f8ad c01e 	strh.w	ip, [sp, #30]
 800f482:	45d3      	cmp	fp, sl
 800f484:	bfb8      	it	lt
 800f486:	4602      	movlt	r2, r0
 800f488:	eba2 020e 	sub.w	r2, r2, lr
 800f48c:	f8ad 2020 	strh.w	r2, [sp, #32]
 800f490:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800f494:	4411      	add	r1, r2
 800f496:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800f49a:	4413      	add	r3, r2
 800f49c:	b289      	uxth	r1, r1
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	b208      	sxth	r0, r1
 800f4a2:	b21a      	sxth	r2, r3
 800f4a4:	4290      	cmp	r0, r2
 800f4a6:	bfb8      	it	lt
 800f4a8:	460b      	movlt	r3, r1
 800f4aa:	eba3 030c 	sub.w	r3, r3, ip
 800f4ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f4b2:	a807      	add	r0, sp, #28
 800f4b4:	f7fb fe6d 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f4b8:	b920      	cbnz	r0, 800f4c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x208>
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	a907      	add	r1, sp, #28
 800f4be:	4620      	mov	r0, r4
 800f4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c2:	4798      	blx	r3
 800f4c4:	f108 0801 	add.w	r8, r8, #1
 800f4c8:	fa1f f888 	uxth.w	r8, r8
 800f4cc:	e7a8      	b.n	800f420 <_ZN8touchgfx11Application15drawCachedAreasEv+0x164>
 800f4ce:	6830      	ldr	r0, [r6, #0]
 800f4d0:	2101      	movs	r1, #1
 800f4d2:	6803      	ldr	r3, [r0, #0]
 800f4d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f4d8:	4798      	blx	r3
 800f4da:	e770      	b.n	800f3be <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 800f4dc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800f4e0:	e7e7      	b.n	800f4b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1f6>
 800f4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e4:	4798      	blx	r3
 800f4e6:	4b4c      	ldr	r3, [pc, #304]	; (800f618 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f43f af29 	beq.w	800f342 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	882d      	ldrh	r5, [r5, #0]
 800f4f4:	34ea      	adds	r4, #234	; 0xea
 800f4f6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800f4fa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800f4fe:	42ab      	cmp	r3, r5
 800f500:	f67f af1f 	bls.w	800f342 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 800f504:	ab1a      	add	r3, sp, #104	; 0x68
 800f506:	4620      	mov	r0, r4
 800f508:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f50c:	3501      	adds	r5, #1
 800f50e:	3b44      	subs	r3, #68	; 0x44
 800f510:	b2ad      	uxth	r5, r5
 800f512:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f516:	f7ff fb77 	bl	800ec08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f51a:	e7ee      	b.n	800f4fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	f040 8137 	bne.w	800f790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>
 800f522:	4b3e      	ldr	r3, [pc, #248]	; (800f61c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	2b01      	cmp	r3, #1
 800f528:	d02c      	beq.n	800f584 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c8>
 800f52a:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
 800f52e:	882a      	ldrh	r2, [r5, #0]
 800f530:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 800f534:	3201      	adds	r2, #1
 800f536:	b292      	uxth	r2, r2
 800f538:	2900      	cmp	r1, #0
 800f53a:	d0d4      	beq.n	800f4e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 800f53c:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	; 0xaa
 800f540:	4610      	mov	r0, r2
 800f542:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800f546:	f04f 0900 	mov.w	r9, #0
 800f54a:	441f      	add	r7, r3
 800f54c:	b23f      	sxth	r7, r7
 800f54e:	b283      	uxth	r3, r0
 800f550:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 800f554:	4299      	cmp	r1, r3
 800f556:	f240 80c5 	bls.w	800f6e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x428>
 800f55a:	44a0      	add	r8, r4
 800f55c:	eb04 0bc0 	add.w	fp, r4, r0, lsl #3
 800f560:	4684      	mov	ip, r0
 800f562:	f9b8 30aa 	ldrsh.w	r3, [r8, #170]	; 0xaa
 800f566:	f9bb e0aa 	ldrsh.w	lr, [fp, #170]	; 0xaa
 800f56a:	4573      	cmp	r3, lr
 800f56c:	f340 80a7 	ble.w	800f6be <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800f570:	f8bb 70ae 	ldrh.w	r7, [fp, #174]	; 0xae
 800f574:	4477      	add	r7, lr
 800f576:	b23f      	sxth	r7, r7
 800f578:	429f      	cmp	r7, r3
 800f57a:	bfa8      	it	ge
 800f57c:	461f      	movge	r7, r3
 800f57e:	3001      	adds	r0, #1
 800f580:	46e1      	mov	r9, ip
 800f582:	e7e4      	b.n	800f54e <_ZN8touchgfx11Application15drawCachedAreasEv+0x292>
 800f584:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800f588:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800f58c:	f1bb 0f00 	cmp.w	fp, #0
 800f590:	d0a9      	beq.n	800f4e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 800f592:	882b      	ldrh	r3, [r5, #0]
 800f594:	f04f 0800 	mov.w	r8, #0
 800f598:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800f59c:	3301      	adds	r3, #1
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	b299      	uxth	r1, r3
 800f5a2:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800f5a6:	458b      	cmp	fp, r1
 800f5a8:	d93a      	bls.n	800f620 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800f5aa:	4427      	add	r7, r4
 800f5ac:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800f5b0:	469c      	mov	ip, r3
 800f5b2:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 800f5b6:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 800f5ba:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800f5be:	4408      	add	r0, r1
 800f5c0:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800f5c4:	4471      	add	r1, lr
 800f5c6:	b200      	sxth	r0, r0
 800f5c8:	b209      	sxth	r1, r1
 800f5ca:	4288      	cmp	r0, r1
 800f5cc:	da06      	bge.n	800f5dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 800f5ce:	4586      	cmp	lr, r0
 800f5d0:	4672      	mov	r2, lr
 800f5d2:	bfb8      	it	lt
 800f5d4:	4602      	movlt	r2, r0
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	46e0      	mov	r8, ip
 800f5da:	e7e1      	b.n	800f5a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e4>
 800f5dc:	d10b      	bne.n	800f5f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800f5de:	f9b7 c0ae 	ldrsh.w	ip, [r7, #174]	; 0xae
 800f5e2:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800f5e6:	458c      	cmp	ip, r1
 800f5e8:	bfb4      	ite	lt
 800f5ea:	469c      	movlt	ip, r3
 800f5ec:	46c4      	movge	ip, r8
 800f5ee:	4572      	cmp	r2, lr
 800f5f0:	bfb8      	it	lt
 800f5f2:	4672      	movlt	r2, lr
 800f5f4:	e7ef      	b.n	800f5d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 800f5f6:	428a      	cmp	r2, r1
 800f5f8:	46c4      	mov	ip, r8
 800f5fa:	bfb8      	it	lt
 800f5fc:	460a      	movlt	r2, r1
 800f5fe:	e7ea      	b.n	800f5d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 800f600:	24006b28 	.word	0x24006b28
 800f604:	24006b34 	.word	0x24006b34
 800f608:	24000050 	.word	0x24000050
 800f60c:	24006af0 	.word	0x24006af0
 800f610:	24006ae6 	.word	0x24006ae6
 800f614:	24006ae4 	.word	0x24006ae4
 800f618:	24006aee 	.word	0x24006aee
 800f61c:	24006ae8 	.word	0x24006ae8
 800f620:	19e1      	adds	r1, r4, r7
 800f622:	ab07      	add	r3, sp, #28
 800f624:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800f628:	6849      	ldr	r1, [r1, #4]
 800f62a:	c303      	stmia	r3!, {r0, r1}
 800f62c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800f630:	a807      	add	r0, sp, #28
 800f632:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800f636:	2b13      	cmp	r3, #19
 800f638:	440b      	add	r3, r1
 800f63a:	bfd8      	it	le
 800f63c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800f640:	1a9b      	subs	r3, r3, r2
 800f642:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f646:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f64a:	f7ff f835 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f64e:	a807      	add	r0, sp, #28
 800f650:	f7fb fd9f 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f654:	2800      	cmp	r0, #0
 800f656:	d197      	bne.n	800f588 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 800f658:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800f65c:	4427      	add	r7, r4
 800f65e:	6830      	ldr	r0, [r6, #0]
 800f660:	f1bc 0f14 	cmp.w	ip, #20
 800f664:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f668:	f8d0 e000 	ldr.w	lr, [r0]
 800f66c:	bfa8      	it	ge
 800f66e:	f04f 0c14 	movge.w	ip, #20
 800f672:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f676:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800f67a:	fa1f fc8c 	uxth.w	ip, ip
 800f67e:	f8cd c000 	str.w	ip, [sp]
 800f682:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800f686:	47d0      	blx	sl
 800f688:	4682      	mov	sl, r0
 800f68a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800f68e:	a807      	add	r0, sp, #28
 800f690:	f7fe fff8 	bl	800e684 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	4620      	mov	r0, r4
 800f698:	a907      	add	r1, sp, #28
 800f69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f69c:	4798      	blx	r3
 800f69e:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 800f6a2:	eba0 000a 	sub.w	r0, r0, sl
 800f6a6:	b200      	sxth	r0, r0
 800f6a8:	f8a7 00ac 	strh.w	r0, [r7, #172]	; 0xac
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	f47f af6b 	bne.w	800f588 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 800f6b2:	fa1f f188 	uxth.w	r1, r8
 800f6b6:	4648      	mov	r0, r9
 800f6b8:	f7ff fa84 	bl	800ebc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f6bc:	e764      	b.n	800f588 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 800f6be:	d10c      	bne.n	800f6da <_ZN8touchgfx11Application15drawCachedAreasEv+0x41e>
 800f6c0:	f9b8 e0ac 	ldrsh.w	lr, [r8, #172]	; 0xac
 800f6c4:	f9bb c0ac 	ldrsh.w	ip, [fp, #172]	; 0xac
 800f6c8:	45e6      	cmp	lr, ip
 800f6ca:	bfb4      	ite	lt
 800f6cc:	4684      	movlt	ip, r0
 800f6ce:	46cc      	movge	ip, r9
 800f6d0:	f8bb e0ae 	ldrh.w	lr, [fp, #174]	; 0xae
 800f6d4:	4473      	add	r3, lr
 800f6d6:	b21b      	sxth	r3, r3
 800f6d8:	e74e      	b.n	800f578 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2bc>
 800f6da:	4577      	cmp	r7, lr
 800f6dc:	46cc      	mov	ip, r9
 800f6de:	bfa8      	it	ge
 800f6e0:	4677      	movge	r7, lr
 800f6e2:	e74c      	b.n	800f57e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 800f6e4:	eb0a 0008 	add.w	r0, sl, r8
 800f6e8:	44a0      	add	r8, r4
 800f6ea:	f9b8 b0ae 	ldrsh.w	fp, [r8, #174]	; 0xae
 800f6ee:	f1bb 0f13 	cmp.w	fp, #19
 800f6f2:	bfdc      	itt	le
 800f6f4:	f8b8 70aa 	ldrhle.w	r7, [r8, #170]	; 0xaa
 800f6f8:	445f      	addle	r7, fp
 800f6fa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800f6fe:	bfd8      	it	le
 800f700:	b23f      	sxthle	r7, r7
 800f702:	f7fb fd46 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f706:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f70a:	2800      	cmp	r0, #0
 800f70c:	f47f af14 	bne.w	800f538 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27c>
 800f710:	f9b8 20aa 	ldrsh.w	r2, [r8, #170]	; 0xaa
 800f714:	fa1f fb8b 	uxth.w	fp, fp
 800f718:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800f71c:	1abf      	subs	r7, r7, r2
 800f71e:	f9b8 10a8 	ldrsh.w	r1, [r8, #168]	; 0xa8
 800f722:	f9b8 30ac 	ldrsh.w	r3, [r8, #172]	; 0xac
 800f726:	2f14      	cmp	r7, #20
 800f728:	6830      	ldr	r0, [r6, #0]
 800f72a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f72e:	b289      	uxth	r1, r1
 800f730:	bfa8      	it	ge
 800f732:	2714      	movge	r7, #20
 800f734:	f8ad 201e 	strh.w	r2, [sp, #30]
 800f738:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f73c:	b292      	uxth	r2, r2
 800f73e:	f8d0 c000 	ldr.w	ip, [r0]
 800f742:	b2bf      	uxth	r7, r7
 800f744:	b29b      	uxth	r3, r3
 800f746:	455f      	cmp	r7, fp
 800f748:	bf94      	ite	ls
 800f74a:	9700      	strls	r7, [sp, #0]
 800f74c:	f8cd b000 	strhi.w	fp, [sp]
 800f750:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
 800f754:	47b8      	blx	r7
 800f756:	6823      	ldr	r3, [r4, #0]
 800f758:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800f75c:	a907      	add	r1, sp, #28
 800f75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f760:	4620      	mov	r0, r4
 800f762:	4798      	blx	r3
 800f764:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800f768:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 800f76c:	f8b8 20aa 	ldrh.w	r2, [r8, #170]	; 0xaa
 800f770:	1a5b      	subs	r3, r3, r1
 800f772:	440a      	add	r2, r1
 800f774:	b21b      	sxth	r3, r3
 800f776:	f8a8 20aa 	strh.w	r2, [r8, #170]	; 0xaa
 800f77a:	f8a8 30ae 	strh.w	r3, [r8, #174]	; 0xae
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f47f aed5 	bne.w	800f52e <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 800f784:	fa1f f189 	uxth.w	r1, r9
 800f788:	4650      	mov	r0, sl
 800f78a:	f7ff fa1b 	bl	800ebc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f78e:	e6ce      	b.n	800f52e <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 800f790:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800f794:	42bb      	cmp	r3, r7
 800f796:	f67f aea6 	bls.w	800f4e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 800f79a:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800f79e:	ab07      	add	r3, sp, #28
 800f7a0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800f7a4:	6851      	ldr	r1, [r2, #4]
 800f7a6:	c303      	stmia	r3!, {r0, r1}
 800f7a8:	a807      	add	r0, sp, #28
 800f7aa:	f7fb fcf2 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f7ae:	b920      	cbnz	r0, 800f7ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fe>
 800f7b0:	6823      	ldr	r3, [r4, #0]
 800f7b2:	a907      	add	r1, sp, #28
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b8:	4798      	blx	r3
 800f7ba:	3701      	adds	r7, #1
 800f7bc:	b2bf      	uxth	r7, r7
 800f7be:	e7e7      	b.n	800f790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>

0800f7c0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800f7c0:	4b03      	ldr	r3, [pc, #12]	; (800f7d0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	801a      	strh	r2, [r3, #0]
 800f7c6:	805a      	strh	r2, [r3, #2]
 800f7c8:	809a      	strh	r2, [r3, #4]
 800f7ca:	80da      	strh	r2, [r3, #6]
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	24006b34 	.word	0x24006b34

0800f7d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800f7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d8:	b09d      	sub	sp, #116	; 0x74
 800f7da:	4606      	mov	r6, r0
 800f7dc:	4614      	mov	r4, r2
 800f7de:	468a      	mov	sl, r1
 800f7e0:	a803      	add	r0, sp, #12
 800f7e2:	461d      	mov	r5, r3
 800f7e4:	f000 fd6c 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800f7e8:	6833      	ldr	r3, [r6, #0]
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800f7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7f2:	4798      	blx	r3
 800f7f4:	6833      	ldr	r3, [r6, #0]
 800f7f6:	4607      	mov	r7, r0
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7fc:	4798      	blx	r3
 800f7fe:	462a      	mov	r2, r5
 800f800:	2500      	movs	r5, #0
 800f802:	4621      	mov	r1, r4
 800f804:	9000      	str	r0, [sp, #0]
 800f806:	463b      	mov	r3, r7
 800f808:	462c      	mov	r4, r5
 800f80a:	46a9      	mov	r9, r5
 800f80c:	46a8      	mov	r8, r5
 800f80e:	a803      	add	r0, sp, #12
 800f810:	f000 fdc2 	bl	8010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f814:	2300      	movs	r3, #0
 800f816:	9302      	str	r3, [sp, #8]
 800f818:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f81c:	429c      	cmp	r4, r3
 800f81e:	d002      	beq.n	800f826 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800f820:	455c      	cmp	r4, fp
 800f822:	bf18      	it	ne
 800f824:	4625      	movne	r5, r4
 800f826:	ab02      	add	r3, sp, #8
 800f828:	4632      	mov	r2, r6
 800f82a:	4651      	mov	r1, sl
 800f82c:	a803      	add	r0, sp, #12
 800f82e:	f001 f8c5 	bl	80109bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f832:	4604      	mov	r4, r0
 800f834:	b108      	cbz	r0, 800f83a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800f836:	280a      	cmp	r0, #10
 800f838:	d10a      	bne.n	800f850 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800f83a:	45c1      	cmp	r9, r8
 800f83c:	bf38      	it	cc
 800f83e:	46c1      	movcc	r9, r8
 800f840:	f04f 0800 	mov.w	r8, #0
 800f844:	2c00      	cmp	r4, #0
 800f846:	d1e5      	bne.n	800f814 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800f848:	4648      	mov	r0, r9
 800f84a:	b01d      	add	sp, #116	; 0x74
 800f84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f850:	9a02      	ldr	r2, [sp, #8]
 800f852:	2a00      	cmp	r2, #0
 800f854:	d0de      	beq.n	800f814 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800f856:	7b57      	ldrb	r7, [r2, #13]
 800f858:	4629      	mov	r1, r5
 800f85a:	6833      	ldr	r3, [r6, #0]
 800f85c:	007f      	lsls	r7, r7, #1
 800f85e:	8894      	ldrh	r4, [r2, #4]
 800f860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f862:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800f866:	7a97      	ldrb	r7, [r2, #10]
 800f868:	4307      	orrs	r7, r0
 800f86a:	4630      	mov	r0, r6
 800f86c:	4798      	blx	r3
 800f86e:	4438      	add	r0, r7
 800f870:	4480      	add	r8, r0
 800f872:	fa1f f888 	uxth.w	r8, r8
 800f876:	e7e5      	b.n	800f844 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800f878 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800f878:	b508      	push	{r3, lr}
 800f87a:	6803      	ldr	r3, [r0, #0]
 800f87c:	68db      	ldr	r3, [r3, #12]
 800f87e:	4798      	blx	r3
 800f880:	b128      	cbz	r0, 800f88e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800f882:	7b43      	ldrb	r3, [r0, #13]
 800f884:	7a80      	ldrb	r0, [r0, #10]
 800f886:	005b      	lsls	r3, r3, #1
 800f888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f88c:	4318      	orrs	r0, r3
 800f88e:	bd08      	pop	{r3, pc}

0800f890 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800f890:	b40e      	push	{r1, r2, r3}
 800f892:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f894:	b09e      	sub	sp, #120	; 0x78
 800f896:	4605      	mov	r5, r0
 800f898:	ab23      	add	r3, sp, #140	; 0x8c
 800f89a:	a805      	add	r0, sp, #20
 800f89c:	f853 4b04 	ldr.w	r4, [r3], #4
 800f8a0:	9303      	str	r3, [sp, #12]
 800f8a2:	f000 fd0d 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800f8a6:	682b      	ldr	r3, [r5, #0]
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ac:	4798      	blx	r3
 800f8ae:	682b      	ldr	r3, [r5, #0]
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8b6:	4798      	blx	r3
 800f8b8:	4633      	mov	r3, r6
 800f8ba:	4621      	mov	r1, r4
 800f8bc:	ae1e      	add	r6, sp, #120	; 0x78
 800f8be:	2400      	movs	r4, #0
 800f8c0:	9000      	str	r0, [sp, #0]
 800f8c2:	9a03      	ldr	r2, [sp, #12]
 800f8c4:	a805      	add	r0, sp, #20
 800f8c6:	f000 fd67 	bl	8010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f8ca:	f846 4d68 	str.w	r4, [r6, #-104]!
 800f8ce:	462a      	mov	r2, r5
 800f8d0:	4633      	mov	r3, r6
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	a805      	add	r0, sp, #20
 800f8d6:	f001 f871 	bl	80109bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f8da:	b300      	cbz	r0, 800f91e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800f8dc:	280a      	cmp	r0, #10
 800f8de:	d01a      	beq.n	800f916 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800f8e0:	9f04      	ldr	r7, [sp, #16]
 800f8e2:	b1c7      	cbz	r7, 800f916 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800f8e4:	7b78      	ldrb	r0, [r7, #13]
 800f8e6:	7a3b      	ldrb	r3, [r7, #8]
 800f8e8:	00c1      	lsls	r1, r0, #3
 800f8ea:	88aa      	ldrh	r2, [r5, #4]
 800f8ec:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800f8f0:	4319      	orrs	r1, r3
 800f8f2:	0643      	lsls	r3, r0, #25
 800f8f4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800f8f8:	bf48      	it	mi
 800f8fa:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800f8fe:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f902:	bf48      	it	mi
 800f904:	b219      	sxthmi	r1, r3
 800f906:	79fb      	ldrb	r3, [r7, #7]
 800f908:	4303      	orrs	r3, r0
 800f90a:	4413      	add	r3, r2
 800f90c:	1a5b      	subs	r3, r3, r1
 800f90e:	b29b      	uxth	r3, r3
 800f910:	42a3      	cmp	r3, r4
 800f912:	bfc8      	it	gt
 800f914:	b21c      	sxthgt	r4, r3
 800f916:	4633      	mov	r3, r6
 800f918:	462a      	mov	r2, r5
 800f91a:	2100      	movs	r1, #0
 800f91c:	e7da      	b.n	800f8d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800f91e:	b2a0      	uxth	r0, r4
 800f920:	b01e      	add	sp, #120	; 0x78
 800f922:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f926:	b003      	add	sp, #12
 800f928:	4770      	bx	lr

0800f92a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800f92a:	b40e      	push	{r1, r2, r3}
 800f92c:	b570      	push	{r4, r5, r6, lr}
 800f92e:	b09d      	sub	sp, #116	; 0x74
 800f930:	4604      	mov	r4, r0
 800f932:	ab21      	add	r3, sp, #132	; 0x84
 800f934:	a803      	add	r0, sp, #12
 800f936:	f853 5b04 	ldr.w	r5, [r3], #4
 800f93a:	9302      	str	r3, [sp, #8]
 800f93c:	f000 fcc0 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	4620      	mov	r0, r4
 800f944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f946:	4798      	blx	r3
 800f948:	6823      	ldr	r3, [r4, #0]
 800f94a:	4606      	mov	r6, r0
 800f94c:	4620      	mov	r0, r4
 800f94e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f950:	2401      	movs	r4, #1
 800f952:	4798      	blx	r3
 800f954:	4633      	mov	r3, r6
 800f956:	9000      	str	r0, [sp, #0]
 800f958:	4629      	mov	r1, r5
 800f95a:	9a02      	ldr	r2, [sp, #8]
 800f95c:	a803      	add	r0, sp, #12
 800f95e:	f000 fd1b 	bl	8010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f962:	a803      	add	r0, sp, #12
 800f964:	f001 f924 	bl	8010bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f968:	b2a3      	uxth	r3, r4
 800f96a:	b138      	cbz	r0, 800f97c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800f96c:	280a      	cmp	r0, #10
 800f96e:	a803      	add	r0, sp, #12
 800f970:	bf04      	itt	eq
 800f972:	3301      	addeq	r3, #1
 800f974:	b21c      	sxtheq	r4, r3
 800f976:	f001 f91b 	bl	8010bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f97a:	e7f5      	b.n	800f968 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800f97c:	4618      	mov	r0, r3
 800f97e:	b01d      	add	sp, #116	; 0x74
 800f980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f984:	b003      	add	sp, #12
 800f986:	4770      	bx	lr

0800f988 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800f988:	b40e      	push	{r1, r2, r3}
 800f98a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f98c:	b09e      	sub	sp, #120	; 0x78
 800f98e:	4604      	mov	r4, r0
 800f990:	ab23      	add	r3, sp, #140	; 0x8c
 800f992:	a805      	add	r0, sp, #20
 800f994:	f853 5b04 	ldr.w	r5, [r3], #4
 800f998:	9303      	str	r3, [sp, #12]
 800f99a:	f000 fc91 	bl	80102c0 <_ZN8touchgfx12TextProviderC1Ev>
 800f99e:	6823      	ldr	r3, [r4, #0]
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9a4:	4798      	blx	r3
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	4606      	mov	r6, r0
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9ae:	4798      	blx	r3
 800f9b0:	4633      	mov	r3, r6
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	9000      	str	r0, [sp, #0]
 800f9b6:	9a03      	ldr	r2, [sp, #12]
 800f9b8:	a805      	add	r0, sp, #20
 800f9ba:	f000 fced 	bl	8010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f9be:	ad1e      	add	r5, sp, #120	; 0x78
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	26ff      	movs	r6, #255	; 0xff
 800f9c4:	4622      	mov	r2, r4
 800f9c6:	a805      	add	r0, sp, #20
 800f9c8:	f845 1d68 	str.w	r1, [r5, #-104]!
 800f9cc:	462b      	mov	r3, r5
 800f9ce:	f000 fff5 	bl	80109bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f9d2:	b1d8      	cbz	r0, 800fa0c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800f9d4:	280a      	cmp	r0, #10
 800f9d6:	d012      	beq.n	800f9fe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800f9d8:	9804      	ldr	r0, [sp, #16]
 800f9da:	b180      	cbz	r0, 800f9fe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800f9dc:	7b47      	ldrb	r7, [r0, #13]
 800f9de:	7922      	ldrb	r2, [r4, #4]
 800f9e0:	00fb      	lsls	r3, r7, #3
 800f9e2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800f9e6:	7a03      	ldrb	r3, [r0, #8]
 800f9e8:	430b      	orrs	r3, r1
 800f9ea:	0679      	lsls	r1, r7, #25
 800f9ec:	bf44      	itt	mi
 800f9ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f9f2:	b21b      	sxthmi	r3, r3
 800f9f4:	1ad3      	subs	r3, r2, r3
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	429e      	cmp	r6, r3
 800f9fa:	bf28      	it	cs
 800f9fc:	461e      	movcs	r6, r3
 800f9fe:	462b      	mov	r3, r5
 800fa00:	4622      	mov	r2, r4
 800fa02:	2100      	movs	r1, #0
 800fa04:	a805      	add	r0, sp, #20
 800fa06:	f000 ffd9 	bl	80109bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fa0a:	e7e2      	b.n	800f9d2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	b01e      	add	sp, #120	; 0x78
 800fa10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fa14:	b003      	add	sp, #12
 800fa16:	4770      	bx	lr

0800fa18 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800fa18:	b513      	push	{r0, r1, r4, lr}
 800fa1a:	6803      	ldr	r3, [r0, #0]
 800fa1c:	2400      	movs	r4, #0
 800fa1e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800fa22:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800fa26:	f8ad 1004 	strh.w	r1, [sp, #4]
 800fa2a:	4669      	mov	r1, sp
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	9400      	str	r4, [sp, #0]
 800fa30:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fa34:	4798      	blx	r3
 800fa36:	b002      	add	sp, #8
 800fa38:	bd10      	pop	{r4, pc}

0800fa3a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800fa3a:	b538      	push	{r3, r4, r5, lr}
 800fa3c:	680b      	ldr	r3, [r1, #0]
 800fa3e:	460c      	mov	r4, r1
 800fa40:	4605      	mov	r5, r0
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	4798      	blx	r3
 800fa46:	6823      	ldr	r3, [r4, #0]
 800fa48:	4620      	mov	r0, r4
 800fa4a:	4629      	mov	r1, r5
 800fa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4e:	4798      	blx	r3
 800fa50:	4628      	mov	r0, r5
 800fa52:	bd38      	pop	{r3, r4, r5, pc}

0800fa54 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800fa54:	b410      	push	{r4}
 800fa56:	880a      	ldrh	r2, [r1, #0]
 800fa58:	8884      	ldrh	r4, [r0, #4]
 800fa5a:	4422      	add	r2, r4
 800fa5c:	800a      	strh	r2, [r1, #0]
 800fa5e:	884a      	ldrh	r2, [r1, #2]
 800fa60:	88c4      	ldrh	r4, [r0, #6]
 800fa62:	4422      	add	r2, r4
 800fa64:	804a      	strh	r2, [r1, #2]
 800fa66:	6940      	ldr	r0, [r0, #20]
 800fa68:	b120      	cbz	r0, 800fa74 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800fa6a:	6803      	ldr	r3, [r0, #0]
 800fa6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa72:	4718      	bx	r3
 800fa74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa78:	4770      	bx	lr

0800fa7a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800fa7a:	b570      	push	{r4, r5, r6, lr}
 800fa7c:	8882      	ldrh	r2, [r0, #4]
 800fa7e:	460c      	mov	r4, r1
 800fa80:	880b      	ldrh	r3, [r1, #0]
 800fa82:	4605      	mov	r5, r0
 800fa84:	4413      	add	r3, r2
 800fa86:	800b      	strh	r3, [r1, #0]
 800fa88:	884b      	ldrh	r3, [r1, #2]
 800fa8a:	88c2      	ldrh	r2, [r0, #6]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	804b      	strh	r3, [r1, #2]
 800fa90:	1d01      	adds	r1, r0, #4
 800fa92:	4620      	mov	r0, r4
 800fa94:	f7fb fb3a 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800fa98:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	dd0b      	ble.n	800fab8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800faa0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	dd07      	ble.n	800fab8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800faa8:	6968      	ldr	r0, [r5, #20]
 800faaa:	b128      	cbz	r0, 800fab8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800faac:	6803      	ldr	r3, [r0, #0]
 800faae:	4621      	mov	r1, r4
 800fab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fab6:	4718      	bx	r3
 800fab8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fabc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	8882      	ldrh	r2, [r0, #4]
 800fac0:	460c      	mov	r4, r1
 800fac2:	880b      	ldrh	r3, [r1, #0]
 800fac4:	4605      	mov	r5, r0
 800fac6:	4413      	add	r3, r2
 800fac8:	800b      	strh	r3, [r1, #0]
 800faca:	884b      	ldrh	r3, [r1, #2]
 800facc:	88c2      	ldrh	r2, [r0, #6]
 800face:	4413      	add	r3, r2
 800fad0:	804b      	strh	r3, [r1, #2]
 800fad2:	1d01      	adds	r1, r0, #4
 800fad4:	4620      	mov	r0, r4
 800fad6:	f7fb fb19 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 800fada:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	dd18      	ble.n	800fb14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800fae2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	dd14      	ble.n	800fb14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800faea:	6968      	ldr	r0, [r5, #20]
 800faec:	b128      	cbz	r0, 800fafa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800faee:	6803      	ldr	r3, [r0, #0]
 800faf0:	4621      	mov	r1, r4
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800faf8:	4718      	bx	r3
 800fafa:	4b07      	ldr	r3, [pc, #28]	; (800fb18 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	3304      	adds	r3, #4
 800fb00:	429d      	cmp	r5, r3
 800fb02:	d107      	bne.n	800fb14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800fb04:	f7fe fffa 	bl	800eafc <_ZN8touchgfx11Application11getInstanceEv>
 800fb08:	6821      	ldr	r1, [r4, #0]
 800fb0a:	6862      	ldr	r2, [r4, #4]
 800fb0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb10:	f7ff b89c 	b.w	800ec4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fb14:	bd70      	pop	{r4, r5, r6, pc}
 800fb16:	bf00      	nop
 800fb18:	24006b2c 	.word	0x24006b2c

0800fb1c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800fb1c:	b570      	push	{r4, r5, r6, lr}
 800fb1e:	4604      	mov	r4, r0
 800fb20:	4616      	mov	r6, r2
 800fb22:	460d      	mov	r5, r1
 800fb24:	b901      	cbnz	r1, 800fb28 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800fb26:	b192      	cbz	r2, 800fb4e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800fb28:	6823      	ldr	r3, [r4, #0]
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	4798      	blx	r3
 800fb30:	88e2      	ldrh	r2, [r4, #6]
 800fb32:	88a1      	ldrh	r1, [r4, #4]
 800fb34:	4620      	mov	r0, r4
 800fb36:	4432      	add	r2, r6
 800fb38:	4429      	add	r1, r5
 800fb3a:	b212      	sxth	r2, r2
 800fb3c:	b209      	sxth	r1, r1
 800fb3e:	f7f2 ff81 	bl	8002a44 <_ZN8touchgfx8Drawable5setXYEss>
 800fb42:	6823      	ldr	r3, [r4, #0]
 800fb44:	4620      	mov	r0, r4
 800fb46:	699b      	ldr	r3, [r3, #24]
 800fb48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb4c:	4718      	bx	r3
 800fb4e:	bd70      	pop	{r4, r5, r6, pc}

0800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800fb50:	b510      	push	{r4, lr}
 800fb52:	2300      	movs	r3, #0
 800fb54:	4604      	mov	r4, r0
 800fb56:	4608      	mov	r0, r1
 800fb58:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800fb5c:	8023      	strh	r3, [r4, #0]
 800fb5e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800fb62:	8063      	strh	r3, [r4, #2]
 800fb64:	6803      	ldr	r3, [r0, #0]
 800fb66:	80a1      	strh	r1, [r4, #4]
 800fb68:	4621      	mov	r1, r4
 800fb6a:	80e2      	strh	r2, [r4, #6]
 800fb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6e:	4798      	blx	r3
 800fb70:	4620      	mov	r0, r4
 800fb72:	bd10      	pop	{r4, pc}

0800fb74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800fb74:	b530      	push	{r4, r5, lr}
 800fb76:	8083      	strh	r3, [r0, #4]
 800fb78:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fb7c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800fb80:	7183      	strb	r3, [r0, #6]
 800fb82:	79c3      	ldrb	r3, [r0, #7]
 800fb84:	6101      	str	r1, [r0, #16]
 800fb86:	f365 0306 	bfi	r3, r5, #0, #7
 800fb8a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800fb8e:	8282      	strh	r2, [r0, #20]
 800fb90:	f365 13c7 	bfi	r3, r5, #7, #1
 800fb94:	71c3      	strb	r3, [r0, #7]
 800fb96:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800fb9a:	7203      	strb	r3, [r0, #8]
 800fb9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800fba0:	7243      	strb	r3, [r0, #9]
 800fba2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fba6:	8143      	strh	r3, [r0, #10]
 800fba8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800fbac:	8183      	strh	r3, [r0, #12]
 800fbae:	4b01      	ldr	r3, [pc, #4]	; (800fbb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800fbb0:	6003      	str	r3, [r0, #0]
 800fbb2:	bd30      	pop	{r4, r5, pc}
 800fbb4:	0801dad8 	.word	0x0801dad8

0800fbb8 <_ZNK8touchgfx9ConstFont4findEt>:
 800fbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbba:	6904      	ldr	r4, [r0, #16]
 800fbbc:	b3bc      	cbz	r4, 800fc2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800fbbe:	88a3      	ldrh	r3, [r4, #4]
 800fbc0:	8a82      	ldrh	r2, [r0, #20]
 800fbc2:	1acb      	subs	r3, r1, r3
 800fbc4:	f102 32ff 	add.w	r2, r2, #4294967295
 800fbc8:	d431      	bmi.n	800fc2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	dd0c      	ble.n	800fbe8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800fbce:	230e      	movs	r3, #14
 800fbd0:	fb03 4302 	mla	r3, r3, r2, r4
 800fbd4:	889b      	ldrh	r3, [r3, #4]
 800fbd6:	1a5b      	subs	r3, r3, r1
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	db27      	blt.n	800fc2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	bfbc      	itt	lt
 800fbe2:	2302      	movlt	r3, #2
 800fbe4:	fb92 f3f3 	sdivlt	r3, r2, r3
 800fbe8:	2500      	movs	r5, #0
 800fbea:	260e      	movs	r6, #14
 800fbec:	4295      	cmp	r5, r2
 800fbee:	dc1e      	bgt.n	800fc2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800fbf0:	fb06 4003 	mla	r0, r6, r3, r4
 800fbf4:	8887      	ldrh	r7, [r0, #4]
 800fbf6:	42b9      	cmp	r1, r7
 800fbf8:	d01a      	beq.n	800fc30 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800fbfa:	d20d      	bcs.n	800fc18 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800fbfc:	1e5a      	subs	r2, r3, #1
 800fbfe:	4295      	cmp	r5, r2
 800fc00:	dc15      	bgt.n	800fc2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800fc02:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800fc06:	1a5b      	subs	r3, r3, r1
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	db0f      	blt.n	800fc2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800fc0e:	429d      	cmp	r5, r3
 800fc10:	ddec      	ble.n	800fbec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800fc12:	1953      	adds	r3, r2, r5
 800fc14:	105b      	asrs	r3, r3, #1
 800fc16:	e7e9      	b.n	800fbec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800fc18:	1c5d      	adds	r5, r3, #1
 800fc1a:	42aa      	cmp	r2, r5
 800fc1c:	db07      	blt.n	800fc2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800fc1e:	8a43      	ldrh	r3, [r0, #18]
 800fc20:	1acb      	subs	r3, r1, r3
 800fc22:	442b      	add	r3, r5
 800fc24:	429d      	cmp	r5, r3
 800fc26:	dc02      	bgt.n	800fc2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	dadf      	bge.n	800fbec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800fc2c:	e7f1      	b.n	800fc12 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800fc2e:	2000      	movs	r0, #0
 800fc30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800fc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc34:	4604      	mov	r4, r0
 800fc36:	4617      	mov	r7, r2
 800fc38:	461e      	mov	r6, r3
 800fc3a:	b911      	cbnz	r1, 800fc42 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800fc3c:	2500      	movs	r5, #0
 800fc3e:	4628      	mov	r0, r5
 800fc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc42:	290a      	cmp	r1, #10
 800fc44:	d0fa      	beq.n	800fc3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800fc46:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800fc4a:	4291      	cmp	r1, r2
 800fc4c:	d0f6      	beq.n	800fc3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800fc4e:	f242 020b 	movw	r2, #8203	; 0x200b
 800fc52:	4291      	cmp	r1, r2
 800fc54:	d0f2      	beq.n	800fc3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800fc56:	f7ff ffaf 	bl	800fbb8 <_ZNK8touchgfx9ConstFont4findEt>
 800fc5a:	4605      	mov	r5, r0
 800fc5c:	b950      	cbnz	r0, 800fc74 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	4620      	mov	r0, r4
 800fc62:	691b      	ldr	r3, [r3, #16]
 800fc64:	4798      	blx	r3
 800fc66:	4601      	mov	r1, r0
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f7ff ffa5 	bl	800fbb8 <_ZNK8touchgfx9ConstFont4findEt>
 800fc6e:	4605      	mov	r5, r0
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d0e3      	beq.n	800fc3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800fc74:	6823      	ldr	r3, [r4, #0]
 800fc76:	4629      	mov	r1, r5
 800fc78:	4620      	mov	r0, r4
 800fc7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc7c:	4798      	blx	r3
 800fc7e:	6038      	str	r0, [r7, #0]
 800fc80:	6823      	ldr	r3, [r4, #0]
 800fc82:	4620      	mov	r0, r4
 800fc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc86:	4798      	blx	r3
 800fc88:	7030      	strb	r0, [r6, #0]
 800fc8a:	e7d8      	b.n	800fc3e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800fc8c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	4770      	bx	lr

0800fc90 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800fc90:	2001      	movs	r0, #1
 800fc92:	4770      	bx	lr

0800fc94 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800fc94:	2002      	movs	r0, #2
 800fc96:	4770      	bx	lr

0800fc98 <_ZN8touchgfx6ScreenD1Ev>:
 800fc98:	4770      	bx	lr

0800fc9a <_ZN8touchgfx12GestureEventD1Ev>:
 800fc9a:	4770      	bx	lr

0800fc9c <_ZN8touchgfx9DragEventD1Ev>:
 800fc9c:	4770      	bx	lr

0800fc9e <_ZN8touchgfx10ClickEventD1Ev>:
 800fc9e:	4770      	bx	lr

0800fca0 <_ZN8touchgfx10ClickEventD0Ev>:
 800fca0:	b510      	push	{r4, lr}
 800fca2:	4604      	mov	r4, r0
 800fca4:	210c      	movs	r1, #12
 800fca6:	f009 ffdf 	bl	8019c68 <_ZdlPvj>
 800fcaa:	4620      	mov	r0, r4
 800fcac:	bd10      	pop	{r4, pc}

0800fcae <_ZN8touchgfx9DragEventD0Ev>:
 800fcae:	b510      	push	{r4, lr}
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	2110      	movs	r1, #16
 800fcb4:	f009 ffd8 	bl	8019c68 <_ZdlPvj>
 800fcb8:	4620      	mov	r0, r4
 800fcba:	bd10      	pop	{r4, pc}

0800fcbc <_ZN8touchgfx12GestureEventD0Ev>:
 800fcbc:	b510      	push	{r4, lr}
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	210c      	movs	r1, #12
 800fcc2:	f009 ffd1 	bl	8019c68 <_ZdlPvj>
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	bd10      	pop	{r4, pc}

0800fcca <_ZN8touchgfx6ScreenD0Ev>:
 800fcca:	b510      	push	{r4, lr}
 800fccc:	4604      	mov	r4, r0
 800fcce:	213c      	movs	r1, #60	; 0x3c
 800fcd0:	f009 ffca 	bl	8019c68 <_ZdlPvj>
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	bd10      	pop	{r4, pc}

0800fcd8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800fcd8:	b530      	push	{r4, r5, lr}
 800fcda:	460d      	mov	r5, r1
 800fcdc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800fcde:	b087      	sub	sp, #28
 800fce0:	4604      	mov	r4, r0
 800fce2:	b301      	cbz	r1, 800fd26 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800fce4:	a801      	add	r0, sp, #4
 800fce6:	f7ff ff33 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fcea:	892a      	ldrh	r2, [r5, #8]
 800fcec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fcf0:	7928      	ldrb	r0, [r5, #4]
 800fcf2:	1ad2      	subs	r2, r2, r3
 800fcf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800fcf6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800fcfa:	441a      	add	r2, r3
 800fcfc:	896b      	ldrh	r3, [r5, #10]
 800fcfe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800fd02:	f88d 0010 	strb.w	r0, [sp, #16]
 800fd06:	1b5b      	subs	r3, r3, r5
 800fd08:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800fd0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fd0c:	442b      	add	r3, r5
 800fd0e:	4d07      	ldr	r5, [pc, #28]	; (800fd2c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800fd10:	f8ad 1012 	strh.w	r1, [sp, #18]
 800fd14:	a903      	add	r1, sp, #12
 800fd16:	9503      	str	r5, [sp, #12]
 800fd18:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fd1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd20:	6803      	ldr	r3, [r0, #0]
 800fd22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd24:	4798      	blx	r3
 800fd26:	b007      	add	sp, #28
 800fd28:	bd30      	pop	{r4, r5, pc}
 800fd2a:	bf00      	nop
 800fd2c:	0801db58 	.word	0x0801db58

0800fd30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800fd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd34:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fd36:	b08a      	sub	sp, #40	; 0x28
 800fd38:	4604      	mov	r4, r0
 800fd3a:	460d      	mov	r5, r1
 800fd3c:	b113      	cbz	r3, 800fd44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800fd3e:	790b      	ldrb	r3, [r1, #4]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d044      	beq.n	800fdce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800fd44:	f104 0804 	add.w	r8, r4, #4
 800fd48:	a803      	add	r0, sp, #12
 800fd4a:	4641      	mov	r1, r8
 800fd4c:	f7ff ff00 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd50:	792b      	ldrb	r3, [r5, #4]
 800fd52:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800fd56:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800fd5a:	b983      	cbnz	r3, 800fd7e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800fd5c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800fd60:	892a      	ldrh	r2, [r5, #8]
 800fd62:	88e9      	ldrh	r1, [r5, #6]
 800fd64:	4640      	mov	r0, r8
 800fd66:	1b92      	subs	r2, r2, r6
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	1bc9      	subs	r1, r1, r7
 800fd6c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800fd70:	b212      	sxth	r2, r2
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	b209      	sxth	r1, r1
 800fd76:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800fd7a:	f7fb f8e5 	bl	800af48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800fd7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fd80:	b329      	cbz	r1, 800fdce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800fd82:	a805      	add	r0, sp, #20
 800fd84:	f7ff fee4 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd88:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800fd8c:	792b      	ldrb	r3, [r5, #4]
 800fd8e:	a907      	add	r1, sp, #28
 800fd90:	1abf      	subs	r7, r7, r2
 800fd92:	88ea      	ldrh	r2, [r5, #6]
 800fd94:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fd96:	4417      	add	r7, r2
 800fd98:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800fd9a:	f88d 3020 	strb.w	r3, [sp, #32]
 800fd9e:	4417      	add	r7, r2
 800fda0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800fda4:	1ab6      	subs	r6, r6, r2
 800fda6:	892a      	ldrh	r2, [r5, #8]
 800fda8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800fdac:	4416      	add	r6, r2
 800fdae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fdb0:	4416      	add	r6, r2
 800fdb2:	4a08      	ldr	r2, [pc, #32]	; (800fdd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800fdb4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800fdb8:	2600      	movs	r6, #0
 800fdba:	9207      	str	r2, [sp, #28]
 800fdbc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800fdc0:	6803      	ldr	r3, [r0, #0]
 800fdc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdc4:	4798      	blx	r3
 800fdc6:	792b      	ldrb	r3, [r5, #4]
 800fdc8:	b10b      	cbz	r3, 800fdce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800fdca:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800fdce:	b00a      	add	sp, #40	; 0x28
 800fdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd4:	0801db30 	.word	0x0801db30

0800fdd8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800fdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fddc:	460c      	mov	r4, r1
 800fdde:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800fde0:	b088      	sub	sp, #32
 800fde2:	4605      	mov	r5, r0
 800fde4:	2900      	cmp	r1, #0
 800fde6:	d06d      	beq.n	800fec4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800fde8:	4668      	mov	r0, sp
 800fdea:	f7ff feb1 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fdee:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800fdf0:	88e3      	ldrh	r3, [r4, #6]
 800fdf2:	f9bd 8000 	ldrsh.w	r8, [sp]
 800fdf6:	440b      	add	r3, r1
 800fdf8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800fdfc:	b21b      	sxth	r3, r3
 800fdfe:	4543      	cmp	r3, r8
 800fe00:	db31      	blt.n	800fe66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800fe02:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800fe06:	44c4      	add	ip, r8
 800fe08:	fa0f fc8c 	sxth.w	ip, ip
 800fe0c:	4563      	cmp	r3, ip
 800fe0e:	da2a      	bge.n	800fe66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800fe10:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800fe12:	8926      	ldrh	r6, [r4, #8]
 800fe14:	4416      	add	r6, r2
 800fe16:	b236      	sxth	r6, r6
 800fe18:	42be      	cmp	r6, r7
 800fe1a:	db24      	blt.n	800fe66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800fe1c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800fe20:	4438      	add	r0, r7
 800fe22:	b200      	sxth	r0, r0
 800fe24:	4286      	cmp	r6, r0
 800fe26:	da1e      	bge.n	800fe66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800fe28:	8963      	ldrh	r3, [r4, #10]
 800fe2a:	4419      	add	r1, r3
 800fe2c:	b209      	sxth	r1, r1
 800fe2e:	4541      	cmp	r1, r8
 800fe30:	db08      	blt.n	800fe44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800fe32:	4561      	cmp	r1, ip
 800fe34:	da06      	bge.n	800fe44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800fe36:	89a3      	ldrh	r3, [r4, #12]
 800fe38:	441a      	add	r2, r3
 800fe3a:	b212      	sxth	r2, r2
 800fe3c:	42ba      	cmp	r2, r7
 800fe3e:	db01      	blt.n	800fe44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800fe40:	4282      	cmp	r2, r0
 800fe42:	db10      	blt.n	800fe66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800fe44:	4b21      	ldr	r3, [pc, #132]	; (800fecc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800fe46:	a904      	add	r1, sp, #16
 800fe48:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800fe4a:	9304      	str	r3, [sp, #16]
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	f88d 3014 	strb.w	r3, [sp, #20]
 800fe52:	2300      	movs	r3, #0
 800fe54:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe58:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fe5c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fe60:	6803      	ldr	r3, [r0, #0]
 800fe62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe64:	4798      	blx	r3
 800fe66:	1d29      	adds	r1, r5, #4
 800fe68:	a802      	add	r0, sp, #8
 800fe6a:	f7ff fe71 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fe6e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800fe72:	88e0      	ldrh	r0, [r4, #6]
 800fe74:	eba3 0808 	sub.w	r8, r3, r8
 800fe78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fe7c:	7921      	ldrb	r1, [r4, #4]
 800fe7e:	fa1f f888 	uxth.w	r8, r8
 800fe82:	1bdf      	subs	r7, r3, r7
 800fe84:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800fe88:	b2bb      	uxth	r3, r7
 800fe8a:	4440      	add	r0, r8
 800fe8c:	8922      	ldrh	r2, [r4, #8]
 800fe8e:	8967      	ldrh	r7, [r4, #10]
 800fe90:	4460      	add	r0, ip
 800fe92:	89a4      	ldrh	r4, [r4, #12]
 800fe94:	441a      	add	r2, r3
 800fe96:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800fe98:	44b8      	add	r8, r7
 800fe9a:	4423      	add	r3, r4
 800fe9c:	f8ad 0016 	strh.w	r0, [sp, #22]
 800fea0:	4432      	add	r2, r6
 800fea2:	44e0      	add	r8, ip
 800fea4:	4433      	add	r3, r6
 800fea6:	4c0a      	ldr	r4, [pc, #40]	; (800fed0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800fea8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800feaa:	f88d 1014 	strb.w	r1, [sp, #20]
 800feae:	a904      	add	r1, sp, #16
 800feb0:	9404      	str	r4, [sp, #16]
 800feb2:	f8ad 2018 	strh.w	r2, [sp, #24]
 800feb6:	f8ad 801a 	strh.w	r8, [sp, #26]
 800feba:	f8ad 301c 	strh.w	r3, [sp, #28]
 800febe:	6803      	ldr	r3, [r0, #0]
 800fec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fec2:	4798      	blx	r3
 800fec4:	b008      	add	sp, #32
 800fec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feca:	bf00      	nop
 800fecc:	0801db30 	.word	0x0801db30
 800fed0:	0801db44 	.word	0x0801db44

0800fed4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800fed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fed6:	4604      	mov	r4, r0
 800fed8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800fedc:	3201      	adds	r2, #1
 800fede:	d112      	bne.n	800ff06 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800fee0:	2500      	movs	r5, #0
 800fee2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800fee6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800feea:	6803      	ldr	r3, [r0, #0]
 800feec:	9500      	str	r5, [sp, #0]
 800feee:	466d      	mov	r5, sp
 800fef0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800fef4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fef8:	4629      	mov	r1, r5
 800fefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fefc:	4798      	blx	r3
 800fefe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ff02:	e884 0003 	stmia.w	r4, {r0, r1}
 800ff06:	4620      	mov	r0, r4
 800ff08:	b003      	add	sp, #12
 800ff0a:	bd30      	pop	{r4, r5, pc}

0800ff0c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800ff0c:	b513      	push	{r0, r1, r4, lr}
 800ff0e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800ff12:	4604      	mov	r4, r0
 800ff14:	3301      	adds	r3, #1
 800ff16:	d109      	bne.n	800ff2c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800ff18:	4601      	mov	r1, r0
 800ff1a:	4668      	mov	r0, sp
 800ff1c:	f7ff fe18 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ff20:	f8bd 3000 	ldrh.w	r3, [sp]
 800ff24:	8423      	strh	r3, [r4, #32]
 800ff26:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ff2a:	8463      	strh	r3, [r4, #34]	; 0x22
 800ff2c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800ff30:	b002      	add	sp, #8
 800ff32:	bd10      	pop	{r4, pc}

0800ff34 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800ff34:	b513      	push	{r0, r1, r4, lr}
 800ff36:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	d109      	bne.n	800ff54 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800ff40:	4601      	mov	r1, r0
 800ff42:	4668      	mov	r0, sp
 800ff44:	f7ff fe04 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ff48:	f8bd 3000 	ldrh.w	r3, [sp]
 800ff4c:	8423      	strh	r3, [r4, #32]
 800ff4e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ff52:	8463      	strh	r3, [r4, #34]	; 0x22
 800ff54:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800ff58:	b002      	add	sp, #8
 800ff5a:	bd10      	pop	{r4, pc}

0800ff5c <_ZN8touchgfx6ScreenC1Ev>:
 800ff5c:	b570      	push	{r4, r5, r6, lr}
 800ff5e:	4b17      	ldr	r3, [pc, #92]	; (800ffbc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800ff60:	4605      	mov	r5, r0
 800ff62:	4a17      	ldr	r2, [pc, #92]	; (800ffc0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800ff64:	2101      	movs	r1, #1
 800ff66:	f845 3b04 	str.w	r3, [r5], #4
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	6042      	str	r2, [r0, #4]
 800ff6e:	4604      	mov	r4, r0
 800ff70:	8103      	strh	r3, [r0, #8]
 800ff72:	8143      	strh	r3, [r0, #10]
 800ff74:	8183      	strh	r3, [r0, #12]
 800ff76:	81c3      	strh	r3, [r0, #14]
 800ff78:	8203      	strh	r3, [r0, #16]
 800ff7a:	8243      	strh	r3, [r0, #18]
 800ff7c:	8283      	strh	r3, [r0, #20]
 800ff7e:	82c3      	strh	r3, [r0, #22]
 800ff80:	6203      	str	r3, [r0, #32]
 800ff82:	8483      	strh	r3, [r0, #36]	; 0x24
 800ff84:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ff86:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800ff8a:	6343      	str	r3, [r0, #52]	; 0x34
 800ff8c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800ff90:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800ff94:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800ff98:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800ff9c:	4b09      	ldr	r3, [pc, #36]	; (800ffc4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ffa4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ffa6:	4a08      	ldr	r2, [pc, #32]	; (800ffc8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800ffa8:	f9b2 1000 	ldrsh.w	r1, [r2]
 800ffac:	4798      	blx	r3
 800ffae:	6863      	ldr	r3, [r4, #4]
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	4631      	mov	r1, r6
 800ffb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffb6:	4798      	blx	r3
 800ffb8:	4620      	mov	r0, r4
 800ffba:	bd70      	pop	{r4, r5, r6, pc}
 800ffbc:	0801db6c 	.word	0x0801db6c
 800ffc0:	0801cb84 	.word	0x0801cb84
 800ffc4:	24006ae6 	.word	0x24006ae6
 800ffc8:	24006ae4 	.word	0x24006ae4

0800ffcc <_ZN8touchgfx6Screen4drawEv>:
 800ffcc:	4b09      	ldr	r3, [pc, #36]	; (800fff4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800ffce:	b507      	push	{r0, r1, r2, lr}
 800ffd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	4b08      	ldr	r3, [pc, #32]	; (800fff8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800ffd8:	9100      	str	r1, [sp, #0]
 800ffda:	4669      	mov	r1, sp
 800ffdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffe0:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ffe4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ffe8:	6803      	ldr	r3, [r0, #0]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	4798      	blx	r3
 800ffee:	b003      	add	sp, #12
 800fff0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fff4:	24006ae4 	.word	0x24006ae4
 800fff8:	24006ae6 	.word	0x24006ae6

0800fffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800fffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010000:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010004:	b089      	sub	sp, #36	; 0x24
 8010006:	4680      	mov	r8, r0
 8010008:	460c      	mov	r4, r1
 801000a:	2b00      	cmp	r3, #0
 801000c:	4615      	mov	r5, r2
 801000e:	dd0e      	ble.n	801002e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010010:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010014:	2b00      	cmp	r3, #0
 8010016:	dd0a      	ble.n	801002e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010018:	4628      	mov	r0, r5
 801001a:	f7ff ff5b 	bl	800fed4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801001e:	4621      	mov	r1, r4
 8010020:	f7fe fc8e 	bl	800e940 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010024:	69eb      	ldr	r3, [r5, #28]
 8010026:	b928      	cbnz	r0, 8010034 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8010028:	461d      	mov	r5, r3
 801002a:	2b00      	cmp	r3, #0
 801002c:	d1f4      	bne.n	8010018 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801002e:	b009      	add	sp, #36	; 0x24
 8010030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010034:	ae04      	add	r6, sp, #16
 8010036:	2b00      	cmp	r3, #0
 8010038:	f000 80b5 	beq.w	80101a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801003c:	682b      	ldr	r3, [r5, #0]
 801003e:	4629      	mov	r1, r5
 8010040:	a802      	add	r0, sp, #8
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	4798      	blx	r3
 8010046:	4628      	mov	r0, r5
 8010048:	f7ff ff60 	bl	800ff0c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801004c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8010050:	4407      	add	r7, r0
 8010052:	4628      	mov	r0, r5
 8010054:	f7ff ff6e 	bl	800ff34 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010058:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801005c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010060:	b23f      	sxth	r7, r7
 8010062:	4418      	add	r0, r3
 8010064:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010068:	4621      	mov	r1, r4
 801006a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801006e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010072:	4630      	mov	r0, r6
 8010074:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010078:	f8ad 7010 	strh.w	r7, [sp, #16]
 801007c:	f7fb f846 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 8010080:	4628      	mov	r0, r5
 8010082:	f7ff ff27 	bl	800fed4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010086:	ab06      	add	r3, sp, #24
 8010088:	4602      	mov	r2, r0
 801008a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801008e:	e883 0003 	stmia.w	r3, {r0, r1}
 8010092:	4611      	mov	r1, r2
 8010094:	4618      	mov	r0, r3
 8010096:	f7fb f839 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 801009a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801009e:	f9b4 1000 	ldrsh.w	r1, [r4]
 80100a2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80100a6:	4299      	cmp	r1, r3
 80100a8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80100ac:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80100b0:	d10b      	bne.n	80100ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80100b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80100b6:	4552      	cmp	r2, sl
 80100b8:	d107      	bne.n	80100ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80100ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80100be:	455a      	cmp	r2, fp
 80100c0:	d103      	bne.n	80100ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80100c2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80100c6:	454a      	cmp	r2, r9
 80100c8:	d06d      	beq.n	80101a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80100ca:	f1bb 0f00 	cmp.w	fp, #0
 80100ce:	dd65      	ble.n	801019c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80100d0:	f1b9 0f00 	cmp.w	r9, #0
 80100d4:	dd62      	ble.n	801019c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80100d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80100da:	fa1f f08a 	uxth.w	r0, sl
 80100de:	4552      	cmp	r2, sl
 80100e0:	9000      	str	r0, [sp, #0]
 80100e2:	da12      	bge.n	801010a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	9b00      	ldr	r3, [sp, #0]
 80100e8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80100ec:	f8ad 2012 	strh.w	r2, [sp, #18]
 80100f0:	1a9a      	subs	r2, r3, r2
 80100f2:	f8ad 1010 	strh.w	r1, [sp, #16]
 80100f6:	4631      	mov	r1, r6
 80100f8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80100fc:	4640      	mov	r0, r8
 80100fe:	f8ad 2016 	strh.w	r2, [sp, #22]
 8010102:	69ea      	ldr	r2, [r5, #28]
 8010104:	f7ff ff7a 	bl	800fffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010108:	9b01      	ldr	r3, [sp, #4]
 801010a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801010e:	b29f      	uxth	r7, r3
 8010110:	429a      	cmp	r2, r3
 8010112:	da0d      	bge.n	8010130 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8010114:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010118:	1aba      	subs	r2, r7, r2
 801011a:	f8ad a012 	strh.w	sl, [sp, #18]
 801011e:	4631      	mov	r1, r6
 8010120:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010124:	4640      	mov	r0, r8
 8010126:	f8ad 9016 	strh.w	r9, [sp, #22]
 801012a:	69ea      	ldr	r2, [r5, #28]
 801012c:	f7ff ff66 	bl	800fffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010130:	8822      	ldrh	r2, [r4, #0]
 8010132:	445f      	add	r7, fp
 8010134:	88a3      	ldrh	r3, [r4, #4]
 8010136:	b2bf      	uxth	r7, r7
 8010138:	4413      	add	r3, r2
 801013a:	b23a      	sxth	r2, r7
 801013c:	b29b      	uxth	r3, r3
 801013e:	b219      	sxth	r1, r3
 8010140:	4291      	cmp	r1, r2
 8010142:	dd0d      	ble.n	8010160 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8010144:	1bdb      	subs	r3, r3, r7
 8010146:	f8ad 2010 	strh.w	r2, [sp, #16]
 801014a:	f8ad a012 	strh.w	sl, [sp, #18]
 801014e:	4631      	mov	r1, r6
 8010150:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010154:	4640      	mov	r0, r8
 8010156:	f8ad 9016 	strh.w	r9, [sp, #22]
 801015a:	69ea      	ldr	r2, [r5, #28]
 801015c:	f7ff ff4e 	bl	800fffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010160:	88e2      	ldrh	r2, [r4, #6]
 8010162:	8863      	ldrh	r3, [r4, #2]
 8010164:	4413      	add	r3, r2
 8010166:	9a00      	ldr	r2, [sp, #0]
 8010168:	444a      	add	r2, r9
 801016a:	b29b      	uxth	r3, r3
 801016c:	fa1f f982 	uxth.w	r9, r2
 8010170:	b219      	sxth	r1, r3
 8010172:	fa0f f289 	sxth.w	r2, r9
 8010176:	428a      	cmp	r2, r1
 8010178:	da15      	bge.n	80101a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801017a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801017e:	eba3 0309 	sub.w	r3, r3, r9
 8010182:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010186:	f8ad 1014 	strh.w	r1, [sp, #20]
 801018a:	4631      	mov	r1, r6
 801018c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010190:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010194:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010198:	69ea      	ldr	r2, [r5, #28]
 801019a:	e001      	b.n	80101a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801019c:	69ea      	ldr	r2, [r5, #28]
 801019e:	4621      	mov	r1, r4
 80101a0:	4640      	mov	r0, r8
 80101a2:	f7ff ff2b 	bl	800fffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80101a6:	4628      	mov	r0, r5
 80101a8:	f7ff fe94 	bl	800fed4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80101ac:	6861      	ldr	r1, [r4, #4]
 80101ae:	4602      	mov	r2, r0
 80101b0:	4633      	mov	r3, r6
 80101b2:	6820      	ldr	r0, [r4, #0]
 80101b4:	c303      	stmia	r3!, {r0, r1}
 80101b6:	4611      	mov	r1, r2
 80101b8:	4630      	mov	r0, r6
 80101ba:	f7fa ffa7 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 80101be:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f77f af33 	ble.w	801002e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80101c8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f77f af2e 	ble.w	801002e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80101d2:	4628      	mov	r0, r5
 80101d4:	f7ff fe9a 	bl	800ff0c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80101d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80101dc:	1a18      	subs	r0, r3, r0
 80101de:	f8ad 0010 	strh.w	r0, [sp, #16]
 80101e2:	4628      	mov	r0, r5
 80101e4:	f7ff fea6 	bl	800ff34 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80101e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80101ec:	4631      	mov	r1, r6
 80101ee:	1a18      	subs	r0, r3, r0
 80101f0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80101f4:	4628      	mov	r0, r5
 80101f6:	682b      	ldr	r3, [r5, #0]
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	4798      	blx	r3
 80101fc:	e717      	b.n	801002e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080101fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80101fe:	b570      	push	{r4, r5, r6, lr}
 8010200:	1d06      	adds	r6, r0, #4
 8010202:	b086      	sub	sp, #24
 8010204:	460c      	mov	r4, r1
 8010206:	2300      	movs	r3, #0
 8010208:	4631      	mov	r1, r6
 801020a:	4605      	mov	r5, r0
 801020c:	a802      	add	r0, sp, #8
 801020e:	9301      	str	r3, [sp, #4]
 8010210:	f7ff fc9e 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010214:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010218:	8822      	ldrh	r2, [r4, #0]
 801021a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801021e:	1ad2      	subs	r2, r2, r3
 8010220:	8863      	ldrh	r3, [r4, #2]
 8010222:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010226:	1a5b      	subs	r3, r3, r1
 8010228:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801022c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010230:	aa01      	add	r2, sp, #4
 8010232:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010236:	4630      	mov	r0, r6
 8010238:	f8ad 1016 	strh.w	r1, [sp, #22]
 801023c:	a904      	add	r1, sp, #16
 801023e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010242:	f7fb f83b 	bl	800b2bc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8010246:	9a01      	ldr	r2, [sp, #4]
 8010248:	b11a      	cbz	r2, 8010252 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801024a:	4621      	mov	r1, r4
 801024c:	4628      	mov	r0, r5
 801024e:	f7ff fed5 	bl	800fffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010252:	b006      	add	sp, #24
 8010254:	bd70      	pop	{r4, r5, r6, pc}

08010256 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8010256:	4602      	mov	r2, r0
 8010258:	b530      	push	{r4, r5, lr}
 801025a:	4604      	mov	r4, r0
 801025c:	b085      	sub	sp, #20
 801025e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8010262:	460d      	mov	r5, r1
 8010264:	466b      	mov	r3, sp
 8010266:	6851      	ldr	r1, [r2, #4]
 8010268:	c303      	stmia	r3!, {r0, r1}
 801026a:	4629      	mov	r1, r5
 801026c:	4668      	mov	r0, sp
 801026e:	f7fa ff4d 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 8010272:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010276:	b12b      	cbz	r3, 8010284 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8010278:	4669      	mov	r1, sp
 801027a:	4620      	mov	r0, r4
 801027c:	f7ff ffbf 	bl	80101fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8010280:	b005      	add	sp, #20
 8010282:	bd30      	pop	{r4, r5, pc}
 8010284:	3404      	adds	r4, #4
 8010286:	a802      	add	r0, sp, #8
 8010288:	4621      	mov	r1, r4
 801028a:	f7ff fc61 	bl	800fb50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801028e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010292:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8010296:	4669      	mov	r1, sp
 8010298:	4620      	mov	r0, r4
 801029a:	1a9b      	subs	r3, r3, r2
 801029c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80102a0:	f8ad 3000 	strh.w	r3, [sp]
 80102a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80102a8:	1a9b      	subs	r3, r3, r2
 80102aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80102ae:	f7fa ffcc 	bl	800b24a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80102b2:	e7e5      	b.n	8010280 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080102b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80102b4:	460b      	mov	r3, r1
 80102b6:	680a      	ldr	r2, [r1, #0]
 80102b8:	1d01      	adds	r1, r0, #4
 80102ba:	6992      	ldr	r2, [r2, #24]
 80102bc:	4618      	mov	r0, r3
 80102be:	4710      	bx	r2

080102c0 <_ZN8touchgfx12TextProviderC1Ev>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	2500      	movs	r5, #0
 80102c4:	2302      	movs	r3, #2
 80102c6:	4604      	mov	r4, r0
 80102c8:	220e      	movs	r2, #14
 80102ca:	7403      	strb	r3, [r0, #16]
 80102cc:	4629      	mov	r1, r5
 80102ce:	6145      	str	r5, [r0, #20]
 80102d0:	7605      	strb	r5, [r0, #24]
 80102d2:	83c5      	strh	r5, [r0, #30]
 80102d4:	8405      	strh	r5, [r0, #32]
 80102d6:	86c5      	strh	r5, [r0, #54]	; 0x36
 80102d8:	8705      	strh	r5, [r0, #56]	; 0x38
 80102da:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80102dc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80102e0:	e9c0 5500 	strd	r5, r5, [r0]
 80102e4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80102e8:	304c      	adds	r0, #76	; 0x4c
 80102ea:	f009 fd77 	bl	8019ddc <memset>
 80102ee:	2301      	movs	r3, #1
 80102f0:	4620      	mov	r0, r4
 80102f2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80102f6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80102fa:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80102fe:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8010302:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8010306:	f7f3 fbcb 	bl	8003aa0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801030a:	4620      	mov	r0, r4
 801030c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010310 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8010310:	b508      	push	{r3, lr}
 8010312:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8010314:	b92b      	cbnz	r3, 8010322 <_ZN8touchgfx12TextProvider11endOfStringEv+0x12>
 8010316:	4b07      	ldr	r3, [pc, #28]	; (8010334 <_ZN8touchgfx12TextProvider11endOfStringEv+0x24>)
 8010318:	21c0      	movs	r1, #192	; 0xc0
 801031a:	4a07      	ldr	r2, [pc, #28]	; (8010338 <_ZN8touchgfx12TextProvider11endOfStringEv+0x28>)
 801031c:	4807      	ldr	r0, [pc, #28]	; (801033c <_ZN8touchgfx12TextProvider11endOfStringEv+0x2c>)
 801031e:	f009 fcd1 	bl	8019cc4 <__assert_func>
 8010322:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8010324:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010328:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801032a:	fab0 f080 	clz	r0, r0
 801032e:	0940      	lsrs	r0, r0, #5
 8010330:	bd08      	pop	{r3, pc}
 8010332:	bf00      	nop
 8010334:	0801c444 	.word	0x0801c444
 8010338:	0801ddc7 	.word	0x0801ddc7
 801033c:	0801c516 	.word	0x0801c516

08010340 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8010340:	b530      	push	{r4, r5, lr}
 8010342:	2500      	movs	r5, #0
 8010344:	2401      	movs	r4, #1
 8010346:	6843      	ldr	r3, [r0, #4]
 8010348:	b913      	cbnz	r3, 8010350 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801034a:	6803      	ldr	r3, [r0, #0]
 801034c:	b313      	cbz	r3, 8010394 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801034e:	6043      	str	r3, [r0, #4]
 8010350:	7e03      	ldrb	r3, [r0, #24]
 8010352:	b143      	cbz	r3, 8010366 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8010354:	6943      	ldr	r3, [r0, #20]
 8010356:	b12b      	cbz	r3, 8010364 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010358:	881a      	ldrh	r2, [r3, #0]
 801035a:	b11a      	cbz	r2, 8010364 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801035c:	1c9a      	adds	r2, r3, #2
 801035e:	6142      	str	r2, [r0, #20]
 8010360:	8818      	ldrh	r0, [r3, #0]
 8010362:	bd30      	pop	{r4, r5, pc}
 8010364:	7605      	strb	r5, [r0, #24]
 8010366:	6843      	ldr	r3, [r0, #4]
 8010368:	8819      	ldrh	r1, [r3, #0]
 801036a:	b199      	cbz	r1, 8010394 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801036c:	1c9a      	adds	r2, r3, #2
 801036e:	2902      	cmp	r1, #2
 8010370:	6042      	str	r2, [r0, #4]
 8010372:	d1f5      	bne.n	8010360 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8010374:	7c03      	ldrb	r3, [r0, #16]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d8e5      	bhi.n	8010346 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801037a:	1c5a      	adds	r2, r3, #1
 801037c:	3302      	adds	r3, #2
 801037e:	7402      	strb	r2, [r0, #16]
 8010380:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010384:	6143      	str	r3, [r0, #20]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d0dd      	beq.n	8010346 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801038a:	881b      	ldrh	r3, [r3, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d0da      	beq.n	8010346 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010390:	7604      	strb	r4, [r0, #24]
 8010392:	e7d8      	b.n	8010346 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010394:	2000      	movs	r0, #0
 8010396:	e7e4      	b.n	8010362 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8010398:	6001      	str	r1, [r0, #0]
 801039a:	2100      	movs	r1, #0
 801039c:	b430      	push	{r4, r5}
 801039e:	6041      	str	r1, [r0, #4]
 80103a0:	6815      	ldr	r5, [r2, #0]
 80103a2:	6085      	str	r5, [r0, #8]
 80103a4:	6852      	ldr	r2, [r2, #4]
 80103a6:	6443      	str	r3, [r0, #68]	; 0x44
 80103a8:	9b02      	ldr	r3, [sp, #8]
 80103aa:	60c2      	str	r2, [r0, #12]
 80103ac:	7401      	strb	r1, [r0, #16]
 80103ae:	6141      	str	r1, [r0, #20]
 80103b0:	7601      	strb	r1, [r0, #24]
 80103b2:	8701      	strh	r1, [r0, #56]	; 0x38
 80103b4:	8401      	strh	r1, [r0, #32]
 80103b6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80103ba:	6483      	str	r3, [r0, #72]	; 0x48
 80103bc:	bc30      	pop	{r4, r5}
 80103be:	f7f3 bb6f 	b.w	8003aa0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080103c2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80103c2:	b408      	push	{r3}
 80103c4:	b510      	push	{r4, lr}
 80103c6:	b085      	sub	sp, #20
 80103c8:	ac07      	add	r4, sp, #28
 80103ca:	f854 3b04 	ldr.w	r3, [r4], #4
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	4613      	mov	r3, r2
 80103d2:	4622      	mov	r2, r4
 80103d4:	9403      	str	r4, [sp, #12]
 80103d6:	f7ff ffdf 	bl	8010398 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80103da:	b005      	add	sp, #20
 80103dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e0:	b001      	add	sp, #4
 80103e2:	4770      	bx	lr

080103e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80103e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103e6:	4605      	mov	r5, r0
 80103e8:	4608      	mov	r0, r1
 80103ea:	b1f1      	cbz	r1, 801042a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80103ec:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80103f0:	460b      	mov	r3, r1
 80103f2:	f101 0708 	add.w	r7, r1, #8
 80103f6:	4622      	mov	r2, r4
 80103f8:	6818      	ldr	r0, [r3, #0]
 80103fa:	3308      	adds	r3, #8
 80103fc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8010400:	4626      	mov	r6, r4
 8010402:	42bb      	cmp	r3, r7
 8010404:	c603      	stmia	r6!, {r0, r1}
 8010406:	4634      	mov	r4, r6
 8010408:	d1f6      	bne.n	80103f8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801040a:	6818      	ldr	r0, [r3, #0]
 801040c:	6030      	str	r0, [r6, #0]
 801040e:	4610      	mov	r0, r2
 8010410:	889b      	ldrh	r3, [r3, #4]
 8010412:	80b3      	strh	r3, [r6, #4]
 8010414:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8010418:	015b      	lsls	r3, r3, #5
 801041a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801041e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8010422:	430b      	orrs	r3, r1
 8010424:	425b      	negs	r3, r3
 8010426:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801042a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801042c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801042c:	b538      	push	{r3, r4, r5, lr}
 801042e:	460c      	mov	r4, r1
 8010430:	6811      	ldr	r1, [r2, #0]
 8010432:	4610      	mov	r0, r2
 8010434:	68cd      	ldr	r5, [r1, #12]
 8010436:	4619      	mov	r1, r3
 8010438:	47a8      	blx	r5
 801043a:	2800      	cmp	r0, #0
 801043c:	bf08      	it	eq
 801043e:	4620      	moveq	r0, r4
 8010440:	bd38      	pop	{r3, r4, r5, pc}
	...

08010444 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8010444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010446:	4604      	mov	r4, r0
 8010448:	4615      	mov	r5, r2
 801044a:	4608      	mov	r0, r1
 801044c:	b93a      	cbnz	r2, 801045e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801044e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8010452:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8010456:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801045a:	4628      	mov	r0, r5
 801045c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801045e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8010462:	8893      	ldrh	r3, [r2, #4]
 8010464:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8010468:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801046c:	79ee      	ldrb	r6, [r5, #7]
 801046e:	4316      	orrs	r6, r2
 8010470:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8010474:	189a      	adds	r2, r3, r2
 8010476:	b2b7      	uxth	r7, r6
 8010478:	b291      	uxth	r1, r2
 801047a:	291d      	cmp	r1, #29
 801047c:	f200 8084 	bhi.w	8010588 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010480:	2201      	movs	r2, #1
 8010482:	10f6      	asrs	r6, r6, #3
 8010484:	408a      	lsls	r2, r1
 8010486:	4978      	ldr	r1, [pc, #480]	; (8010668 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8010488:	420a      	tst	r2, r1
 801048a:	d12e      	bne.n	80104ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801048c:	f412 7f60 	tst.w	r2, #896	; 0x380
 8010490:	d07a      	beq.n	8010588 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010492:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8010496:	462b      	mov	r3, r5
 8010498:	f105 0e08 	add.w	lr, r5, #8
 801049c:	4615      	mov	r5, r2
 801049e:	6818      	ldr	r0, [r3, #0]
 80104a0:	3308      	adds	r3, #8
 80104a2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80104a6:	4694      	mov	ip, r2
 80104a8:	4573      	cmp	r3, lr
 80104aa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80104ae:	4662      	mov	r2, ip
 80104b0:	d1f5      	bne.n	801049e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80104b2:	6818      	ldr	r0, [r3, #0]
 80104b4:	f8cc 0000 	str.w	r0, [ip]
 80104b8:	889b      	ldrh	r3, [r3, #4]
 80104ba:	f8ac 3004 	strh.w	r3, [ip, #4]
 80104be:	b2b3      	uxth	r3, r6
 80104c0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80104c4:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80104c8:	1aca      	subs	r2, r1, r3
 80104ca:	1bcf      	subs	r7, r1, r7
 80104cc:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80104d0:	b292      	uxth	r2, r2
 80104d2:	1afb      	subs	r3, r7, r3
 80104d4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80104d8:	10d2      	asrs	r2, r2, #3
 80104da:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80104de:	4302      	orrs	r2, r0
 80104e0:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80104e4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80104e8:	e7b7      	b.n	801045a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80104ea:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80104ec:	b92b      	cbnz	r3, 80104fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80104ee:	4b5f      	ldr	r3, [pc, #380]	; (801066c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80104f0:	21c0      	movs	r1, #192	; 0xc0
 80104f2:	4a5f      	ldr	r2, [pc, #380]	; (8010670 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80104f4:	485f      	ldr	r0, [pc, #380]	; (8010674 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80104f6:	f009 fbe5 	bl	8019cc4 <__assert_func>
 80104fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80104fc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010500:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8010502:	f640 6333 	movw	r3, #3635	; 0xe33
 8010506:	4299      	cmp	r1, r3
 8010508:	d110      	bne.n	801052c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801050a:	6803      	ldr	r3, [r0, #0]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	4798      	blx	r3
 8010510:	7b41      	ldrb	r1, [r0, #13]
 8010512:	00cb      	lsls	r3, r1, #3
 8010514:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010518:	7a03      	ldrb	r3, [r0, #8]
 801051a:	0648      	lsls	r0, r1, #25
 801051c:	ea43 0302 	orr.w	r3, r3, r2
 8010520:	bf44      	itt	mi
 8010522:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010526:	b21b      	sxthmi	r3, r3
 8010528:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801052c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8010530:	462a      	mov	r2, r5
 8010532:	f105 0c08 	add.w	ip, r5, #8
 8010536:	443b      	add	r3, r7
 8010538:	4433      	add	r3, r6
 801053a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801053e:	b29b      	uxth	r3, r3
 8010540:	4635      	mov	r5, r6
 8010542:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010546:	6810      	ldr	r0, [r2, #0]
 8010548:	3208      	adds	r2, #8
 801054a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801054e:	4637      	mov	r7, r6
 8010550:	4562      	cmp	r2, ip
 8010552:	c703      	stmia	r7!, {r0, r1}
 8010554:	463e      	mov	r6, r7
 8010556:	d1f6      	bne.n	8010546 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8010558:	6810      	ldr	r0, [r2, #0]
 801055a:	6038      	str	r0, [r7, #0]
 801055c:	8892      	ldrh	r2, [r2, #4]
 801055e:	80ba      	strh	r2, [r7, #4]
 8010560:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8010564:	10db      	asrs	r3, r3, #3
 8010566:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801056a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801056e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010572:	4313      	orrs	r3, r2
 8010574:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8010578:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801057c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8010580:	1a9b      	subs	r3, r3, r2
 8010582:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8010586:	e768      	b.n	801045a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010588:	f023 0204 	bic.w	r2, r3, #4
 801058c:	f640 611b 	movw	r1, #3611	; 0xe1b
 8010590:	428a      	cmp	r2, r1
 8010592:	d003      	beq.n	801059c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8010594:	f640 621d 	movw	r2, #3613	; 0xe1d
 8010598:	4293      	cmp	r3, r2
 801059a:	d120      	bne.n	80105de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801059c:	3b01      	subs	r3, #1
 801059e:	4602      	mov	r2, r0
 80105a0:	4629      	mov	r1, r5
 80105a2:	4620      	mov	r0, r4
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	f7ff ff41 	bl	801042c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80105aa:	7b41      	ldrb	r1, [r0, #13]
 80105ac:	00cb      	lsls	r3, r1, #3
 80105ae:	0649      	lsls	r1, r1, #25
 80105b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80105b4:	7a03      	ldrb	r3, [r0, #8]
 80105b6:	ea43 0302 	orr.w	r3, r3, r2
 80105ba:	bf44      	itt	mi
 80105bc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80105c0:	b21b      	sxthmi	r3, r3
 80105c2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80105c6:	7b6b      	ldrb	r3, [r5, #13]
 80105c8:	7aaa      	ldrb	r2, [r5, #10]
 80105ca:	005b      	lsls	r3, r3, #1
 80105cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105d0:	4313      	orrs	r3, r2
 80105d2:	115a      	asrs	r2, r3, #5
 80105d4:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80105d8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80105dc:	e035      	b.n	801064a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80105de:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80105e2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80105e6:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80105ea:	7a2a      	ldrb	r2, [r5, #8]
 80105ec:	ea42 0201 	orr.w	r2, r2, r1
 80105f0:	f640 6109 	movw	r1, #3593	; 0xe09
 80105f4:	bf1c      	itt	ne
 80105f6:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80105fa:	b212      	sxthne	r2, r2
 80105fc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8010600:	f023 0210 	bic.w	r2, r3, #16
 8010604:	428a      	cmp	r2, r1
 8010606:	d003      	beq.n	8010610 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8010608:	f640 6213 	movw	r2, #3603	; 0xe13
 801060c:	4293      	cmp	r3, r2
 801060e:	d129      	bne.n	8010664 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8010610:	7b6e      	ldrb	r6, [r5, #13]
 8010612:	4629      	mov	r1, r5
 8010614:	0076      	lsls	r6, r6, #1
 8010616:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801061a:	7aae      	ldrb	r6, [r5, #10]
 801061c:	4316      	orrs	r6, r2
 801061e:	f640 6213 	movw	r2, #3603	; 0xe13
 8010622:	4293      	cmp	r3, r2
 8010624:	4602      	mov	r2, r0
 8010626:	4620      	mov	r0, r4
 8010628:	bf16      	itet	ne
 801062a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801062e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8010632:	b29b      	uxthne	r3, r3
 8010634:	f7ff fefa 	bl	801042c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010638:	7b43      	ldrb	r3, [r0, #13]
 801063a:	7a82      	ldrb	r2, [r0, #10]
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010642:	4313      	orrs	r3, r2
 8010644:	1af6      	subs	r6, r6, r3
 8010646:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801064a:	7b69      	ldrb	r1, [r5, #13]
 801064c:	00cb      	lsls	r3, r1, #3
 801064e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010652:	7a2b      	ldrb	r3, [r5, #8]
 8010654:	4313      	orrs	r3, r2
 8010656:	064a      	lsls	r2, r1, #25
 8010658:	bf44      	itt	mi
 801065a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801065e:	b21b      	sxthmi	r3, r3
 8010660:	1bdb      	subs	r3, r3, r7
 8010662:	e73f      	b.n	80104e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8010664:	2300      	movs	r3, #0
 8010666:	e7b7      	b.n	80105d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8010668:	3fc00079 	.word	0x3fc00079
 801066c:	0801c444 	.word	0x0801c444
 8010670:	0801ddc7 	.word	0x0801ddc7
 8010674:	0801c516 	.word	0x0801c516

08010678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8010678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801067c:	4604      	mov	r4, r0
 801067e:	b942      	cbnz	r2, 8010692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8010680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010684:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8010688:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801068c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8010690:	e046      	b.n	8010720 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8010692:	7b51      	ldrb	r1, [r2, #13]
 8010694:	8893      	ldrh	r3, [r2, #4]
 8010696:	010f      	lsls	r7, r1, #4
 8010698:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801069c:	79d7      	ldrb	r7, [r2, #7]
 801069e:	4307      	orrs	r7, r0
 80106a0:	2f04      	cmp	r7, #4
 80106a2:	b2bd      	uxth	r5, r7
 80106a4:	bfcc      	ite	gt
 80106a6:	08bf      	lsrgt	r7, r7, #2
 80106a8:	2701      	movle	r7, #1
 80106aa:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80106ae:	f200 80ab 	bhi.w	8010808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80106b2:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80106b6:	4283      	cmp	r3, r0
 80106b8:	d216      	bcs.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80106ba:	f240 605b 	movw	r0, #1627	; 0x65b
 80106be:	4283      	cmp	r3, r0
 80106c0:	d859      	bhi.n	8010776 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80106c2:	f240 6057 	movw	r0, #1623	; 0x657
 80106c6:	4283      	cmp	r3, r0
 80106c8:	d20e      	bcs.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80106ca:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80106ce:	d24a      	bcs.n	8010766 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80106d0:	f240 604e 	movw	r0, #1614	; 0x64e
 80106d4:	4283      	cmp	r3, r0
 80106d6:	d207      	bcs.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80106d8:	f240 601a 	movw	r0, #1562	; 0x61a
 80106dc:	4283      	cmp	r3, r0
 80106de:	d02a      	beq.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80106e0:	d821      	bhi.n	8010726 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80106e2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80106e6:	d35b      	bcc.n	80107a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80106e8:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80106ec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80106f0:	f040 80d0 	bne.w	8010894 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80106f4:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80106f8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80106fc:	f040 80ca 	bne.w	8010894 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8010700:	00cb      	lsls	r3, r1, #3
 8010702:	0649      	lsls	r1, r1, #25
 8010704:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8010708:	7a13      	ldrb	r3, [r2, #8]
 801070a:	ea43 0300 	orr.w	r3, r3, r0
 801070e:	bf44      	itt	mi
 8010710:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010714:	b21b      	sxthmi	r3, r3
 8010716:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801071a:	1b5d      	subs	r5, r3, r5
 801071c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8010720:	4610      	mov	r0, r2
 8010722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010726:	f240 604b 	movw	r0, #1611	; 0x64b
 801072a:	4283      	cmp	r3, r0
 801072c:	d338      	bcc.n	80107a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801072e:	f240 604c 	movw	r0, #1612	; 0x64c
 8010732:	4283      	cmp	r3, r0
 8010734:	d9d8      	bls.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010736:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801073a:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801073e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8010742:	f040 80f2 	bne.w	801092a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8010746:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801074a:	f040 80ee 	bne.w	801092a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801074e:	00cb      	lsls	r3, r1, #3
 8010750:	064e      	lsls	r6, r1, #25
 8010752:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8010756:	7a13      	ldrb	r3, [r2, #8]
 8010758:	ea43 0300 	orr.w	r3, r3, r0
 801075c:	bf44      	itt	mi
 801075e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010762:	b21b      	sxthmi	r3, r3
 8010764:	e7d9      	b.n	801071a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8010766:	f240 6054 	movw	r0, #1620	; 0x654
 801076a:	4283      	cmp	r3, r0
 801076c:	d8e3      	bhi.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801076e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8010772:	d9e0      	bls.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010774:	e7b8      	b.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010776:	f240 6074 	movw	r0, #1652	; 0x674
 801077a:	4283      	cmp	r3, r0
 801077c:	d0b4      	beq.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801077e:	d82d      	bhi.n	80107dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8010780:	f240 605e 	movw	r0, #1630	; 0x65e
 8010784:	4283      	cmp	r3, r0
 8010786:	d804      	bhi.n	8010792 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8010788:	f240 605d 	movw	r0, #1629	; 0x65d
 801078c:	4283      	cmp	r3, r0
 801078e:	d3d2      	bcc.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010790:	e7aa      	b.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010792:	f240 605f 	movw	r0, #1631	; 0x65f
 8010796:	4283      	cmp	r3, r0
 8010798:	d0cd      	beq.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801079a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801079e:	d0a3      	beq.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80107a0:	00cb      	lsls	r3, r1, #3
 80107a2:	0649      	lsls	r1, r1, #25
 80107a4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80107a8:	7a13      	ldrb	r3, [r2, #8]
 80107aa:	ea43 0300 	orr.w	r3, r3, r0
 80107ae:	bf44      	itt	mi
 80107b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80107b4:	b21b      	sxthmi	r3, r3
 80107b6:	1b5d      	subs	r5, r3, r5
 80107b8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80107bc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80107c0:	7b53      	ldrb	r3, [r2, #13]
 80107c2:	015b      	lsls	r3, r3, #5
 80107c4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80107c8:	7993      	ldrb	r3, [r2, #6]
 80107ca:	430b      	orrs	r3, r1
 80107cc:	2105      	movs	r1, #5
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	fb93 f3f1 	sdiv	r3, r3, r1
 80107d4:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80107d8:	440b      	add	r3, r1
 80107da:	e757      	b.n	801068c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80107dc:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80107e0:	4283      	cmp	r3, r0
 80107e2:	d809      	bhi.n	80107f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80107e4:	f240 60df 	movw	r0, #1759	; 0x6df
 80107e8:	4283      	cmp	r3, r0
 80107ea:	f4bf af7d 	bcs.w	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80107ee:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80107f2:	2b05      	cmp	r3, #5
 80107f4:	d8d4      	bhi.n	80107a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80107f6:	e777      	b.n	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80107f8:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80107fc:	4283      	cmp	r3, r0
 80107fe:	d09a      	beq.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010800:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8010804:	4283      	cmp	r3, r0
 8010806:	e7ca      	b.n	801079e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8010808:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801080c:	d22b      	bcs.n	8010866 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801080e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8010812:	4283      	cmp	r3, r0
 8010814:	d28f      	bcs.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010816:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801081a:	4283      	cmp	r3, r0
 801081c:	d816      	bhi.n	801084c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801081e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8010822:	4283      	cmp	r3, r0
 8010824:	f4bf af60 	bcs.w	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010828:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801082c:	4283      	cmp	r3, r0
 801082e:	d80a      	bhi.n	8010846 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8010830:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8010834:	4283      	cmp	r3, r0
 8010836:	f4bf af57 	bcs.w	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801083a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801083e:	4283      	cmp	r3, r0
 8010840:	f43f af79 	beq.w	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010844:	e7ac      	b.n	80107a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8010846:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801084a:	e7f8      	b.n	801083e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801084c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8010850:	4283      	cmp	r3, r0
 8010852:	d802      	bhi.n	801085a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8010854:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010858:	e798      	b.n	801078c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801085a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801085e:	4283      	cmp	r3, r0
 8010860:	f47f af42 	bne.w	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8010864:	e767      	b.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010866:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801086a:	4283      	cmp	r3, r0
 801086c:	f43f af63 	beq.w	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8010870:	d802      	bhi.n	8010878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8010872:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8010876:	e7f2      	b.n	801085e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8010878:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801087c:	4283      	cmp	r3, r0
 801087e:	d805      	bhi.n	801088c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8010880:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8010884:	4283      	cmp	r3, r0
 8010886:	f4ff af2f 	bcc.w	80106e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801088a:	e754      	b.n	8010736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801088c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8010890:	4283      	cmp	r3, r0
 8010892:	e7af      	b.n	80107f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8010894:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8010898:	4617      	mov	r7, r2
 801089a:	f102 0808 	add.w	r8, r2, #8
 801089e:	4666      	mov	r6, ip
 80108a0:	6838      	ldr	r0, [r7, #0]
 80108a2:	3708      	adds	r7, #8
 80108a4:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80108a8:	46e6      	mov	lr, ip
 80108aa:	4547      	cmp	r7, r8
 80108ac:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80108b0:	46f4      	mov	ip, lr
 80108b2:	d1f5      	bne.n	80108a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80108b4:	6838      	ldr	r0, [r7, #0]
 80108b6:	f8ce 0000 	str.w	r0, [lr]
 80108ba:	88b9      	ldrh	r1, [r7, #4]
 80108bc:	f8ae 1004 	strh.w	r1, [lr, #4]
 80108c0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80108c4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80108c8:	d009      	beq.n	80108de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80108ca:	7b51      	ldrb	r1, [r2, #13]
 80108cc:	7992      	ldrb	r2, [r2, #6]
 80108ce:	0149      	lsls	r1, r1, #5
 80108d0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80108d4:	4311      	orrs	r1, r2
 80108d6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80108da:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80108de:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80108e2:	d00d      	beq.n	8010900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80108e4:	442b      	add	r3, r5
 80108e6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80108f0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80108f4:	10db      	asrs	r3, r3, #3
 80108f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80108fa:	4313      	orrs	r3, r2
 80108fc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8010900:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8010904:	00cb      	lsls	r3, r1, #3
 8010906:	064f      	lsls	r7, r1, #25
 8010908:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801090c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8010910:	ea43 0302 	orr.w	r3, r3, r2
 8010914:	bf44      	itt	mi
 8010916:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801091a:	b21b      	sxthmi	r3, r3
 801091c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010920:	1b5d      	subs	r5, r3, r5
 8010922:	4632      	mov	r2, r6
 8010924:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8010928:	e6fa      	b.n	8010720 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801092a:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801092e:	4694      	mov	ip, r2
 8010930:	f102 0908 	add.w	r9, r2, #8
 8010934:	4676      	mov	r6, lr
 8010936:	f8dc 0000 	ldr.w	r0, [ip]
 801093a:	f10c 0c08 	add.w	ip, ip, #8
 801093e:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8010942:	46f0      	mov	r8, lr
 8010944:	45cc      	cmp	ip, r9
 8010946:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801094a:	46c6      	mov	lr, r8
 801094c:	d1f3      	bne.n	8010936 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801094e:	f8dc 0000 	ldr.w	r0, [ip]
 8010952:	f8c8 0000 	str.w	r0, [r8]
 8010956:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801095a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801095e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8010962:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8010966:	d009      	beq.n	801097c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8010968:	7b51      	ldrb	r1, [r2, #13]
 801096a:	7992      	ldrb	r2, [r2, #6]
 801096c:	0149      	lsls	r1, r1, #5
 801096e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8010972:	4311      	orrs	r1, r2
 8010974:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8010978:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801097c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8010980:	d00d      	beq.n	801099e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8010982:	1bdb      	subs	r3, r3, r7
 8010984:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8010988:	b29b      	uxth	r3, r3
 801098a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801098e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8010992:	10db      	asrs	r3, r3, #3
 8010994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010998:	4313      	orrs	r3, r2
 801099a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801099e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80109a2:	00cb      	lsls	r3, r1, #3
 80109a4:	0648      	lsls	r0, r1, #25
 80109a6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80109aa:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80109ae:	ea43 0302 	orr.w	r3, r3, r2
 80109b2:	bf44      	itt	mi
 80109b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80109b8:	b21b      	sxthmi	r3, r3
 80109ba:	e7b1      	b.n	8010920 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080109bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80109bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c0:	461e      	mov	r6, r3
 80109c2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80109c4:	4604      	mov	r4, r0
 80109c6:	4617      	mov	r7, r2
 80109c8:	b92b      	cbnz	r3, 80109d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80109ca:	4b25      	ldr	r3, [pc, #148]	; (8010a60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80109cc:	21c0      	movs	r1, #192	; 0xc0
 80109ce:	4a25      	ldr	r2, [pc, #148]	; (8010a64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80109d0:	4825      	ldr	r0, [pc, #148]	; (8010a68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80109d2:	f009 f977 	bl	8019cc4 <__assert_func>
 80109d6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80109d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80109dc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80109e0:	f7f3 f81c 	bl	8003a1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80109e4:	4605      	mov	r5, r0
 80109e6:	b918      	cbnz	r0, 80109f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80109e8:	6030      	str	r0, [r6, #0]
 80109ea:	4628      	mov	r0, r5
 80109ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	4601      	mov	r1, r0
 80109f4:	4638      	mov	r0, r7
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	4798      	blx	r3
 80109fa:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80109fe:	4602      	mov	r2, r0
 8010a00:	6030      	str	r0, [r6, #0]
 8010a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a06:	d213      	bcs.n	8010a30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8010a08:	4643      	mov	r3, r8
 8010a0a:	4639      	mov	r1, r7
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	f7ff fe33 	bl	8010678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8010a12:	6030      	str	r0, [r6, #0]
 8010a14:	6833      	ldr	r3, [r6, #0]
 8010a16:	b143      	cbz	r3, 8010a2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8010a18:	7b5a      	ldrb	r2, [r3, #13]
 8010a1a:	7a9b      	ldrb	r3, [r3, #10]
 8010a1c:	0052      	lsls	r2, r2, #1
 8010a1e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8010a22:	4313      	orrs	r3, r2
 8010a24:	bf0c      	ite	eq
 8010a26:	2301      	moveq	r3, #1
 8010a28:	2300      	movne	r3, #0
 8010a2a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8010a2e:	e7dc      	b.n	80109ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8010a30:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	2b7f      	cmp	r3, #127	; 0x7f
 8010a38:	d804      	bhi.n	8010a44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8010a3a:	4639      	mov	r1, r7
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f7ff fd01 	bl	8010444 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8010a42:	e7e6      	b.n	8010a12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8010a44:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d0e3      	beq.n	8010a14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8010a4c:	f640 1302 	movw	r3, #2306	; 0x902
 8010a50:	429d      	cmp	r5, r3
 8010a52:	d1df      	bne.n	8010a14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8010a54:	4601      	mov	r1, r0
 8010a56:	4620      	mov	r0, r4
 8010a58:	f7ff fcc4 	bl	80103e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8010a5c:	e7d9      	b.n	8010a12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8010a5e:	bf00      	nop
 8010a60:	0801c444 	.word	0x0801c444
 8010a64:	0801ddc7 	.word	0x0801ddc7
 8010a68:	0801c516 	.word	0x0801c516

08010a6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8010a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a70:	461e      	mov	r6, r3
 8010a72:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8010a74:	4604      	mov	r4, r0
 8010a76:	4617      	mov	r7, r2
 8010a78:	b92b      	cbnz	r3, 8010a86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8010a7a:	4b26      	ldr	r3, [pc, #152]	; (8010b14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8010a7c:	21c0      	movs	r1, #192	; 0xc0
 8010a7e:	4a26      	ldr	r2, [pc, #152]	; (8010b18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8010a80:	4826      	ldr	r0, [pc, #152]	; (8010b1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8010a82:	f009 f91f 	bl	8019cc4 <__assert_func>
 8010a86:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8010a88:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010a8c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8010a90:	f7f2 ffc4 	bl	8003a1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010a94:	4605      	mov	r5, r0
 8010a96:	b918      	cbnz	r0, 8010aa0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8010a98:	6030      	str	r0, [r6, #0]
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	4601      	mov	r1, r0
 8010aa4:	4638      	mov	r0, r7
 8010aa6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8010aaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010aae:	47c8      	blx	r9
 8010ab0:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	6030      	str	r0, [r6, #0]
 8010ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010abc:	d213      	bcs.n	8010ae6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8010abe:	4643      	mov	r3, r8
 8010ac0:	4639      	mov	r1, r7
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f7ff fdd8 	bl	8010678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8010ac8:	6030      	str	r0, [r6, #0]
 8010aca:	6833      	ldr	r3, [r6, #0]
 8010acc:	b143      	cbz	r3, 8010ae0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8010ace:	7b5a      	ldrb	r2, [r3, #13]
 8010ad0:	7a9b      	ldrb	r3, [r3, #10]
 8010ad2:	0052      	lsls	r2, r2, #1
 8010ad4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8010ad8:	4313      	orrs	r3, r2
 8010ada:	bf0c      	ite	eq
 8010adc:	2301      	moveq	r3, #1
 8010ade:	2300      	movne	r3, #0
 8010ae0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8010ae4:	e7d9      	b.n	8010a9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8010ae6:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	2b7f      	cmp	r3, #127	; 0x7f
 8010aee:	d804      	bhi.n	8010afa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8010af0:	4639      	mov	r1, r7
 8010af2:	4620      	mov	r0, r4
 8010af4:	f7ff fca6 	bl	8010444 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8010af8:	e7e6      	b.n	8010ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8010afa:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d0e3      	beq.n	8010aca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8010b02:	f640 1302 	movw	r3, #2306	; 0x902
 8010b06:	429d      	cmp	r5, r3
 8010b08:	d1df      	bne.n	8010aca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8010b0a:	4601      	mov	r1, r0
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f7ff fc69 	bl	80103e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8010b12:	e7d9      	b.n	8010ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8010b14:	0801c444 	.word	0x0801c444
 8010b18:	0801ddc7 	.word	0x0801ddc7
 8010b1c:	0801c516 	.word	0x0801c516

08010b20 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8010b20:	b510      	push	{r4, lr}
 8010b22:	4604      	mov	r4, r0
 8010b24:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010b28:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010b2a:	b9d9      	cbnz	r1, 8010b64 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8010b2c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010b2e:	2b0a      	cmp	r3, #10
 8010b30:	d037      	beq.n	8010ba2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8010b32:	4620      	mov	r0, r4
 8010b34:	f7ff fc04 	bl	8010340 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8010b38:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010b3a:	2b09      	cmp	r3, #9
 8010b3c:	d906      	bls.n	8010b4c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8010b3e:	4b19      	ldr	r3, [pc, #100]	; (8010ba4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8010b40:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010b44:	4a18      	ldr	r2, [pc, #96]	; (8010ba8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8010b46:	4819      	ldr	r0, [pc, #100]	; (8010bac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8010b48:	f009 f8bc 	bl	8019cc4 <__assert_func>
 8010b4c:	1c5a      	adds	r2, r3, #1
 8010b4e:	8722      	strh	r2, [r4, #56]	; 0x38
 8010b50:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010b52:	4413      	add	r3, r2
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	2b09      	cmp	r3, #9
 8010b58:	bf88      	it	hi
 8010b5a:	3b0a      	subhi	r3, #10
 8010b5c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010b60:	8458      	strh	r0, [r3, #34]	; 0x22
 8010b62:	e7e3      	b.n	8010b2c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8010b64:	2b0a      	cmp	r3, #10
 8010b66:	d01c      	beq.n	8010ba2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8010b68:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010b6a:	3901      	subs	r1, #1
 8010b6c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8010b70:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8010b72:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8010b76:	1c51      	adds	r1, r2, #1
 8010b78:	b289      	uxth	r1, r1
 8010b7a:	2901      	cmp	r1, #1
 8010b7c:	bf8a      	itet	hi
 8010b7e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010b82:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8010b84:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8010b86:	2b09      	cmp	r3, #9
 8010b88:	d8d9      	bhi.n	8010b3e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8010b8a:	1c5a      	adds	r2, r3, #1
 8010b8c:	8722      	strh	r2, [r4, #56]	; 0x38
 8010b8e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010b90:	4413      	add	r3, r2
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	2b09      	cmp	r3, #9
 8010b96:	bf88      	it	hi
 8010b98:	3b0a      	subhi	r3, #10
 8010b9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010b9e:	8458      	strh	r0, [r3, #34]	; 0x22
 8010ba0:	e7c0      	b.n	8010b24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8010ba2:	bd10      	pop	{r4, pc}
 8010ba4:	0801db98 	.word	0x0801db98
 8010ba8:	0801df1d 	.word	0x0801df1d
 8010bac:	0801c516 	.word	0x0801c516

08010bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8010bb0:	b538      	push	{r3, r4, r5, lr}
 8010bb2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	b92a      	cbnz	r2, 8010bc4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8010bb8:	4b13      	ldr	r3, [pc, #76]	; (8010c08 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8010bba:	21d5      	movs	r1, #213	; 0xd5
 8010bbc:	4a13      	ldr	r2, [pc, #76]	; (8010c0c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8010bbe:	4814      	ldr	r0, [pc, #80]	; (8010c10 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8010bc0:	f009 f880 	bl	8019cc4 <__assert_func>
 8010bc4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8010bc6:	3a01      	subs	r2, #1
 8010bc8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8010bcc:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8010bce:	8702      	strh	r2, [r0, #56]	; 0x38
 8010bd0:	1c5a      	adds	r2, r3, #1
 8010bd2:	b292      	uxth	r2, r2
 8010bd4:	2a09      	cmp	r2, #9
 8010bd6:	bf8a      	itet	hi
 8010bd8:	3b09      	subhi	r3, #9
 8010bda:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8010bdc:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8010bde:	f7ff ff9f 	bl	8010b20 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8010be2:	8c23      	ldrh	r3, [r4, #32]
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	bf9c      	itt	ls
 8010be8:	3301      	addls	r3, #1
 8010bea:	8423      	strhls	r3, [r4, #32]
 8010bec:	8be3      	ldrh	r3, [r4, #30]
 8010bee:	b90b      	cbnz	r3, 8010bf4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8010bf0:	2302      	movs	r3, #2
 8010bf2:	83e3      	strh	r3, [r4, #30]
 8010bf4:	8be3      	ldrh	r3, [r4, #30]
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	83e3      	strh	r3, [r4, #30]
 8010bfe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010c02:	8365      	strh	r5, [r4, #26]
 8010c04:	bd38      	pop	{r3, r4, r5, pc}
 8010c06:	bf00      	nop
 8010c08:	0801c444 	.word	0x0801c444
 8010c0c:	0801de72 	.word	0x0801de72
 8010c10:	0801c516 	.word	0x0801c516

08010c14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8010c14:	428a      	cmp	r2, r1
 8010c16:	b538      	push	{r3, r4, r5, lr}
 8010c18:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8010c1a:	d90c      	bls.n	8010c36 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8010c1c:	b92c      	cbnz	r4, 8010c2a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8010c1e:	4b1c      	ldr	r3, [pc, #112]	; (8010c90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8010c20:	21e1      	movs	r1, #225	; 0xe1
 8010c22:	4a1c      	ldr	r2, [pc, #112]	; (8010c94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8010c24:	481c      	ldr	r0, [pc, #112]	; (8010c98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8010c26:	f009 f84d 	bl	8019cc4 <__assert_func>
 8010c2a:	3c01      	subs	r4, #1
 8010c2c:	4b1b      	ldr	r3, [pc, #108]	; (8010c9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8010c2e:	4a1c      	ldr	r2, [pc, #112]	; (8010ca0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8010c30:	21c5      	movs	r1, #197	; 0xc5
 8010c32:	8704      	strh	r4, [r0, #56]	; 0x38
 8010c34:	e7f6      	b.n	8010c24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8010c36:	428c      	cmp	r4, r1
 8010c38:	d203      	bcs.n	8010c42 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8010c3a:	4b1a      	ldr	r3, [pc, #104]	; (8010ca4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8010c3c:	21cb      	movs	r1, #203	; 0xcb
 8010c3e:	4a1a      	ldr	r2, [pc, #104]	; (8010ca8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8010c40:	e7f0      	b.n	8010c24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8010c42:	1a64      	subs	r4, r4, r1
 8010c44:	250a      	movs	r5, #10
 8010c46:	8704      	strh	r4, [r0, #56]	; 0x38
 8010c48:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8010c4a:	4421      	add	r1, r4
 8010c4c:	b289      	uxth	r1, r1
 8010c4e:	2909      	cmp	r1, #9
 8010c50:	bf88      	it	hi
 8010c52:	390a      	subhi	r1, #10
 8010c54:	86c1      	strh	r1, [r0, #54]	; 0x36
 8010c56:	b1ba      	cbz	r2, 8010c88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8010c58:	3a01      	subs	r2, #1
 8010c5a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8010c5c:	b292      	uxth	r2, r2
 8010c5e:	2909      	cmp	r1, #9
 8010c60:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8010c64:	d903      	bls.n	8010c6e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8010c66:	4b11      	ldr	r3, [pc, #68]	; (8010cac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8010c68:	21e6      	movs	r1, #230	; 0xe6
 8010c6a:	4a11      	ldr	r2, [pc, #68]	; (8010cb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8010c6c:	e7da      	b.n	8010c24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8010c6e:	3101      	adds	r1, #1
 8010c70:	8701      	strh	r1, [r0, #56]	; 0x38
 8010c72:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8010c74:	b901      	cbnz	r1, 8010c78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8010c76:	86c5      	strh	r5, [r0, #54]	; 0x36
 8010c78:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8010c7a:	3901      	subs	r1, #1
 8010c7c:	b289      	uxth	r1, r1
 8010c7e:	86c1      	strh	r1, [r0, #54]	; 0x36
 8010c80:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8010c84:	844c      	strh	r4, [r1, #34]	; 0x22
 8010c86:	e7e6      	b.n	8010c56 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8010c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c8c:	f7ff bf48 	b.w	8010b20 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8010c90:	0801c444 	.word	0x0801c444
 8010c94:	0801dc4b 	.word	0x0801dc4b
 8010c98:	0801c516 	.word	0x0801c516
 8010c9c:	0801c542 	.word	0x0801c542
 8010ca0:	0801dcf5 	.word	0x0801dcf5
 8010ca4:	0801dba4 	.word	0x0801dba4
 8010ca8:	0801dfcc 	.word	0x0801dfcc
 8010cac:	0801dbb0 	.word	0x0801dbb0
 8010cb0:	0801dbc3 	.word	0x0801dbc3

08010cb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8010cb4:	3a01      	subs	r2, #1
 8010cb6:	b570      	push	{r4, r5, r6, lr}
 8010cb8:	b292      	uxth	r2, r2
 8010cba:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8010cbe:	42b2      	cmp	r2, r6
 8010cc0:	d019      	beq.n	8010cf6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8010cc2:	8c04      	ldrh	r4, [r0, #32]
 8010cc4:	f831 5b02 	ldrh.w	r5, [r1], #2
 8010cc8:	4294      	cmp	r4, r2
 8010cca:	d805      	bhi.n	8010cd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8010ccc:	4b19      	ldr	r3, [pc, #100]	; (8010d34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8010cce:	4a1a      	ldr	r2, [pc, #104]	; (8010d38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8010cd0:	21c5      	movs	r1, #197	; 0xc5
 8010cd2:	481a      	ldr	r0, [pc, #104]	; (8010d3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8010cd4:	f008 fff6 	bl	8019cc4 <__assert_func>
 8010cd8:	8bc4      	ldrh	r4, [r0, #30]
 8010cda:	4414      	add	r4, r2
 8010cdc:	3a01      	subs	r2, #1
 8010cde:	b2a4      	uxth	r4, r4
 8010ce0:	b292      	uxth	r2, r2
 8010ce2:	2c01      	cmp	r4, #1
 8010ce4:	bf88      	it	hi
 8010ce6:	3c02      	subhi	r4, #2
 8010ce8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010cec:	8b64      	ldrh	r4, [r4, #26]
 8010cee:	42ac      	cmp	r4, r5
 8010cf0:	d0e5      	beq.n	8010cbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	bd70      	pop	{r4, r5, r6, pc}
 8010cf6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010cfa:	2400      	movs	r4, #0
 8010cfc:	4413      	add	r3, r2
 8010cfe:	b2a2      	uxth	r2, r4
 8010d00:	429a      	cmp	r2, r3
 8010d02:	da14      	bge.n	8010d2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8010d04:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8010d06:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8010d0a:	4296      	cmp	r6, r2
 8010d0c:	d802      	bhi.n	8010d14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8010d0e:	4b09      	ldr	r3, [pc, #36]	; (8010d34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8010d10:	4a0b      	ldr	r2, [pc, #44]	; (8010d40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8010d12:	e7dd      	b.n	8010cd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8010d14:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8010d16:	3401      	adds	r4, #1
 8010d18:	4432      	add	r2, r6
 8010d1a:	b292      	uxth	r2, r2
 8010d1c:	2a09      	cmp	r2, #9
 8010d1e:	bf88      	it	hi
 8010d20:	3a0a      	subhi	r2, #10
 8010d22:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8010d26:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8010d28:	42aa      	cmp	r2, r5
 8010d2a:	d0e8      	beq.n	8010cfe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8010d2c:	e7e1      	b.n	8010cf2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8010d2e:	2001      	movs	r0, #1
 8010d30:	e7e0      	b.n	8010cf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8010d32:	bf00      	nop
 8010d34:	0801c542 	.word	0x0801c542
 8010d38:	0801e050 	.word	0x0801e050
 8010d3c:	0801c516 	.word	0x0801c516
 8010d40:	0801dcf5 	.word	0x0801dcf5

08010d44 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8010d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d48:	4605      	mov	r5, r0
 8010d4a:	4616      	mov	r6, r2
 8010d4c:	1c8c      	adds	r4, r1, #2
 8010d4e:	8809      	ldrh	r1, [r1, #0]
 8010d50:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8010d54:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8010d58:	42b3      	cmp	r3, r6
 8010d5a:	d124      	bne.n	8010da6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8010d5c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8010d60:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8010d64:	f001 070f 	and.w	r7, r1, #15
 8010d68:	4652      	mov	r2, sl
 8010d6a:	f8cd 8000 	str.w	r8, [sp]
 8010d6e:	464b      	mov	r3, r9
 8010d70:	4621      	mov	r1, r4
 8010d72:	4628      	mov	r0, r5
 8010d74:	f7ff ff9e 	bl	8010cb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8010d78:	4683      	mov	fp, r0
 8010d7a:	b168      	cbz	r0, 8010d98 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8010d7c:	eb0a 0109 	add.w	r1, sl, r9
 8010d80:	463a      	mov	r2, r7
 8010d82:	4628      	mov	r0, r5
 8010d84:	4441      	add	r1, r8
 8010d86:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8010d8a:	4649      	mov	r1, r9
 8010d8c:	f7ff ff42 	bl	8010c14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8010d90:	4658      	mov	r0, fp
 8010d92:	b003      	add	sp, #12
 8010d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d98:	eb07 010a 	add.w	r1, r7, sl
 8010d9c:	4449      	add	r1, r9
 8010d9e:	4441      	add	r1, r8
 8010da0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8010da4:	e7d2      	b.n	8010d4c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8010da6:	f04f 0b00 	mov.w	fp, #0
 8010daa:	e7f1      	b.n	8010d90 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08010dac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8010dac:	b570      	push	{r4, r5, r6, lr}
 8010dae:	8810      	ldrh	r0, [r2, #0]
 8010db0:	4298      	cmp	r0, r3
 8010db2:	d817      	bhi.n	8010de4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010db4:	1e48      	subs	r0, r1, #1
 8010db6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8010dba:	4298      	cmp	r0, r3
 8010dbc:	d312      	bcc.n	8010de4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010dbe:	2400      	movs	r4, #0
 8010dc0:	428c      	cmp	r4, r1
 8010dc2:	d20f      	bcs.n	8010de4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010dc4:	1860      	adds	r0, r4, r1
 8010dc6:	1040      	asrs	r0, r0, #1
 8010dc8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8010dcc:	0085      	lsls	r5, r0, #2
 8010dce:	42b3      	cmp	r3, r6
 8010dd0:	d902      	bls.n	8010dd8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8010dd2:	3001      	adds	r0, #1
 8010dd4:	b284      	uxth	r4, r0
 8010dd6:	e7f3      	b.n	8010dc0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010dd8:	d201      	bcs.n	8010dde <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8010dda:	b281      	uxth	r1, r0
 8010ddc:	e7f0      	b.n	8010dc0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010dde:	442a      	add	r2, r5
 8010de0:	8850      	ldrh	r0, [r2, #2]
 8010de2:	bd70      	pop	{r4, r5, r6, pc}
 8010de4:	2000      	movs	r0, #0
 8010de6:	e7fc      	b.n	8010de2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08010de8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8010de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dec:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8010dee:	4604      	mov	r4, r0
 8010df0:	260b      	movs	r6, #11
 8010df2:	886f      	ldrh	r7, [r5, #2]
 8010df4:	087f      	lsrs	r7, r7, #1
 8010df6:	3e01      	subs	r6, #1
 8010df8:	d01b      	beq.n	8010e32 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8010dfa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010dfc:	b92b      	cbnz	r3, 8010e0a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8010dfe:	4b0e      	ldr	r3, [pc, #56]	; (8010e38 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8010e00:	21c0      	movs	r1, #192	; 0xc0
 8010e02:	4a0e      	ldr	r2, [pc, #56]	; (8010e3c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8010e04:	480e      	ldr	r0, [pc, #56]	; (8010e40 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8010e06:	f008 ff5d 	bl	8019cc4 <__assert_func>
 8010e0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010e0c:	462a      	mov	r2, r5
 8010e0e:	4639      	mov	r1, r7
 8010e10:	4620      	mov	r0, r4
 8010e12:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010e16:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8010e1a:	4643      	mov	r3, r8
 8010e1c:	f7ff ffc6 	bl	8010dac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8010e20:	b138      	cbz	r0, 8010e32 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8010e22:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8010e26:	4642      	mov	r2, r8
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f7ff ff8b 	bl	8010d44 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d1e1      	bne.n	8010df6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8010e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e36:	bf00      	nop
 8010e38:	0801c444 	.word	0x0801c444
 8010e3c:	0801ddc7 	.word	0x0801ddc7
 8010e40:	0801c516 	.word	0x0801c516

08010e44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8010e44:	b570      	push	{r4, r5, r6, lr}
 8010e46:	694a      	ldr	r2, [r1, #20]
 8010e48:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8010e4a:	684b      	ldr	r3, [r1, #4]
 8010e4c:	1b54      	subs	r4, r2, r5
 8010e4e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8010e50:	f000 8106 	beq.w	8011060 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8010e54:	1b9b      	subs	r3, r3, r6
 8010e56:	d003      	beq.n	8010e60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8010e58:	4363      	muls	r3, r4
 8010e5a:	2210      	movs	r2, #16
 8010e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e60:	680c      	ldr	r4, [r1, #0]
 8010e62:	698a      	ldr	r2, [r1, #24]
 8010e64:	1b65      	subs	r5, r4, r5
 8010e66:	f000 80fd 	beq.w	8011064 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8010e6a:	1b92      	subs	r2, r2, r6
 8010e6c:	d003      	beq.n	8010e76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8010e6e:	436a      	muls	r2, r5
 8010e70:	2410      	movs	r4, #16
 8010e72:	fb92 f2f4 	sdiv	r2, r2, r4
 8010e76:	1a9b      	subs	r3, r3, r2
 8010e78:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80110a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8010e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010e80:	460a      	mov	r2, r1
 8010e82:	ee07 3a90 	vmov	s15, r3
 8010e86:	f100 040c 	add.w	r4, r0, #12
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e90:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010e94:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8010e98:	eeb1 6a43 	vneg.f32	s12, s6
 8010e9c:	edd2 7a02 	vldr	s15, [r2, #8]
 8010ea0:	3214      	adds	r2, #20
 8010ea2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010ea6:	ece3 6a01 	vstmia	r3!, {s13}
 8010eaa:	429c      	cmp	r4, r3
 8010eac:	ed52 7a02 	vldr	s15, [r2, #-8]
 8010eb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010eb4:	edc3 7a02 	vstr	s15, [r3, #8]
 8010eb8:	ed52 7a01 	vldr	s15, [r2, #-4]
 8010ebc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010ec0:	edc3 7a05 	vstr	s15, [r3, #20]
 8010ec4:	d1ea      	bne.n	8010e9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8010ec6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010ec8:	698b      	ldr	r3, [r1, #24]
 8010eca:	edd0 4a02 	vldr	s9, [r0, #8]
 8010ece:	1a9b      	subs	r3, r3, r2
 8010ed0:	edd0 3a00 	vldr	s7, [r0]
 8010ed4:	edd0 6a01 	vldr	s13, [r0, #4]
 8010ed8:	ee07 3a90 	vmov	s15, r3
 8010edc:	684b      	ldr	r3, [r1, #4]
 8010ede:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010ee2:	ed90 5a05 	vldr	s10, [r0, #20]
 8010ee6:	1a9b      	subs	r3, r3, r2
 8010ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010eec:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8010ef0:	ed90 2a03 	vldr	s4, [r0, #12]
 8010ef4:	ee07 3a10 	vmov	s14, r3
 8010ef8:	edd0 5a04 	vldr	s11, [r0, #16]
 8010efc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010f00:	ed90 1a07 	vldr	s2, [r0, #28]
 8010f04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f08:	edd0 2a06 	vldr	s5, [r0, #24]
 8010f0c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8010f10:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8010f14:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010f18:	ee32 5a45 	vsub.f32	s10, s4, s10
 8010f1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010f20:	ee67 7a83 	vmul.f32	s15, s15, s6
 8010f24:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8010f28:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8010f2a:	694a      	ldr	r2, [r1, #20]
 8010f2c:	1b13      	subs	r3, r2, r4
 8010f2e:	ee07 3a10 	vmov	s14, r3
 8010f32:	680b      	ldr	r3, [r1, #0]
 8010f34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f38:	1b1b      	subs	r3, r3, r4
 8010f3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010f3e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8010f42:	ee07 3a10 	vmov	s14, r3
 8010f46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010f4e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8010f52:	ee64 4a86 	vmul.f32	s9, s9, s12
 8010f56:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8010f5a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010f5c:	698b      	ldr	r3, [r1, #24]
 8010f5e:	1a9b      	subs	r3, r3, r2
 8010f60:	ee06 3a90 	vmov	s13, r3
 8010f64:	684b      	ldr	r3, [r1, #4]
 8010f66:	1a9b      	subs	r3, r3, r2
 8010f68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010f6c:	ee07 3a10 	vmov	s14, r3
 8010f70:	ee66 6a84 	vmul.f32	s13, s13, s8
 8010f74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f78:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8010f7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010f80:	eee5 6a87 	vfma.f32	s13, s11, s14
 8010f84:	ee66 6a83 	vmul.f32	s13, s13, s6
 8010f88:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8010f8c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8010f8e:	694a      	ldr	r2, [r1, #20]
 8010f90:	1b13      	subs	r3, r2, r4
 8010f92:	ee07 3a10 	vmov	s14, r3
 8010f96:	680b      	ldr	r3, [r1, #0]
 8010f98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f9c:	1b1b      	subs	r3, r3, r4
 8010f9e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010fa2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8010fa6:	ee07 3a10 	vmov	s14, r3
 8010faa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010fae:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010fb2:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010fb6:	edd0 5a08 	vldr	s11, [r0, #32]
 8010fba:	ee31 1a65 	vsub.f32	s2, s2, s11
 8010fbe:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8010fc2:	ee25 5a06 	vmul.f32	s10, s10, s12
 8010fc6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8010fca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010fcc:	698b      	ldr	r3, [r1, #24]
 8010fce:	1a9b      	subs	r3, r3, r2
 8010fd0:	ee07 3a10 	vmov	s14, r3
 8010fd4:	684b      	ldr	r3, [r1, #4]
 8010fd6:	1a9b      	subs	r3, r3, r2
 8010fd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010fdc:	ee01 3a90 	vmov	s3, r3
 8010fe0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010fe4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8010fe8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8010fec:	ee61 1a84 	vmul.f32	s3, s3, s8
 8010ff0:	eea1 7a21 	vfma.f32	s14, s2, s3
 8010ff4:	ee27 7a03 	vmul.f32	s14, s14, s6
 8010ff8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8010ffc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8010ffe:	694a      	ldr	r2, [r1, #20]
 8011000:	1b13      	subs	r3, r2, r4
 8011002:	ee03 3a10 	vmov	s6, r3
 8011006:	680b      	ldr	r3, [r1, #0]
 8011008:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801100c:	1b1b      	subs	r3, r3, r4
 801100e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8011012:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8011016:	ee03 3a10 	vmov	s6, r3
 801101a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801101e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8011022:	eee1 5a04 	vfma.f32	s11, s2, s8
 8011026:	ee25 6a86 	vmul.f32	s12, s11, s12
 801102a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801102e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8011032:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8011036:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103e:	dd13      	ble.n	8011068 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8011040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011044:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8011048:	63c3      	str	r3, [r0, #60]	; 0x3c
 801104a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801104e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011056:	dd15      	ble.n	8011084 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8011058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801105c:	6403      	str	r3, [r0, #64]	; 0x40
 801105e:	bd70      	pop	{r4, r5, r6, pc}
 8011060:	4623      	mov	r3, r4
 8011062:	e6fd      	b.n	8010e60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8011064:	462a      	mov	r2, r5
 8011066:	e706      	b.n	8010e76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8011068:	d502      	bpl.n	8011070 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801106a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801106e:	e7e9      	b.n	8011044 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8011070:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8011074:	eea3 2a85 	vfma.f32	s4, s7, s10
 8011078:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011080:	dade      	bge.n	8011040 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8011082:	e7f2      	b.n	801106a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8011084:	d502      	bpl.n	801108c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8011086:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801108a:	e7e7      	b.n	801105c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801108c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8011090:	eee3 4a86 	vfma.f32	s9, s7, s12
 8011094:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8011098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801109c:	dadc      	bge.n	8011058 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801109e:	e7f2      	b.n	8011086 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80110a0:	3d800000 	.word	0x3d800000

080110a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80110a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110a8:	2714      	movs	r7, #20
 80110aa:	435f      	muls	r7, r3
 80110ac:	eb02 0c07 	add.w	ip, r2, r7
 80110b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80110b4:	f115 0e0f 	adds.w	lr, r5, #15
 80110b8:	d433      	bmi.n	8011122 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 80110ba:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80110be:	9c08      	ldr	r4, [sp, #32]
 80110c0:	2614      	movs	r6, #20
 80110c2:	f8c0 e014 	str.w	lr, [r0, #20]
 80110c6:	4366      	muls	r6, r4
 80110c8:	eb02 0806 	add.w	r8, r2, r6
 80110cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80110d0:	f115 040f 	adds.w	r4, r5, #15
 80110d4:	d431      	bmi.n	801113a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 80110d6:	1124      	asrs	r4, r4, #4
 80110d8:	eba4 040e 	sub.w	r4, r4, lr
 80110dc:	6184      	str	r4, [r0, #24]
 80110de:	2c00      	cmp	r4, #0
 80110e0:	f000 80aa 	beq.w	8011238 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 80110e4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80110e8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80110ec:	5995      	ldr	r5, [r2, r6]
 80110ee:	eba4 0809 	sub.w	r8, r4, r9
 80110f2:	59d4      	ldr	r4, [r2, r7]
 80110f4:	eba5 0a04 	sub.w	sl, r5, r4
 80110f8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80110fc:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8011100:	2e00      	cmp	r6, #0
 8011102:	fb0e fe05 	mul.w	lr, lr, r5
 8011106:	fb0a ee19 	mls	lr, sl, r9, lr
 801110a:	fb08 e404 	mla	r4, r8, r4, lr
 801110e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011112:	4434      	add	r4, r6
 8011114:	dc1d      	bgt.n	8011152 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 8011116:	4b5b      	ldr	r3, [pc, #364]	; (8011284 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 8011118:	21f7      	movs	r1, #247	; 0xf7
 801111a:	4a5b      	ldr	r2, [pc, #364]	; (8011288 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 801111c:	485b      	ldr	r0, [pc, #364]	; (801128c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 801111e:	f008 fdd1 	bl	8019cc4 <__assert_func>
 8011122:	2410      	movs	r4, #16
 8011124:	f1c5 0501 	rsb	r5, r5, #1
 8011128:	fb9e fef4 	sdiv	lr, lr, r4
 801112c:	f015 050f 	ands.w	r5, r5, #15
 8011130:	bf18      	it	ne
 8011132:	2501      	movne	r5, #1
 8011134:	ebae 0e05 	sub.w	lr, lr, r5
 8011138:	e7c1      	b.n	80110be <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 801113a:	f04f 0910 	mov.w	r9, #16
 801113e:	f1c5 0501 	rsb	r5, r5, #1
 8011142:	fb94 f4f9 	sdiv	r4, r4, r9
 8011146:	f015 050f 	ands.w	r5, r5, #15
 801114a:	bf18      	it	ne
 801114c:	2501      	movne	r5, #1
 801114e:	1b64      	subs	r4, r4, r5
 8011150:	e7c2      	b.n	80110d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 8011152:	2c00      	cmp	r4, #0
 8011154:	db72      	blt.n	801123c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 8011156:	fb94 fef6 	sdiv	lr, r4, r6
 801115a:	fb06 441e 	mls	r4, r6, lr, r4
 801115e:	f8c0 e000 	str.w	lr, [r0]
 8011162:	6104      	str	r4, [r0, #16]
 8011164:	2d00      	cmp	r5, #0
 8011166:	db7b      	blt.n	8011260 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 8011168:	fb95 f4f6 	sdiv	r4, r5, r6
 801116c:	fb06 5514 	mls	r5, r6, r4, r5
 8011170:	6044      	str	r4, [r0, #4]
 8011172:	6085      	str	r5, [r0, #8]
 8011174:	60c6      	str	r6, [r0, #12]
 8011176:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801117a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801117e:	6945      	ldr	r5, [r0, #20]
 8011180:	59d2      	ldr	r2, [r2, r7]
 8011182:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8011186:	eddf 6a42 	vldr	s13, [pc, #264]	; 8011290 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 801118a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801118e:	ee07 4a10 	vmov	s14, r4
 8011192:	6804      	ldr	r4, [r0, #0]
 8011194:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8011198:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801119c:	ee07 2a90 	vmov	s15, r2
 80111a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80111a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80111ac:	edd3 6a00 	vldr	s13, [r3]
 80111b0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80111b4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80111b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80111bc:	edc0 6a07 	vstr	s13, [r0, #28]
 80111c0:	edd0 6a01 	vldr	s13, [r0, #4]
 80111c4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80111c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80111cc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80111d0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80111d4:	ed80 6a08 	vstr	s12, [r0, #32]
 80111d8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80111da:	6242      	str	r2, [r0, #36]	; 0x24
 80111dc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80111e0:	ed93 6a03 	vldr	s12, [r3, #12]
 80111e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80111e8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80111ec:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80111f0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80111f4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80111f8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80111fc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011200:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8011204:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011206:	6302      	str	r2, [r0, #48]	; 0x30
 8011208:	ed93 6a06 	vldr	s12, [r3, #24]
 801120c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8011210:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011214:	eeb0 7a46 	vmov.f32	s14, s12
 8011218:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801121c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011220:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8011224:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8011228:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801122c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011230:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8011234:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011236:	63c3      	str	r3, [r0, #60]	; 0x3c
 8011238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801123c:	4264      	negs	r4, r4
 801123e:	fb94 fef6 	sdiv	lr, r4, r6
 8011242:	f1ce 0800 	rsb	r8, lr, #0
 8011246:	fb06 441e 	mls	r4, r6, lr, r4
 801124a:	f8c0 8000 	str.w	r8, [r0]
 801124e:	6104      	str	r4, [r0, #16]
 8011250:	2c00      	cmp	r4, #0
 8011252:	d087      	beq.n	8011164 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 8011254:	ea6f 0e0e 	mvn.w	lr, lr
 8011258:	1b34      	subs	r4, r6, r4
 801125a:	f8c0 e000 	str.w	lr, [r0]
 801125e:	e780      	b.n	8011162 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 8011260:	426d      	negs	r5, r5
 8011262:	fb95 f4f6 	sdiv	r4, r5, r6
 8011266:	f1c4 0e00 	rsb	lr, r4, #0
 801126a:	fb06 5514 	mls	r5, r6, r4, r5
 801126e:	f8c0 e004 	str.w	lr, [r0, #4]
 8011272:	6085      	str	r5, [r0, #8]
 8011274:	2d00      	cmp	r5, #0
 8011276:	f43f af7d 	beq.w	8011174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 801127a:	43e4      	mvns	r4, r4
 801127c:	1b75      	subs	r5, r6, r5
 801127e:	6044      	str	r4, [r0, #4]
 8011280:	e777      	b.n	8011172 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 8011282:	bf00      	nop
 8011284:	0801e121 	.word	0x0801e121
 8011288:	0801e160 	.word	0x0801e160
 801128c:	0801e131 	.word	0x0801e131
 8011290:	3d800000 	.word	0x3d800000

08011294 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8011294:	4b01      	ldr	r3, [pc, #4]	; (801129c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8011296:	6018      	str	r0, [r3, #0]
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	24006b50 	.word	0x24006b50

080112a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80112a0:	4b06      	ldr	r3, [pc, #24]	; (80112bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80112a2:	881a      	ldrh	r2, [r3, #0]
 80112a4:	4282      	cmp	r2, r0
 80112a6:	d807      	bhi.n	80112b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80112a8:	4b05      	ldr	r3, [pc, #20]	; (80112c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80112aa:	881b      	ldrh	r3, [r3, #0]
 80112ac:	4413      	add	r3, r2
 80112ae:	4298      	cmp	r0, r3
 80112b0:	bfac      	ite	ge
 80112b2:	2000      	movge	r0, #0
 80112b4:	2001      	movlt	r0, #1
 80112b6:	4770      	bx	lr
 80112b8:	2000      	movs	r0, #0
 80112ba:	4770      	bx	lr
 80112bc:	24006b70 	.word	0x24006b70
 80112c0:	24006b74 	.word	0x24006b74

080112c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80112c4:	b508      	push	{r3, lr}
 80112c6:	4601      	mov	r1, r0
 80112c8:	f7ff ffea 	bl	80112a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80112cc:	b118      	cbz	r0, 80112d6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80112ce:	4b02      	ldr	r3, [pc, #8]	; (80112d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80112d6:	bd08      	pop	{r3, pc}
 80112d8:	24006b54 	.word	0x24006b54

080112dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80112dc:	b538      	push	{r3, r4, r5, lr}
 80112de:	4604      	mov	r4, r0
 80112e0:	f7ff ffde 	bl	80112a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80112e4:	b188      	cbz	r0, 801130a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 80112e6:	4b09      	ldr	r3, [pc, #36]	; (801130c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 80112e8:	881a      	ldrh	r2, [r3, #0]
 80112ea:	4b09      	ldr	r3, [pc, #36]	; (8011310 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 80112ec:	1aa4      	subs	r4, r4, r2
 80112ee:	220e      	movs	r2, #14
 80112f0:	681d      	ldr	r5, [r3, #0]
 80112f2:	4362      	muls	r2, r4
 80112f4:	18ac      	adds	r4, r5, r2
 80112f6:	7b23      	ldrb	r3, [r4, #12]
 80112f8:	f013 0320 	ands.w	r3, r3, #32
 80112fc:	bf17      	itett	ne
 80112fe:	680b      	ldrne	r3, [r1, #0]
 8011300:	4618      	moveq	r0, r3
 8011302:	50ab      	strne	r3, [r5, r2]
 8011304:	684b      	ldrne	r3, [r1, #4]
 8011306:	bf18      	it	ne
 8011308:	6063      	strne	r3, [r4, #4]
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	24006b70 	.word	0x24006b70
 8011310:	24006b58 	.word	0x24006b58

08011314 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8011314:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011318:	4606      	mov	r6, r0
 801131a:	460c      	mov	r4, r1
 801131c:	f7ff ffc0 	bl	80112a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8011320:	b918      	cbnz	r0, 801132a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8011322:	2000      	movs	r0, #0
 8011324:	b002      	add	sp, #8
 8011326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801132a:	4608      	mov	r0, r1
 801132c:	f7f9 ff31 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011330:	2800      	cmp	r0, #0
 8011332:	d1f6      	bne.n	8011322 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8011334:	4b3f      	ldr	r3, [pc, #252]	; (8011434 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8011336:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8011438 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801133a:	881d      	ldrh	r5, [r3, #0]
 801133c:	f8d9 a000 	ldr.w	sl, [r9]
 8011340:	46c8      	mov	r8, r9
 8011342:	1b73      	subs	r3, r6, r5
 8011344:	250e      	movs	r5, #14
 8011346:	435d      	muls	r5, r3
 8011348:	eb0a 0705 	add.w	r7, sl, r5
 801134c:	7b3b      	ldrb	r3, [r7, #12]
 801134e:	f013 0f20 	tst.w	r3, #32
 8011352:	d0e6      	beq.n	8011322 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8011354:	4621      	mov	r1, r4
 8011356:	4638      	mov	r0, r7
 8011358:	f7fd fb64 	bl	800ea24 <_ZNK8touchgfx4Rect8includesERKS0_>
 801135c:	2800      	cmp	r0, #0
 801135e:	d1e1      	bne.n	8011324 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8011360:	4639      	mov	r1, r7
 8011362:	4620      	mov	r0, r4
 8011364:	f7fd fb5e 	bl	800ea24 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011368:	b108      	cbz	r0, 801136e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801136a:	4621      	mov	r1, r4
 801136c:	e020      	b.n	80113b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801136e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011372:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8011376:	429a      	cmp	r2, r3
 8011378:	d11e      	bne.n	80113b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801137a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801137e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011382:	429a      	cmp	r2, r3
 8011384:	d118      	bne.n	80113b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8011386:	6820      	ldr	r0, [r4, #0]
 8011388:	466b      	mov	r3, sp
 801138a:	6861      	ldr	r1, [r4, #4]
 801138c:	c303      	stmia	r3!, {r0, r1}
 801138e:	4639      	mov	r1, r7
 8011390:	4668      	mov	r0, sp
 8011392:	f7fd fb6d 	bl	800ea70 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011396:	f8d9 3000 	ldr.w	r3, [r9]
 801139a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801139e:	442b      	add	r3, r5
 80113a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80113a4:	4413      	add	r3, r2
 80113a6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80113aa:	4293      	cmp	r3, r2
 80113ac:	dc04      	bgt.n	80113b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80113ae:	4669      	mov	r1, sp
 80113b0:	4630      	mov	r0, r6
 80113b2:	f7ff ff93 	bl	80112dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80113b6:	e7b5      	b.n	8011324 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80113b8:	f8d8 3000 	ldr.w	r3, [r8]
 80113bc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80113c0:	442b      	add	r3, r5
 80113c2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80113c6:	4291      	cmp	r1, r2
 80113c8:	d119      	bne.n	80113fe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80113ca:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80113ce:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80113d2:	4291      	cmp	r1, r2
 80113d4:	d113      	bne.n	80113fe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80113d6:	6820      	ldr	r0, [r4, #0]
 80113d8:	466a      	mov	r2, sp
 80113da:	6861      	ldr	r1, [r4, #4]
 80113dc:	c203      	stmia	r2!, {r0, r1}
 80113de:	4619      	mov	r1, r3
 80113e0:	4668      	mov	r0, sp
 80113e2:	f7fd fb45 	bl	800ea70 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80113e6:	f8d8 3000 	ldr.w	r3, [r8]
 80113ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80113ee:	442b      	add	r3, r5
 80113f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80113f4:	4413      	add	r3, r2
 80113f6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80113fa:	4293      	cmp	r3, r2
 80113fc:	ddd7      	ble.n	80113ae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80113fe:	4620      	mov	r0, r4
 8011400:	f7f9 fec7 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011404:	b990      	cbnz	r0, 801142c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8011406:	88a7      	ldrh	r7, [r4, #4]
 8011408:	88e3      	ldrh	r3, [r4, #6]
 801140a:	fb17 f703 	smulbb	r7, r7, r3
 801140e:	f8d8 3000 	ldr.w	r3, [r8]
 8011412:	441d      	add	r5, r3
 8011414:	4628      	mov	r0, r5
 8011416:	f7f9 febc 	bl	800b192 <_ZNK8touchgfx4Rect7isEmptyEv>
 801141a:	b948      	cbnz	r0, 8011430 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801141c:	88ab      	ldrh	r3, [r5, #4]
 801141e:	88ea      	ldrh	r2, [r5, #6]
 8011420:	fb13 f302 	smulbb	r3, r3, r2
 8011424:	42bb      	cmp	r3, r7
 8011426:	f4bf af7c 	bcs.w	8011322 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801142a:	e79e      	b.n	801136a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801142c:	2700      	movs	r7, #0
 801142e:	e7ee      	b.n	801140e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8011430:	2300      	movs	r3, #0
 8011432:	e7f7      	b.n	8011424 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8011434:	24006b70 	.word	0x24006b70
 8011438:	24006b58 	.word	0x24006b58

0801143c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801143e:	4c24      	ldr	r4, [pc, #144]	; (80114d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8011440:	6823      	ldr	r3, [r4, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d042      	beq.n	80114cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8011446:	4a23      	ldr	r2, [pc, #140]	; (80114d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8011448:	4d23      	ldr	r5, [pc, #140]	; (80114d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801144a:	8811      	ldrh	r1, [r2, #0]
 801144c:	f8b5 c000 	ldrh.w	ip, [r5]
 8011450:	4822      	ldr	r0, [pc, #136]	; (80114dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8011452:	4461      	add	r1, ip
 8011454:	1c4a      	adds	r2, r1, #1
 8011456:	008f      	lsls	r7, r1, #2
 8011458:	f022 0201 	bic.w	r2, r2, #1
 801145c:	19de      	adds	r6, r3, r7
 801145e:	0412      	lsls	r2, r2, #16
 8011460:	6006      	str	r6, [r0, #0]
 8011462:	4e1f      	ldr	r6, [pc, #124]	; (80114e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8011464:	0c12      	lsrs	r2, r2, #16
 8011466:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801146a:	19da      	adds	r2, r3, r7
 801146c:	6032      	str	r2, [r6, #0]
 801146e:	220e      	movs	r2, #14
 8011470:	fb02 f20c 	mul.w	r2, r2, ip
 8011474:	3203      	adds	r2, #3
 8011476:	f022 0203 	bic.w	r2, r2, #3
 801147a:	443a      	add	r2, r7
 801147c:	4f19      	ldr	r7, [pc, #100]	; (80114e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801147e:	4413      	add	r3, r2
 8011480:	603b      	str	r3, [r7, #0]
 8011482:	2300      	movs	r3, #0
 8011484:	4f18      	ldr	r7, [pc, #96]	; (80114e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8011486:	469c      	mov	ip, r3
 8011488:	803b      	strh	r3, [r7, #0]
 801148a:	4f18      	ldr	r7, [pc, #96]	; (80114ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801148c:	683f      	ldr	r7, [r7, #0]
 801148e:	1aba      	subs	r2, r7, r2
 8011490:	4f17      	ldr	r7, [pc, #92]	; (80114f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8011492:	603a      	str	r2, [r7, #0]
 8011494:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8011498:	4a16      	ldr	r2, [pc, #88]	; (80114f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801149a:	8013      	strh	r3, [r2, #0]
 801149c:	428b      	cmp	r3, r1
 801149e:	d10d      	bne.n	80114bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80114a0:	882d      	ldrh	r5, [r5, #0]
 80114a2:	2300      	movs	r3, #0
 80114a4:	6830      	ldr	r0, [r6, #0]
 80114a6:	240e      	movs	r4, #14
 80114a8:	429d      	cmp	r5, r3
 80114aa:	d90f      	bls.n	80114cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80114ac:	fb04 0203 	mla	r2, r4, r3, r0
 80114b0:	3301      	adds	r3, #1
 80114b2:	7b11      	ldrb	r1, [r2, #12]
 80114b4:	f36f 1145 	bfc	r1, #5, #1
 80114b8:	7311      	strb	r1, [r2, #12]
 80114ba:	e7f5      	b.n	80114a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80114bc:	6822      	ldr	r2, [r4, #0]
 80114be:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80114c2:	6802      	ldr	r2, [r0, #0]
 80114c4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80114c8:	3301      	adds	r3, #1
 80114ca:	e7e7      	b.n	801149c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80114cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114ce:	bf00      	nop
 80114d0:	24006b54 	.word	0x24006b54
 80114d4:	24006b70 	.word	0x24006b70
 80114d8:	24006b74 	.word	0x24006b74
 80114dc:	24006b68 	.word	0x24006b68
 80114e0:	24006b58 	.word	0x24006b58
 80114e4:	24006b60 	.word	0x24006b60
 80114e8:	24006b72 	.word	0x24006b72
 80114ec:	24006b5c 	.word	0x24006b5c
 80114f0:	24006b6c 	.word	0x24006b6c
 80114f4:	24006b64 	.word	0x24006b64

080114f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80114f8:	4b10      	ldr	r3, [pc, #64]	; (801153c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80114fa:	b510      	push	{r4, lr}
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	b9db      	cbnz	r3, 8011538 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8011500:	b1d1      	cbz	r1, 8011538 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8011502:	4b0f      	ldr	r3, [pc, #60]	; (8011540 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8011504:	240e      	movs	r4, #14
 8011506:	801a      	strh	r2, [r3, #0]
 8011508:	b292      	uxth	r2, r2
 801150a:	4b0e      	ldr	r3, [pc, #56]	; (8011544 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801150c:	881b      	ldrh	r3, [r3, #0]
 801150e:	4413      	add	r3, r2
 8011510:	4362      	muls	r2, r4
 8011512:	2406      	movs	r4, #6
 8011514:	fb04 2203 	mla	r2, r4, r3, r2
 8011518:	428a      	cmp	r2, r1
 801151a:	d305      	bcc.n	8011528 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801151c:	4b0a      	ldr	r3, [pc, #40]	; (8011548 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801151e:	2134      	movs	r1, #52	; 0x34
 8011520:	4a0a      	ldr	r2, [pc, #40]	; (801154c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8011522:	480b      	ldr	r0, [pc, #44]	; (8011550 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8011524:	f008 fbce 	bl	8019cc4 <__assert_func>
 8011528:	4b0a      	ldr	r3, [pc, #40]	; (8011554 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801152a:	6019      	str	r1, [r3, #0]
 801152c:	4b0a      	ldr	r3, [pc, #40]	; (8011558 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801152e:	6018      	str	r0, [r3, #0]
 8011530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011534:	f7ff bf82 	b.w	801143c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8011538:	bd10      	pop	{r4, pc}
 801153a:	bf00      	nop
 801153c:	24006b60 	.word	0x24006b60
 8011540:	24006b74 	.word	0x24006b74
 8011544:	24006b70 	.word	0x24006b70
 8011548:	0801e1fe 	.word	0x0801e1fe
 801154c:	0801e257 	.word	0x0801e257
 8011550:	0801e1d9 	.word	0x0801e1d9
 8011554:	24006b5c 	.word	0x24006b5c
 8011558:	24006b54 	.word	0x24006b54

0801155c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801155c:	b470      	push	{r4, r5, r6}
 801155e:	4c07      	ldr	r4, [pc, #28]	; (801157c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8011560:	4605      	mov	r5, r0
 8011562:	4610      	mov	r0, r2
 8011564:	9a03      	ldr	r2, [sp, #12]
 8011566:	6826      	ldr	r6, [r4, #0]
 8011568:	b936      	cbnz	r6, 8011578 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801156a:	6025      	str	r5, [r4, #0]
 801156c:	4c04      	ldr	r4, [pc, #16]	; (8011580 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801156e:	8021      	strh	r1, [r4, #0]
 8011570:	4619      	mov	r1, r3
 8011572:	bc70      	pop	{r4, r5, r6}
 8011574:	f7ff bfc0 	b.w	80114f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8011578:	bc70      	pop	{r4, r5, r6}
 801157a:	4770      	bx	lr
 801157c:	24006b78 	.word	0x24006b78
 8011580:	24006b70 	.word	0x24006b70

08011584 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8011584:	b508      	push	{r3, lr}
 8011586:	4b17      	ldr	r3, [pc, #92]	; (80115e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8011588:	6819      	ldr	r1, [r3, #0]
 801158a:	b931      	cbnz	r1, 801159a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801158c:	4b16      	ldr	r3, [pc, #88]	; (80115e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801158e:	f240 4184 	movw	r1, #1156	; 0x484
 8011592:	4a16      	ldr	r2, [pc, #88]	; (80115ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8011594:	4816      	ldr	r0, [pc, #88]	; (80115f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8011596:	f008 fb95 	bl	8019cc4 <__assert_func>
 801159a:	4a16      	ldr	r2, [pc, #88]	; (80115f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801159c:	8803      	ldrh	r3, [r0, #0]
 801159e:	8812      	ldrh	r2, [r2, #0]
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d204      	bcs.n	80115ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80115a4:	2214      	movs	r2, #20
 80115a6:	fb02 1303 	mla	r3, r2, r3, r1
 80115aa:	8918      	ldrh	r0, [r3, #8]
 80115ac:	bd08      	pop	{r3, pc}
 80115ae:	4912      	ldr	r1, [pc, #72]	; (80115f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 80115b0:	8809      	ldrh	r1, [r1, #0]
 80115b2:	4411      	add	r1, r2
 80115b4:	428b      	cmp	r3, r1
 80115b6:	da06      	bge.n	80115c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80115b8:	1a9b      	subs	r3, r3, r2
 80115ba:	4a10      	ldr	r2, [pc, #64]	; (80115fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 80115bc:	210e      	movs	r1, #14
 80115be:	6812      	ldr	r2, [r2, #0]
 80115c0:	fb01 2303 	mla	r3, r1, r3, r2
 80115c4:	e7f1      	b.n	80115aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80115c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d107      	bne.n	80115de <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 80115ce:	4b0c      	ldr	r3, [pc, #48]	; (8011600 <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	b913      	cbnz	r3, 80115da <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 80115d4:	4b0b      	ldr	r3, [pc, #44]	; (8011604 <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 80115d6:	8818      	ldrh	r0, [r3, #0]
 80115d8:	e7e8      	b.n	80115ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80115da:	4b0b      	ldr	r3, [pc, #44]	; (8011608 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 80115dc:	e7fb      	b.n	80115d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 80115de:	2000      	movs	r0, #0
 80115e0:	e7e4      	b.n	80115ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80115e2:	bf00      	nop
 80115e4:	24006b78 	.word	0x24006b78
 80115e8:	0801d5cc 	.word	0x0801d5cc
 80115ec:	0801e304 	.word	0x0801e304
 80115f0:	0801e1d9 	.word	0x0801e1d9
 80115f4:	24006b70 	.word	0x24006b70
 80115f8:	24006b74 	.word	0x24006b74
 80115fc:	24006b58 	.word	0x24006b58
 8011600:	24006ae8 	.word	0x24006ae8
 8011604:	24006aea 	.word	0x24006aea
 8011608:	24006aec 	.word	0x24006aec

0801160c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801160c:	b508      	push	{r3, lr}
 801160e:	4b17      	ldr	r3, [pc, #92]	; (801166c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8011610:	6819      	ldr	r1, [r3, #0]
 8011612:	b931      	cbnz	r1, 8011622 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8011614:	4b16      	ldr	r3, [pc, #88]	; (8011670 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8011616:	f44f 6193 	mov.w	r1, #1176	; 0x498
 801161a:	4a16      	ldr	r2, [pc, #88]	; (8011674 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801161c:	4816      	ldr	r0, [pc, #88]	; (8011678 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801161e:	f008 fb51 	bl	8019cc4 <__assert_func>
 8011622:	4a16      	ldr	r2, [pc, #88]	; (801167c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8011624:	8803      	ldrh	r3, [r0, #0]
 8011626:	8812      	ldrh	r2, [r2, #0]
 8011628:	4293      	cmp	r3, r2
 801162a:	d204      	bcs.n	8011636 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801162c:	2214      	movs	r2, #20
 801162e:	fb02 1303 	mla	r3, r2, r3, r1
 8011632:	8958      	ldrh	r0, [r3, #10]
 8011634:	bd08      	pop	{r3, pc}
 8011636:	4912      	ldr	r1, [pc, #72]	; (8011680 <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 8011638:	8809      	ldrh	r1, [r1, #0]
 801163a:	4411      	add	r1, r2
 801163c:	428b      	cmp	r3, r1
 801163e:	da06      	bge.n	801164e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8011640:	1a9b      	subs	r3, r3, r2
 8011642:	4a10      	ldr	r2, [pc, #64]	; (8011684 <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 8011644:	210e      	movs	r1, #14
 8011646:	6812      	ldr	r2, [r2, #0]
 8011648:	fb01 2303 	mla	r3, r1, r3, r2
 801164c:	e7f1      	b.n	8011632 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801164e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011652:	4293      	cmp	r3, r2
 8011654:	d107      	bne.n	8011666 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 8011656:	4b0c      	ldr	r3, [pc, #48]	; (8011688 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	b913      	cbnz	r3, 8011662 <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 801165c:	4b0b      	ldr	r3, [pc, #44]	; (801168c <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 801165e:	8818      	ldrh	r0, [r3, #0]
 8011660:	e7e8      	b.n	8011634 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8011662:	4b0b      	ldr	r3, [pc, #44]	; (8011690 <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 8011664:	e7fb      	b.n	801165e <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 8011666:	2000      	movs	r0, #0
 8011668:	e7e4      	b.n	8011634 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801166a:	bf00      	nop
 801166c:	24006b78 	.word	0x24006b78
 8011670:	0801d5cc 	.word	0x0801d5cc
 8011674:	0801e330 	.word	0x0801e330
 8011678:	0801e1d9 	.word	0x0801e1d9
 801167c:	24006b70 	.word	0x24006b70
 8011680:	24006b74 	.word	0x24006b74
 8011684:	24006b58 	.word	0x24006b58
 8011688:	24006ae8 	.word	0x24006ae8
 801168c:	24006aec 	.word	0x24006aec
 8011690:	24006aea 	.word	0x24006aea

08011694 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8011694:	4b23      	ldr	r3, [pc, #140]	; (8011724 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8011696:	b510      	push	{r4, lr}
 8011698:	681c      	ldr	r4, [r3, #0]
 801169a:	b934      	cbnz	r4, 80116aa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801169c:	4b22      	ldr	r3, [pc, #136]	; (8011728 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801169e:	f240 41ac 	movw	r1, #1196	; 0x4ac
 80116a2:	4a22      	ldr	r2, [pc, #136]	; (801172c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80116a4:	4822      	ldr	r0, [pc, #136]	; (8011730 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80116a6:	f008 fb0d 	bl	8019cc4 <__assert_func>
 80116aa:	4a22      	ldr	r2, [pc, #136]	; (8011734 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80116ac:	880b      	ldrh	r3, [r1, #0]
 80116ae:	8812      	ldrh	r2, [r2, #0]
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d211      	bcs.n	80116d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80116b4:	2214      	movs	r2, #20
 80116b6:	fb02 4303 	mla	r3, r2, r3, r4
 80116ba:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80116be:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80116c2:	8a1a      	ldrh	r2, [r3, #16]
 80116c4:	8a5b      	ldrh	r3, [r3, #18]
 80116c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80116ca:	8004      	strh	r4, [r0, #0]
 80116cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116d0:	8041      	strh	r1, [r0, #2]
 80116d2:	8082      	strh	r2, [r0, #4]
 80116d4:	80c3      	strh	r3, [r0, #6]
 80116d6:	e00e      	b.n	80116f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80116d8:	4917      	ldr	r1, [pc, #92]	; (8011738 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80116da:	8809      	ldrh	r1, [r1, #0]
 80116dc:	4411      	add	r1, r2
 80116de:	428b      	cmp	r3, r1
 80116e0:	da0a      	bge.n	80116f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80116e2:	1a9b      	subs	r3, r3, r2
 80116e4:	4a15      	ldr	r2, [pc, #84]	; (801173c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80116e6:	210e      	movs	r1, #14
 80116e8:	6812      	ldr	r2, [r2, #0]
 80116ea:	fb01 2303 	mla	r3, r1, r3, r2
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	6002      	str	r2, [r0, #0]
 80116f2:	685a      	ldr	r2, [r3, #4]
 80116f4:	6042      	str	r2, [r0, #4]
 80116f6:	bd10      	pop	{r4, pc}
 80116f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d10b      	bne.n	8011718 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8011700:	4b0f      	ldr	r3, [pc, #60]	; (8011740 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8011702:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011706:	4b0f      	ldr	r3, [pc, #60]	; (8011744 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8011708:	8081      	strh	r1, [r0, #4]
 801170a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801170e:	2300      	movs	r3, #0
 8011710:	80c2      	strh	r2, [r0, #6]
 8011712:	8003      	strh	r3, [r0, #0]
 8011714:	8043      	strh	r3, [r0, #2]
 8011716:	e7ee      	b.n	80116f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8011718:	2300      	movs	r3, #0
 801171a:	8003      	strh	r3, [r0, #0]
 801171c:	8043      	strh	r3, [r0, #2]
 801171e:	8083      	strh	r3, [r0, #4]
 8011720:	e7d8      	b.n	80116d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8011722:	bf00      	nop
 8011724:	24006b78 	.word	0x24006b78
 8011728:	0801d5cc 	.word	0x0801d5cc
 801172c:	0801e29d 	.word	0x0801e29d
 8011730:	0801e1d9 	.word	0x0801e1d9
 8011734:	24006b70 	.word	0x24006b70
 8011738:	24006b74 	.word	0x24006b74
 801173c:	24006b58 	.word	0x24006b58
 8011740:	24006ae4 	.word	0x24006ae4
 8011744:	24006ae6 	.word	0x24006ae6

08011748 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8011748:	b508      	push	{r3, lr}
 801174a:	4b12      	ldr	r3, [pc, #72]	; (8011794 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801174c:	6819      	ldr	r1, [r3, #0]
 801174e:	b931      	cbnz	r1, 801175e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8011750:	4b11      	ldr	r3, [pc, #68]	; (8011798 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8011752:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 8011756:	4a11      	ldr	r2, [pc, #68]	; (801179c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8011758:	4811      	ldr	r0, [pc, #68]	; (80117a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801175a:	f008 fab3 	bl	8019cc4 <__assert_func>
 801175e:	8803      	ldrh	r3, [r0, #0]
 8011760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011764:	4293      	cmp	r3, r2
 8011766:	d012      	beq.n	801178e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8011768:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801176c:	4293      	cmp	r3, r2
 801176e:	d103      	bne.n	8011778 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8011770:	4b0c      	ldr	r3, [pc, #48]	; (80117a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8011776:	bd08      	pop	{r3, pc}
 8011778:	4a0b      	ldr	r2, [pc, #44]	; (80117a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801177a:	6812      	ldr	r2, [r2, #0]
 801177c:	b11a      	cbz	r2, 8011786 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801177e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011782:	2800      	cmp	r0, #0
 8011784:	d1f7      	bne.n	8011776 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8011786:	2214      	movs	r2, #20
 8011788:	4353      	muls	r3, r2
 801178a:	58c8      	ldr	r0, [r1, r3]
 801178c:	e7f3      	b.n	8011776 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801178e:	2000      	movs	r0, #0
 8011790:	e7f1      	b.n	8011776 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8011792:	bf00      	nop
 8011794:	24006b78 	.word	0x24006b78
 8011798:	0801d5cc 	.word	0x0801d5cc
 801179c:	0801e2d3 	.word	0x0801e2d3
 80117a0:	0801e1d9 	.word	0x0801e1d9
 80117a4:	24006af0 	.word	0x24006af0
 80117a8:	24006b54 	.word	0x24006b54

080117ac <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80117ac:	8802      	ldrh	r2, [r0, #0]
 80117ae:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d845      	bhi.n	8011842 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80117b6:	4b24      	ldr	r3, [pc, #144]	; (8011848 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80117b8:	8818      	ldrh	r0, [r3, #0]
 80117ba:	4282      	cmp	r2, r0
 80117bc:	d221      	bcs.n	8011802 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 80117be:	4b23      	ldr	r3, [pc, #140]	; (801184c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80117c0:	6819      	ldr	r1, [r3, #0]
 80117c2:	2314      	movs	r3, #20
 80117c4:	fb03 1302 	mla	r3, r3, r2, r1
 80117c8:	6858      	ldr	r0, [r3, #4]
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d03a      	beq.n	8011844 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80117ce:	4920      	ldr	r1, [pc, #128]	; (8011850 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80117d0:	6809      	ldr	r1, [r1, #0]
 80117d2:	2900      	cmp	r1, #0
 80117d4:	d036      	beq.n	8011844 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80117d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80117da:	2900      	cmp	r1, #0
 80117dc:	d032      	beq.n	8011844 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80117de:	891a      	ldrh	r2, [r3, #8]
 80117e0:	8958      	ldrh	r0, [r3, #10]
 80117e2:	4350      	muls	r0, r2
 80117e4:	7c5a      	ldrb	r2, [r3, #17]
 80117e6:	7cdb      	ldrb	r3, [r3, #19]
 80117e8:	0952      	lsrs	r2, r2, #5
 80117ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80117ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80117f2:	2b0b      	cmp	r3, #11
 80117f4:	bf18      	it	ne
 80117f6:	0040      	lslne	r0, r0, #1
 80117f8:	3003      	adds	r0, #3
 80117fa:	f020 0003 	bic.w	r0, r0, #3
 80117fe:	4408      	add	r0, r1
 8011800:	4770      	bx	lr
 8011802:	4b14      	ldr	r3, [pc, #80]	; (8011854 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8011804:	881b      	ldrh	r3, [r3, #0]
 8011806:	4403      	add	r3, r0
 8011808:	429a      	cmp	r2, r3
 801180a:	da1a      	bge.n	8011842 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801180c:	4b12      	ldr	r3, [pc, #72]	; (8011858 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801180e:	1a10      	subs	r0, r2, r0
 8011810:	210e      	movs	r1, #14
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	fb01 3000 	mla	r0, r1, r0, r3
 8011818:	7b03      	ldrb	r3, [r0, #12]
 801181a:	f003 031f 	and.w	r3, r3, #31
 801181e:	2b0b      	cmp	r3, #11
 8011820:	d10b      	bne.n	801183a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8011822:	8903      	ldrh	r3, [r0, #8]
 8011824:	8940      	ldrh	r0, [r0, #10]
 8011826:	4358      	muls	r0, r3
 8011828:	4b09      	ldr	r3, [pc, #36]	; (8011850 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801182a:	3003      	adds	r0, #3
 801182c:	6819      	ldr	r1, [r3, #0]
 801182e:	f020 0303 	bic.w	r3, r0, #3
 8011832:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8011836:	4418      	add	r0, r3
 8011838:	4770      	bx	lr
 801183a:	2b0d      	cmp	r3, #13
 801183c:	d101      	bne.n	8011842 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801183e:	300d      	adds	r0, #13
 8011840:	4770      	bx	lr
 8011842:	2000      	movs	r0, #0
 8011844:	4770      	bx	lr
 8011846:	bf00      	nop
 8011848:	24006b70 	.word	0x24006b70
 801184c:	24006b78 	.word	0x24006b78
 8011850:	24006b54 	.word	0x24006b54
 8011854:	24006b74 	.word	0x24006b74
 8011858:	24006b58 	.word	0x24006b58

0801185c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801185c:	4b17      	ldr	r3, [pc, #92]	; (80118bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801185e:	b510      	push	{r4, lr}
 8011860:	6819      	ldr	r1, [r3, #0]
 8011862:	8803      	ldrh	r3, [r0, #0]
 8011864:	b1e9      	cbz	r1, 80118a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8011866:	4a16      	ldr	r2, [pc, #88]	; (80118c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8011868:	8812      	ldrh	r2, [r2, #0]
 801186a:	429a      	cmp	r2, r3
 801186c:	d90a      	bls.n	8011884 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801186e:	2214      	movs	r2, #20
 8011870:	fb02 1303 	mla	r3, r2, r3, r1
 8011874:	7c58      	ldrb	r0, [r3, #17]
 8011876:	0942      	lsrs	r2, r0, #5
 8011878:	7cd8      	ldrb	r0, [r3, #19]
 801187a:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801187e:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8011882:	bd10      	pop	{r4, pc}
 8011884:	490f      	ldr	r1, [pc, #60]	; (80118c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8011886:	8809      	ldrh	r1, [r1, #0]
 8011888:	4411      	add	r1, r2
 801188a:	428b      	cmp	r3, r1
 801188c:	da09      	bge.n	80118a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801188e:	1a9b      	subs	r3, r3, r2
 8011890:	4a0d      	ldr	r2, [pc, #52]	; (80118c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8011892:	210e      	movs	r1, #14
 8011894:	6812      	ldr	r2, [r2, #0]
 8011896:	fb01 2303 	mla	r3, r1, r3, r2
 801189a:	7b18      	ldrb	r0, [r3, #12]
 801189c:	f000 001f 	and.w	r0, r0, #31
 80118a0:	e7ef      	b.n	8011882 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80118a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d106      	bne.n	80118b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80118aa:	f7f9 fefd 	bl	800b6a8 <_ZN8touchgfx3HAL3lcdEv>
 80118ae:	6803      	ldr	r3, [r0, #0]
 80118b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b6:	4718      	bx	r3
 80118b8:	2000      	movs	r0, #0
 80118ba:	e7e2      	b.n	8011882 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80118bc:	24006b78 	.word	0x24006b78
 80118c0:	24006b70 	.word	0x24006b70
 80118c4:	24006b74 	.word	0x24006b74
 80118c8:	24006b58 	.word	0x24006b58

080118cc <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80118cc:	2018      	movs	r0, #24
 80118ce:	4770      	bx	lr

080118d0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80118d0:	2001      	movs	r0, #1
 80118d2:	4770      	bx	lr

080118d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80118d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118d8:	b085      	sub	sp, #20
 80118da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80118dc:	9203      	str	r2, [sp, #12]
 80118de:	6870      	ldr	r0, [r6, #4]
 80118e0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80118e4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80118e8:	9101      	str	r1, [sp, #4]
 80118ea:	fa1f f885 	uxth.w	r8, r5
 80118ee:	43ed      	mvns	r5, r5
 80118f0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80118f4:	b2ed      	uxtb	r5, r5
 80118f6:	fb00 2404 	mla	r4, r0, r4, r2
 80118fa:	6832      	ldr	r2, [r6, #0]
 80118fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011900:	4414      	add	r4, r2
 8011902:	f8dc 2000 	ldr.w	r2, [ip]
 8011906:	9202      	str	r2, [sp, #8]
 8011908:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801190c:	f102 0e04 	add.w	lr, r2, #4
 8011910:	9a01      	ldr	r2, [sp, #4]
 8011912:	2a00      	cmp	r2, #0
 8011914:	dc03      	bgt.n	801191e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8011916:	9a03      	ldr	r2, [sp, #12]
 8011918:	2a00      	cmp	r2, #0
 801191a:	f340 8116 	ble.w	8011b4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801191e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011920:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8011924:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011928:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801192a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801192e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011932:	2b00      	cmp	r3, #0
 8011934:	dd0e      	ble.n	8011954 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8011936:	1406      	asrs	r6, r0, #16
 8011938:	d405      	bmi.n	8011946 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801193a:	4556      	cmp	r6, sl
 801193c:	da03      	bge.n	8011946 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801193e:	1416      	asrs	r6, r2, #16
 8011940:	d401      	bmi.n	8011946 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8011942:	454e      	cmp	r6, r9
 8011944:	db07      	blt.n	8011956 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8011946:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011948:	3b01      	subs	r3, #1
 801194a:	3403      	adds	r4, #3
 801194c:	4430      	add	r0, r6
 801194e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011950:	4432      	add	r2, r6
 8011952:	e7ee      	b.n	8011932 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8011954:	d063      	beq.n	8011a1e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8011956:	1e5e      	subs	r6, r3, #1
 8011958:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801195a:	fb07 0706 	mla	r7, r7, r6, r0
 801195e:	143f      	asrs	r7, r7, #16
 8011960:	d454      	bmi.n	8011a0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8011962:	4557      	cmp	r7, sl
 8011964:	da52      	bge.n	8011a0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8011966:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8011968:	fb07 2606 	mla	r6, r7, r6, r2
 801196c:	1436      	asrs	r6, r6, #16
 801196e:	d44d      	bmi.n	8011a0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8011970:	454e      	cmp	r6, r9
 8011972:	da4b      	bge.n	8011a0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8011974:	1ce6      	adds	r6, r4, #3
 8011976:	4699      	mov	r9, r3
 8011978:	f1b9 0f00 	cmp.w	r9, #0
 801197c:	f106 0603 	add.w	r6, r6, #3
 8011980:	dd48      	ble.n	8011a14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8011982:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8011986:	1417      	asrs	r7, r2, #16
 8011988:	9902      	ldr	r1, [sp, #8]
 801198a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801198e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011992:	fb0b 1707 	mla	r7, fp, r7, r1
 8011996:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801199a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801199c:	f817 700a 	ldrb.w	r7, [r7, sl]
 80119a0:	fb1b fb05 	smulbb	fp, fp, r5
 80119a4:	4408      	add	r0, r1
 80119a6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80119a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80119ac:	440a      	add	r2, r1
 80119ae:	eb0e 0a07 	add.w	sl, lr, r7
 80119b2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80119b6:	fb07 b708 	mla	r7, r7, r8, fp
 80119ba:	b2bf      	uxth	r7, r7
 80119bc:	f107 0b01 	add.w	fp, r7, #1
 80119c0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80119c4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80119c8:	fb1b fb05 	smulbb	fp, fp, r5
 80119cc:	123f      	asrs	r7, r7, #8
 80119ce:	f806 7c06 	strb.w	r7, [r6, #-6]
 80119d2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80119d6:	fb07 b708 	mla	r7, r7, r8, fp
 80119da:	b2bf      	uxth	r7, r7
 80119dc:	f107 0b01 	add.w	fp, r7, #1
 80119e0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80119e4:	123f      	asrs	r7, r7, #8
 80119e6:	f806 7c05 	strb.w	r7, [r6, #-5]
 80119ea:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80119ee:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80119f2:	fb1a fa05 	smulbb	sl, sl, r5
 80119f6:	fb07 a708 	mla	r7, r7, r8, sl
 80119fa:	b2bf      	uxth	r7, r7
 80119fc:	f107 0a01 	add.w	sl, r7, #1
 8011a00:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8011a04:	123f      	asrs	r7, r7, #8
 8011a06:	f806 7c04 	strb.w	r7, [r6, #-4]
 8011a0a:	e7b5      	b.n	8011978 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8011a0c:	2700      	movs	r7, #0
 8011a0e:	1bde      	subs	r6, r3, r7
 8011a10:	2e00      	cmp	r6, #0
 8011a12:	dc42      	bgt.n	8011a9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8011a14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011a18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011a1c:	441c      	add	r4, r3
 8011a1e:	9b01      	ldr	r3, [sp, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f340 8092 	ble.w	8011b4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8011a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011a30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011a34:	eef0 6a62 	vmov.f32	s13, s5
 8011a38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011a3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011a40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011a44:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8011a48:	eef0 6a43 	vmov.f32	s13, s6
 8011a4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011a50:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8011a54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011a58:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011a5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011a60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011a64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011a68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011a6c:	ee12 2a90 	vmov	r2, s5
 8011a70:	eef0 2a47 	vmov.f32	s5, s14
 8011a74:	fb92 f3f3 	sdiv	r3, r2, r3
 8011a78:	ee13 2a10 	vmov	r2, s6
 8011a7c:	9311      	str	r3, [sp, #68]	; 0x44
 8011a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a80:	eeb0 3a67 	vmov.f32	s6, s15
 8011a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8011a88:	9312      	str	r3, [sp, #72]	; 0x48
 8011a8a:	9b01      	ldr	r3, [sp, #4]
 8011a8c:	9a03      	ldr	r2, [sp, #12]
 8011a8e:	3b01      	subs	r3, #1
 8011a90:	9301      	str	r3, [sp, #4]
 8011a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a94:	bf08      	it	eq
 8011a96:	4613      	moveq	r3, r2
 8011a98:	e73a      	b.n	8011910 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8011a9a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8011a9e:	d44e      	bmi.n	8011b3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8011aa0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011aa4:	4556      	cmp	r6, sl
 8011aa6:	dd4a      	ble.n	8011b3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8011aa8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8011aac:	d447      	bmi.n	8011b3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8011aae:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8011ab2:	4559      	cmp	r1, fp
 8011ab4:	dd43      	ble.n	8011b3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8011ab6:	fa0f f986 	sxth.w	r9, r6
 8011aba:	9902      	ldr	r1, [sp, #8]
 8011abc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8011ac0:	fb0b 1909 	mla	r9, fp, r9, r1
 8011ac4:	f814 b006 	ldrb.w	fp, [r4, r6]
 8011ac8:	f819 900a 	ldrb.w	r9, [r9, sl]
 8011acc:	fb1b fb05 	smulbb	fp, fp, r5
 8011ad0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8011ad4:	eb0e 0a09 	add.w	sl, lr, r9
 8011ad8:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8011adc:	fb09 b908 	mla	r9, r9, r8, fp
 8011ae0:	fa1f f989 	uxth.w	r9, r9
 8011ae4:	f109 0b01 	add.w	fp, r9, #1
 8011ae8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011aec:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011af0:	f804 9006 	strb.w	r9, [r4, r6]
 8011af4:	4426      	add	r6, r4
 8011af6:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8011afa:	f896 b001 	ldrb.w	fp, [r6, #1]
 8011afe:	fb1b fb05 	smulbb	fp, fp, r5
 8011b02:	fb09 b908 	mla	r9, r9, r8, fp
 8011b06:	fa1f f989 	uxth.w	r9, r9
 8011b0a:	f109 0b01 	add.w	fp, r9, #1
 8011b0e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011b12:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011b16:	f886 9001 	strb.w	r9, [r6, #1]
 8011b1a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8011b1e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8011b22:	fb1a fa05 	smulbb	sl, sl, r5
 8011b26:	fb09 a908 	mla	r9, r9, r8, sl
 8011b2a:	fa1f f989 	uxth.w	r9, r9
 8011b2e:	f109 0a01 	add.w	sl, r9, #1
 8011b32:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8011b36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011b3a:	f886 9002 	strb.w	r9, [r6, #2]
 8011b3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011b40:	3701      	adds	r7, #1
 8011b42:	4408      	add	r0, r1
 8011b44:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011b46:	440a      	add	r2, r1
 8011b48:	e761      	b.n	8011a0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8011b4a:	b005      	add	sp, #20
 8011b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b50 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011b56:	4693      	mov	fp, r2
 8011b58:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b5e:	6868      	ldr	r0, [r5, #4]
 8011b60:	6877      	ldr	r7, [r6, #4]
 8011b62:	9100      	str	r1, [sp, #0]
 8011b64:	3704      	adds	r7, #4
 8011b66:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8011b6a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8011b6e:	fb00 2404 	mla	r4, r0, r4, r2
 8011b72:	682a      	ldr	r2, [r5, #0]
 8011b74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011b78:	4414      	add	r4, r2
 8011b7a:	6832      	ldr	r2, [r6, #0]
 8011b7c:	9201      	str	r2, [sp, #4]
 8011b7e:	9a00      	ldr	r2, [sp, #0]
 8011b80:	2a00      	cmp	r2, #0
 8011b82:	dc03      	bgt.n	8011b8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8011b84:	f1bb 0f00 	cmp.w	fp, #0
 8011b88:	f340 80bc 	ble.w	8011d04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8011b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b8e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8011b92:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b98:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8011b9c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	dd0c      	ble.n	8011bbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011ba4:	1405      	asrs	r5, r0, #16
 8011ba6:	d405      	bmi.n	8011bb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8011ba8:	4555      	cmp	r5, sl
 8011baa:	da03      	bge.n	8011bb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8011bac:	1415      	asrs	r5, r2, #16
 8011bae:	d401      	bmi.n	8011bb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8011bb0:	454d      	cmp	r5, r9
 8011bb2:	db05      	blt.n	8011bc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011bb4:	4440      	add	r0, r8
 8011bb6:	4472      	add	r2, lr
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	3403      	adds	r4, #3
 8011bbc:	e7f0      	b.n	8011ba0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8011bbe:	d03f      	beq.n	8011c40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8011bc0:	1e5d      	subs	r5, r3, #1
 8011bc2:	fb08 0c05 	mla	ip, r8, r5, r0
 8011bc6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8011bca:	d42e      	bmi.n	8011c2a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8011bcc:	45d4      	cmp	ip, sl
 8011bce:	da2c      	bge.n	8011c2a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8011bd0:	fb0e 2505 	mla	r5, lr, r5, r2
 8011bd4:	142d      	asrs	r5, r5, #16
 8011bd6:	d428      	bmi.n	8011c2a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8011bd8:	454d      	cmp	r5, r9
 8011bda:	da26      	bge.n	8011c2a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8011bdc:	1ce5      	adds	r5, r4, #3
 8011bde:	469c      	mov	ip, r3
 8011be0:	f1bc 0f00 	cmp.w	ip, #0
 8011be4:	f105 0503 	add.w	r5, r5, #3
 8011be8:	dd25      	ble.n	8011c36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8011bea:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011bee:	ea4f 4922 	mov.w	r9, r2, asr #16
 8011bf2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011bf6:	4472      	add	r2, lr
 8011bf8:	468a      	mov	sl, r1
 8011bfa:	9901      	ldr	r1, [sp, #4]
 8011bfc:	fb0a 1909 	mla	r9, sl, r9, r1
 8011c00:	1401      	asrs	r1, r0, #16
 8011c02:	4440      	add	r0, r8
 8011c04:	f819 9001 	ldrb.w	r9, [r9, r1]
 8011c08:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8011c0c:	eb07 0a09 	add.w	sl, r7, r9
 8011c10:	f817 9009 	ldrb.w	r9, [r7, r9]
 8011c14:	f805 9c06 	strb.w	r9, [r5, #-6]
 8011c18:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8011c1c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8011c20:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8011c24:	f805 9c04 	strb.w	r9, [r5, #-4]
 8011c28:	e7da      	b.n	8011be0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8011c2a:	2500      	movs	r5, #0
 8011c2c:	eba3 0c05 	sub.w	ip, r3, r5
 8011c30:	f1bc 0f00 	cmp.w	ip, #0
 8011c34:	dc3b      	bgt.n	8011cae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8011c36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011c3e:	441c      	add	r4, r3
 8011c40:	9b00      	ldr	r3, [sp, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	dd5e      	ble.n	8011d04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8011c46:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011c50:	eeb0 6a62 	vmov.f32	s12, s5
 8011c54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011c58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011c5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011c60:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8011c64:	eeb0 6a43 	vmov.f32	s12, s6
 8011c68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011c6c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011c70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011c74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011c78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011c7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011c80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011c84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011c88:	ee12 2a90 	vmov	r2, s5
 8011c8c:	eef0 2a47 	vmov.f32	s5, s14
 8011c90:	fb92 f8f3 	sdiv	r8, r2, r3
 8011c94:	ee13 2a10 	vmov	r2, s6
 8011c98:	eeb0 3a67 	vmov.f32	s6, s15
 8011c9c:	fb92 fef3 	sdiv	lr, r2, r3
 8011ca0:	9b00      	ldr	r3, [sp, #0]
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ca8:	bf08      	it	eq
 8011caa:	465b      	moveq	r3, fp
 8011cac:	e767      	b.n	8011b7e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8011cae:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011cb2:	d423      	bmi.n	8011cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8011cb4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8011cb8:	45cc      	cmp	ip, r9
 8011cba:	dd1f      	ble.n	8011cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8011cbc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8011cc0:	d41c      	bmi.n	8011cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8011cc2:	68f1      	ldr	r1, [r6, #12]
 8011cc4:	4551      	cmp	r1, sl
 8011cc6:	dd19      	ble.n	8011cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8011cc8:	fa0f fc8c 	sxth.w	ip, ip
 8011ccc:	9901      	ldr	r1, [sp, #4]
 8011cce:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8011cd2:	f81c c009 	ldrb.w	ip, [ip, r9]
 8011cd6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8011cda:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8011cde:	eb07 090c 	add.w	r9, r7, ip
 8011ce2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8011ce6:	f804 a00c 	strb.w	sl, [r4, ip]
 8011cea:	44a4      	add	ip, r4
 8011cec:	f899 a001 	ldrb.w	sl, [r9, #1]
 8011cf0:	f88c a001 	strb.w	sl, [ip, #1]
 8011cf4:	f899 9002 	ldrb.w	r9, [r9, #2]
 8011cf8:	f88c 9002 	strb.w	r9, [ip, #2]
 8011cfc:	4440      	add	r0, r8
 8011cfe:	4472      	add	r2, lr
 8011d00:	3501      	adds	r5, #1
 8011d02:	e793      	b.n	8011c2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8011d04:	b003      	add	sp, #12
 8011d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d0a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d0e:	b085      	sub	sp, #20
 8011d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011d14:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011d16:	9202      	str	r2, [sp, #8]
 8011d18:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8011d1c:	6860      	ldr	r0, [r4, #4]
 8011d1e:	9203      	str	r2, [sp, #12]
 8011d20:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011d24:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8011d28:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8011d2c:	fb00 2505 	mla	r5, r0, r5, r2
 8011d30:	6822      	ldr	r2, [r4, #0]
 8011d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d36:	4415      	add	r5, r2
 8011d38:	f8dc 2000 	ldr.w	r2, [ip]
 8011d3c:	9200      	str	r2, [sp, #0]
 8011d3e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011d42:	3204      	adds	r2, #4
 8011d44:	9201      	str	r2, [sp, #4]
 8011d46:	2900      	cmp	r1, #0
 8011d48:	dc03      	bgt.n	8011d52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8011d4a:	9a02      	ldr	r2, [sp, #8]
 8011d4c:	2a00      	cmp	r2, #0
 8011d4e:	f340 8127 	ble.w	8011fa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8011d52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d54:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011d58:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d5e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011d62:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	dd0d      	ble.n	8011d86 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8011d6a:	1422      	asrs	r2, r4, #16
 8011d6c:	d405      	bmi.n	8011d7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011d6e:	4542      	cmp	r2, r8
 8011d70:	da03      	bge.n	8011d7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011d72:	1402      	asrs	r2, r0, #16
 8011d74:	d401      	bmi.n	8011d7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011d76:	42ba      	cmp	r2, r7
 8011d78:	db06      	blt.n	8011d88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8011d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d7c:	4474      	add	r4, lr
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	3503      	adds	r5, #3
 8011d82:	4410      	add	r0, r2
 8011d84:	e7ef      	b.n	8011d66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011d86:	d075      	beq.n	8011e74 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8011d88:	1e5a      	subs	r2, r3, #1
 8011d8a:	fb0e 4602 	mla	r6, lr, r2, r4
 8011d8e:	1436      	asrs	r6, r6, #16
 8011d90:	d465      	bmi.n	8011e5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8011d92:	4546      	cmp	r6, r8
 8011d94:	da63      	bge.n	8011e5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8011d96:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011d98:	fb06 0202 	mla	r2, r6, r2, r0
 8011d9c:	1412      	asrs	r2, r2, #16
 8011d9e:	d45e      	bmi.n	8011e5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8011da0:	42ba      	cmp	r2, r7
 8011da2:	da5c      	bge.n	8011e5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8011da4:	1cef      	adds	r7, r5, #3
 8011da6:	4699      	mov	r9, r3
 8011da8:	f1b9 0f00 	cmp.w	r9, #0
 8011dac:	dd5d      	ble.n	8011e6a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8011dae:	1402      	asrs	r2, r0, #16
 8011db0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011db4:	1426      	asrs	r6, r4, #16
 8011db6:	4692      	mov	sl, r2
 8011db8:	9a00      	ldr	r2, [sp, #0]
 8011dba:	fb08 220a 	mla	r2, r8, sl, r2
 8011dbe:	5d92      	ldrb	r2, [r2, r6]
 8011dc0:	9e01      	ldr	r6, [sp, #4]
 8011dc2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8011dc6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8011dca:	d041      	beq.n	8011e50 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011dcc:	9a03      	ldr	r2, [sp, #12]
 8011dce:	fa5f fb86 	uxtb.w	fp, r6
 8011dd2:	fb02 f808 	mul.w	r8, r2, r8
 8011dd6:	f108 0201 	add.w	r2, r8, #1
 8011dda:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8011dde:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8011de2:	1212      	asrs	r2, r2, #8
 8011de4:	fa1f fa82 	uxth.w	sl, r2
 8011de8:	43d2      	mvns	r2, r2
 8011dea:	fb1b fb0a 	smulbb	fp, fp, sl
 8011dee:	b2d2      	uxtb	r2, r2
 8011df0:	fb08 b802 	mla	r8, r8, r2, fp
 8011df4:	fa1f f888 	uxth.w	r8, r8
 8011df8:	f108 0b01 	add.w	fp, r8, #1
 8011dfc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011e00:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8011e04:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8011e08:	fb1b fb0a 	smulbb	fp, fp, sl
 8011e0c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011e10:	fb16 fa0a 	smulbb	sl, r6, sl
 8011e14:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8011e18:	f807 8c03 	strb.w	r8, [r7, #-3]
 8011e1c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8011e20:	fb06 aa02 	mla	sl, r6, r2, sl
 8011e24:	fb08 b802 	mla	r8, r8, r2, fp
 8011e28:	fa1f fa8a 	uxth.w	sl, sl
 8011e2c:	fa1f f888 	uxth.w	r8, r8
 8011e30:	f10a 0601 	add.w	r6, sl, #1
 8011e34:	f108 0b01 	add.w	fp, r8, #1
 8011e38:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8011e3c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011e40:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011e44:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011e48:	f807 ac01 	strb.w	sl, [r7, #-1]
 8011e4c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8011e50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011e52:	4474      	add	r4, lr
 8011e54:	3703      	adds	r7, #3
 8011e56:	f109 39ff 	add.w	r9, r9, #4294967295
 8011e5a:	4410      	add	r0, r2
 8011e5c:	e7a4      	b.n	8011da8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8011e5e:	f04f 0800 	mov.w	r8, #0
 8011e62:	eba3 0208 	sub.w	r2, r3, r8
 8011e66:	2a00      	cmp	r2, #0
 8011e68:	dc3b      	bgt.n	8011ee2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8011e6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011e72:	441d      	add	r5, r3
 8011e74:	2900      	cmp	r1, #0
 8011e76:	f340 8093 	ble.w	8011fa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8011e7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011e84:	3901      	subs	r1, #1
 8011e86:	eeb0 6a62 	vmov.f32	s12, s5
 8011e8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011e8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011e92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011e96:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011e9a:	eeb0 6a43 	vmov.f32	s12, s6
 8011e9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011ea2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011ea6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011eaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011eae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011eb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011eb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011eba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011ebe:	ee12 2a90 	vmov	r2, s5
 8011ec2:	eef0 2a47 	vmov.f32	s5, s14
 8011ec6:	fb92 fef3 	sdiv	lr, r2, r3
 8011eca:	ee13 2a10 	vmov	r2, s6
 8011ece:	eeb0 3a67 	vmov.f32	s6, s15
 8011ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ed6:	9a02      	ldr	r2, [sp, #8]
 8011ed8:	9312      	str	r3, [sp, #72]	; 0x48
 8011eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011edc:	bf08      	it	eq
 8011ede:	4613      	moveq	r3, r2
 8011ee0:	e731      	b.n	8011d46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8011ee2:	1427      	asrs	r7, r4, #16
 8011ee4:	d456      	bmi.n	8011f94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011ee6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011eea:	42be      	cmp	r6, r7
 8011eec:	dd52      	ble.n	8011f94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011eee:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011ef2:	d44f      	bmi.n	8011f94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011ef4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011ef8:	454a      	cmp	r2, r9
 8011efa:	dd4b      	ble.n	8011f94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011efc:	9a00      	ldr	r2, [sp, #0]
 8011efe:	b236      	sxth	r6, r6
 8011f00:	fb09 2606 	mla	r6, r9, r6, r2
 8011f04:	5df2      	ldrb	r2, [r6, r7]
 8011f06:	9e01      	ldr	r6, [sp, #4]
 8011f08:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8011f0c:	0e3a      	lsrs	r2, r7, #24
 8011f0e:	d041      	beq.n	8011f94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011f10:	9e03      	ldr	r6, [sp, #12]
 8011f12:	fa5f fb87 	uxtb.w	fp, r7
 8011f16:	4372      	muls	r2, r6
 8011f18:	1c56      	adds	r6, r2, #1
 8011f1a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8011f1e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8011f22:	1212      	asrs	r2, r2, #8
 8011f24:	f815 9006 	ldrb.w	r9, [r5, r6]
 8011f28:	fa1f fa82 	uxth.w	sl, r2
 8011f2c:	43d2      	mvns	r2, r2
 8011f2e:	fb1b fb0a 	smulbb	fp, fp, sl
 8011f32:	b2d2      	uxtb	r2, r2
 8011f34:	fb09 b902 	mla	r9, r9, r2, fp
 8011f38:	fa1f f989 	uxth.w	r9, r9
 8011f3c:	f109 0b01 	add.w	fp, r9, #1
 8011f40:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011f44:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8011f48:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8011f4c:	fb1b fb0a 	smulbb	fp, fp, sl
 8011f50:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011f54:	fb17 fa0a 	smulbb	sl, r7, sl
 8011f58:	f805 9006 	strb.w	r9, [r5, r6]
 8011f5c:	442e      	add	r6, r5
 8011f5e:	78b7      	ldrb	r7, [r6, #2]
 8011f60:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011f64:	fb07 aa02 	mla	sl, r7, r2, sl
 8011f68:	fb09 b902 	mla	r9, r9, r2, fp
 8011f6c:	fa1f fa8a 	uxth.w	sl, sl
 8011f70:	fa1f f989 	uxth.w	r9, r9
 8011f74:	f10a 0701 	add.w	r7, sl, #1
 8011f78:	f109 0b01 	add.w	fp, r9, #1
 8011f7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011f80:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011f84:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011f88:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011f8c:	f886 a002 	strb.w	sl, [r6, #2]
 8011f90:	f886 9001 	strb.w	r9, [r6, #1]
 8011f94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011f96:	4474      	add	r4, lr
 8011f98:	f108 0801 	add.w	r8, r8, #1
 8011f9c:	4410      	add	r0, r2
 8011f9e:	e760      	b.n	8011e62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8011fa0:	b005      	add	sp, #20
 8011fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011fa6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011fa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011faa:	b085      	sub	sp, #20
 8011fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011fb0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011fb2:	9203      	str	r2, [sp, #12]
 8011fb4:	6868      	ldr	r0, [r5, #4]
 8011fb6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011fba:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8011fbe:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8011fc2:	fb00 2404 	mla	r4, r0, r4, r2
 8011fc6:	682a      	ldr	r2, [r5, #0]
 8011fc8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011fcc:	4414      	add	r4, r2
 8011fce:	f8dc 2000 	ldr.w	r2, [ip]
 8011fd2:	9201      	str	r2, [sp, #4]
 8011fd4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011fd8:	3204      	adds	r2, #4
 8011fda:	9202      	str	r2, [sp, #8]
 8011fdc:	2900      	cmp	r1, #0
 8011fde:	dc03      	bgt.n	8011fe8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8011fe0:	9a03      	ldr	r2, [sp, #12]
 8011fe2:	2a00      	cmp	r2, #0
 8011fe4:	f340 8137 	ble.w	8012256 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fea:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011fee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011ff2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011ff4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011ff8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	dd0d      	ble.n	801201c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8012000:	1405      	asrs	r5, r0, #16
 8012002:	d405      	bmi.n	8012010 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8012004:	4545      	cmp	r5, r8
 8012006:	da03      	bge.n	8012010 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8012008:	1415      	asrs	r5, r2, #16
 801200a:	d401      	bmi.n	8012010 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801200c:	42bd      	cmp	r5, r7
 801200e:	db06      	blt.n	801201e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8012010:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012012:	4470      	add	r0, lr
 8012014:	3b01      	subs	r3, #1
 8012016:	3403      	adds	r4, #3
 8012018:	442a      	add	r2, r5
 801201a:	e7ef      	b.n	8011ffc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801201c:	d070      	beq.n	8012100 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801201e:	1e5d      	subs	r5, r3, #1
 8012020:	fb0e 0605 	mla	r6, lr, r5, r0
 8012024:	1436      	asrs	r6, r6, #16
 8012026:	d462      	bmi.n	80120ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8012028:	4546      	cmp	r6, r8
 801202a:	da60      	bge.n	80120ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801202c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801202e:	fb06 2505 	mla	r5, r6, r5, r2
 8012032:	142d      	asrs	r5, r5, #16
 8012034:	d45b      	bmi.n	80120ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8012036:	42bd      	cmp	r5, r7
 8012038:	da59      	bge.n	80120ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801203a:	1ce5      	adds	r5, r4, #3
 801203c:	469a      	mov	sl, r3
 801203e:	f1ba 0f00 	cmp.w	sl, #0
 8012042:	dd58      	ble.n	80120f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8012044:	1416      	asrs	r6, r2, #16
 8012046:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801204a:	1407      	asrs	r7, r0, #16
 801204c:	46b1      	mov	r9, r6
 801204e:	9e01      	ldr	r6, [sp, #4]
 8012050:	fb08 6609 	mla	r6, r8, r9, r6
 8012054:	5df6      	ldrb	r6, [r6, r7]
 8012056:	9f02      	ldr	r7, [sp, #8]
 8012058:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801205c:	0e37      	lsrs	r7, r6, #24
 801205e:	2fff      	cmp	r7, #255	; 0xff
 8012060:	f000 80f0 	beq.w	8012244 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8012064:	fa5f f887 	uxtb.w	r8, r7
 8012068:	b3d7      	cbz	r7, 80120e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801206a:	fa1f f788 	uxth.w	r7, r8
 801206e:	ea6f 0808 	mvn.w	r8, r8
 8012072:	fa5f fb86 	uxtb.w	fp, r6
 8012076:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801207a:	fa5f f888 	uxtb.w	r8, r8
 801207e:	fb1b fb07 	smulbb	fp, fp, r7
 8012082:	fb09 b908 	mla	r9, r9, r8, fp
 8012086:	fa1f f989 	uxth.w	r9, r9
 801208a:	f109 0b01 	add.w	fp, r9, #1
 801208e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012092:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8012096:	fb1b fb08 	smulbb	fp, fp, r8
 801209a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801209e:	f805 9c03 	strb.w	r9, [r5, #-3]
 80120a2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80120a6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80120aa:	fb09 b907 	mla	r9, r9, r7, fp
 80120ae:	fa1f f989 	uxth.w	r9, r9
 80120b2:	f109 0b01 	add.w	fp, r9, #1
 80120b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80120ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80120be:	f805 9c02 	strb.w	r9, [r5, #-2]
 80120c2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80120c6:	fb19 f808 	smulbb	r8, r9, r8
 80120ca:	fb06 8607 	mla	r6, r6, r7, r8
 80120ce:	b2b6      	uxth	r6, r6
 80120d0:	f106 0801 	add.w	r8, r6, #1
 80120d4:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80120d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80120dc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80120e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80120e2:	4470      	add	r0, lr
 80120e4:	3503      	adds	r5, #3
 80120e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120ea:	4432      	add	r2, r6
 80120ec:	e7a7      	b.n	801203e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80120ee:	2600      	movs	r6, #0
 80120f0:	1b9d      	subs	r5, r3, r6
 80120f2:	2d00      	cmp	r5, #0
 80120f4:	dc3b      	bgt.n	801216e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80120f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80120fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80120fe:	441c      	add	r4, r3
 8012100:	2900      	cmp	r1, #0
 8012102:	f340 80a8 	ble.w	8012256 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012106:	ee30 0a04 	vadd.f32	s0, s0, s8
 801210a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801210c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012110:	3901      	subs	r1, #1
 8012112:	eeb0 6a62 	vmov.f32	s12, s5
 8012116:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801211a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801211e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012122:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8012126:	eeb0 6a43 	vmov.f32	s12, s6
 801212a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801212e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012132:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012136:	ee61 7a27 	vmul.f32	s15, s2, s15
 801213a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801213e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012142:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012146:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801214a:	ee12 2a90 	vmov	r2, s5
 801214e:	eef0 2a47 	vmov.f32	s5, s14
 8012152:	fb92 fef3 	sdiv	lr, r2, r3
 8012156:	ee13 2a10 	vmov	r2, s6
 801215a:	eeb0 3a67 	vmov.f32	s6, s15
 801215e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012162:	9a03      	ldr	r2, [sp, #12]
 8012164:	9312      	str	r3, [sp, #72]	; 0x48
 8012166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012168:	bf08      	it	eq
 801216a:	4613      	moveq	r3, r2
 801216c:	e736      	b.n	8011fdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801216e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8012172:	d457      	bmi.n	8012224 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012174:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8012178:	4547      	cmp	r7, r8
 801217a:	dd53      	ble.n	8012224 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801217c:	ea5f 4922 	movs.w	r9, r2, asr #16
 8012180:	d450      	bmi.n	8012224 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012182:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8012186:	454d      	cmp	r5, r9
 8012188:	dd4c      	ble.n	8012224 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801218a:	9d01      	ldr	r5, [sp, #4]
 801218c:	b23f      	sxth	r7, r7
 801218e:	fb09 5707 	mla	r7, r9, r7, r5
 8012192:	f817 5008 	ldrb.w	r5, [r7, r8]
 8012196:	9f02      	ldr	r7, [sp, #8]
 8012198:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801219c:	0e2f      	lsrs	r7, r5, #24
 801219e:	2fff      	cmp	r7, #255	; 0xff
 80121a0:	d045      	beq.n	801222e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80121a2:	fa5f f987 	uxtb.w	r9, r7
 80121a6:	b3ef      	cbz	r7, 8012224 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80121a8:	fa1f f889 	uxth.w	r8, r9
 80121ac:	ea6f 0909 	mvn.w	r9, r9
 80121b0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80121b4:	fa5f fb85 	uxtb.w	fp, r5
 80121b8:	f814 a007 	ldrb.w	sl, [r4, r7]
 80121bc:	fa5f f989 	uxtb.w	r9, r9
 80121c0:	fb1b fb08 	smulbb	fp, fp, r8
 80121c4:	fb0a ba09 	mla	sl, sl, r9, fp
 80121c8:	fa1f fa8a 	uxth.w	sl, sl
 80121cc:	f10a 0b01 	add.w	fp, sl, #1
 80121d0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80121d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80121d8:	f804 a007 	strb.w	sl, [r4, r7]
 80121dc:	4427      	add	r7, r4
 80121de:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80121e2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80121e6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80121ea:	fb1b fb09 	smulbb	fp, fp, r9
 80121ee:	fb0a ba08 	mla	sl, sl, r8, fp
 80121f2:	fa1f fa8a 	uxth.w	sl, sl
 80121f6:	f10a 0b01 	add.w	fp, sl, #1
 80121fa:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80121fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012202:	f887 a001 	strb.w	sl, [r7, #1]
 8012206:	f897 a002 	ldrb.w	sl, [r7, #2]
 801220a:	fb1a f909 	smulbb	r9, sl, r9
 801220e:	fb05 9508 	mla	r5, r5, r8, r9
 8012212:	b2ad      	uxth	r5, r5
 8012214:	f105 0901 	add.w	r9, r5, #1
 8012218:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801221c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012220:	f887 9002 	strb.w	r9, [r7, #2]
 8012224:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012226:	4470      	add	r0, lr
 8012228:	3601      	adds	r6, #1
 801222a:	442a      	add	r2, r5
 801222c:	e760      	b.n	80120f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801222e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8012232:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8012236:	55e5      	strb	r5, [r4, r7]
 8012238:	4427      	add	r7, r4
 801223a:	0c2d      	lsrs	r5, r5, #16
 801223c:	f887 8001 	strb.w	r8, [r7, #1]
 8012240:	70bd      	strb	r5, [r7, #2]
 8012242:	e7ef      	b.n	8012224 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8012244:	0a37      	lsrs	r7, r6, #8
 8012246:	f805 6c03 	strb.w	r6, [r5, #-3]
 801224a:	0c36      	lsrs	r6, r6, #16
 801224c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8012250:	f805 6c01 	strb.w	r6, [r5, #-1]
 8012254:	e744      	b.n	80120e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8012256:	b005      	add	sp, #20
 8012258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801225c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801225c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012260:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012262:	9201      	str	r2, [sp, #4]
 8012264:	6870      	ldr	r0, [r6, #4]
 8012266:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801226a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801226e:	fa1f fe85 	uxth.w	lr, r5
 8012272:	43ed      	mvns	r5, r5
 8012274:	f8dc 8000 	ldr.w	r8, [ip]
 8012278:	b2ed      	uxtb	r5, r5
 801227a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801227e:	fb00 2404 	mla	r4, r0, r4, r2
 8012282:	6832      	ldr	r2, [r6, #0]
 8012284:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012288:	4414      	add	r4, r2
 801228a:	2900      	cmp	r1, #0
 801228c:	dc03      	bgt.n	8012296 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801228e:	9a01      	ldr	r2, [sp, #4]
 8012290:	2a00      	cmp	r2, #0
 8012292:	f340 810d 	ble.w	80124b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8012296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012298:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801229c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80122a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122a2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80122a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	dd0e      	ble.n	80122cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80122ae:	1406      	asrs	r6, r0, #16
 80122b0:	d405      	bmi.n	80122be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80122b2:	4556      	cmp	r6, sl
 80122b4:	da03      	bge.n	80122be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80122b6:	1416      	asrs	r6, r2, #16
 80122b8:	d401      	bmi.n	80122be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80122ba:	454e      	cmp	r6, r9
 80122bc:	db07      	blt.n	80122ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80122be:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80122c0:	3b01      	subs	r3, #1
 80122c2:	3403      	adds	r4, #3
 80122c4:	4430      	add	r0, r6
 80122c6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80122c8:	4432      	add	r2, r6
 80122ca:	e7ee      	b.n	80122aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80122cc:	d060      	beq.n	8012390 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80122ce:	1e5e      	subs	r6, r3, #1
 80122d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80122d2:	fb07 0706 	mla	r7, r7, r6, r0
 80122d6:	143f      	asrs	r7, r7, #16
 80122d8:	d451      	bmi.n	801237e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80122da:	4557      	cmp	r7, sl
 80122dc:	da4f      	bge.n	801237e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80122de:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80122e0:	fb07 2606 	mla	r6, r7, r6, r2
 80122e4:	1436      	asrs	r6, r6, #16
 80122e6:	d44a      	bmi.n	801237e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80122e8:	454e      	cmp	r6, r9
 80122ea:	da48      	bge.n	801237e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80122ec:	1ce6      	adds	r6, r4, #3
 80122ee:	4699      	mov	r9, r3
 80122f0:	f1b9 0f00 	cmp.w	r9, #0
 80122f4:	f106 0603 	add.w	r6, r6, #3
 80122f8:	dd45      	ble.n	8012386 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80122fa:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80122fe:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8012302:	1417      	asrs	r7, r2, #16
 8012304:	f109 39ff 	add.w	r9, r9, #4294967295
 8012308:	fb0b a707 	mla	r7, fp, r7, sl
 801230c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8012310:	fb1b fb05 	smulbb	fp, fp, r5
 8012314:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012318:	eb08 0a07 	add.w	sl, r8, r7
 801231c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8012320:	fb07 b70e 	mla	r7, r7, lr, fp
 8012324:	b2bf      	uxth	r7, r7
 8012326:	f107 0b01 	add.w	fp, r7, #1
 801232a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801232e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8012332:	fb1b fb05 	smulbb	fp, fp, r5
 8012336:	123f      	asrs	r7, r7, #8
 8012338:	f806 7c06 	strb.w	r7, [r6, #-6]
 801233c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8012340:	fb07 b70e 	mla	r7, r7, lr, fp
 8012344:	b2bf      	uxth	r7, r7
 8012346:	f107 0b01 	add.w	fp, r7, #1
 801234a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801234e:	123f      	asrs	r7, r7, #8
 8012350:	f806 7c05 	strb.w	r7, [r6, #-5]
 8012354:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8012358:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801235c:	fb1a fa05 	smulbb	sl, sl, r5
 8012360:	fb07 a70e 	mla	r7, r7, lr, sl
 8012364:	b2bf      	uxth	r7, r7
 8012366:	f107 0a01 	add.w	sl, r7, #1
 801236a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801236e:	123f      	asrs	r7, r7, #8
 8012370:	f806 7c04 	strb.w	r7, [r6, #-4]
 8012374:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012376:	4438      	add	r0, r7
 8012378:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801237a:	443a      	add	r2, r7
 801237c:	e7b8      	b.n	80122f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801237e:	2700      	movs	r7, #0
 8012380:	1bde      	subs	r6, r3, r7
 8012382:	2e00      	cmp	r6, #0
 8012384:	dc3f      	bgt.n	8012406 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8012386:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801238a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801238e:	441c      	add	r4, r3
 8012390:	2900      	cmp	r1, #0
 8012392:	f340 808d 	ble.w	80124b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8012396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801239a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801239c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80123a0:	3901      	subs	r1, #1
 80123a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80123a6:	eef0 6a62 	vmov.f32	s13, s5
 80123aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80123ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80123b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80123b6:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80123ba:	eef0 6a43 	vmov.f32	s13, s6
 80123be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80123c2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80123c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80123ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80123ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80123d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80123d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80123da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80123de:	ee12 2a90 	vmov	r2, s5
 80123e2:	eef0 2a47 	vmov.f32	s5, s14
 80123e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80123ea:	ee13 2a10 	vmov	r2, s6
 80123ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80123f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123f2:	eeb0 3a67 	vmov.f32	s6, s15
 80123f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80123fa:	9a01      	ldr	r2, [sp, #4]
 80123fc:	9310      	str	r3, [sp, #64]	; 0x40
 80123fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012400:	bf08      	it	eq
 8012402:	4613      	moveq	r3, r2
 8012404:	e741      	b.n	801228a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8012406:	ea5f 4920 	movs.w	r9, r0, asr #16
 801240a:	d44b      	bmi.n	80124a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801240c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8012410:	45cb      	cmp	fp, r9
 8012412:	dd47      	ble.n	80124a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8012414:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8012418:	d444      	bmi.n	80124a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801241a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801241e:	4556      	cmp	r6, sl
 8012420:	dd40      	ble.n	80124a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8012422:	fa0f f68b 	sxth.w	r6, fp
 8012426:	fb0a 9906 	mla	r9, sl, r6, r9
 801242a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801242e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012432:	f814 b006 	ldrb.w	fp, [r4, r6]
 8012436:	fb1b fb05 	smulbb	fp, fp, r5
 801243a:	eb08 0a09 	add.w	sl, r8, r9
 801243e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8012442:	fb09 b90e 	mla	r9, r9, lr, fp
 8012446:	fa1f f989 	uxth.w	r9, r9
 801244a:	f109 0b01 	add.w	fp, r9, #1
 801244e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012452:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012456:	f804 9006 	strb.w	r9, [r4, r6]
 801245a:	4426      	add	r6, r4
 801245c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012460:	f896 b001 	ldrb.w	fp, [r6, #1]
 8012464:	fb1b fb05 	smulbb	fp, fp, r5
 8012468:	fb09 b90e 	mla	r9, r9, lr, fp
 801246c:	fa1f f989 	uxth.w	r9, r9
 8012470:	f109 0b01 	add.w	fp, r9, #1
 8012474:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012478:	ea4f 2929 	mov.w	r9, r9, asr #8
 801247c:	f886 9001 	strb.w	r9, [r6, #1]
 8012480:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012484:	f896 a002 	ldrb.w	sl, [r6, #2]
 8012488:	fb1a fa05 	smulbb	sl, sl, r5
 801248c:	fb09 a90e 	mla	r9, r9, lr, sl
 8012490:	fa1f f989 	uxth.w	r9, r9
 8012494:	f109 0a01 	add.w	sl, r9, #1
 8012498:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801249c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80124a0:	f886 9002 	strb.w	r9, [r6, #2]
 80124a4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80124a6:	3701      	adds	r7, #1
 80124a8:	4430      	add	r0, r6
 80124aa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80124ac:	4432      	add	r2, r6
 80124ae:	e767      	b.n	8012380 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80124b0:	b003      	add	sp, #12
 80124b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80124b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80124bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80124c0:	9201      	str	r2, [sp, #4]
 80124c2:	6868      	ldr	r0, [r5, #4]
 80124c4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80124c6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80124ca:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80124ce:	fb00 2404 	mla	r4, r0, r4, r2
 80124d2:	682a      	ldr	r2, [r5, #0]
 80124d4:	f8d7 8000 	ldr.w	r8, [r7]
 80124d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80124dc:	4414      	add	r4, r2
 80124de:	2900      	cmp	r1, #0
 80124e0:	dc03      	bgt.n	80124ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80124e2:	9a01      	ldr	r2, [sp, #4]
 80124e4:	2a00      	cmp	r2, #0
 80124e6:	f340 80af 	ble.w	8012648 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80124ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124ec:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80124f0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80124f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124f6:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80124fa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80124fe:	2b00      	cmp	r3, #0
 8012500:	dd0c      	ble.n	801251c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8012502:	1405      	asrs	r5, r0, #16
 8012504:	d405      	bmi.n	8012512 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8012506:	4555      	cmp	r5, sl
 8012508:	da03      	bge.n	8012512 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801250a:	1415      	asrs	r5, r2, #16
 801250c:	d401      	bmi.n	8012512 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801250e:	454d      	cmp	r5, r9
 8012510:	db05      	blt.n	801251e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8012512:	4470      	add	r0, lr
 8012514:	4462      	add	r2, ip
 8012516:	3b01      	subs	r3, #1
 8012518:	3403      	adds	r4, #3
 801251a:	e7f0      	b.n	80124fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801251c:	d038      	beq.n	8012590 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801251e:	1e5d      	subs	r5, r3, #1
 8012520:	fb0e 0605 	mla	r6, lr, r5, r0
 8012524:	1436      	asrs	r6, r6, #16
 8012526:	d42a      	bmi.n	801257e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8012528:	4556      	cmp	r6, sl
 801252a:	da28      	bge.n	801257e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801252c:	fb0c 2505 	mla	r5, ip, r5, r2
 8012530:	142d      	asrs	r5, r5, #16
 8012532:	d424      	bmi.n	801257e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8012534:	454d      	cmp	r5, r9
 8012536:	da22      	bge.n	801257e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8012538:	1ce6      	adds	r6, r4, #3
 801253a:	4699      	mov	r9, r3
 801253c:	f1b9 0f00 	cmp.w	r9, #0
 8012540:	f106 0603 	add.w	r6, r6, #3
 8012544:	dd1f      	ble.n	8012586 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8012546:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801254a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801254e:	1415      	asrs	r5, r2, #16
 8012550:	4470      	add	r0, lr
 8012552:	4462      	add	r2, ip
 8012554:	f109 39ff 	add.w	r9, r9, #4294967295
 8012558:	fb0b a505 	mla	r5, fp, r5, sl
 801255c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012560:	eb08 0a05 	add.w	sl, r8, r5
 8012564:	f818 5005 	ldrb.w	r5, [r8, r5]
 8012568:	f806 5c06 	strb.w	r5, [r6, #-6]
 801256c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8012570:	f806 5c05 	strb.w	r5, [r6, #-5]
 8012574:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8012578:	f806 5c04 	strb.w	r5, [r6, #-4]
 801257c:	e7de      	b.n	801253c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801257e:	2600      	movs	r6, #0
 8012580:	1b9d      	subs	r5, r3, r6
 8012582:	2d00      	cmp	r5, #0
 8012584:	dc38      	bgt.n	80125f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8012586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801258a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801258e:	441c      	add	r4, r3
 8012590:	2900      	cmp	r1, #0
 8012592:	dd59      	ble.n	8012648 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8012594:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801259a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801259e:	3901      	subs	r1, #1
 80125a0:	eeb0 6a62 	vmov.f32	s12, s5
 80125a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80125a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80125ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80125b0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80125b4:	eeb0 6a43 	vmov.f32	s12, s6
 80125b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80125bc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80125c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80125c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80125c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80125cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80125d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80125d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80125d8:	ee12 2a90 	vmov	r2, s5
 80125dc:	eef0 2a47 	vmov.f32	s5, s14
 80125e0:	fb92 fef3 	sdiv	lr, r2, r3
 80125e4:	ee13 2a10 	vmov	r2, s6
 80125e8:	eeb0 3a67 	vmov.f32	s6, s15
 80125ec:	fb92 fcf3 	sdiv	ip, r2, r3
 80125f0:	9a01      	ldr	r2, [sp, #4]
 80125f2:	bf08      	it	eq
 80125f4:	4613      	moveq	r3, r2
 80125f6:	e772      	b.n	80124de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80125f8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80125fc:	d420      	bmi.n	8012640 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80125fe:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8012602:	45cb      	cmp	fp, r9
 8012604:	dd1c      	ble.n	8012640 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8012606:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801260a:	d419      	bmi.n	8012640 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801260c:	68fd      	ldr	r5, [r7, #12]
 801260e:	4555      	cmp	r5, sl
 8012610:	dd16      	ble.n	8012640 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8012612:	fa0f f58b 	sxth.w	r5, fp
 8012616:	fb0a 9505 	mla	r5, sl, r5, r9
 801261a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801261e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8012622:	eb08 0b05 	add.w	fp, r8, r5
 8012626:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801262a:	f804 9005 	strb.w	r9, [r4, r5]
 801262e:	4425      	add	r5, r4
 8012630:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8012634:	f885 9001 	strb.w	r9, [r5, #1]
 8012638:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801263c:	f885 9002 	strb.w	r9, [r5, #2]
 8012640:	4470      	add	r0, lr
 8012642:	4462      	add	r2, ip
 8012644:	3601      	adds	r6, #1
 8012646:	e79b      	b.n	8012580 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8012648:	b003      	add	sp, #12
 801264a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801264e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801264e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012652:	b085      	sub	sp, #20
 8012654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012658:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801265a:	9202      	str	r2, [sp, #8]
 801265c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8012660:	6860      	ldr	r0, [r4, #4]
 8012662:	9203      	str	r2, [sp, #12]
 8012664:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8012668:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801266c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8012670:	fb00 2505 	mla	r5, r0, r5, r2
 8012674:	6822      	ldr	r2, [r4, #0]
 8012676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801267a:	4415      	add	r5, r2
 801267c:	f8dc 2000 	ldr.w	r2, [ip]
 8012680:	9201      	str	r2, [sp, #4]
 8012682:	2900      	cmp	r1, #0
 8012684:	dc03      	bgt.n	801268e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8012686:	9a02      	ldr	r2, [sp, #8]
 8012688:	2a00      	cmp	r2, #0
 801268a:	f340 8122 	ble.w	80128d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801268e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012690:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8012694:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8012698:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801269a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801269e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	dd0d      	ble.n	80126c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80126a6:	1422      	asrs	r2, r4, #16
 80126a8:	d405      	bmi.n	80126b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80126aa:	4542      	cmp	r2, r8
 80126ac:	da03      	bge.n	80126b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80126ae:	1402      	asrs	r2, r0, #16
 80126b0:	d401      	bmi.n	80126b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80126b2:	42ba      	cmp	r2, r7
 80126b4:	db06      	blt.n	80126c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80126b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126b8:	4474      	add	r4, lr
 80126ba:	3b01      	subs	r3, #1
 80126bc:	3503      	adds	r5, #3
 80126be:	4410      	add	r0, r2
 80126c0:	e7ef      	b.n	80126a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80126c2:	d072      	beq.n	80127aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80126c4:	1e5a      	subs	r2, r3, #1
 80126c6:	fb0e 4602 	mla	r6, lr, r2, r4
 80126ca:	1436      	asrs	r6, r6, #16
 80126cc:	d462      	bmi.n	8012794 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80126ce:	4546      	cmp	r6, r8
 80126d0:	da60      	bge.n	8012794 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80126d2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80126d4:	fb06 0202 	mla	r2, r6, r2, r0
 80126d8:	1412      	asrs	r2, r2, #16
 80126da:	d45b      	bmi.n	8012794 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80126dc:	42ba      	cmp	r2, r7
 80126de:	da59      	bge.n	8012794 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80126e0:	1cef      	adds	r7, r5, #3
 80126e2:	4699      	mov	r9, r3
 80126e4:	f1b9 0f00 	cmp.w	r9, #0
 80126e8:	dd5a      	ble.n	80127a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80126ea:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80126ee:	1426      	asrs	r6, r4, #16
 80126f0:	1402      	asrs	r2, r0, #16
 80126f2:	fb08 6202 	mla	r2, r8, r2, r6
 80126f6:	9e01      	ldr	r6, [sp, #4]
 80126f8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80126fc:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8012700:	d041      	beq.n	8012786 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012702:	9a03      	ldr	r2, [sp, #12]
 8012704:	fa5f fb86 	uxtb.w	fp, r6
 8012708:	fb02 f808 	mul.w	r8, r2, r8
 801270c:	f108 0201 	add.w	r2, r8, #1
 8012710:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8012714:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8012718:	1212      	asrs	r2, r2, #8
 801271a:	fa1f fa82 	uxth.w	sl, r2
 801271e:	43d2      	mvns	r2, r2
 8012720:	fb1b fb0a 	smulbb	fp, fp, sl
 8012724:	b2d2      	uxtb	r2, r2
 8012726:	fb08 b802 	mla	r8, r8, r2, fp
 801272a:	fa1f f888 	uxth.w	r8, r8
 801272e:	f108 0b01 	add.w	fp, r8, #1
 8012732:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8012736:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801273a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801273e:	fb1b fb0a 	smulbb	fp, fp, sl
 8012742:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012746:	fb16 fa0a 	smulbb	sl, r6, sl
 801274a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801274e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8012752:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8012756:	fb06 aa02 	mla	sl, r6, r2, sl
 801275a:	fb08 b802 	mla	r8, r8, r2, fp
 801275e:	fa1f fa8a 	uxth.w	sl, sl
 8012762:	fa1f f888 	uxth.w	r8, r8
 8012766:	f10a 0601 	add.w	r6, sl, #1
 801276a:	f108 0b01 	add.w	fp, r8, #1
 801276e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8012772:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8012776:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801277a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801277e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8012782:	f807 8c02 	strb.w	r8, [r7, #-2]
 8012786:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012788:	4474      	add	r4, lr
 801278a:	3703      	adds	r7, #3
 801278c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012790:	4410      	add	r0, r2
 8012792:	e7a7      	b.n	80126e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8012794:	f04f 0800 	mov.w	r8, #0
 8012798:	eba3 0208 	sub.w	r2, r3, r8
 801279c:	2a00      	cmp	r2, #0
 801279e:	dc3b      	bgt.n	8012818 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80127a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80127a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80127a8:	441d      	add	r5, r3
 80127aa:	2900      	cmp	r1, #0
 80127ac:	f340 8091 	ble.w	80128d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80127b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80127b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80127ba:	3901      	subs	r1, #1
 80127bc:	eeb0 6a62 	vmov.f32	s12, s5
 80127c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80127c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80127c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80127cc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80127d0:	eeb0 6a43 	vmov.f32	s12, s6
 80127d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80127d8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80127dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80127e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80127e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80127e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80127ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80127f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80127f4:	ee12 2a90 	vmov	r2, s5
 80127f8:	eef0 2a47 	vmov.f32	s5, s14
 80127fc:	fb92 fef3 	sdiv	lr, r2, r3
 8012800:	ee13 2a10 	vmov	r2, s6
 8012804:	eeb0 3a67 	vmov.f32	s6, s15
 8012808:	fb92 f3f3 	sdiv	r3, r2, r3
 801280c:	9a02      	ldr	r2, [sp, #8]
 801280e:	9312      	str	r3, [sp, #72]	; 0x48
 8012810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012812:	bf08      	it	eq
 8012814:	4613      	moveq	r3, r2
 8012816:	e734      	b.n	8012682 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8012818:	1427      	asrs	r7, r4, #16
 801281a:	d454      	bmi.n	80128c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801281c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8012820:	42be      	cmp	r6, r7
 8012822:	dd50      	ble.n	80128c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8012824:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012828:	d44d      	bmi.n	80128c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801282a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801282e:	454a      	cmp	r2, r9
 8012830:	dd49      	ble.n	80128c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8012832:	b236      	sxth	r6, r6
 8012834:	9a01      	ldr	r2, [sp, #4]
 8012836:	fb09 7606 	mla	r6, r9, r6, r7
 801283a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801283e:	0e3a      	lsrs	r2, r7, #24
 8012840:	d041      	beq.n	80128c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8012842:	9e03      	ldr	r6, [sp, #12]
 8012844:	fa5f fb87 	uxtb.w	fp, r7
 8012848:	4372      	muls	r2, r6
 801284a:	1c56      	adds	r6, r2, #1
 801284c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8012850:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8012854:	1212      	asrs	r2, r2, #8
 8012856:	f815 9006 	ldrb.w	r9, [r5, r6]
 801285a:	fa1f fa82 	uxth.w	sl, r2
 801285e:	43d2      	mvns	r2, r2
 8012860:	fb1b fb0a 	smulbb	fp, fp, sl
 8012864:	b2d2      	uxtb	r2, r2
 8012866:	fb09 b902 	mla	r9, r9, r2, fp
 801286a:	fa1f f989 	uxth.w	r9, r9
 801286e:	f109 0b01 	add.w	fp, r9, #1
 8012872:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012876:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801287a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801287e:	fb1b fb0a 	smulbb	fp, fp, sl
 8012882:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012886:	fb17 fa0a 	smulbb	sl, r7, sl
 801288a:	f805 9006 	strb.w	r9, [r5, r6]
 801288e:	442e      	add	r6, r5
 8012890:	78b7      	ldrb	r7, [r6, #2]
 8012892:	f896 9001 	ldrb.w	r9, [r6, #1]
 8012896:	fb07 aa02 	mla	sl, r7, r2, sl
 801289a:	fb09 b902 	mla	r9, r9, r2, fp
 801289e:	fa1f fa8a 	uxth.w	sl, sl
 80128a2:	fa1f f989 	uxth.w	r9, r9
 80128a6:	f10a 0701 	add.w	r7, sl, #1
 80128aa:	f109 0b01 	add.w	fp, r9, #1
 80128ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80128b2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80128b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80128ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80128be:	f886 a002 	strb.w	sl, [r6, #2]
 80128c2:	f886 9001 	strb.w	r9, [r6, #1]
 80128c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80128c8:	4474      	add	r4, lr
 80128ca:	f108 0801 	add.w	r8, r8, #1
 80128ce:	4410      	add	r0, r2
 80128d0:	e762      	b.n	8012798 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80128d2:	b005      	add	sp, #20
 80128d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80128d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128dc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80128de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80128e2:	9201      	str	r2, [sp, #4]
 80128e4:	6860      	ldr	r0, [r4, #4]
 80128e6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80128ea:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 80128ee:	fb00 2505 	mla	r5, r0, r5, r2
 80128f2:	6822      	ldr	r2, [r4, #0]
 80128f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128f8:	4415      	add	r5, r2
 80128fa:	f8dc 2000 	ldr.w	r2, [ip]
 80128fe:	9200      	str	r2, [sp, #0]
 8012900:	2900      	cmp	r1, #0
 8012902:	dc03      	bgt.n	801290c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8012904:	9a01      	ldr	r2, [sp, #4]
 8012906:	2a00      	cmp	r2, #0
 8012908:	f340 812b 	ble.w	8012b62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801290c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801290e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8012912:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8012916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012918:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801291c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012920:	2b00      	cmp	r3, #0
 8012922:	dd0e      	ble.n	8012942 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8012924:	1422      	asrs	r2, r4, #16
 8012926:	d405      	bmi.n	8012934 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8012928:	4572      	cmp	r2, lr
 801292a:	da03      	bge.n	8012934 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801292c:	1402      	asrs	r2, r0, #16
 801292e:	d401      	bmi.n	8012934 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8012930:	42ba      	cmp	r2, r7
 8012932:	db07      	blt.n	8012944 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8012934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012936:	3b01      	subs	r3, #1
 8012938:	3503      	adds	r5, #3
 801293a:	4414      	add	r4, r2
 801293c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801293e:	4410      	add	r0, r2
 8012940:	e7ee      	b.n	8012920 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8012942:	d06f      	beq.n	8012a24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8012944:	1e5a      	subs	r2, r3, #1
 8012946:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012948:	fb06 4602 	mla	r6, r6, r2, r4
 801294c:	1436      	asrs	r6, r6, #16
 801294e:	d45e      	bmi.n	8012a0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8012950:	4576      	cmp	r6, lr
 8012952:	da5c      	bge.n	8012a0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8012954:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8012956:	fb06 0202 	mla	r2, r6, r2, r0
 801295a:	1412      	asrs	r2, r2, #16
 801295c:	d457      	bmi.n	8012a0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801295e:	42ba      	cmp	r2, r7
 8012960:	da55      	bge.n	8012a0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8012962:	1cee      	adds	r6, r5, #3
 8012964:	469a      	mov	sl, r3
 8012966:	f1ba 0f00 	cmp.w	sl, #0
 801296a:	dd56      	ble.n	8012a1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801296c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8012970:	1427      	asrs	r7, r4, #16
 8012972:	1402      	asrs	r2, r0, #16
 8012974:	fb0e 7202 	mla	r2, lr, r2, r7
 8012978:	9f00      	ldr	r7, [sp, #0]
 801297a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801297e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8012982:	d03c      	beq.n	80129fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8012984:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8012988:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801298c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8012990:	fa5f f28e 	uxtb.w	r2, lr
 8012994:	b2ff      	uxtb	r7, r7
 8012996:	f000 80dd 	beq.w	8012b54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801299a:	fa1f f882 	uxth.w	r8, r2
 801299e:	43d2      	mvns	r2, r2
 80129a0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80129a4:	fb17 f708 	smulbb	r7, r7, r8
 80129a8:	b2d2      	uxtb	r2, r2
 80129aa:	fb19 f908 	smulbb	r9, r9, r8
 80129ae:	fb0e 7702 	mla	r7, lr, r2, r7
 80129b2:	fb1b f808 	smulbb	r8, fp, r8
 80129b6:	b2bf      	uxth	r7, r7
 80129b8:	f107 0e01 	add.w	lr, r7, #1
 80129bc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80129c0:	123f      	asrs	r7, r7, #8
 80129c2:	f806 7c03 	strb.w	r7, [r6, #-3]
 80129c6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80129ca:	fb07 9902 	mla	r9, r7, r2, r9
 80129ce:	fa1f f989 	uxth.w	r9, r9
 80129d2:	f109 0701 	add.w	r7, r9, #1
 80129d6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80129da:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80129de:	fb07 8802 	mla	r8, r7, r2, r8
 80129e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80129e6:	fa1f f888 	uxth.w	r8, r8
 80129ea:	f806 9c02 	strb.w	r9, [r6, #-2]
 80129ee:	f108 0201 	add.w	r2, r8, #1
 80129f2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80129f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80129fa:	f806 8c01 	strb.w	r8, [r6, #-1]
 80129fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012a00:	3603      	adds	r6, #3
 8012a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a06:	4414      	add	r4, r2
 8012a08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a0a:	4410      	add	r0, r2
 8012a0c:	e7ab      	b.n	8012966 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8012a0e:	f04f 0e00 	mov.w	lr, #0
 8012a12:	eba3 020e 	sub.w	r2, r3, lr
 8012a16:	2a00      	cmp	r2, #0
 8012a18:	dc3d      	bgt.n	8012a96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8012a1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012a1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a22:	441d      	add	r5, r3
 8012a24:	2900      	cmp	r1, #0
 8012a26:	f340 809c 	ble.w	8012b62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8012a2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012a34:	3901      	subs	r1, #1
 8012a36:	eeb0 6a62 	vmov.f32	s12, s5
 8012a3a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012a3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012a42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012a46:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8012a4a:	eeb0 6a43 	vmov.f32	s12, s6
 8012a4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012a52:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8012a56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012a5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012a5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012a62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012a66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012a6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012a6e:	ee12 2a90 	vmov	r2, s5
 8012a72:	eef0 2a47 	vmov.f32	s5, s14
 8012a76:	fb92 f3f3 	sdiv	r3, r2, r3
 8012a7a:	ee13 2a10 	vmov	r2, s6
 8012a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a82:	eeb0 3a67 	vmov.f32	s6, s15
 8012a86:	fb92 f3f3 	sdiv	r3, r2, r3
 8012a8a:	9a01      	ldr	r2, [sp, #4]
 8012a8c:	9310      	str	r3, [sp, #64]	; 0x40
 8012a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a90:	bf08      	it	eq
 8012a92:	4613      	moveq	r3, r2
 8012a94:	e734      	b.n	8012900 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8012a96:	1427      	asrs	r7, r4, #16
 8012a98:	d44d      	bmi.n	8012b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8012a9a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8012a9e:	42be      	cmp	r6, r7
 8012aa0:	dd49      	ble.n	8012b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8012aa2:	ea5f 4820 	movs.w	r8, r0, asr #16
 8012aa6:	d446      	bmi.n	8012b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8012aa8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012aac:	4542      	cmp	r2, r8
 8012aae:	dd42      	ble.n	8012b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8012ab0:	b236      	sxth	r6, r6
 8012ab2:	9a00      	ldr	r2, [sp, #0]
 8012ab4:	fb08 7606 	mla	r6, r8, r6, r7
 8012ab8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8012abc:	0e3a      	lsrs	r2, r7, #24
 8012abe:	d03a      	beq.n	8012b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8012ac0:	2aff      	cmp	r2, #255	; 0xff
 8012ac2:	b2d6      	uxtb	r6, r2
 8012ac4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8012ac8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8012acc:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8012ad0:	b2ff      	uxtb	r7, r7
 8012ad2:	d037      	beq.n	8012b44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8012ad4:	fa1f f986 	uxth.w	r9, r6
 8012ad8:	4472      	add	r2, lr
 8012ada:	43f6      	mvns	r6, r6
 8012adc:	f815 8002 	ldrb.w	r8, [r5, r2]
 8012ae0:	fb17 f709 	smulbb	r7, r7, r9
 8012ae4:	fb1a fa09 	smulbb	sl, sl, r9
 8012ae8:	b2f6      	uxtb	r6, r6
 8012aea:	fb1b f909 	smulbb	r9, fp, r9
 8012aee:	fb08 7706 	mla	r7, r8, r6, r7
 8012af2:	b2bf      	uxth	r7, r7
 8012af4:	f107 0801 	add.w	r8, r7, #1
 8012af8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8012afc:	123f      	asrs	r7, r7, #8
 8012afe:	54af      	strb	r7, [r5, r2]
 8012b00:	442a      	add	r2, r5
 8012b02:	7857      	ldrb	r7, [r2, #1]
 8012b04:	fb07 aa06 	mla	sl, r7, r6, sl
 8012b08:	fa1f fa8a 	uxth.w	sl, sl
 8012b0c:	f10a 0701 	add.w	r7, sl, #1
 8012b10:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8012b14:	7897      	ldrb	r7, [r2, #2]
 8012b16:	fb07 9906 	mla	r9, r7, r6, r9
 8012b1a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012b1e:	fa1f f989 	uxth.w	r9, r9
 8012b22:	f882 a001 	strb.w	sl, [r2, #1]
 8012b26:	f109 0601 	add.w	r6, r9, #1
 8012b2a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8012b2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012b32:	f882 9002 	strb.w	r9, [r2, #2]
 8012b36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012b38:	f10e 0e01 	add.w	lr, lr, #1
 8012b3c:	4414      	add	r4, r2
 8012b3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012b40:	4410      	add	r0, r2
 8012b42:	e766      	b.n	8012a12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8012b44:	4472      	add	r2, lr
 8012b46:	54af      	strb	r7, [r5, r2]
 8012b48:	442a      	add	r2, r5
 8012b4a:	f882 a001 	strb.w	sl, [r2, #1]
 8012b4e:	f882 b002 	strb.w	fp, [r2, #2]
 8012b52:	e7f0      	b.n	8012b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8012b54:	f806 7c03 	strb.w	r7, [r6, #-3]
 8012b58:	f806 9c02 	strb.w	r9, [r6, #-2]
 8012b5c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8012b60:	e74d      	b.n	80129fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8012b62:	b003      	add	sp, #12
 8012b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b68 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b6c:	b087      	sub	sp, #28
 8012b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012b72:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8012b74:	9204      	str	r2, [sp, #16]
 8012b76:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012b7a:	6860      	ldr	r0, [r4, #4]
 8012b7c:	9205      	str	r2, [sp, #20]
 8012b7e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8012b82:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8012b86:	9101      	str	r1, [sp, #4]
 8012b88:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8012b8c:	fb00 2505 	mla	r5, r0, r5, r2
 8012b90:	6822      	ldr	r2, [r4, #0]
 8012b92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b96:	4415      	add	r5, r2
 8012b98:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8012b9c:	3201      	adds	r2, #1
 8012b9e:	f022 0201 	bic.w	r2, r2, #1
 8012ba2:	9202      	str	r2, [sp, #8]
 8012ba4:	f8dc 2000 	ldr.w	r2, [ip]
 8012ba8:	9203      	str	r2, [sp, #12]
 8012baa:	9a01      	ldr	r2, [sp, #4]
 8012bac:	2a00      	cmp	r2, #0
 8012bae:	dc03      	bgt.n	8012bb8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8012bb0:	9a04      	ldr	r2, [sp, #16]
 8012bb2:	2a00      	cmp	r2, #0
 8012bb4:	f340 8135 	ble.w	8012e22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8012bb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012bba:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8012bbe:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8012bc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012bc4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8012bc8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	dd0d      	ble.n	8012bec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8012bd0:	1422      	asrs	r2, r4, #16
 8012bd2:	d405      	bmi.n	8012be0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8012bd4:	4542      	cmp	r2, r8
 8012bd6:	da03      	bge.n	8012be0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8012bd8:	1402      	asrs	r2, r0, #16
 8012bda:	d401      	bmi.n	8012be0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8012bdc:	42ba      	cmp	r2, r7
 8012bde:	db06      	blt.n	8012bee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8012be0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012be2:	4474      	add	r4, lr
 8012be4:	3b01      	subs	r3, #1
 8012be6:	3503      	adds	r5, #3
 8012be8:	4410      	add	r0, r2
 8012bea:	e7ef      	b.n	8012bcc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012bec:	d077      	beq.n	8012cde <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8012bee:	1e5a      	subs	r2, r3, #1
 8012bf0:	fb0e 4602 	mla	r6, lr, r2, r4
 8012bf4:	1436      	asrs	r6, r6, #16
 8012bf6:	d469      	bmi.n	8012ccc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012bf8:	4546      	cmp	r6, r8
 8012bfa:	da67      	bge.n	8012ccc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012bfc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012bfe:	fb06 0202 	mla	r2, r6, r2, r0
 8012c02:	1412      	asrs	r2, r2, #16
 8012c04:	d462      	bmi.n	8012ccc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012c06:	42ba      	cmp	r2, r7
 8012c08:	da60      	bge.n	8012ccc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012c0a:	1cee      	adds	r6, r5, #3
 8012c0c:	4699      	mov	r9, r3
 8012c0e:	f1b9 0f00 	cmp.w	r9, #0
 8012c12:	dd5f      	ble.n	8012cd4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8012c14:	1422      	asrs	r2, r4, #16
 8012c16:	9902      	ldr	r1, [sp, #8]
 8012c18:	1407      	asrs	r7, r0, #16
 8012c1a:	fb01 2707 	mla	r7, r1, r7, r2
 8012c1e:	9903      	ldr	r1, [sp, #12]
 8012c20:	087a      	lsrs	r2, r7, #1
 8012c22:	5c8a      	ldrb	r2, [r1, r2]
 8012c24:	07f9      	lsls	r1, r7, #31
 8012c26:	bf54      	ite	pl
 8012c28:	f002 020f 	andpl.w	r2, r2, #15
 8012c2c:	1112      	asrmi	r2, r2, #4
 8012c2e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8012c32:	b2d2      	uxtb	r2, r2
 8012c34:	2a00      	cmp	r2, #0
 8012c36:	d042      	beq.n	8012cbe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8012c38:	497b      	ldr	r1, [pc, #492]	; (8012e28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8012c3a:	680f      	ldr	r7, [r1, #0]
 8012c3c:	9905      	ldr	r1, [sp, #20]
 8012c3e:	fa5f fb87 	uxtb.w	fp, r7
 8012c42:	434a      	muls	r2, r1
 8012c44:	f102 0801 	add.w	r8, r2, #1
 8012c48:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8012c4c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8012c50:	1212      	asrs	r2, r2, #8
 8012c52:	fa1f fa82 	uxth.w	sl, r2
 8012c56:	43d2      	mvns	r2, r2
 8012c58:	fb1b fb0a 	smulbb	fp, fp, sl
 8012c5c:	b2d2      	uxtb	r2, r2
 8012c5e:	fb08 b802 	mla	r8, r8, r2, fp
 8012c62:	fa1f f888 	uxth.w	r8, r8
 8012c66:	f108 0b01 	add.w	fp, r8, #1
 8012c6a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8012c6e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8012c72:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8012c76:	fb1b fb0a 	smulbb	fp, fp, sl
 8012c7a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012c7e:	fb17 fa0a 	smulbb	sl, r7, sl
 8012c82:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8012c86:	f806 8c03 	strb.w	r8, [r6, #-3]
 8012c8a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8012c8e:	fb07 aa02 	mla	sl, r7, r2, sl
 8012c92:	fb08 b802 	mla	r8, r8, r2, fp
 8012c96:	fa1f fa8a 	uxth.w	sl, sl
 8012c9a:	fa1f f888 	uxth.w	r8, r8
 8012c9e:	f10a 0701 	add.w	r7, sl, #1
 8012ca2:	f108 0b01 	add.w	fp, r8, #1
 8012ca6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8012caa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8012cae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012cb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012cb6:	f806 ac01 	strb.w	sl, [r6, #-1]
 8012cba:	f806 8c02 	strb.w	r8, [r6, #-2]
 8012cbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012cc0:	4474      	add	r4, lr
 8012cc2:	3603      	adds	r6, #3
 8012cc4:	f109 39ff 	add.w	r9, r9, #4294967295
 8012cc8:	4410      	add	r0, r2
 8012cca:	e7a0      	b.n	8012c0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8012ccc:	2700      	movs	r7, #0
 8012cce:	1bda      	subs	r2, r3, r7
 8012cd0:	2a00      	cmp	r2, #0
 8012cd2:	dc3e      	bgt.n	8012d52 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8012cd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012cd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012cdc:	441d      	add	r5, r3
 8012cde:	9b01      	ldr	r3, [sp, #4]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f340 809e 	ble.w	8012e22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8012ce6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012cea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012cec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012cf0:	eeb0 6a62 	vmov.f32	s12, s5
 8012cf4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012cf8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012cfc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012d00:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8012d04:	eeb0 6a43 	vmov.f32	s12, s6
 8012d08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012d0c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8012d10:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012d14:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012d18:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012d1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012d20:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012d24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012d28:	ee12 2a90 	vmov	r2, s5
 8012d2c:	eef0 2a47 	vmov.f32	s5, s14
 8012d30:	fb92 fef3 	sdiv	lr, r2, r3
 8012d34:	ee13 2a10 	vmov	r2, s6
 8012d38:	eeb0 3a67 	vmov.f32	s6, s15
 8012d3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d40:	9314      	str	r3, [sp, #80]	; 0x50
 8012d42:	9b01      	ldr	r3, [sp, #4]
 8012d44:	9a04      	ldr	r2, [sp, #16]
 8012d46:	3b01      	subs	r3, #1
 8012d48:	9301      	str	r3, [sp, #4]
 8012d4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d4c:	bf08      	it	eq
 8012d4e:	4613      	moveq	r3, r2
 8012d50:	e72b      	b.n	8012baa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8012d52:	1426      	asrs	r6, r4, #16
 8012d54:	d460      	bmi.n	8012e18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012d56:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8012d5a:	42b2      	cmp	r2, r6
 8012d5c:	dd5c      	ble.n	8012e18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012d5e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8012d62:	d459      	bmi.n	8012e18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012d64:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012d68:	4542      	cmp	r2, r8
 8012d6a:	dd55      	ble.n	8012e18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012d6c:	9a02      	ldr	r2, [sp, #8]
 8012d6e:	9903      	ldr	r1, [sp, #12]
 8012d70:	fb08 6602 	mla	r6, r8, r2, r6
 8012d74:	0872      	lsrs	r2, r6, #1
 8012d76:	07f6      	lsls	r6, r6, #31
 8012d78:	5c8a      	ldrb	r2, [r1, r2]
 8012d7a:	bf54      	ite	pl
 8012d7c:	f002 020f 	andpl.w	r2, r2, #15
 8012d80:	1112      	asrmi	r2, r2, #4
 8012d82:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8012d86:	b2d2      	uxtb	r2, r2
 8012d88:	2a00      	cmp	r2, #0
 8012d8a:	d045      	beq.n	8012e18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012d8c:	4926      	ldr	r1, [pc, #152]	; (8012e28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8012d8e:	f8d1 8000 	ldr.w	r8, [r1]
 8012d92:	9905      	ldr	r1, [sp, #20]
 8012d94:	fa5f fb88 	uxtb.w	fp, r8
 8012d98:	434a      	muls	r2, r1
 8012d9a:	1c56      	adds	r6, r2, #1
 8012d9c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8012da0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8012da4:	1212      	asrs	r2, r2, #8
 8012da6:	f815 9006 	ldrb.w	r9, [r5, r6]
 8012daa:	fa1f fa82 	uxth.w	sl, r2
 8012dae:	43d2      	mvns	r2, r2
 8012db0:	fb1b fb0a 	smulbb	fp, fp, sl
 8012db4:	b2d2      	uxtb	r2, r2
 8012db6:	fb09 b902 	mla	r9, r9, r2, fp
 8012dba:	fa1f f989 	uxth.w	r9, r9
 8012dbe:	f109 0b01 	add.w	fp, r9, #1
 8012dc2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012dc6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8012dca:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8012dce:	fb1b fb0a 	smulbb	fp, fp, sl
 8012dd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012dd6:	fb18 fa0a 	smulbb	sl, r8, sl
 8012dda:	f805 9006 	strb.w	r9, [r5, r6]
 8012dde:	442e      	add	r6, r5
 8012de0:	f896 8002 	ldrb.w	r8, [r6, #2]
 8012de4:	f896 9001 	ldrb.w	r9, [r6, #1]
 8012de8:	fb08 aa02 	mla	sl, r8, r2, sl
 8012dec:	fb09 b902 	mla	r9, r9, r2, fp
 8012df0:	fa1f fa8a 	uxth.w	sl, sl
 8012df4:	fa1f f989 	uxth.w	r9, r9
 8012df8:	f10a 0801 	add.w	r8, sl, #1
 8012dfc:	f109 0b01 	add.w	fp, r9, #1
 8012e00:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8012e04:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012e08:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012e0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e10:	f886 a002 	strb.w	sl, [r6, #2]
 8012e14:	f886 9001 	strb.w	r9, [r6, #1]
 8012e18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e1a:	4474      	add	r4, lr
 8012e1c:	3701      	adds	r7, #1
 8012e1e:	4410      	add	r0, r2
 8012e20:	e755      	b.n	8012cce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8012e22:	b007      	add	sp, #28
 8012e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e28:	24006af8 	.word	0x24006af8

08012e2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e30:	b085      	sub	sp, #20
 8012e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012e36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012e38:	9203      	str	r2, [sp, #12]
 8012e3a:	6860      	ldr	r0, [r4, #4]
 8012e3c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8012e40:	9100      	str	r1, [sp, #0]
 8012e42:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8012e46:	fb00 2606 	mla	r6, r0, r6, r2
 8012e4a:	6822      	ldr	r2, [r4, #0]
 8012e4c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012e50:	4416      	add	r6, r2
 8012e52:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8012e56:	3201      	adds	r2, #1
 8012e58:	f022 0201 	bic.w	r2, r2, #1
 8012e5c:	9201      	str	r2, [sp, #4]
 8012e5e:	f8dc 2000 	ldr.w	r2, [ip]
 8012e62:	9202      	str	r2, [sp, #8]
 8012e64:	9a00      	ldr	r2, [sp, #0]
 8012e66:	2a00      	cmp	r2, #0
 8012e68:	dc03      	bgt.n	8012e72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8012e6a:	9a03      	ldr	r2, [sp, #12]
 8012e6c:	2a00      	cmp	r2, #0
 8012e6e:	f340 8140 	ble.w	80130f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8012e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012e74:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8012e78:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8012e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012e7e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8012e82:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	dd0e      	ble.n	8012ea8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8012e8a:	142a      	asrs	r2, r5, #16
 8012e8c:	d405      	bmi.n	8012e9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012e8e:	4572      	cmp	r2, lr
 8012e90:	da03      	bge.n	8012e9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012e92:	1422      	asrs	r2, r4, #16
 8012e94:	d401      	bmi.n	8012e9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012e96:	42ba      	cmp	r2, r7
 8012e98:	db07      	blt.n	8012eaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8012e9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012e9c:	3b01      	subs	r3, #1
 8012e9e:	3603      	adds	r6, #3
 8012ea0:	4415      	add	r5, r2
 8012ea2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ea4:	4414      	add	r4, r2
 8012ea6:	e7ee      	b.n	8012e86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8012ea8:	d072      	beq.n	8012f90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012eaa:	1e5a      	subs	r2, r3, #1
 8012eac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012eae:	fb00 5002 	mla	r0, r0, r2, r5
 8012eb2:	1400      	asrs	r0, r0, #16
 8012eb4:	d463      	bmi.n	8012f7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8012eb6:	4570      	cmp	r0, lr
 8012eb8:	da61      	bge.n	8012f7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8012eba:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012ebc:	fb00 4202 	mla	r2, r0, r2, r4
 8012ec0:	1412      	asrs	r2, r2, #16
 8012ec2:	d45c      	bmi.n	8012f7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8012ec4:	42ba      	cmp	r2, r7
 8012ec6:	da5a      	bge.n	8012f7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8012ec8:	1cf0      	adds	r0, r6, #3
 8012eca:	469a      	mov	sl, r3
 8012ecc:	f1ba 0f00 	cmp.w	sl, #0
 8012ed0:	dd59      	ble.n	8012f86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8012ed2:	142a      	asrs	r2, r5, #16
 8012ed4:	9901      	ldr	r1, [sp, #4]
 8012ed6:	1427      	asrs	r7, r4, #16
 8012ed8:	fb01 2707 	mla	r7, r1, r7, r2
 8012edc:	9902      	ldr	r1, [sp, #8]
 8012ede:	087a      	lsrs	r2, r7, #1
 8012ee0:	5c8a      	ldrb	r2, [r1, r2]
 8012ee2:	07f9      	lsls	r1, r7, #31
 8012ee4:	bf54      	ite	pl
 8012ee6:	f002 020f 	andpl.w	r2, r2, #15
 8012eea:	1112      	asrmi	r2, r2, #4
 8012eec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8012ef0:	b2d2      	uxtb	r2, r2
 8012ef2:	2a00      	cmp	r2, #0
 8012ef4:	d03b      	beq.n	8012f6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8012ef6:	4980      	ldr	r1, [pc, #512]	; (80130f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8012ef8:	2aff      	cmp	r2, #255	; 0xff
 8012efa:	680f      	ldr	r7, [r1, #0]
 8012efc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8012f00:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8012f04:	b2ff      	uxtb	r7, r7
 8012f06:	f000 80ed 	beq.w	80130e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8012f0a:	fa1f f882 	uxth.w	r8, r2
 8012f0e:	43d2      	mvns	r2, r2
 8012f10:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8012f14:	fb17 f708 	smulbb	r7, r7, r8
 8012f18:	b2d2      	uxtb	r2, r2
 8012f1a:	fb19 f908 	smulbb	r9, r9, r8
 8012f1e:	fb0e 7702 	mla	r7, lr, r2, r7
 8012f22:	fb1b f808 	smulbb	r8, fp, r8
 8012f26:	b2bf      	uxth	r7, r7
 8012f28:	f107 0e01 	add.w	lr, r7, #1
 8012f2c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8012f30:	123f      	asrs	r7, r7, #8
 8012f32:	f800 7c03 	strb.w	r7, [r0, #-3]
 8012f36:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8012f3a:	fb07 9902 	mla	r9, r7, r2, r9
 8012f3e:	fa1f f989 	uxth.w	r9, r9
 8012f42:	f109 0701 	add.w	r7, r9, #1
 8012f46:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8012f4a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8012f4e:	fb07 8802 	mla	r8, r7, r2, r8
 8012f52:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012f56:	fa1f f888 	uxth.w	r8, r8
 8012f5a:	f800 9c02 	strb.w	r9, [r0, #-2]
 8012f5e:	f108 0201 	add.w	r2, r8, #1
 8012f62:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8012f66:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012f6a:	f800 8c01 	strb.w	r8, [r0, #-1]
 8012f6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012f70:	3003      	adds	r0, #3
 8012f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f76:	4415      	add	r5, r2
 8012f78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012f7a:	4414      	add	r4, r2
 8012f7c:	e7a6      	b.n	8012ecc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8012f7e:	2700      	movs	r7, #0
 8012f80:	1bda      	subs	r2, r3, r7
 8012f82:	2a00      	cmp	r2, #0
 8012f84:	dc40      	bgt.n	8013008 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8012f86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012f8e:	441e      	add	r6, r3
 8012f90:	9b00      	ldr	r3, [sp, #0]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f340 80ad 	ble.w	80130f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8012f98:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012fa2:	eeb0 6a62 	vmov.f32	s12, s5
 8012fa6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012faa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012fae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012fb2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8012fb6:	eeb0 6a43 	vmov.f32	s12, s6
 8012fba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012fbe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012fc2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012fc6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012fca:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012fce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012fd2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012fd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012fda:	ee12 2a90 	vmov	r2, s5
 8012fde:	eef0 2a47 	vmov.f32	s5, s14
 8012fe2:	fb92 f3f3 	sdiv	r3, r2, r3
 8012fe6:	ee13 2a10 	vmov	r2, s6
 8012fea:	9311      	str	r3, [sp, #68]	; 0x44
 8012fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fee:	eeb0 3a67 	vmov.f32	s6, s15
 8012ff2:	fb92 f3f3 	sdiv	r3, r2, r3
 8012ff6:	9312      	str	r3, [sp, #72]	; 0x48
 8012ff8:	9b00      	ldr	r3, [sp, #0]
 8012ffa:	9a03      	ldr	r2, [sp, #12]
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	9300      	str	r3, [sp, #0]
 8013000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013002:	bf08      	it	eq
 8013004:	4613      	moveq	r3, r2
 8013006:	e72d      	b.n	8012e64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8013008:	1428      	asrs	r0, r5, #16
 801300a:	d45c      	bmi.n	80130c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801300c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8013010:	4282      	cmp	r2, r0
 8013012:	dd58      	ble.n	80130c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013014:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8013018:	d455      	bmi.n	80130c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801301a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801301e:	4572      	cmp	r2, lr
 8013020:	dd51      	ble.n	80130c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013022:	9a01      	ldr	r2, [sp, #4]
 8013024:	9902      	ldr	r1, [sp, #8]
 8013026:	fb0e 0002 	mla	r0, lr, r2, r0
 801302a:	0842      	lsrs	r2, r0, #1
 801302c:	07c0      	lsls	r0, r0, #31
 801302e:	5c8a      	ldrb	r2, [r1, r2]
 8013030:	bf54      	ite	pl
 8013032:	f002 020f 	andpl.w	r2, r2, #15
 8013036:	1112      	asrmi	r2, r2, #4
 8013038:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801303c:	b2d2      	uxtb	r2, r2
 801303e:	2a00      	cmp	r2, #0
 8013040:	d041      	beq.n	80130c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013042:	492d      	ldr	r1, [pc, #180]	; (80130f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8013044:	2aff      	cmp	r2, #255	; 0xff
 8013046:	6808      	ldr	r0, [r1, #0]
 8013048:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801304c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8013050:	fa5f fe80 	uxtb.w	lr, r0
 8013054:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8013058:	d03b      	beq.n	80130d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801305a:	fa1f f982 	uxth.w	r9, r2
 801305e:	4438      	add	r0, r7
 8013060:	43d2      	mvns	r2, r2
 8013062:	f816 8000 	ldrb.w	r8, [r6, r0]
 8013066:	fb1e fe09 	smulbb	lr, lr, r9
 801306a:	fb1a fa09 	smulbb	sl, sl, r9
 801306e:	b2d2      	uxtb	r2, r2
 8013070:	fb1b f909 	smulbb	r9, fp, r9
 8013074:	fb08 ee02 	mla	lr, r8, r2, lr
 8013078:	fa1f fe8e 	uxth.w	lr, lr
 801307c:	f10e 0801 	add.w	r8, lr, #1
 8013080:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8013084:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013088:	f806 e000 	strb.w	lr, [r6, r0]
 801308c:	4430      	add	r0, r6
 801308e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8013092:	fb0e aa02 	mla	sl, lr, r2, sl
 8013096:	fa1f fa8a 	uxth.w	sl, sl
 801309a:	f10a 0e01 	add.w	lr, sl, #1
 801309e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80130a2:	f890 e002 	ldrb.w	lr, [r0, #2]
 80130a6:	fb0e 9902 	mla	r9, lr, r2, r9
 80130aa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80130ae:	fa1f f989 	uxth.w	r9, r9
 80130b2:	f880 a001 	strb.w	sl, [r0, #1]
 80130b6:	f109 0201 	add.w	r2, r9, #1
 80130ba:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80130be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80130c2:	f880 9002 	strb.w	r9, [r0, #2]
 80130c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130c8:	3701      	adds	r7, #1
 80130ca:	4415      	add	r5, r2
 80130cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130ce:	4414      	add	r4, r2
 80130d0:	e756      	b.n	8012f80 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130d2:	4438      	add	r0, r7
 80130d4:	f806 e000 	strb.w	lr, [r6, r0]
 80130d8:	4430      	add	r0, r6
 80130da:	f880 a001 	strb.w	sl, [r0, #1]
 80130de:	f880 b002 	strb.w	fp, [r0, #2]
 80130e2:	e7f0      	b.n	80130c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80130e4:	f800 7c03 	strb.w	r7, [r0, #-3]
 80130e8:	f800 9c02 	strb.w	r9, [r0, #-2]
 80130ec:	f800 bc01 	strb.w	fp, [r0, #-1]
 80130f0:	e73d      	b.n	8012f6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80130f2:	b005      	add	sp, #20
 80130f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f8:	24006af8 	.word	0x24006af8

080130fc <_ZN8touchgfx8LCD24bppD1Ev>:
 80130fc:	4770      	bx	lr

080130fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80130fe:	4770      	bx	lr

08013100 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8013100:	4770      	bx	lr

08013102 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8013102:	4770      	bx	lr

08013104 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8013104:	4770      	bx	lr

08013106 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8013106:	4770      	bx	lr

08013108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8013108:	4770      	bx	lr

0801310a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801310a:	4770      	bx	lr

0801310c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801310c:	4770      	bx	lr

0801310e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801310e:	4770      	bx	lr

08013110 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8013110:	4770      	bx	lr

08013112 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8013112:	4770      	bx	lr

08013114 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8013114:	4770      	bx	lr

08013116 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8013116:	4770      	bx	lr

08013118 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8013118:	4770      	bx	lr

0801311a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801311a:	4770      	bx	lr

0801311c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801311c:	4770      	bx	lr

0801311e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801311e:	4770      	bx	lr

08013120 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8013120:	4770      	bx	lr

08013122 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8013122:	4770      	bx	lr

08013124 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8013124:	4770      	bx	lr
	...

08013128 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8013128:	2bff      	cmp	r3, #255	; 0xff
 801312a:	b508      	push	{r3, lr}
 801312c:	d04f      	beq.n	80131ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801312e:	2a2c      	cmp	r2, #44	; 0x2c
 8013130:	d032      	beq.n	8013198 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8013132:	d80f      	bhi.n	8013154 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8013134:	2a08      	cmp	r2, #8
 8013136:	d046      	beq.n	80131c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8013138:	d805      	bhi.n	8013146 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801313a:	2a04      	cmp	r2, #4
 801313c:	d041      	beq.n	80131c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801313e:	2a05      	cmp	r2, #5
 8013140:	d03d      	beq.n	80131be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8013142:	2000      	movs	r0, #0
 8013144:	e027      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8013146:	2a0a      	cmp	r2, #10
 8013148:	d03d      	beq.n	80131c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801314a:	d301      	bcc.n	8013150 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801314c:	2a0b      	cmp	r2, #11
 801314e:	d1f8      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013150:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8013152:	e020      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8013154:	2a30      	cmp	r2, #48	; 0x30
 8013156:	d038      	beq.n	80131ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8013158:	d808      	bhi.n	801316c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801315a:	2a2e      	cmp	r2, #46	; 0x2e
 801315c:	684b      	ldr	r3, [r1, #4]
 801315e:	d029      	beq.n	80131b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8013160:	d90b      	bls.n	801317a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d1ec      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013168:	6a00      	ldr	r0, [r0, #32]
 801316a:	e014      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801316c:	2a32      	cmp	r2, #50	; 0x32
 801316e:	d02c      	beq.n	80131ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8013170:	d301      	bcc.n	8013176 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8013172:	2a33      	cmp	r2, #51	; 0x33
 8013174:	d1e5      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013176:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8013178:	e00d      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	2b01      	cmp	r3, #1
 801317e:	d009      	beq.n	8013194 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8013180:	d3f2      	bcc.n	8013168 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8013182:	2b02      	cmp	r3, #2
 8013184:	d1dd      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013186:	4b39      	ldr	r3, [pc, #228]	; (801326c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8013188:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801318c:	4a38      	ldr	r2, [pc, #224]	; (8013270 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801318e:	4839      	ldr	r0, [pc, #228]	; (8013274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8013190:	f006 fd98 	bl	8019cc4 <__assert_func>
 8013194:	6900      	ldr	r0, [r0, #16]
 8013196:	bd08      	pop	{r3, pc}
 8013198:	684b      	ldr	r3, [r1, #4]
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	2b01      	cmp	r3, #1
 801319e:	d007      	beq.n	80131b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80131a0:	d30b      	bcc.n	80131ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80131a2:	2b02      	cmp	r3, #2
 80131a4:	d1cd      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80131a6:	4b31      	ldr	r3, [pc, #196]	; (801326c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80131a8:	f240 412c 	movw	r1, #1068	; 0x42c
 80131ac:	4a30      	ldr	r2, [pc, #192]	; (8013270 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80131ae:	e7ee      	b.n	801318e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80131b0:	6880      	ldr	r0, [r0, #8]
 80131b2:	e7f0      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d1c3      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80131ba:	6980      	ldr	r0, [r0, #24]
 80131bc:	e7eb      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80131be:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80131c0:	e7e9      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80131c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80131c4:	e7e7      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80131c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80131c8:	e7e5      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80131ca:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80131cc:	e7e3      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80131ce:	2a2c      	cmp	r2, #44	; 0x2c
 80131d0:	d030      	beq.n	8013234 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80131d2:	d80f      	bhi.n	80131f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80131d4:	2a08      	cmp	r2, #8
 80131d6:	d044      	beq.n	8013262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80131d8:	d805      	bhi.n	80131e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80131da:	2a04      	cmp	r2, #4
 80131dc:	d03f      	beq.n	801325e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80131de:	2a05      	cmp	r2, #5
 80131e0:	d1af      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80131e2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80131e4:	e7d7      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80131e6:	2a0a      	cmp	r2, #10
 80131e8:	d03b      	beq.n	8013262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80131ea:	d301      	bcc.n	80131f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80131ec:	2a0b      	cmp	r2, #11
 80131ee:	d1a8      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80131f0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80131f2:	e7d0      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80131f4:	2a30      	cmp	r2, #48	; 0x30
 80131f6:	d036      	beq.n	8013266 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80131f8:	d808      	bhi.n	801320c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80131fa:	2a2e      	cmp	r2, #46	; 0x2e
 80131fc:	684b      	ldr	r3, [r1, #4]
 80131fe:	d028      	beq.n	8013252 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8013200:	d90b      	bls.n	801321a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d19c      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013208:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801320a:	e7c4      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801320c:	2a32      	cmp	r2, #50	; 0x32
 801320e:	d02a      	beq.n	8013266 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8013210:	d301      	bcc.n	8013216 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8013212:	2a33      	cmp	r2, #51	; 0x33
 8013214:	d195      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013216:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8013218:	e7bd      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	2b01      	cmp	r3, #1
 801321e:	d007      	beq.n	8013230 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8013220:	d3f2      	bcc.n	8013208 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8013222:	2b02      	cmp	r3, #2
 8013224:	d18d      	bne.n	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013226:	4b11      	ldr	r3, [pc, #68]	; (801326c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8013228:	f240 415d 	movw	r1, #1117	; 0x45d
 801322c:	4a10      	ldr	r2, [pc, #64]	; (8013270 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801322e:	e7ae      	b.n	801318e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8013230:	6940      	ldr	r0, [r0, #20]
 8013232:	e7b0      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8013234:	684b      	ldr	r3, [r1, #4]
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	2b01      	cmp	r3, #1
 801323a:	d008      	beq.n	801324e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801323c:	d30d      	bcc.n	801325a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801323e:	2b02      	cmp	r3, #2
 8013240:	f47f af7f 	bne.w	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013244:	4b09      	ldr	r3, [pc, #36]	; (801326c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8013246:	f240 4169 	movw	r1, #1129	; 0x469
 801324a:	4a09      	ldr	r2, [pc, #36]	; (8013270 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801324c:	e79f      	b.n	801318e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801324e:	68c0      	ldr	r0, [r0, #12]
 8013250:	e7a1      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8013252:	781b      	ldrb	r3, [r3, #0]
 8013254:	2b00      	cmp	r3, #0
 8013256:	f47f af74 	bne.w	8013142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801325a:	69c0      	ldr	r0, [r0, #28]
 801325c:	e79b      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801325e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8013260:	e799      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8013262:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8013264:	e797      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8013266:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8013268:	e795      	b.n	8013196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801326a:	bf00      	nop
 801326c:	0801e479 	.word	0x0801e479
 8013270:	0801ebf3 	.word	0x0801ebf3
 8013274:	0801e4c5 	.word	0x0801e4c5

08013278 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8013278:	b508      	push	{r3, lr}
 801327a:	4b06      	ldr	r3, [pc, #24]	; (8013294 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801327c:	8818      	ldrh	r0, [r3, #0]
 801327e:	b928      	cbnz	r0, 801328c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8013280:	4b05      	ldr	r3, [pc, #20]	; (8013298 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8013282:	2151      	movs	r1, #81	; 0x51
 8013284:	4a05      	ldr	r2, [pc, #20]	; (801329c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8013286:	4806      	ldr	r0, [pc, #24]	; (80132a0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8013288:	f006 fd1c 	bl	8019cc4 <__assert_func>
 801328c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013290:	b280      	uxth	r0, r0
 8013292:	bd08      	pop	{r3, pc}
 8013294:	24006aea 	.word	0x24006aea
 8013298:	0801e6bf 	.word	0x0801e6bf
 801329c:	0801ebb8 	.word	0x0801ebb8
 80132a0:	0801e701 	.word	0x0801e701

080132a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80132a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132a6:	4606      	mov	r6, r0
 80132a8:	b087      	sub	sp, #28
 80132aa:	4615      	mov	r5, r2
 80132ac:	461f      	mov	r7, r3
 80132ae:	b353      	cbz	r3, 8013306 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80132b0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	dd26      	ble.n	8013306 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80132b8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	dd22      	ble.n	8013306 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80132c0:	6808      	ldr	r0, [r1, #0]
 80132c2:	aa04      	add	r2, sp, #16
 80132c4:	6849      	ldr	r1, [r1, #4]
 80132c6:	4c1b      	ldr	r4, [pc, #108]	; (8013334 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80132c8:	c203      	stmia	r2!, {r0, r1}
 80132ca:	a804      	add	r0, sp, #16
 80132cc:	f7fb f9f4 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80132d0:	6820      	ldr	r0, [r4, #0]
 80132d2:	6803      	ldr	r3, [r0, #0]
 80132d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132d6:	4798      	blx	r3
 80132d8:	2fff      	cmp	r7, #255	; 0xff
 80132da:	d016      	beq.n	801330a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80132dc:	f010 0f08 	tst.w	r0, #8
 80132e0:	6820      	ldr	r0, [r4, #0]
 80132e2:	d015      	beq.n	8013310 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80132e4:	2400      	movs	r4, #0
 80132e6:	6801      	ldr	r1, [r0, #0]
 80132e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80132ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80132f0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80132f4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80132f8:	9401      	str	r4, [sp, #4]
 80132fa:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80132fe:	9400      	str	r4, [sp, #0]
 8013300:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8013302:	4629      	mov	r1, r5
 8013304:	47a0      	blx	r4
 8013306:	b007      	add	sp, #28
 8013308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801330a:	f010 0f02 	tst.w	r0, #2
 801330e:	e7e7      	b.n	80132e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8013310:	6803      	ldr	r3, [r0, #0]
 8013312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013314:	4798      	blx	r3
 8013316:	4b08      	ldr	r3, [pc, #32]	; (8013338 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8013318:	4601      	mov	r1, r0
 801331a:	4630      	mov	r0, r6
 801331c:	881a      	ldrh	r2, [r3, #0]
 801331e:	6833      	ldr	r3, [r6, #0]
 8013320:	e9cd 5700 	strd	r5, r7, [sp]
 8013324:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8013326:	ab04      	add	r3, sp, #16
 8013328:	47a8      	blx	r5
 801332a:	6820      	ldr	r0, [r4, #0]
 801332c:	6803      	ldr	r3, [r0, #0]
 801332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013330:	4798      	blx	r3
 8013332:	e7e8      	b.n	8013306 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8013334:	24006af0 	.word	0x24006af0
 8013338:	24006aea 	.word	0x24006aea

0801333c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801333c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013340:	b08b      	sub	sp, #44	; 0x2c
 8013342:	460d      	mov	r5, r1
 8013344:	4616      	mov	r6, r2
 8013346:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801334a:	f1b8 0f00 	cmp.w	r8, #0
 801334e:	d047      	beq.n	80133e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8013350:	6810      	ldr	r0, [r2, #0]
 8013352:	ac06      	add	r4, sp, #24
 8013354:	6851      	ldr	r1, [r2, #4]
 8013356:	4f51      	ldr	r7, [pc, #324]	; (801349c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8013358:	c403      	stmia	r4!, {r0, r1}
 801335a:	6818      	ldr	r0, [r3, #0]
 801335c:	ac08      	add	r4, sp, #32
 801335e:	6859      	ldr	r1, [r3, #4]
 8013360:	c403      	stmia	r4!, {r0, r1}
 8013362:	a806      	add	r0, sp, #24
 8013364:	f7fb f9a8 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013368:	4631      	mov	r1, r6
 801336a:	a808      	add	r0, sp, #32
 801336c:	f7fb f9cc 	bl	800e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013370:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013374:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013378:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801337c:	6838      	ldr	r0, [r7, #0]
 801337e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013382:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8013386:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801338a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801338e:	440d      	add	r5, r1
 8013390:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8013394:	440a      	add	r2, r1
 8013396:	f8ad 2020 	strh.w	r2, [sp, #32]
 801339a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801339e:	4413      	add	r3, r2
 80133a0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80133a4:	6803      	ldr	r3, [r0, #0]
 80133a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133a8:	4798      	blx	r3
 80133aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80133ae:	d01a      	beq.n	80133e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80133b0:	f010 0f04 	tst.w	r0, #4
 80133b4:	6838      	ldr	r0, [r7, #0]
 80133b6:	d019      	beq.n	80133ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80133b8:	2100      	movs	r1, #0
 80133ba:	6807      	ldr	r7, [r0, #0]
 80133bc:	b2a4      	uxth	r4, r4
 80133be:	f8cd 800c 	str.w	r8, [sp, #12]
 80133c2:	b2b6      	uxth	r6, r6
 80133c4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80133c8:	9401      	str	r4, [sp, #4]
 80133ca:	9600      	str	r6, [sp, #0]
 80133cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80133d0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80133d4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80133d8:	9102      	str	r1, [sp, #8]
 80133da:	4629      	mov	r1, r5
 80133dc:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80133de:	47a0      	blx	r4
 80133e0:	b00b      	add	sp, #44	; 0x2c
 80133e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133e6:	f010 0f01 	tst.w	r0, #1
 80133ea:	e7e3      	b.n	80133b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80133ec:	6803      	ldr	r3, [r0, #0]
 80133ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133f0:	4798      	blx	r3
 80133f2:	4a2b      	ldr	r2, [pc, #172]	; (80134a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80133f4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80133f8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80133fc:	8813      	ldrh	r3, [r2, #0]
 80133fe:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8013402:	fb03 f404 	mul.w	r4, r3, r4
 8013406:	fb03 c101 	mla	r1, r3, r1, ip
 801340a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801340e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013412:	4408      	add	r0, r1
 8013414:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013418:	4404      	add	r4, r0
 801341a:	d02e      	beq.n	801347a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801341c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8013420:	1b9b      	subs	r3, r3, r6
 8013422:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8013426:	1b96      	subs	r6, r2, r6
 8013428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801342c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013430:	42a0      	cmp	r0, r4
 8013432:	d22d      	bcs.n	8013490 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8013434:	eb00 0e01 	add.w	lr, r0, r1
 8013438:	4570      	cmp	r0, lr
 801343a:	d210      	bcs.n	801345e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801343c:	f890 9000 	ldrb.w	r9, [r0]
 8013440:	f815 2b01 	ldrb.w	r2, [r5], #1
 8013444:	fb19 f90c 	smulbb	r9, r9, ip
 8013448:	fb02 9208 	mla	r2, r2, r8, r9
 801344c:	b292      	uxth	r2, r2
 801344e:	f102 0901 	add.w	r9, r2, #1
 8013452:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8013456:	1212      	asrs	r2, r2, #8
 8013458:	f800 2b01 	strb.w	r2, [r0], #1
 801345c:	e7ec      	b.n	8013438 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801345e:	4418      	add	r0, r3
 8013460:	4435      	add	r5, r6
 8013462:	e7e5      	b.n	8013430 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8013464:	8813      	ldrh	r3, [r2, #0]
 8013466:	1b9b      	subs	r3, r3, r6
 8013468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801346c:	4418      	add	r0, r3
 801346e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013472:	1b9b      	subs	r3, r3, r6
 8013474:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013478:	441d      	add	r5, r3
 801347a:	42a0      	cmp	r0, r4
 801347c:	d208      	bcs.n	8013490 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801347e:	eb00 0c01 	add.w	ip, r0, r1
 8013482:	4560      	cmp	r0, ip
 8013484:	d2ee      	bcs.n	8013464 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8013486:	f815 3b01 	ldrb.w	r3, [r5], #1
 801348a:	f800 3b01 	strb.w	r3, [r0], #1
 801348e:	e7f8      	b.n	8013482 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8013490:	6838      	ldr	r0, [r7, #0]
 8013492:	6803      	ldr	r3, [r0, #0]
 8013494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013496:	4798      	blx	r3
 8013498:	e7a2      	b.n	80133e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801349a:	bf00      	nop
 801349c:	24006af0 	.word	0x24006af0
 80134a0:	24006aea 	.word	0x24006aea

080134a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80134a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134a6:	2300      	movs	r3, #0
 80134a8:	b085      	sub	sp, #20
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	4b41      	ldr	r3, [pc, #260]	; (80135b4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d136      	bne.n	8013522 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80134b4:	4a40      	ldr	r2, [pc, #256]	; (80135b8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80134b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80134ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d131      	bne.n	8013526 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80134c2:	4b3e      	ldr	r3, [pc, #248]	; (80135bc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80134c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80134c8:	ac02      	add	r4, sp, #8
 80134ca:	6808      	ldr	r0, [r1, #0]
 80134cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80134d0:	ab02      	add	r3, sp, #8
 80134d2:	6849      	ldr	r1, [r1, #4]
 80134d4:	4d3a      	ldr	r5, [pc, #232]	; (80135c0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80134d6:	c303      	stmia	r3!, {r0, r1}
 80134d8:	4669      	mov	r1, sp
 80134da:	4620      	mov	r0, r4
 80134dc:	f7fb f914 	bl	800e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80134e0:	4668      	mov	r0, sp
 80134e2:	f7fb f8e9 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80134e6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80134ea:	f8bd 2000 	ldrh.w	r2, [sp]
 80134ee:	462e      	mov	r6, r5
 80134f0:	6828      	ldr	r0, [r5, #0]
 80134f2:	4413      	add	r3, r2
 80134f4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80134f8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80134fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013500:	4413      	add	r3, r2
 8013502:	f8ad 300a 	strh.w	r3, [sp, #10]
 8013506:	6803      	ldr	r3, [r0, #0]
 8013508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801350a:	4798      	blx	r3
 801350c:	f010 0f01 	tst.w	r0, #1
 8013510:	d00b      	beq.n	801352a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8013512:	6828      	ldr	r0, [r5, #0]
 8013514:	6803      	ldr	r3, [r0, #0]
 8013516:	e894 0006 	ldmia.w	r4, {r1, r2}
 801351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801351c:	4798      	blx	r3
 801351e:	b005      	add	sp, #20
 8013520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013522:	4a26      	ldr	r2, [pc, #152]	; (80135bc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8013524:	e7c7      	b.n	80134b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8013526:	4b24      	ldr	r3, [pc, #144]	; (80135b8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8013528:	e7cc      	b.n	80134c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801352a:	6830      	ldr	r0, [r6, #0]
 801352c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8013530:	6803      	ldr	r3, [r0, #0]
 8013532:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8013536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013538:	4798      	blx	r3
 801353a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801353e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8013542:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8013546:	fb14 3402 	smlabb	r4, r4, r2, r3
 801354a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801354e:	4404      	add	r4, r0
 8013550:	6830      	ldr	r0, [r6, #0]
 8013552:	6803      	ldr	r3, [r0, #0]
 8013554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013556:	4798      	blx	r3
 8013558:	4917      	ldr	r1, [pc, #92]	; (80135b8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801355a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801355e:	880b      	ldrh	r3, [r1, #0]
 8013560:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8013564:	fb03 c202 	mla	r2, r3, r2, ip
 8013568:	437b      	muls	r3, r7
 801356a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801356e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013576:	4410      	add	r0, r2
 8013578:	18c2      	adds	r2, r0, r3
 801357a:	4290      	cmp	r0, r2
 801357c:	d214      	bcs.n	80135a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801357e:	eb00 0c07 	add.w	ip, r0, r7
 8013582:	4560      	cmp	r0, ip
 8013584:	d204      	bcs.n	8013590 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8013586:	f814 3b01 	ldrb.w	r3, [r4], #1
 801358a:	f800 3b01 	strb.w	r3, [r0], #1
 801358e:	e7f8      	b.n	8013582 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8013590:	880b      	ldrh	r3, [r1, #0]
 8013592:	1b5b      	subs	r3, r3, r5
 8013594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013598:	4418      	add	r0, r3
 801359a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801359e:	1b5b      	subs	r3, r3, r5
 80135a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80135a4:	441c      	add	r4, r3
 80135a6:	e7e8      	b.n	801357a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80135a8:	6830      	ldr	r0, [r6, #0]
 80135aa:	6803      	ldr	r3, [r0, #0]
 80135ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ae:	4798      	blx	r3
 80135b0:	e7b5      	b.n	801351e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80135b2:	bf00      	nop
 80135b4:	24006ae8 	.word	0x24006ae8
 80135b8:	24006aea 	.word	0x24006aea
 80135bc:	24006aec 	.word	0x24006aec
 80135c0:	24006af0 	.word	0x24006af0

080135c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80135c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c8:	4698      	mov	r8, r3
 80135ca:	4b24      	ldr	r3, [pc, #144]	; (801365c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 80135cc:	b089      	sub	sp, #36	; 0x24
 80135ce:	4605      	mov	r5, r0
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	468a      	mov	sl, r1
 80135d4:	4693      	mov	fp, r2
 80135d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80135da:	2b02      	cmp	r3, #2
 80135dc:	d106      	bne.n	80135ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28>
 80135de:	4b20      	ldr	r3, [pc, #128]	; (8013660 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 80135e0:	f240 11eb 	movw	r1, #491	; 0x1eb
 80135e4:	4a1f      	ldr	r2, [pc, #124]	; (8013664 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 80135e6:	4820      	ldr	r0, [pc, #128]	; (8013668 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 80135e8:	f006 fb6c 	bl	8019cc4 <__assert_func>
 80135ec:	ac08      	add	r4, sp, #32
 80135ee:	f824 8d0c 	strh.w	r8, [r4, #-12]!
 80135f2:	4620      	mov	r0, r4
 80135f4:	f7fe f932 	bl	801185c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80135f8:	682b      	ldr	r3, [r5, #0]
 80135fa:	4606      	mov	r6, r0
 80135fc:	4628      	mov	r0, r5
 80135fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013600:	4798      	blx	r3
 8013602:	4286      	cmp	r6, r0
 8013604:	d004      	beq.n	8013610 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4c>
 8013606:	4b19      	ldr	r3, [pc, #100]	; (801366c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa8>)
 8013608:	f240 11ed 	movw	r1, #493	; 0x1ed
 801360c:	4a15      	ldr	r2, [pc, #84]	; (8013664 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 801360e:	e7ea      	b.n	80135e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 8013610:	4620      	mov	r0, r4
 8013612:	f7fe f899 	bl	8011748 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013616:	4606      	mov	r6, r0
 8013618:	b920      	cbnz	r0, 8013624 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x60>
 801361a:	4b15      	ldr	r3, [pc, #84]	; (8013670 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xac>)
 801361c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8013620:	4a10      	ldr	r2, [pc, #64]	; (8013664 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8013622:	e7e0      	b.n	80135e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 8013624:	682b      	ldr	r3, [r5, #0]
 8013626:	4620      	mov	r0, r4
 8013628:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801362c:	f7fd ffaa 	bl	8011584 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013630:	4607      	mov	r7, r0
 8013632:	4620      	mov	r0, r4
 8013634:	f7fd ffea 	bl	801160c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013638:	465b      	mov	r3, fp
 801363a:	b200      	sxth	r0, r0
 801363c:	4652      	mov	r2, sl
 801363e:	b23f      	sxth	r7, r7
 8013640:	4629      	mov	r1, r5
 8013642:	9002      	str	r0, [sp, #8]
 8013644:	a806      	add	r0, sp, #24
 8013646:	e9cd 6700 	strd	r6, r7, [sp]
 801364a:	47c8      	blx	r9
 801364c:	a906      	add	r1, sp, #24
 801364e:	4640      	mov	r0, r8
 8013650:	f7fd fe60 	bl	8011314 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8013654:	4630      	mov	r0, r6
 8013656:	b009      	add	sp, #36	; 0x24
 8013658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801365c:	24006af0 	.word	0x24006af0
 8013660:	0801e545 	.word	0x0801e545
 8013664:	0801ed30 	.word	0x0801ed30
 8013668:	0801e4c5 	.word	0x0801e4c5
 801366c:	0801e5f7 	.word	0x0801e5f7
 8013670:	0801e64c 	.word	0x0801e64c

08013674 <_ZN8touchgfx8LCD24bppD0Ev>:
 8013674:	b510      	push	{r4, lr}
 8013676:	4604      	mov	r4, r0
 8013678:	2158      	movs	r1, #88	; 0x58
 801367a:	f006 faf5 	bl	8019c68 <_ZdlPvj>
 801367e:	4620      	mov	r0, r4
 8013680:	bd10      	pop	{r4, pc}

08013682 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8013682:	b510      	push	{r4, lr}
 8013684:	4604      	mov	r4, r0
 8013686:	2104      	movs	r1, #4
 8013688:	f006 faee 	bl	8019c68 <_ZdlPvj>
 801368c:	4620      	mov	r0, r4
 801368e:	bd10      	pop	{r4, pc}

08013690 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8013690:	b510      	push	{r4, lr}
 8013692:	4604      	mov	r4, r0
 8013694:	2104      	movs	r1, #4
 8013696:	f006 fae7 	bl	8019c68 <_ZdlPvj>
 801369a:	4620      	mov	r0, r4
 801369c:	bd10      	pop	{r4, pc}

0801369e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801369e:	b510      	push	{r4, lr}
 80136a0:	4604      	mov	r4, r0
 80136a2:	2104      	movs	r1, #4
 80136a4:	f006 fae0 	bl	8019c68 <_ZdlPvj>
 80136a8:	4620      	mov	r0, r4
 80136aa:	bd10      	pop	{r4, pc}

080136ac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80136ac:	b510      	push	{r4, lr}
 80136ae:	4604      	mov	r4, r0
 80136b0:	2104      	movs	r1, #4
 80136b2:	f006 fad9 	bl	8019c68 <_ZdlPvj>
 80136b6:	4620      	mov	r0, r4
 80136b8:	bd10      	pop	{r4, pc}

080136ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80136ba:	b510      	push	{r4, lr}
 80136bc:	4604      	mov	r4, r0
 80136be:	2104      	movs	r1, #4
 80136c0:	f006 fad2 	bl	8019c68 <_ZdlPvj>
 80136c4:	4620      	mov	r0, r4
 80136c6:	bd10      	pop	{r4, pc}

080136c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80136c8:	b510      	push	{r4, lr}
 80136ca:	4604      	mov	r4, r0
 80136cc:	2104      	movs	r1, #4
 80136ce:	f006 facb 	bl	8019c68 <_ZdlPvj>
 80136d2:	4620      	mov	r0, r4
 80136d4:	bd10      	pop	{r4, pc}

080136d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80136d6:	b510      	push	{r4, lr}
 80136d8:	4604      	mov	r4, r0
 80136da:	2104      	movs	r1, #4
 80136dc:	f006 fac4 	bl	8019c68 <_ZdlPvj>
 80136e0:	4620      	mov	r0, r4
 80136e2:	bd10      	pop	{r4, pc}

080136e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80136e4:	b510      	push	{r4, lr}
 80136e6:	4604      	mov	r4, r0
 80136e8:	2104      	movs	r1, #4
 80136ea:	f006 fabd 	bl	8019c68 <_ZdlPvj>
 80136ee:	4620      	mov	r0, r4
 80136f0:	bd10      	pop	{r4, pc}

080136f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80136f2:	b510      	push	{r4, lr}
 80136f4:	4604      	mov	r4, r0
 80136f6:	2104      	movs	r1, #4
 80136f8:	f006 fab6 	bl	8019c68 <_ZdlPvj>
 80136fc:	4620      	mov	r0, r4
 80136fe:	bd10      	pop	{r4, pc}

08013700 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8013700:	b510      	push	{r4, lr}
 8013702:	4604      	mov	r4, r0
 8013704:	2104      	movs	r1, #4
 8013706:	f006 faaf 	bl	8019c68 <_ZdlPvj>
 801370a:	4620      	mov	r0, r4
 801370c:	bd10      	pop	{r4, pc}

0801370e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801370e:	b510      	push	{r4, lr}
 8013710:	4604      	mov	r4, r0
 8013712:	2104      	movs	r1, #4
 8013714:	f006 faa8 	bl	8019c68 <_ZdlPvj>
 8013718:	4620      	mov	r0, r4
 801371a:	bd10      	pop	{r4, pc}

0801371c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801371c:	b510      	push	{r4, lr}
 801371e:	4604      	mov	r4, r0
 8013720:	2104      	movs	r1, #4
 8013722:	f006 faa1 	bl	8019c68 <_ZdlPvj>
 8013726:	4620      	mov	r0, r4
 8013728:	bd10      	pop	{r4, pc}

0801372a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801372a:	b510      	push	{r4, lr}
 801372c:	4604      	mov	r4, r0
 801372e:	2104      	movs	r1, #4
 8013730:	f006 fa9a 	bl	8019c68 <_ZdlPvj>
 8013734:	4620      	mov	r0, r4
 8013736:	bd10      	pop	{r4, pc}

08013738 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8013738:	b510      	push	{r4, lr}
 801373a:	4604      	mov	r4, r0
 801373c:	2104      	movs	r1, #4
 801373e:	f006 fa93 	bl	8019c68 <_ZdlPvj>
 8013742:	4620      	mov	r0, r4
 8013744:	bd10      	pop	{r4, pc}

08013746 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8013746:	b510      	push	{r4, lr}
 8013748:	4604      	mov	r4, r0
 801374a:	2104      	movs	r1, #4
 801374c:	f006 fa8c 	bl	8019c68 <_ZdlPvj>
 8013750:	4620      	mov	r0, r4
 8013752:	bd10      	pop	{r4, pc}

08013754 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8013754:	b510      	push	{r4, lr}
 8013756:	4604      	mov	r4, r0
 8013758:	2104      	movs	r1, #4
 801375a:	f006 fa85 	bl	8019c68 <_ZdlPvj>
 801375e:	4620      	mov	r0, r4
 8013760:	bd10      	pop	{r4, pc}

08013762 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8013762:	b510      	push	{r4, lr}
 8013764:	4604      	mov	r4, r0
 8013766:	2104      	movs	r1, #4
 8013768:	f006 fa7e 	bl	8019c68 <_ZdlPvj>
 801376c:	4620      	mov	r0, r4
 801376e:	bd10      	pop	{r4, pc}

08013770 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8013770:	b510      	push	{r4, lr}
 8013772:	4604      	mov	r4, r0
 8013774:	2104      	movs	r1, #4
 8013776:	f006 fa77 	bl	8019c68 <_ZdlPvj>
 801377a:	4620      	mov	r0, r4
 801377c:	bd10      	pop	{r4, pc}

0801377e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801377e:	b510      	push	{r4, lr}
 8013780:	4604      	mov	r4, r0
 8013782:	2104      	movs	r1, #4
 8013784:	f006 fa70 	bl	8019c68 <_ZdlPvj>
 8013788:	4620      	mov	r0, r4
 801378a:	bd10      	pop	{r4, pc}

0801378c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801378c:	b510      	push	{r4, lr}
 801378e:	4604      	mov	r4, r0
 8013790:	2104      	movs	r1, #4
 8013792:	f006 fa69 	bl	8019c68 <_ZdlPvj>
 8013796:	4620      	mov	r0, r4
 8013798:	bd10      	pop	{r4, pc}

0801379a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801379a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801379e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80137a2:	9c06      	ldr	r4, [sp, #24]
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d06e      	beq.n	8013886 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80137a8:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80137ac:	2d00      	cmp	r5, #0
 80137ae:	dd6a      	ble.n	8013886 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80137b0:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80137b4:	f1bc 0f00 	cmp.w	ip, #0
 80137b8:	dd65      	ble.n	8013886 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80137ba:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80137be:	28ff      	cmp	r0, #255	; 0xff
 80137c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137c4:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80137c8:	fb02 3306 	mla	r3, r2, r6, r3
 80137cc:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80137d0:	b2e4      	uxtb	r4, r4
 80137d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80137d6:	4419      	add	r1, r3
 80137d8:	fb02 f30c 	mul.w	r3, r2, ip
 80137dc:	eba2 0205 	sub.w	r2, r2, r5
 80137e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80137e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80137ec:	440b      	add	r3, r1
 80137ee:	d03e      	beq.n	801386e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80137f0:	fa1f fc80 	uxth.w	ip, r0
 80137f4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80137f8:	fb06 f60c 	mul.w	r6, r6, ip
 80137fc:	b280      	uxth	r0, r0
 80137fe:	fb07 f70c 	mul.w	r7, r7, ip
 8013802:	fb04 f40c 	mul.w	r4, r4, ip
 8013806:	4299      	cmp	r1, r3
 8013808:	d23d      	bcs.n	8013886 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801380a:	eb01 0c05 	add.w	ip, r1, r5
 801380e:	458c      	cmp	ip, r1
 8013810:	f101 0e03 	add.w	lr, r1, #3
 8013814:	d928      	bls.n	8013868 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8013816:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801381a:	fb11 f100 	smulbb	r1, r1, r0
 801381e:	4421      	add	r1, r4
 8013820:	b289      	uxth	r1, r1
 8013822:	f101 0801 	add.w	r8, r1, #1
 8013826:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801382a:	1209      	asrs	r1, r1, #8
 801382c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8013830:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8013834:	fb11 f100 	smulbb	r1, r1, r0
 8013838:	4439      	add	r1, r7
 801383a:	b289      	uxth	r1, r1
 801383c:	f101 0801 	add.w	r8, r1, #1
 8013840:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8013844:	1209      	asrs	r1, r1, #8
 8013846:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801384a:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801384e:	fb11 f100 	smulbb	r1, r1, r0
 8013852:	4431      	add	r1, r6
 8013854:	b289      	uxth	r1, r1
 8013856:	f101 0801 	add.w	r8, r1, #1
 801385a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801385e:	1209      	asrs	r1, r1, #8
 8013860:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8013864:	4671      	mov	r1, lr
 8013866:	e7d2      	b.n	801380e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8013868:	4411      	add	r1, r2
 801386a:	e7cc      	b.n	8013806 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801386c:	4411      	add	r1, r2
 801386e:	4299      	cmp	r1, r3
 8013870:	d209      	bcs.n	8013886 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8013872:	1948      	adds	r0, r1, r5
 8013874:	4281      	cmp	r1, r0
 8013876:	d2f9      	bcs.n	801386c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8013878:	700c      	strb	r4, [r1, #0]
 801387a:	3103      	adds	r1, #3
 801387c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8013880:	f801 6c01 	strb.w	r6, [r1, #-1]
 8013884:	e7f6      	b.n	8013874 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8013886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801388c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013890:	b093      	sub	sp, #76	; 0x4c
 8013892:	4699      	mov	r9, r3
 8013894:	4605      	mov	r5, r0
 8013896:	460e      	mov	r6, r1
 8013898:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801389c:	4617      	mov	r7, r2
 801389e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80138a0:	9304      	str	r3, [sp, #16]
 80138a2:	4b8c      	ldr	r3, [pc, #560]	; (8013ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 80138a4:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80138ae:	2b02      	cmp	r3, #2
 80138b0:	d106      	bne.n	80138c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34>
 80138b2:	4b89      	ldr	r3, [pc, #548]	; (8013ad8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 80138b4:	f240 11f7 	movw	r1, #503	; 0x1f7
 80138b8:	4a88      	ldr	r2, [pc, #544]	; (8013adc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 80138ba:	4889      	ldr	r0, [pc, #548]	; (8013ae0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 80138bc:	f006 fa02 	bl	8019cc4 <__assert_func>
 80138c0:	b924      	cbnz	r4, 80138cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40>
 80138c2:	4b88      	ldr	r3, [pc, #544]	; (8013ae4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 80138c4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80138c8:	4a84      	ldr	r2, [pc, #528]	; (8013adc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 80138ca:	e7f6      	b.n	80138ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2e>
 80138cc:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 80138d0:	4649      	mov	r1, r9
 80138d2:	f9b9 2000 	ldrsh.w	r2, [r9]
 80138d6:	a80c      	add	r0, sp, #48	; 0x30
 80138d8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80138dc:	9b04      	ldr	r3, [sp, #16]
 80138de:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80138e2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80138e6:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
 80138ea:	f7f7 fc0f 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 80138ee:	4639      	mov	r1, r7
 80138f0:	a80c      	add	r0, sp, #48	; 0x30
 80138f2:	f7f7 fc0b 	bl	800b10c <_ZN8touchgfx4RectaNERKS0_>
 80138f6:	4b7c      	ldr	r3, [pc, #496]	; (8013ae8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 80138f8:	8818      	ldrh	r0, [r3, #0]
 80138fa:	4b7c      	ldr	r3, [pc, #496]	; (8013aec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x260>)
 80138fc:	fa0f fc80 	sxth.w	ip, r0
 8013900:	8819      	ldrh	r1, [r3, #0]
 8013902:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013906:	b20f      	sxth	r7, r1
 8013908:	2b00      	cmp	r3, #0
 801390a:	da07      	bge.n	801391c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x90>
 801390c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8013910:	4413      	add	r3, r2
 8013912:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013916:	2300      	movs	r3, #0
 8013918:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801391c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8013920:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
 8013924:	ebac 0302 	sub.w	r3, ip, r2
 8013928:	459e      	cmp	lr, r3
 801392a:	bfc4      	itt	gt
 801392c:	1a83      	subgt	r3, r0, r2
 801392e:	f8ad 3034 	strhgt.w	r3, [sp, #52]	; 0x34
 8013932:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013936:	2b00      	cmp	r3, #0
 8013938:	da07      	bge.n	801394a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xbe>
 801393a:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801393e:	4463      	add	r3, ip
 8013940:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013944:	2300      	movs	r3, #0
 8013946:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801394a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801394e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8013952:	1aff      	subs	r7, r7, r3
 8013954:	45bc      	cmp	ip, r7
 8013956:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8013af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x268>
 801395a:	bfc8      	it	gt
 801395c:	1acf      	subgt	r7, r1, r3
 801395e:	f89c c000 	ldrb.w	ip, [ip]
 8013962:	bfc8      	it	gt
 8013964:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8013968:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801396c:	f1bc 0f00 	cmp.w	ip, #0
 8013970:	d174      	bne.n	8013a5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 8013972:	4287      	cmp	r7, r0
 8013974:	bf14      	ite	ne
 8013976:	2100      	movne	r1, #0
 8013978:	2101      	moveq	r1, #1
 801397a:	2f00      	cmp	r7, #0
 801397c:	9107      	str	r1, [sp, #28]
 801397e:	dd71      	ble.n	8013a64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>
 8013980:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8013984:	2900      	cmp	r1, #0
 8013986:	9103      	str	r1, [sp, #12]
 8013988:	dd6c      	ble.n	8013a64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>
 801398a:	f8b9 1000 	ldrh.w	r1, [r9]
 801398e:	a80e      	add	r0, sp, #56	; 0x38
 8013990:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
 8013994:	f04f 0803 	mov.w	r8, #3
 8013998:	1a52      	subs	r2, r2, r1
 801399a:	a910      	add	r1, sp, #64	; 0x40
 801399c:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 80139a0:	b212      	sxth	r2, r2
 80139a2:	9205      	str	r2, [sp, #20]
 80139a4:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80139a8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8013ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>
 80139ac:	1a9b      	subs	r3, r3, r2
 80139ae:	b21b      	sxth	r3, r3
 80139b0:	9306      	str	r3, [sp, #24]
 80139b2:	9b05      	ldr	r3, [sp, #20]
 80139b4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80139b8:	9b06      	ldr	r3, [sp, #24]
 80139ba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80139be:	9b03      	ldr	r3, [sp, #12]
 80139c0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80139c4:	2300      	movs	r3, #0
 80139c6:	9310      	str	r3, [sp, #64]	; 0x40
 80139c8:	9b04      	ldr	r3, [sp, #16]
 80139ca:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80139ce:	f7fa fe9b 	bl	800e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80139d2:	a90c      	add	r1, sp, #48	; 0x30
 80139d4:	4608      	mov	r0, r1
 80139d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80139d8:	f7fa fe6e 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80139dc:	a810      	add	r0, sp, #64	; 0x40
 80139de:	f7fa fe6b 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80139e2:	4b43      	ldr	r3, [pc, #268]	; (8013af0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>)
 80139e4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80139e8:	4630      	mov	r0, r6
 80139ea:	881b      	ldrh	r3, [r3, #0]
 80139ec:	9308      	str	r3, [sp, #32]
 80139ee:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80139f2:	b21b      	sxth	r3, r3
 80139f4:	9302      	str	r3, [sp, #8]
 80139f6:	6833      	ldr	r3, [r6, #0]
 80139f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139fa:	4798      	blx	r3
 80139fc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8013a00:	9a02      	ldr	r2, [sp, #8]
 8013a02:	4682      	mov	sl, r0
 8013a04:	f8d9 0000 	ldr.w	r0, [r9]
 8013a08:	fb13 f202 	smulbb	r2, r3, r2
 8013a0c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013a10:	fb13 2308 	smlabb	r3, r3, r8, r2
 8013a14:	441c      	add	r4, r3
 8013a16:	6803      	ldr	r3, [r0, #0]
 8013a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a1a:	4798      	blx	r3
 8013a1c:	900a      	str	r0, [sp, #40]	; 0x28
 8013a1e:	f8d9 0000 	ldr.w	r0, [r9]
 8013a22:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013a26:	6802      	ldr	r2, [r0, #0]
 8013a28:	9309      	str	r3, [sp, #36]	; 0x24
 8013a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013a2c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8013a30:	4790      	blx	r2
 8013a32:	f010 0f01 	tst.w	r0, #1
 8013a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a38:	d01d      	beq.n	8013a76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ea>
 8013a3a:	f8d9 0000 	ldr.w	r0, [r9]
 8013a3e:	9a04      	ldr	r2, [sp, #16]
 8013a40:	6803      	ldr	r3, [r0, #0]
 8013a42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a44:	9200      	str	r2, [sp, #0]
 8013a46:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013a48:	4623      	mov	r3, r4
 8013a4a:	c906      	ldmia	r1, {r1, r2}
 8013a4c:	47b0      	blx	r6
 8013a4e:	9b05      	ldr	r3, [sp, #20]
 8013a50:	80af      	strh	r7, [r5, #4]
 8013a52:	802b      	strh	r3, [r5, #0]
 8013a54:	9b06      	ldr	r3, [sp, #24]
 8013a56:	806b      	strh	r3, [r5, #2]
 8013a58:	9b03      	ldr	r3, [sp, #12]
 8013a5a:	e007      	b.n	8013a6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 8013a5c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8013a60:	4288      	cmp	r0, r1
 8013a62:	e787      	b.n	8013974 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe8>
 8013a64:	2300      	movs	r3, #0
 8013a66:	802b      	strh	r3, [r5, #0]
 8013a68:	806b      	strh	r3, [r5, #2]
 8013a6a:	80ab      	strh	r3, [r5, #4]
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	80eb      	strh	r3, [r5, #6]
 8013a70:	b013      	add	sp, #76	; 0x4c
 8013a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a78:	fb0a f606 	mul.w	r6, sl, r6
 8013a7c:	fb12 6608 	smlabb	r6, r2, r8, r6
 8013a80:	9a07      	ldr	r2, [sp, #28]
 8013a82:	441e      	add	r6, r3
 8013a84:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8013a88:	b16a      	cbz	r2, 8013aa6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8013a8a:	9a08      	ldr	r2, [sp, #32]
 8013a8c:	4593      	cmp	fp, r2
 8013a8e:	d10a      	bne.n	8013aa6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8013a90:	f8d9 0000 	ldr.w	r0, [r9]
 8013a94:	fb03 f30a 	mul.w	r3, r3, sl
 8013a98:	4621      	mov	r1, r4
 8013a9a:	6802      	ldr	r2, [r0, #0]
 8013a9c:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8013aa0:	4632      	mov	r2, r6
 8013aa2:	47c8      	blx	r9
 8013aa4:	e7d3      	b.n	8013a4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8013aa6:	9a02      	ldr	r2, [sp, #8]
 8013aa8:	f8df b028 	ldr.w	fp, [pc, #40]	; 8013ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>
 8013aac:	fb02 4803 	mla	r8, r2, r3, r4
 8013ab0:	4544      	cmp	r4, r8
 8013ab2:	d2cc      	bcs.n	8013a4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8013ab4:	f8db 0000 	ldr.w	r0, [fp]
 8013ab8:	4621      	mov	r1, r4
 8013aba:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8013abe:	6802      	ldr	r2, [r0, #0]
 8013ac0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013ac4:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8013ac8:	4632      	mov	r2, r6
 8013aca:	47c8      	blx	r9
 8013acc:	9b02      	ldr	r3, [sp, #8]
 8013ace:	4456      	add	r6, sl
 8013ad0:	441c      	add	r4, r3
 8013ad2:	e7ed      	b.n	8013ab0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8013ad4:	24006af0 	.word	0x24006af0
 8013ad8:	0801e545 	.word	0x0801e545
 8013adc:	0801ec9d 	.word	0x0801ec9d
 8013ae0:	0801e4c5 	.word	0x0801e4c5
 8013ae4:	0801e4f7 	.word	0x0801e4f7
 8013ae8:	24006ae4 	.word	0x24006ae4
 8013aec:	24006ae6 	.word	0x24006ae6
 8013af0:	24006aea 	.word	0x24006aea
 8013af4:	24006ae8 	.word	0x24006ae8

08013af8 <_ZN8touchgfx8LCD24bppC1Ev>:
 8013af8:	2200      	movs	r2, #0
 8013afa:	490c      	ldr	r1, [pc, #48]	; (8013b2c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8013afc:	6042      	str	r2, [r0, #4]
 8013afe:	6001      	str	r1, [r0, #0]
 8013b00:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8013b04:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8013b08:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013b0c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8013b10:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8013b14:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8013b18:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8013b1c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8013b20:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8013b24:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8013b28:	4770      	bx	lr
 8013b2a:	bf00      	nop
 8013b2c:	0801e8e0 	.word	0x0801e8e0

08013b30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8013b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b34:	b091      	sub	sp, #68	; 0x44
 8013b36:	880d      	ldrh	r5, [r1, #0]
 8013b38:	4607      	mov	r7, r0
 8013b3a:	4688      	mov	r8, r1
 8013b3c:	4616      	mov	r6, r2
 8013b3e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8013b42:	b12d      	cbz	r5, 8013b50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8013b44:	4b69      	ldr	r3, [pc, #420]	; (8013cec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8013b46:	215e      	movs	r1, #94	; 0x5e
 8013b48:	4a69      	ldr	r2, [pc, #420]	; (8013cf0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8013b4a:	486a      	ldr	r0, [pc, #424]	; (8013cf4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8013b4c:	f006 f8ba 	bl	8019cc4 <__assert_func>
 8013b50:	6810      	ldr	r0, [r2, #0]
 8013b52:	ac0c      	add	r4, sp, #48	; 0x30
 8013b54:	6851      	ldr	r1, [r2, #4]
 8013b56:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8013cf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8013b5a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8013cfc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8013b5e:	c403      	stmia	r4!, {r0, r1}
 8013b60:	6818      	ldr	r0, [r3, #0]
 8013b62:	ac0e      	add	r4, sp, #56	; 0x38
 8013b64:	6859      	ldr	r1, [r3, #4]
 8013b66:	c403      	stmia	r4!, {r0, r1}
 8013b68:	a80c      	add	r0, sp, #48	; 0x30
 8013b6a:	f7fa fda5 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013b6e:	4631      	mov	r1, r6
 8013b70:	a80e      	add	r0, sp, #56	; 0x38
 8013b72:	f7fa fdc9 	bl	800e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013b76:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8013b7a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8013b7e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8013b82:	f8da 0000 	ldr.w	r0, [sl]
 8013b86:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013b8a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8013b8e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8013b92:	440f      	add	r7, r1
 8013b94:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8013b98:	440a      	add	r2, r1
 8013b9a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8013b9e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8013ba2:	4413      	add	r3, r2
 8013ba4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8013ba8:	6803      	ldr	r3, [r0, #0]
 8013baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bac:	4798      	blx	r3
 8013bae:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013bb2:	f8da 0000 	ldr.w	r0, [sl]
 8013bb6:	d01e      	beq.n	8013bf6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8013bb8:	6801      	ldr	r1, [r0, #0]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	9509      	str	r5, [sp, #36]	; 0x24
 8013bbe:	250b      	movs	r5, #11
 8013bc0:	b2a4      	uxth	r4, r4
 8013bc2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013bc6:	b2b6      	uxth	r6, r6
 8013bc8:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8013bcc:	f8bb 5000 	ldrh.w	r5, [fp]
 8013bd0:	f8cd 9010 	str.w	r9, [sp, #16]
 8013bd4:	9602      	str	r6, [sp, #8]
 8013bd6:	9401      	str	r4, [sp, #4]
 8013bd8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8013bdc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8013be0:	9203      	str	r2, [sp, #12]
 8013be2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8013be6:	9200      	str	r2, [sp, #0]
 8013be8:	4642      	mov	r2, r8
 8013bea:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8013bec:	4639      	mov	r1, r7
 8013bee:	47a0      	blx	r4
 8013bf0:	b011      	add	sp, #68	; 0x44
 8013bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf6:	6803      	ldr	r3, [r0, #0]
 8013bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bfa:	4798      	blx	r3
 8013bfc:	f8bb 5000 	ldrh.w	r5, [fp]
 8013c00:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8013c04:	f04f 0e04 	mov.w	lr, #4
 8013c08:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8013c0c:	436e      	muls	r6, r5
 8013c0e:	fb05 2303 	mla	r3, r5, r3, r2
 8013c12:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013c16:	1b2d      	subs	r5, r5, r4
 8013c18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c20:	4418      	add	r0, r3
 8013c22:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8013c26:	1982      	adds	r2, r0, r6
 8013c28:	1b1b      	subs	r3, r3, r4
 8013c2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c30:	4290      	cmp	r0, r2
 8013c32:	d254      	bcs.n	8013cde <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8013c34:	eb00 0a04 	add.w	sl, r0, r4
 8013c38:	4550      	cmp	r0, sl
 8013c3a:	d24c      	bcs.n	8013cd6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8013c3c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013c40:	fb1e e101 	smlabb	r1, lr, r1, lr
 8013c44:	eb08 0c01 	add.w	ip, r8, r1
 8013c48:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8013c4c:	b173      	cbz	r3, 8013c6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8013c4e:	2bff      	cmp	r3, #255	; 0xff
 8013c50:	f818 b001 	ldrb.w	fp, [r8, r1]
 8013c54:	d10c      	bne.n	8013c70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8013c56:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013c5a:	d109      	bne.n	8013c70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8013c5c:	f880 b000 	strb.w	fp, [r0]
 8013c60:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8013c64:	7043      	strb	r3, [r0, #1]
 8013c66:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8013c6a:	7083      	strb	r3, [r0, #2]
 8013c6c:	3003      	adds	r0, #3
 8013c6e:	e7e3      	b.n	8013c38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8013c70:	fb09 f103 	mul.w	r1, r9, r3
 8013c74:	1c4b      	adds	r3, r1, #1
 8013c76:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8013c7a:	7801      	ldrb	r1, [r0, #0]
 8013c7c:	121b      	asrs	r3, r3, #8
 8013c7e:	b29e      	uxth	r6, r3
 8013c80:	43db      	mvns	r3, r3
 8013c82:	fb1b fb06 	smulbb	fp, fp, r6
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	fb01 b103 	mla	r1, r1, r3, fp
 8013c8c:	b289      	uxth	r1, r1
 8013c8e:	f101 0b01 	add.w	fp, r1, #1
 8013c92:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8013c96:	f890 b001 	ldrb.w	fp, [r0, #1]
 8013c9a:	fb1b fb03 	smulbb	fp, fp, r3
 8013c9e:	1209      	asrs	r1, r1, #8
 8013ca0:	7001      	strb	r1, [r0, #0]
 8013ca2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8013ca6:	fb01 b106 	mla	r1, r1, r6, fp
 8013caa:	b289      	uxth	r1, r1
 8013cac:	f101 0b01 	add.w	fp, r1, #1
 8013cb0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8013cb4:	1209      	asrs	r1, r1, #8
 8013cb6:	7041      	strb	r1, [r0, #1]
 8013cb8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8013cbc:	f890 c002 	ldrb.w	ip, [r0, #2]
 8013cc0:	fb1c f303 	smulbb	r3, ip, r3
 8013cc4:	fb01 3606 	mla	r6, r1, r6, r3
 8013cc8:	b2b6      	uxth	r6, r6
 8013cca:	1c73      	adds	r3, r6, #1
 8013ccc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8013cd0:	1236      	asrs	r6, r6, #8
 8013cd2:	7086      	strb	r6, [r0, #2]
 8013cd4:	e7ca      	b.n	8013c6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8013cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cd8:	4428      	add	r0, r5
 8013cda:	441f      	add	r7, r3
 8013cdc:	e7a8      	b.n	8013c30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8013cde:	4b06      	ldr	r3, [pc, #24]	; (8013cf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8013ce0:	6818      	ldr	r0, [r3, #0]
 8013ce2:	6803      	ldr	r3, [r0, #0]
 8013ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ce6:	4798      	blx	r3
 8013ce8:	e782      	b.n	8013bf0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8013cea:	bf00      	nop
 8013cec:	0801e429 	.word	0x0801e429
 8013cf0:	0801eabf 	.word	0x0801eabf
 8013cf4:	0801e4c5 	.word	0x0801e4c5
 8013cf8:	24006af0 	.word	0x24006af0
 8013cfc:	24006aea 	.word	0x24006aea

08013d00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8013d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d04:	f8b1 9000 	ldrh.w	r9, [r1]
 8013d08:	b091      	sub	sp, #68	; 0x44
 8013d0a:	4604      	mov	r4, r0
 8013d0c:	460e      	mov	r6, r1
 8013d0e:	f1b9 0f01 	cmp.w	r9, #1
 8013d12:	4690      	mov	r8, r2
 8013d14:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8013d18:	d005      	beq.n	8013d26 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8013d1a:	4b69      	ldr	r3, [pc, #420]	; (8013ec0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8013d1c:	21ac      	movs	r1, #172	; 0xac
 8013d1e:	4a69      	ldr	r2, [pc, #420]	; (8013ec4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8013d20:	4869      	ldr	r0, [pc, #420]	; (8013ec8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8013d22:	f005 ffcf 	bl	8019cc4 <__assert_func>
 8013d26:	6810      	ldr	r0, [r2, #0]
 8013d28:	ad0c      	add	r5, sp, #48	; 0x30
 8013d2a:	6851      	ldr	r1, [r2, #4]
 8013d2c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8013ecc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8013d30:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8013ed0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8013d34:	c503      	stmia	r5!, {r0, r1}
 8013d36:	6818      	ldr	r0, [r3, #0]
 8013d38:	ad0e      	add	r5, sp, #56	; 0x38
 8013d3a:	6859      	ldr	r1, [r3, #4]
 8013d3c:	c503      	stmia	r5!, {r0, r1}
 8013d3e:	a80c      	add	r0, sp, #48	; 0x30
 8013d40:	f7fa fcba 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013d44:	4641      	mov	r1, r8
 8013d46:	a80e      	add	r0, sp, #56	; 0x38
 8013d48:	f7fa fcde 	bl	800e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013d4c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8013d50:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8013d54:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8013d58:	f8da 0000 	ldr.w	r0, [sl]
 8013d5c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013d60:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8013d64:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8013d68:	440c      	add	r4, r1
 8013d6a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8013d6e:	440a      	add	r2, r1
 8013d70:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8013d74:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8013d78:	4413      	add	r3, r2
 8013d7a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8013d7e:	6803      	ldr	r3, [r0, #0]
 8013d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d82:	4798      	blx	r3
 8013d84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013d88:	f8da 0000 	ldr.w	r0, [sl]
 8013d8c:	d020      	beq.n	8013dd0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8013d8e:	2200      	movs	r2, #0
 8013d90:	f04f 0c0b 	mov.w	ip, #11
 8013d94:	6801      	ldr	r1, [r0, #0]
 8013d96:	b2ad      	uxth	r5, r5
 8013d98:	f8cd c01c 	str.w	ip, [sp, #28]
 8013d9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013da0:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8013da4:	f8bb c000 	ldrh.w	ip, [fp]
 8013da8:	9704      	str	r7, [sp, #16]
 8013daa:	9502      	str	r5, [sp, #8]
 8013dac:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8013db0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8013db4:	9203      	str	r2, [sp, #12]
 8013db6:	fa1f f288 	uxth.w	r2, r8
 8013dba:	9201      	str	r2, [sp, #4]
 8013dbc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8013dc0:	9200      	str	r2, [sp, #0]
 8013dc2:	4632      	mov	r2, r6
 8013dc4:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8013dc6:	4621      	mov	r1, r4
 8013dc8:	47a8      	blx	r5
 8013dca:	b011      	add	sp, #68	; 0x44
 8013dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd0:	6803      	ldr	r3, [r0, #0]
 8013dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dd4:	4798      	blx	r3
 8013dd6:	f8bb 2000 	ldrh.w	r2, [fp]
 8013dda:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8013dde:	f04f 0e03 	mov.w	lr, #3
 8013de2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8013de6:	4355      	muls	r5, r2
 8013de8:	fa1f fc87 	uxth.w	ip, r7
 8013dec:	fb02 1303 	mla	r3, r2, r3, r1
 8013df0:	eba2 0208 	sub.w	r2, r2, r8
 8013df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013df8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013dfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013e00:	4418      	add	r0, r3
 8013e02:	920b      	str	r2, [sp, #44]	; 0x2c
 8013e04:	1943      	adds	r3, r0, r5
 8013e06:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8013e0a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8013e0e:	eba2 0208 	sub.w	r2, r2, r8
 8013e12:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013e16:	b2ad      	uxth	r5, r5
 8013e18:	4298      	cmp	r0, r3
 8013e1a:	d24a      	bcs.n	8013eb2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8013e1c:	eb00 0908 	add.w	r9, r0, r8
 8013e20:	4621      	mov	r1, r4
 8013e22:	4548      	cmp	r0, r9
 8013e24:	460c      	mov	r4, r1
 8013e26:	d240      	bcs.n	8013eaa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8013e28:	f04f 0a04 	mov.w	sl, #4
 8013e2c:	7824      	ldrb	r4, [r4, #0]
 8013e2e:	2fff      	cmp	r7, #255	; 0xff
 8013e30:	f101 0101 	add.w	r1, r1, #1
 8013e34:	fb1e a404 	smlabb	r4, lr, r4, sl
 8013e38:	eb06 0a04 	add.w	sl, r6, r4
 8013e3c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8013e40:	d02b      	beq.n	8013e9a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8013e42:	7804      	ldrb	r4, [r0, #0]
 8013e44:	fb14 f405 	smulbb	r4, r4, r5
 8013e48:	fb0b 440c 	mla	r4, fp, ip, r4
 8013e4c:	b2a4      	uxth	r4, r4
 8013e4e:	f104 0b01 	add.w	fp, r4, #1
 8013e52:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8013e56:	f890 b001 	ldrb.w	fp, [r0, #1]
 8013e5a:	fb1b fb05 	smulbb	fp, fp, r5
 8013e5e:	1224      	asrs	r4, r4, #8
 8013e60:	7004      	strb	r4, [r0, #0]
 8013e62:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8013e66:	fb04 b40c 	mla	r4, r4, ip, fp
 8013e6a:	b2a4      	uxth	r4, r4
 8013e6c:	f104 0b01 	add.w	fp, r4, #1
 8013e70:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8013e74:	1224      	asrs	r4, r4, #8
 8013e76:	7044      	strb	r4, [r0, #1]
 8013e78:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8013e7c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8013e80:	fb1a fa05 	smulbb	sl, sl, r5
 8013e84:	fb04 a40c 	mla	r4, r4, ip, sl
 8013e88:	b2a4      	uxth	r4, r4
 8013e8a:	f104 0a01 	add.w	sl, r4, #1
 8013e8e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8013e92:	1224      	asrs	r4, r4, #8
 8013e94:	7084      	strb	r4, [r0, #2]
 8013e96:	3003      	adds	r0, #3
 8013e98:	e7c3      	b.n	8013e22 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 8013e9a:	f880 b000 	strb.w	fp, [r0]
 8013e9e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8013ea2:	7044      	strb	r4, [r0, #1]
 8013ea4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8013ea8:	e7f4      	b.n	8013e94 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 8013eaa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013eac:	4420      	add	r0, r4
 8013eae:	188c      	adds	r4, r1, r2
 8013eb0:	e7b2      	b.n	8013e18 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8013eb2:	4b06      	ldr	r3, [pc, #24]	; (8013ecc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8013eb4:	6818      	ldr	r0, [r3, #0]
 8013eb6:	6803      	ldr	r3, [r0, #0]
 8013eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eba:	4798      	blx	r3
 8013ebc:	e785      	b.n	8013dca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 8013ebe:	bf00      	nop
 8013ec0:	0801e3a8 	.word	0x0801e3a8
 8013ec4:	0801e9b2 	.word	0x0801e9b2
 8013ec8:	0801e4c5 	.word	0x0801e4c5
 8013ecc:	24006af0 	.word	0x24006af0
 8013ed0:	24006aea 	.word	0x24006aea

08013ed4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8013ed4:	b570      	push	{r4, r5, r6, lr}
 8013ed6:	780d      	ldrb	r5, [r1, #0]
 8013ed8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8013edc:	2d01      	cmp	r5, #1
 8013ede:	d00d      	beq.n	8013efc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8013ee0:	d307      	bcc.n	8013ef2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8013ee2:	2d02      	cmp	r5, #2
 8013ee4:	d10f      	bne.n	8013f06 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8013ee6:	4b08      	ldr	r3, [pc, #32]	; (8013f08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8013ee8:	2151      	movs	r1, #81	; 0x51
 8013eea:	4a08      	ldr	r2, [pc, #32]	; (8013f0c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8013eec:	4808      	ldr	r0, [pc, #32]	; (8013f10 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8013eee:	f005 fee9 	bl	8019cc4 <__assert_func>
 8013ef2:	9404      	str	r4, [sp, #16]
 8013ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ef8:	f7ff be1a 	b.w	8013b30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8013efc:	9404      	str	r4, [sp, #16]
 8013efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f02:	f7ff befd 	b.w	8013d00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8013f06:	bd70      	pop	{r4, r5, r6, pc}
 8013f08:	0801e35d 	.word	0x0801e35d
 8013f0c:	0801e930 	.word	0x0801e930
 8013f10:	0801e4c5 	.word	0x0801e4c5

08013f14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8013f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f18:	4605      	mov	r5, r0
 8013f1a:	b08f      	sub	sp, #60	; 0x3c
 8013f1c:	460c      	mov	r4, r1
 8013f1e:	461f      	mov	r7, r3
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d052      	beq.n	8013fca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8013f24:	6808      	ldr	r0, [r1, #0]
 8013f26:	ab0a      	add	r3, sp, #40	; 0x28
 8013f28:	6849      	ldr	r1, [r1, #4]
 8013f2a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80140f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8013f2e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80140f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8013f32:	c303      	stmia	r3!, {r0, r1}
 8013f34:	6810      	ldr	r0, [r2, #0]
 8013f36:	ab0c      	add	r3, sp, #48	; 0x30
 8013f38:	6851      	ldr	r1, [r2, #4]
 8013f3a:	c303      	stmia	r3!, {r0, r1}
 8013f3c:	a80a      	add	r0, sp, #40	; 0x28
 8013f3e:	f7fa fbbb 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013f42:	4621      	mov	r1, r4
 8013f44:	a80c      	add	r0, sp, #48	; 0x30
 8013f46:	f7fa fbdf 	bl	800e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013f4a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8013f4e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013f52:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013f56:	f8d8 0000 	ldr.w	r0, [r8]
 8013f5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013f5e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8013f62:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8013f66:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8013f6a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8013f6e:	440a      	add	r2, r1
 8013f70:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8013f74:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8013f78:	4413      	add	r3, r2
 8013f7a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013f7e:	6803      	ldr	r3, [r0, #0]
 8013f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f82:	4798      	blx	r3
 8013f84:	2fff      	cmp	r7, #255	; 0xff
 8013f86:	d023      	beq.n	8013fd0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8013f88:	f010 0f04 	tst.w	r0, #4
 8013f8c:	f8d8 0000 	ldr.w	r0, [r8]
 8013f90:	d021      	beq.n	8013fd6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8013f92:	2100      	movs	r1, #0
 8013f94:	f04f 0e01 	mov.w	lr, #1
 8013f98:	f8d0 c000 	ldr.w	ip, [r0]
 8013f9c:	b2a4      	uxth	r4, r4
 8013f9e:	9106      	str	r1, [sp, #24]
 8013fa0:	b2b6      	uxth	r6, r6
 8013fa2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8013fa6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8013faa:	e9cd e107 	strd	lr, r1, [sp, #28]
 8013fae:	f8b9 e000 	ldrh.w	lr, [r9]
 8013fb2:	9703      	str	r7, [sp, #12]
 8013fb4:	9401      	str	r4, [sp, #4]
 8013fb6:	9600      	str	r6, [sp, #0]
 8013fb8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8013fbc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013fc0:	9102      	str	r1, [sp, #8]
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8013fc8:	47a0      	blx	r4
 8013fca:	b00f      	add	sp, #60	; 0x3c
 8013fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fd0:	f010 0f01 	tst.w	r0, #1
 8013fd4:	e7da      	b.n	8013f8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8013fd6:	6803      	ldr	r3, [r0, #0]
 8013fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fda:	4798      	blx	r3
 8013fdc:	f8b9 1000 	ldrh.w	r1, [r9]
 8013fe0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013fe4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8013fe8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8013fec:	434c      	muls	r4, r1
 8013fee:	2fff      	cmp	r7, #255	; 0xff
 8013ff0:	fb01 2303 	mla	r3, r1, r3, r2
 8013ff4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013ff8:	eba1 0106 	sub.w	r1, r1, r6
 8013ffc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014000:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014004:	4418      	add	r0, r3
 8014006:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801400a:	eba3 0606 	sub.w	r6, r3, r6
 801400e:	4404      	add	r4, r0
 8014010:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8014014:	d04a      	beq.n	80140ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8014016:	43fa      	mvns	r2, r7
 8014018:	b2bb      	uxth	r3, r7
 801401a:	b2d7      	uxtb	r7, r2
 801401c:	42a0      	cmp	r0, r4
 801401e:	d263      	bcs.n	80140e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8014020:	eb00 0e0c 	add.w	lr, r0, ip
 8014024:	4586      	cmp	lr, r0
 8014026:	f100 0803 	add.w	r8, r0, #3
 801402a:	d93a      	bls.n	80140a2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801402c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8014030:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8014034:	00d0      	lsls	r0, r2, #3
 8014036:	fb19 f907 	smulbb	r9, r9, r7
 801403a:	b2c0      	uxtb	r0, r0
 801403c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8014040:	fb00 9003 	mla	r0, r0, r3, r9
 8014044:	b280      	uxth	r0, r0
 8014046:	f100 0901 	add.w	r9, r0, #1
 801404a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801404e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8014052:	fb19 f907 	smulbb	r9, r9, r7
 8014056:	1200      	asrs	r0, r0, #8
 8014058:	f808 0c03 	strb.w	r0, [r8, #-3]
 801405c:	10d0      	asrs	r0, r2, #3
 801405e:	1212      	asrs	r2, r2, #8
 8014060:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8014064:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8014068:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801406c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8014070:	fb00 9003 	mla	r0, r0, r3, r9
 8014074:	b280      	uxth	r0, r0
 8014076:	f100 0901 	add.w	r9, r0, #1
 801407a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801407e:	1200      	asrs	r0, r0, #8
 8014080:	f808 0c02 	strb.w	r0, [r8, #-2]
 8014084:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8014088:	fb10 f007 	smulbb	r0, r0, r7
 801408c:	fb02 0203 	mla	r2, r2, r3, r0
 8014090:	b292      	uxth	r2, r2
 8014092:	1c50      	adds	r0, r2, #1
 8014094:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8014098:	4640      	mov	r0, r8
 801409a:	1212      	asrs	r2, r2, #8
 801409c:	f808 2c01 	strb.w	r2, [r8, #-1]
 80140a0:	e7c0      	b.n	8014024 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80140a2:	4408      	add	r0, r1
 80140a4:	4435      	add	r5, r6
 80140a6:	e7b9      	b.n	801401c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80140a8:	4408      	add	r0, r1
 80140aa:	4435      	add	r5, r6
 80140ac:	42a0      	cmp	r0, r4
 80140ae:	d21b      	bcs.n	80140e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80140b0:	eb00 070c 	add.w	r7, r0, ip
 80140b4:	42b8      	cmp	r0, r7
 80140b6:	d2f7      	bcs.n	80140a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80140b8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80140bc:	3003      	adds	r0, #3
 80140be:	00da      	lsls	r2, r3, #3
 80140c0:	b2d2      	uxtb	r2, r2
 80140c2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80140c6:	f800 2c03 	strb.w	r2, [r0, #-3]
 80140ca:	10da      	asrs	r2, r3, #3
 80140cc:	121b      	asrs	r3, r3, #8
 80140ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80140d2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80140d6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80140da:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80140de:	f800 2c02 	strb.w	r2, [r0, #-2]
 80140e2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80140e6:	e7e5      	b.n	80140b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80140e8:	4b02      	ldr	r3, [pc, #8]	; (80140f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80140ea:	6818      	ldr	r0, [r3, #0]
 80140ec:	6803      	ldr	r3, [r0, #0]
 80140ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f0:	4798      	blx	r3
 80140f2:	e76a      	b.n	8013fca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80140f4:	24006af0 	.word	0x24006af0
 80140f8:	24006aea 	.word	0x24006aea

080140fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80140fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014100:	b08a      	sub	sp, #40	; 0x28
 8014102:	460d      	mov	r5, r1
 8014104:	4604      	mov	r4, r0
 8014106:	461e      	mov	r6, r3
 8014108:	6808      	ldr	r0, [r1, #0]
 801410a:	ab06      	add	r3, sp, #24
 801410c:	6849      	ldr	r1, [r1, #4]
 801410e:	4f5d      	ldr	r7, [pc, #372]	; (8014284 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8014110:	c303      	stmia	r3!, {r0, r1}
 8014112:	6810      	ldr	r0, [r2, #0]
 8014114:	ab08      	add	r3, sp, #32
 8014116:	6851      	ldr	r1, [r2, #4]
 8014118:	c303      	stmia	r3!, {r0, r1}
 801411a:	a806      	add	r0, sp, #24
 801411c:	f7fa facc 	bl	800e6b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014120:	4629      	mov	r1, r5
 8014122:	a808      	add	r0, sp, #32
 8014124:	f7fa faf0 	bl	800e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014128:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801412c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014130:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014134:	6838      	ldr	r0, [r7, #0]
 8014136:	fb11 2103 	smlabb	r1, r1, r3, r2
 801413a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801413e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8014142:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8014146:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801414a:	440a      	add	r2, r1
 801414c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014150:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014154:	4413      	add	r3, r2
 8014156:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801415a:	6803      	ldr	r3, [r0, #0]
 801415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801415e:	4798      	blx	r3
 8014160:	2eff      	cmp	r6, #255	; 0xff
 8014162:	d119      	bne.n	8014198 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8014164:	f010 0f20 	tst.w	r0, #32
 8014168:	6838      	ldr	r0, [r7, #0]
 801416a:	d018      	beq.n	801419e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801416c:	b2ad      	uxth	r5, r5
 801416e:	2700      	movs	r7, #0
 8014170:	6801      	ldr	r1, [r0, #0]
 8014172:	9501      	str	r5, [sp, #4]
 8014174:	fa1f f588 	uxth.w	r5, r8
 8014178:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801417c:	9500      	str	r5, [sp, #0]
 801417e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014182:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8014186:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801418a:	9602      	str	r6, [sp, #8]
 801418c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801418e:	4621      	mov	r1, r4
 8014190:	47a8      	blx	r5
 8014192:	b00a      	add	sp, #40	; 0x28
 8014194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014198:	f010 0f40 	tst.w	r0, #64	; 0x40
 801419c:	e7e4      	b.n	8014168 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801419e:	6803      	ldr	r3, [r0, #0]
 80141a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141a2:	4798      	blx	r3
 80141a4:	4b38      	ldr	r3, [pc, #224]	; (8014288 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80141a6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80141aa:	f8b3 c000 	ldrh.w	ip, [r3]
 80141ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80141b2:	fb0c f505 	mul.w	r5, ip, r5
 80141b6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80141ba:	fb0c 2303 	mla	r3, ip, r3, r2
 80141be:	ebac 0c08 	sub.w	ip, ip, r8
 80141c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141c6:	ebae 0e08 	sub.w	lr, lr, r8
 80141ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80141ce:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80141d2:	4418      	add	r0, r3
 80141d4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80141d8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80141dc:	4405      	add	r5, r0
 80141de:	42a8      	cmp	r0, r5
 80141e0:	d24a      	bcs.n	8014278 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80141e2:	eb00 0803 	add.w	r8, r0, r3
 80141e6:	4540      	cmp	r0, r8
 80141e8:	d243      	bcs.n	8014272 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80141ea:	78e2      	ldrb	r2, [r4, #3]
 80141ec:	b15a      	cbz	r2, 8014206 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80141ee:	2aff      	cmp	r2, #255	; 0xff
 80141f0:	f894 9000 	ldrb.w	r9, [r4]
 80141f4:	d10a      	bne.n	801420c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80141f6:	2eff      	cmp	r6, #255	; 0xff
 80141f8:	d108      	bne.n	801420c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80141fa:	f880 9000 	strb.w	r9, [r0]
 80141fe:	7862      	ldrb	r2, [r4, #1]
 8014200:	7042      	strb	r2, [r0, #1]
 8014202:	78a2      	ldrb	r2, [r4, #2]
 8014204:	7082      	strb	r2, [r0, #2]
 8014206:	3003      	adds	r0, #3
 8014208:	3404      	adds	r4, #4
 801420a:	e7ec      	b.n	80141e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801420c:	4372      	muls	r2, r6
 801420e:	1c51      	adds	r1, r2, #1
 8014210:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8014214:	1209      	asrs	r1, r1, #8
 8014216:	fa1f fa81 	uxth.w	sl, r1
 801421a:	43c9      	mvns	r1, r1
 801421c:	fb19 f90a 	smulbb	r9, r9, sl
 8014220:	b2ca      	uxtb	r2, r1
 8014222:	7801      	ldrb	r1, [r0, #0]
 8014224:	fb01 9902 	mla	r9, r1, r2, r9
 8014228:	fa1f f989 	uxth.w	r9, r9
 801422c:	f109 0101 	add.w	r1, r9, #1
 8014230:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8014234:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014238:	f880 9000 	strb.w	r9, [r0]
 801423c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8014240:	7861      	ldrb	r1, [r4, #1]
 8014242:	fb19 f902 	smulbb	r9, r9, r2
 8014246:	fb01 910a 	mla	r1, r1, sl, r9
 801424a:	b289      	uxth	r1, r1
 801424c:	f101 0901 	add.w	r9, r1, #1
 8014250:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8014254:	1209      	asrs	r1, r1, #8
 8014256:	7041      	strb	r1, [r0, #1]
 8014258:	7881      	ldrb	r1, [r0, #2]
 801425a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801425e:	fb11 f202 	smulbb	r2, r1, r2
 8014262:	fb09 220a 	mla	r2, r9, sl, r2
 8014266:	b292      	uxth	r2, r2
 8014268:	1c51      	adds	r1, r2, #1
 801426a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801426e:	1212      	asrs	r2, r2, #8
 8014270:	e7c8      	b.n	8014204 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8014272:	4460      	add	r0, ip
 8014274:	4474      	add	r4, lr
 8014276:	e7b2      	b.n	80141de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8014278:	6838      	ldr	r0, [r7, #0]
 801427a:	6803      	ldr	r3, [r0, #0]
 801427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427e:	4798      	blx	r3
 8014280:	e787      	b.n	8014192 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8014282:	bf00      	nop
 8014284:	24006af0 	.word	0x24006af0
 8014288:	24006aea 	.word	0x24006aea

0801428c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801428c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014290:	b085      	sub	sp, #20
 8014292:	4606      	mov	r6, r0
 8014294:	460c      	mov	r4, r1
 8014296:	4691      	mov	r9, r2
 8014298:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801429c:	4698      	mov	r8, r3
 801429e:	b31d      	cbz	r5, 80142e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80142a0:	4608      	mov	r0, r1
 80142a2:	f7fd f96f 	bl	8011584 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80142a6:	4607      	mov	r7, r0
 80142a8:	4620      	mov	r0, r4
 80142aa:	f7fd f9af 	bl	801160c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80142ae:	f8ad 000e 	strh.w	r0, [sp, #14]
 80142b2:	4620      	mov	r0, r4
 80142b4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80142b8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80142bc:	f8ad 700c 	strh.w	r7, [sp, #12]
 80142c0:	f7fd facc 	bl	801185c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80142c4:	280b      	cmp	r0, #11
 80142c6:	d838      	bhi.n	801433a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 80142c8:	e8df f000 	tbb	[pc, r0]
 80142cc:	37062920 	.word	0x37062920
 80142d0:	37373737 	.word	0x37373737
 80142d4:	11373737 	.word	0x11373737
 80142d8:	4620      	mov	r0, r4
 80142da:	f7fd fa35 	bl	8011748 <_ZNK8touchgfx6Bitmap7getDataEv>
 80142de:	462b      	mov	r3, r5
 80142e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142e2:	a902      	add	r1, sp, #8
 80142e4:	f7ff ff0a 	bl	80140fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80142e8:	b005      	add	sp, #20
 80142ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142ee:	4620      	mov	r0, r4
 80142f0:	f7fd fa2a 	bl	8011748 <_ZNK8touchgfx6Bitmap7getDataEv>
 80142f4:	4606      	mov	r6, r0
 80142f6:	4620      	mov	r0, r4
 80142f8:	f7fd fa58 	bl	80117ac <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80142fc:	9500      	str	r5, [sp, #0]
 80142fe:	4601      	mov	r1, r0
 8014300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014302:	aa02      	add	r2, sp, #8
 8014304:	4630      	mov	r0, r6
 8014306:	f7ff fde5 	bl	8013ed4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801430a:	e7ed      	b.n	80142e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801430c:	4620      	mov	r0, r4
 801430e:	f7fd fa1b 	bl	8011748 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014312:	462b      	mov	r3, r5
 8014314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014316:	a902      	add	r1, sp, #8
 8014318:	f7ff fdfc 	bl	8013f14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801431c:	e7e4      	b.n	80142e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801431e:	6833      	ldr	r3, [r6, #0]
 8014320:	4620      	mov	r0, r4
 8014322:	68df      	ldr	r7, [r3, #12]
 8014324:	f7fd fa10 	bl	8011748 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014328:	2300      	movs	r3, #0
 801432a:	4601      	mov	r1, r0
 801432c:	aa02      	add	r2, sp, #8
 801432e:	4630      	mov	r0, r6
 8014330:	e9cd 5300 	strd	r5, r3, [sp]
 8014334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014336:	47b8      	blx	r7
 8014338:	e7d6      	b.n	80142e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801433a:	4b03      	ldr	r3, [pc, #12]	; (8014348 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801433c:	2145      	movs	r1, #69	; 0x45
 801433e:	4a03      	ldr	r2, [pc, #12]	; (801434c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8014340:	4803      	ldr	r0, [pc, #12]	; (8014350 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8014342:	f005 fcbf 	bl	8019cc4 <__assert_func>
 8014346:	bf00      	nop
 8014348:	0801e3f6 	.word	0x0801e3f6
 801434c:	0801ea3b 	.word	0x0801ea3b
 8014350:	0801e4c5 	.word	0x0801e4c5

08014354 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8014354:	b570      	push	{r4, r5, r6, lr}
 8014356:	9c04      	ldr	r4, [sp, #16]
 8014358:	4605      	mov	r5, r0
 801435a:	4608      	mov	r0, r1
 801435c:	4619      	mov	r1, r3
 801435e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014362:	2a0d      	cmp	r2, #13
 8014364:	d826      	bhi.n	80143b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 8014366:	e8df f002 	tbb	[pc, r2]
 801436a:	1107      	.short	0x1107
 801436c:	1e1e1e0c 	.word	0x1e1e1e0c
 8014370:	1e1e1e1e 	.word	0x1e1e1e1e
 8014374:	1e1e1e1e 	.word	0x1e1e1e1e
 8014378:	4622      	mov	r2, r4
 801437a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801437e:	f7ff bdc9 	b.w	8013f14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8014382:	4622      	mov	r2, r4
 8014384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014388:	f7ff beb8 	b.w	80140fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801438c:	682a      	ldr	r2, [r5, #0]
 801438e:	2600      	movs	r6, #0
 8014390:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8014394:	68d6      	ldr	r6, [r2, #12]
 8014396:	4623      	mov	r3, r4
 8014398:	460a      	mov	r2, r1
 801439a:	4601      	mov	r1, r0
 801439c:	46b4      	mov	ip, r6
 801439e:	4628      	mov	r0, r5
 80143a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143a4:	4760      	bx	ip
 80143a6:	4b04      	ldr	r3, [pc, #16]	; (80143b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80143a8:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80143ac:	4a03      	ldr	r2, [pc, #12]	; (80143bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80143ae:	4804      	ldr	r0, [pc, #16]	; (80143c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80143b0:	f005 fc88 	bl	8019cc4 <__assert_func>
 80143b4:	bd70      	pop	{r4, r5, r6, pc}
 80143b6:	bf00      	nop
 80143b8:	0801e68a 	.word	0x0801e68a
 80143bc:	0801edb6 	.word	0x0801edb6
 80143c0:	0801e4c5 	.word	0x0801e4c5

080143c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80143c4:	b158      	cbz	r0, 80143de <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80143c6:	2902      	cmp	r1, #2
 80143c8:	d00f      	beq.n	80143ea <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80143ca:	2903      	cmp	r1, #3
 80143cc:	d010      	beq.n	80143f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80143ce:	2901      	cmp	r1, #1
 80143d0:	d101      	bne.n	80143d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80143d2:	2001      	movs	r0, #1
 80143d4:	4770      	bx	lr
 80143d6:	4b08      	ldr	r3, [pc, #32]	; (80143f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80143d8:	8819      	ldrh	r1, [r3, #0]
 80143da:	4248      	negs	r0, r1
 80143dc:	4770      	bx	lr
 80143de:	2902      	cmp	r1, #2
 80143e0:	d006      	beq.n	80143f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80143e2:	2903      	cmp	r1, #3
 80143e4:	d0f7      	beq.n	80143d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80143e6:	2901      	cmp	r1, #1
 80143e8:	d1f3      	bne.n	80143d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80143ea:	4b03      	ldr	r3, [pc, #12]	; (80143f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80143ec:	8818      	ldrh	r0, [r3, #0]
 80143ee:	4770      	bx	lr
 80143f0:	f04f 30ff 	mov.w	r0, #4294967295
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop
 80143f8:	24006aea 	.word	0x24006aea

080143fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80143fc:	b170      	cbz	r0, 801441c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80143fe:	2902      	cmp	r1, #2
 8014400:	d012      	beq.n	8014428 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8014402:	2903      	cmp	r1, #3
 8014404:	d006      	beq.n	8014414 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8014406:	2901      	cmp	r1, #1
 8014408:	d001      	beq.n	801440e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801440a:	2001      	movs	r0, #1
 801440c:	4770      	bx	lr
 801440e:	4b08      	ldr	r3, [pc, #32]	; (8014430 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8014410:	8818      	ldrh	r0, [r3, #0]
 8014412:	4770      	bx	lr
 8014414:	4b06      	ldr	r3, [pc, #24]	; (8014430 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8014416:	8818      	ldrh	r0, [r3, #0]
 8014418:	4240      	negs	r0, r0
 801441a:	4770      	bx	lr
 801441c:	2902      	cmp	r1, #2
 801441e:	d0f9      	beq.n	8014414 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8014420:	2903      	cmp	r1, #3
 8014422:	d0f2      	beq.n	801440a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8014424:	2901      	cmp	r1, #1
 8014426:	d1f2      	bne.n	801440e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8014428:	f04f 30ff 	mov.w	r0, #4294967295
 801442c:	4770      	bx	lr
 801442e:	bf00      	nop
 8014430:	24006aea 	.word	0x24006aea

08014434 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8014434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014438:	b097      	sub	sp, #92	; 0x5c
 801443a:	910b      	str	r1, [sp, #44]	; 0x2c
 801443c:	a912      	add	r1, sp, #72	; 0x48
 801443e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8014442:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8014446:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801444a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801444e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8014452:	e881 000c 	stmia.w	r1, {r2, r3}
 8014456:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801445a:	930a      	str	r3, [sp, #40]	; 0x28
 801445c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8014460:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8014464:	9311      	str	r3, [sp, #68]	; 0x44
 8014466:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801446a:	798d      	ldrb	r5, [r1, #6]
 801446c:	930c      	str	r3, [sp, #48]	; 0x30
 801446e:	7b4b      	ldrb	r3, [r1, #13]
 8014470:	0158      	lsls	r0, r3, #5
 8014472:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014476:	4328      	orrs	r0, r5
 8014478:	9009      	str	r0, [sp, #36]	; 0x24
 801447a:	f000 817d 	beq.w	8014778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801447e:	011b      	lsls	r3, r3, #4
 8014480:	79c8      	ldrb	r0, [r1, #7]
 8014482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014486:	4303      	orrs	r3, r0
 8014488:	930e      	str	r3, [sp, #56]	; 0x38
 801448a:	f000 8175 	beq.w	8014778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801448e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8014492:	b29b      	uxth	r3, r3
 8014494:	2f00      	cmp	r7, #0
 8014496:	f000 8117 	beq.w	80146c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801449a:	1aff      	subs	r7, r7, r3
 801449c:	b2bf      	uxth	r7, r7
 801449e:	043b      	lsls	r3, r7, #16
 80144a0:	d502      	bpl.n	80144a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80144a2:	1bf6      	subs	r6, r6, r7
 80144a4:	2700      	movs	r7, #0
 80144a6:	b236      	sxth	r6, r6
 80144a8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80144ac:	a812      	add	r0, sp, #72	; 0x48
 80144ae:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80144b2:	428e      	cmp	r6, r1
 80144b4:	b28b      	uxth	r3, r1
 80144b6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80144ba:	bfbf      	itttt	lt
 80144bc:	18ff      	addlt	r7, r7, r3
 80144be:	1bbe      	sublt	r6, r7, r6
 80144c0:	b2b7      	uxthlt	r7, r6
 80144c2:	460e      	movlt	r6, r1
 80144c4:	8891      	ldrh	r1, [r2, #4]
 80144c6:	440b      	add	r3, r1
 80144c8:	4631      	mov	r1, r6
 80144ca:	b21b      	sxth	r3, r3
 80144cc:	9310      	str	r3, [sp, #64]	; 0x40
 80144ce:	88d3      	ldrh	r3, [r2, #6]
 80144d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144d2:	449a      	add	sl, r3
 80144d4:	fa0f f38a 	sxth.w	r3, sl
 80144d8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80144dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80144de:	4bb6      	ldr	r3, [pc, #728]	; (80147b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80144e0:	f893 b000 	ldrb.w	fp, [r3]
 80144e4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80144e8:	f1dc 0300 	rsbs	r3, ip, #0
 80144ec:	eb43 030c 	adc.w	r3, r3, ip
 80144f0:	930d      	str	r3, [sp, #52]	; 0x34
 80144f2:	464b      	mov	r3, r9
 80144f4:	f7f9 ff64 	bl	800e3c0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80144f8:	4631      	mov	r1, r6
 80144fa:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80144fe:	464b      	mov	r3, r9
 8014500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014502:	a812      	add	r0, sp, #72	; 0x48
 8014504:	f7f9 ff74 	bl	800e3f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8014508:	a916      	add	r1, sp, #88	; 0x58
 801450a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801450e:	a815      	add	r0, sp, #84	; 0x54
 8014510:	f7fa f890 	bl	800e634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8014514:	f1b9 0f00 	cmp.w	r9, #0
 8014518:	f040 80d9 	bne.w	80146ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801451c:	f1bb 0f01 	cmp.w	fp, #1
 8014520:	f040 80dd 	bne.w	80146de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8014524:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014526:	b153      	cbz	r3, 801453e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8014528:	2508      	movs	r5, #8
 801452a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801452c:	fb95 f3f8 	sdiv	r3, r5, r8
 8014530:	1e5d      	subs	r5, r3, #1
 8014532:	4415      	add	r5, r2
 8014534:	fb95 f5f3 	sdiv	r5, r5, r3
 8014538:	fb15 f503 	smulbb	r5, r5, r3
 801453c:	b2ad      	uxth	r5, r5
 801453e:	b907      	cbnz	r7, 8014542 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8014540:	b16c      	cbz	r4, 801455e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8014542:	fb04 7305 	mla	r3, r4, r5, r7
 8014546:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014548:	ebaa 0a04 	sub.w	sl, sl, r4
 801454c:	fb08 f303 	mul.w	r3, r8, r3
 8014550:	fa1f fa8a 	uxth.w	sl, sl
 8014554:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8014558:	f003 0407 	and.w	r4, r3, #7
 801455c:	9226      	str	r2, [sp, #152]	; 0x98
 801455e:	4649      	mov	r1, r9
 8014560:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014562:	f7ff ff2f 	bl	80143c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8014566:	4649      	mov	r1, r9
 8014568:	4683      	mov	fp, r0
 801456a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801456c:	f7ff ff46 	bl	80143fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8014570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014574:	4681      	mov	r9, r0
 8014576:	1a9b      	subs	r3, r3, r2
 8014578:	459a      	cmp	sl, r3
 801457a:	bfa8      	it	ge
 801457c:	469a      	movge	sl, r3
 801457e:	f1ba 0f00 	cmp.w	sl, #0
 8014582:	f340 80f9 	ble.w	8014778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8014586:	1bf6      	subs	r6, r6, r7
 8014588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801458a:	1b9e      	subs	r6, r3, r6
 801458c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801458e:	429e      	cmp	r6, r3
 8014590:	bfd4      	ite	le
 8014592:	ebc7 0706 	rsble	r7, r7, r6
 8014596:	ebc7 0703 	rsbgt	r7, r7, r3
 801459a:	2f00      	cmp	r7, #0
 801459c:	f340 80ec 	ble.w	8014778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80145a0:	1bed      	subs	r5, r5, r7
 80145a2:	fb08 f305 	mul.w	r3, r8, r5
 80145a6:	930d      	str	r3, [sp, #52]	; 0x34
 80145a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80145aa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80145ae:	930e      	str	r3, [sp, #56]	; 0x38
 80145b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80145b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80145b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80145b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	9310      	str	r3, [sp, #64]	; 0x40
 80145be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	f040 80de 	bne.w	8014782 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80145c6:	4b7d      	ldr	r3, [pc, #500]	; (80147bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80145c8:	6818      	ldr	r0, [r3, #0]
 80145ca:	6803      	ldr	r3, [r0, #0]
 80145cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ce:	4798      	blx	r3
 80145d0:	2301      	movs	r3, #1
 80145d2:	4a7b      	ldr	r2, [pc, #492]	; (80147c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80145d4:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80145d8:	fb07 9b1b 	mls	fp, r7, fp, r9
 80145dc:	fa03 f308 	lsl.w	r3, r3, r8
 80145e0:	8811      	ldrh	r1, [r2, #0]
 80145e2:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80145e6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80145ea:	3b01      	subs	r3, #1
 80145ec:	fb06 bb07 	mla	fp, r6, r7, fp
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	930a      	str	r3, [sp, #40]	; 0x28
 80145f4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80145f8:	fb01 2303 	mla	r3, r1, r3, r2
 80145fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014600:	18c3      	adds	r3, r0, r3
 8014602:	9309      	str	r3, [sp, #36]	; 0x24
 8014604:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014606:	781a      	ldrb	r2, [r3, #0]
 8014608:	4122      	asrs	r2, r4
 801460a:	b2d2      	uxtb	r2, r2
 801460c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8014610:	f0c0 80d8 	bcc.w	80147c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8014614:	46be      	mov	lr, r7
 8014616:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014618:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801461c:	f0c0 80ba 	bcc.w	8014794 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8014620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014622:	4013      	ands	r3, r2
 8014624:	d041      	beq.n	80146aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8014626:	20ff      	movs	r0, #255	; 0xff
 8014628:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801462a:	fb90 f5f5 	sdiv	r5, r0, r5
 801462e:	436b      	muls	r3, r5
 8014630:	2bfe      	cmp	r3, #254	; 0xfe
 8014632:	dd03      	ble.n	801463c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8014634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014636:	4285      	cmp	r5, r0
 8014638:	f000 80a5 	beq.w	8014786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801463c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801463e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014640:	fb15 f303 	smulbb	r3, r5, r3
 8014644:	b29b      	uxth	r3, r3
 8014646:	1c5d      	adds	r5, r3, #1
 8014648:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801464c:	780d      	ldrb	r5, [r1, #0]
 801464e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8014652:	fa1f fc83 	uxth.w	ip, r3
 8014656:	43db      	mvns	r3, r3
 8014658:	fb10 f90c 	smulbb	r9, r0, ip
 801465c:	b2db      	uxtb	r3, r3
 801465e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014660:	fb05 9503 	mla	r5, r5, r3, r9
 8014664:	b2ad      	uxth	r5, r5
 8014666:	f105 0901 	add.w	r9, r5, #1
 801466a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801466e:	fb10 f90c 	smulbb	r9, r0, ip
 8014672:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014674:	122d      	asrs	r5, r5, #8
 8014676:	fb10 fc0c 	smulbb	ip, r0, ip
 801467a:	700d      	strb	r5, [r1, #0]
 801467c:	784d      	ldrb	r5, [r1, #1]
 801467e:	fb05 9503 	mla	r5, r5, r3, r9
 8014682:	b2ad      	uxth	r5, r5
 8014684:	f105 0901 	add.w	r9, r5, #1
 8014688:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801468c:	122d      	asrs	r5, r5, #8
 801468e:	704d      	strb	r5, [r1, #1]
 8014690:	788d      	ldrb	r5, [r1, #2]
 8014692:	fb05 cc03 	mla	ip, r5, r3, ip
 8014696:	fa1f fc8c 	uxth.w	ip, ip
 801469a:	f10c 0301 	add.w	r3, ip, #1
 801469e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80146a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80146a6:	f881 c002 	strb.w	ip, [r1, #2]
 80146aa:	4444      	add	r4, r8
 80146ac:	4431      	add	r1, r6
 80146ae:	b2a4      	uxth	r4, r4
 80146b0:	2c07      	cmp	r4, #7
 80146b2:	bf89      	itett	hi
 80146b4:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80146b6:	fa42 f208 	asrls.w	r2, r2, r8
 80146ba:	2400      	movhi	r4, #0
 80146bc:	785a      	ldrbhi	r2, [r3, #1]
 80146be:	bf8a      	itet	hi
 80146c0:	3301      	addhi	r3, #1
 80146c2:	b2d2      	uxtbls	r2, r2
 80146c4:	9326      	strhi	r3, [sp, #152]	; 0x98
 80146c6:	e7a7      	b.n	8014618 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 80146c8:	441e      	add	r6, r3
 80146ca:	b236      	sxth	r6, r6
 80146cc:	e6ec      	b.n	80144a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80146ce:	f1b9 0f01 	cmp.w	r9, #1
 80146d2:	f47f af27 	bne.w	8014524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80146d6:	f1bb 0f01 	cmp.w	fp, #1
 80146da:	f47f af23 	bne.w	8014524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80146de:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80147bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80146e2:	f8db 0000 	ldr.w	r0, [fp]
 80146e6:	6803      	ldr	r3, [r0, #0]
 80146e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146ea:	4798      	blx	r3
 80146ec:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80146f0:	465a      	mov	r2, fp
 80146f2:	d006      	beq.n	8014702 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80146f4:	f1b8 0f04 	cmp.w	r8, #4
 80146f8:	d141      	bne.n	801477e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 80146fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146fc:	3300      	adds	r3, #0
 80146fe:	bf18      	it	ne
 8014700:	2301      	movne	r3, #1
 8014702:	0580      	lsls	r0, r0, #22
 8014704:	d567      	bpl.n	80147d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8014706:	f1b8 0f08 	cmp.w	r8, #8
 801470a:	d164      	bne.n	80147d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801470c:	2b00      	cmp	r3, #0
 801470e:	bf0c      	ite	eq
 8014710:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8014714:	f44f 7180 	movne.w	r1, #256	; 0x100
 8014718:	2f00      	cmp	r7, #0
 801471a:	f47f af03 	bne.w	8014524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801471e:	2c00      	cmp	r4, #0
 8014720:	f47f af00 	bne.w	8014524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8014724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014726:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014728:	18f3      	adds	r3, r6, r3
 801472a:	4283      	cmp	r3, r0
 801472c:	f73f aefa 	bgt.w	8014524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8014730:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014734:	4403      	add	r3, r0
 8014736:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014738:	4283      	cmp	r3, r0
 801473a:	f73f aef3 	bgt.w	8014524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801473e:	f1b8 0f08 	cmp.w	r8, #8
 8014742:	6810      	ldr	r0, [r2, #0]
 8014744:	f04f 0600 	mov.w	r6, #0
 8014748:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801474c:	bf18      	it	ne
 801474e:	3501      	addne	r5, #1
 8014750:	6804      	ldr	r4, [r0, #0]
 8014752:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8014756:	bf18      	it	ne
 8014758:	f025 0501 	bicne.w	r5, r5, #1
 801475c:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8014760:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014762:	bf18      	it	ne
 8014764:	b2ad      	uxthne	r5, r5
 8014766:	9104      	str	r1, [sp, #16]
 8014768:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801476a:	e9cd 5a00 	strd	r5, sl, [sp]
 801476e:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8014772:	9926      	ldr	r1, [sp, #152]	; 0x98
 8014774:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8014776:	47a0      	blx	r4
 8014778:	b017      	add	sp, #92	; 0x5c
 801477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801477e:	2300      	movs	r3, #0
 8014780:	e7bf      	b.n	8014702 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8014782:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014784:	e724      	b.n	80145d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8014786:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014788:	700b      	strb	r3, [r1, #0]
 801478a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801478c:	704b      	strb	r3, [r1, #1]
 801478e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014790:	708b      	strb	r3, [r1, #2]
 8014792:	e78a      	b.n	80146aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8014794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014796:	b153      	cbz	r3, 80147ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8014798:	441c      	add	r4, r3
 801479a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801479c:	b2a4      	uxth	r4, r4
 801479e:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80147a2:	f004 0407 	and.w	r4, r4, #7
 80147a6:	781a      	ldrb	r2, [r3, #0]
 80147a8:	9326      	str	r3, [sp, #152]	; 0x98
 80147aa:	4122      	asrs	r2, r4
 80147ac:	b2d2      	uxtb	r2, r2
 80147ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b0:	445b      	add	r3, fp
 80147b2:	9309      	str	r3, [sp, #36]	; 0x24
 80147b4:	e72a      	b.n	801460c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 80147b6:	bf00      	nop
 80147b8:	24006ae8 	.word	0x24006ae8
 80147bc:	24006af0 	.word	0x24006af0
 80147c0:	24006aea 	.word	0x24006aea
 80147c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d1d6      	bne.n	8014778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80147ca:	4b06      	ldr	r3, [pc, #24]	; (80147e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80147cc:	6818      	ldr	r0, [r3, #0]
 80147ce:	6803      	ldr	r3, [r0, #0]
 80147d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147d2:	4798      	blx	r3
 80147d4:	e7d0      	b.n	8014778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	f43f aea4 	beq.w	8014524 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80147dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80147e0:	e79a      	b.n	8014718 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 80147e2:	bf00      	nop
 80147e4:	24006af0 	.word	0x24006af0

080147e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80147e8:	b538      	push	{r3, r4, r5, lr}
 80147ea:	4c15      	ldr	r4, [pc, #84]	; (8014840 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80147ec:	4605      	mov	r5, r0
 80147ee:	7823      	ldrb	r3, [r4, #0]
 80147f0:	f3bf 8f5b 	dmb	ish
 80147f4:	07da      	lsls	r2, r3, #31
 80147f6:	d40b      	bmi.n	8014810 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80147f8:	4620      	mov	r0, r4
 80147fa:	f005 fa37 	bl	8019c6c <__cxa_guard_acquire>
 80147fe:	b138      	cbz	r0, 8014810 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8014800:	4620      	mov	r0, r4
 8014802:	f005 fa3f 	bl	8019c84 <__cxa_guard_release>
 8014806:	4a0f      	ldr	r2, [pc, #60]	; (8014844 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8014808:	490f      	ldr	r1, [pc, #60]	; (8014848 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801480a:	4810      	ldr	r0, [pc, #64]	; (801484c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801480c:	f005 fa27 	bl	8019c5e <__aeabi_atexit>
 8014810:	4c0f      	ldr	r4, [pc, #60]	; (8014850 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8014812:	7823      	ldrb	r3, [r4, #0]
 8014814:	f3bf 8f5b 	dmb	ish
 8014818:	07db      	lsls	r3, r3, #31
 801481a:	d40b      	bmi.n	8014834 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801481c:	4620      	mov	r0, r4
 801481e:	f005 fa25 	bl	8019c6c <__cxa_guard_acquire>
 8014822:	b138      	cbz	r0, 8014834 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8014824:	4620      	mov	r0, r4
 8014826:	f005 fa2d 	bl	8019c84 <__cxa_guard_release>
 801482a:	4a06      	ldr	r2, [pc, #24]	; (8014844 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801482c:	4909      	ldr	r1, [pc, #36]	; (8014854 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801482e:	480a      	ldr	r0, [pc, #40]	; (8014858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8014830:	f005 fa15 	bl	8019c5e <__aeabi_atexit>
 8014834:	4b05      	ldr	r3, [pc, #20]	; (801484c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8014836:	612b      	str	r3, [r5, #16]
 8014838:	4b07      	ldr	r3, [pc, #28]	; (8014858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801483a:	616b      	str	r3, [r5, #20]
 801483c:	bd38      	pop	{r3, r4, r5, pc}
 801483e:	bf00      	nop
 8014840:	24006bbc 	.word	0x24006bbc
 8014844:	24000000 	.word	0x24000000
 8014848:	08013121 	.word	0x08013121
 801484c:	24000094 	.word	0x24000094
 8014850:	24006bc0 	.word	0x24006bc0
 8014854:	0801311f 	.word	0x0801311f
 8014858:	24000098 	.word	0x24000098

0801485c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801485c:	b538      	push	{r3, r4, r5, lr}
 801485e:	4c15      	ldr	r4, [pc, #84]	; (80148b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8014860:	4605      	mov	r5, r0
 8014862:	7823      	ldrb	r3, [r4, #0]
 8014864:	f3bf 8f5b 	dmb	ish
 8014868:	07da      	lsls	r2, r3, #31
 801486a:	d40b      	bmi.n	8014884 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801486c:	4620      	mov	r0, r4
 801486e:	f005 f9fd 	bl	8019c6c <__cxa_guard_acquire>
 8014872:	b138      	cbz	r0, 8014884 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8014874:	4620      	mov	r0, r4
 8014876:	f005 fa05 	bl	8019c84 <__cxa_guard_release>
 801487a:	4a0f      	ldr	r2, [pc, #60]	; (80148b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801487c:	490f      	ldr	r1, [pc, #60]	; (80148bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801487e:	4810      	ldr	r0, [pc, #64]	; (80148c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8014880:	f005 f9ed 	bl	8019c5e <__aeabi_atexit>
 8014884:	4c0f      	ldr	r4, [pc, #60]	; (80148c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8014886:	7823      	ldrb	r3, [r4, #0]
 8014888:	f3bf 8f5b 	dmb	ish
 801488c:	07db      	lsls	r3, r3, #31
 801488e:	d40b      	bmi.n	80148a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8014890:	4620      	mov	r0, r4
 8014892:	f005 f9eb 	bl	8019c6c <__cxa_guard_acquire>
 8014896:	b138      	cbz	r0, 80148a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8014898:	4620      	mov	r0, r4
 801489a:	f005 f9f3 	bl	8019c84 <__cxa_guard_release>
 801489e:	4a06      	ldr	r2, [pc, #24]	; (80148b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80148a0:	4909      	ldr	r1, [pc, #36]	; (80148c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80148a2:	480a      	ldr	r0, [pc, #40]	; (80148cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80148a4:	f005 f9db 	bl	8019c5e <__aeabi_atexit>
 80148a8:	4b05      	ldr	r3, [pc, #20]	; (80148c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80148aa:	60ab      	str	r3, [r5, #8]
 80148ac:	4b07      	ldr	r3, [pc, #28]	; (80148cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80148ae:	60eb      	str	r3, [r5, #12]
 80148b0:	bd38      	pop	{r3, r4, r5, pc}
 80148b2:	bf00      	nop
 80148b4:	24006b9c 	.word	0x24006b9c
 80148b8:	24000000 	.word	0x24000000
 80148bc:	08013125 	.word	0x08013125
 80148c0:	24000074 	.word	0x24000074
 80148c4:	24006ba0 	.word	0x24006ba0
 80148c8:	08013123 	.word	0x08013123
 80148cc:	24000078 	.word	0x24000078

080148d0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80148d0:	b510      	push	{r4, lr}
 80148d2:	4604      	mov	r4, r0
 80148d4:	f7ff ff88 	bl	80147e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80148d8:	4620      	mov	r0, r4
 80148da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148de:	f7ff bfbd 	b.w	801485c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080148e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80148e4:	b538      	push	{r3, r4, r5, lr}
 80148e6:	4c15      	ldr	r4, [pc, #84]	; (801493c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80148e8:	4605      	mov	r5, r0
 80148ea:	7823      	ldrb	r3, [r4, #0]
 80148ec:	f3bf 8f5b 	dmb	ish
 80148f0:	07da      	lsls	r2, r3, #31
 80148f2:	d40b      	bmi.n	801490c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80148f4:	4620      	mov	r0, r4
 80148f6:	f005 f9b9 	bl	8019c6c <__cxa_guard_acquire>
 80148fa:	b138      	cbz	r0, 801490c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80148fc:	4620      	mov	r0, r4
 80148fe:	f005 f9c1 	bl	8019c84 <__cxa_guard_release>
 8014902:	4a0f      	ldr	r2, [pc, #60]	; (8014940 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8014904:	490f      	ldr	r1, [pc, #60]	; (8014944 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8014906:	4810      	ldr	r0, [pc, #64]	; (8014948 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8014908:	f005 f9a9 	bl	8019c5e <__aeabi_atexit>
 801490c:	4c0f      	ldr	r4, [pc, #60]	; (801494c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801490e:	7823      	ldrb	r3, [r4, #0]
 8014910:	f3bf 8f5b 	dmb	ish
 8014914:	07db      	lsls	r3, r3, #31
 8014916:	d40b      	bmi.n	8014930 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8014918:	4620      	mov	r0, r4
 801491a:	f005 f9a7 	bl	8019c6c <__cxa_guard_acquire>
 801491e:	b138      	cbz	r0, 8014930 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8014920:	4620      	mov	r0, r4
 8014922:	f005 f9af 	bl	8019c84 <__cxa_guard_release>
 8014926:	4a06      	ldr	r2, [pc, #24]	; (8014940 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8014928:	4909      	ldr	r1, [pc, #36]	; (8014950 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801492a:	480a      	ldr	r0, [pc, #40]	; (8014954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801492c:	f005 f997 	bl	8019c5e <__aeabi_atexit>
 8014930:	4b05      	ldr	r3, [pc, #20]	; (8014948 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8014932:	622b      	str	r3, [r5, #32]
 8014934:	4b07      	ldr	r3, [pc, #28]	; (8014954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8014936:	626b      	str	r3, [r5, #36]	; 0x24
 8014938:	bd38      	pop	{r3, r4, r5, pc}
 801493a:	bf00      	nop
 801493c:	24006bc4 	.word	0x24006bc4
 8014940:	24000000 	.word	0x24000000
 8014944:	08013119 	.word	0x08013119
 8014948:	2400009c 	.word	0x2400009c
 801494c:	24006bc8 	.word	0x24006bc8
 8014950:	08013117 	.word	0x08013117
 8014954:	240000a0 	.word	0x240000a0

08014958 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8014958:	b538      	push	{r3, r4, r5, lr}
 801495a:	4c15      	ldr	r4, [pc, #84]	; (80149b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801495c:	4605      	mov	r5, r0
 801495e:	7823      	ldrb	r3, [r4, #0]
 8014960:	f3bf 8f5b 	dmb	ish
 8014964:	07da      	lsls	r2, r3, #31
 8014966:	d40b      	bmi.n	8014980 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8014968:	4620      	mov	r0, r4
 801496a:	f005 f97f 	bl	8019c6c <__cxa_guard_acquire>
 801496e:	b138      	cbz	r0, 8014980 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8014970:	4620      	mov	r0, r4
 8014972:	f005 f987 	bl	8019c84 <__cxa_guard_release>
 8014976:	4a0f      	ldr	r2, [pc, #60]	; (80149b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8014978:	490f      	ldr	r1, [pc, #60]	; (80149b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801497a:	4810      	ldr	r0, [pc, #64]	; (80149bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801497c:	f005 f96f 	bl	8019c5e <__aeabi_atexit>
 8014980:	4c0f      	ldr	r4, [pc, #60]	; (80149c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8014982:	7823      	ldrb	r3, [r4, #0]
 8014984:	f3bf 8f5b 	dmb	ish
 8014988:	07db      	lsls	r3, r3, #31
 801498a:	d40b      	bmi.n	80149a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801498c:	4620      	mov	r0, r4
 801498e:	f005 f96d 	bl	8019c6c <__cxa_guard_acquire>
 8014992:	b138      	cbz	r0, 80149a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8014994:	4620      	mov	r0, r4
 8014996:	f005 f975 	bl	8019c84 <__cxa_guard_release>
 801499a:	4a06      	ldr	r2, [pc, #24]	; (80149b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801499c:	4909      	ldr	r1, [pc, #36]	; (80149c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801499e:	480a      	ldr	r0, [pc, #40]	; (80149c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80149a0:	f005 f95d 	bl	8019c5e <__aeabi_atexit>
 80149a4:	4b05      	ldr	r3, [pc, #20]	; (80149bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80149a6:	61ab      	str	r3, [r5, #24]
 80149a8:	4b07      	ldr	r3, [pc, #28]	; (80149c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80149aa:	61eb      	str	r3, [r5, #28]
 80149ac:	bd38      	pop	{r3, r4, r5, pc}
 80149ae:	bf00      	nop
 80149b0:	24006ba4 	.word	0x24006ba4
 80149b4:	24000000 	.word	0x24000000
 80149b8:	0801311d 	.word	0x0801311d
 80149bc:	2400007c 	.word	0x2400007c
 80149c0:	24006ba8 	.word	0x24006ba8
 80149c4:	0801311b 	.word	0x0801311b
 80149c8:	24000080 	.word	0x24000080

080149cc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80149cc:	b510      	push	{r4, lr}
 80149ce:	4604      	mov	r4, r0
 80149d0:	f7ff ff88 	bl	80148e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80149d4:	4620      	mov	r0, r4
 80149d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149da:	f7ff bfbd 	b.w	8014958 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080149e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	4c15      	ldr	r4, [pc, #84]	; (8014a38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80149e4:	4605      	mov	r5, r0
 80149e6:	7823      	ldrb	r3, [r4, #0]
 80149e8:	f3bf 8f5b 	dmb	ish
 80149ec:	07da      	lsls	r2, r3, #31
 80149ee:	d40b      	bmi.n	8014a08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80149f0:	4620      	mov	r0, r4
 80149f2:	f005 f93b 	bl	8019c6c <__cxa_guard_acquire>
 80149f6:	b138      	cbz	r0, 8014a08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80149f8:	4620      	mov	r0, r4
 80149fa:	f005 f943 	bl	8019c84 <__cxa_guard_release>
 80149fe:	4a0f      	ldr	r2, [pc, #60]	; (8014a3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8014a00:	490f      	ldr	r1, [pc, #60]	; (8014a40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8014a02:	4810      	ldr	r0, [pc, #64]	; (8014a44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8014a04:	f005 f92b 	bl	8019c5e <__aeabi_atexit>
 8014a08:	4c0f      	ldr	r4, [pc, #60]	; (8014a48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8014a0a:	7823      	ldrb	r3, [r4, #0]
 8014a0c:	f3bf 8f5b 	dmb	ish
 8014a10:	07db      	lsls	r3, r3, #31
 8014a12:	d40b      	bmi.n	8014a2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8014a14:	4620      	mov	r0, r4
 8014a16:	f005 f929 	bl	8019c6c <__cxa_guard_acquire>
 8014a1a:	b138      	cbz	r0, 8014a2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	f005 f931 	bl	8019c84 <__cxa_guard_release>
 8014a22:	4a06      	ldr	r2, [pc, #24]	; (8014a3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8014a24:	4909      	ldr	r1, [pc, #36]	; (8014a4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8014a26:	480a      	ldr	r0, [pc, #40]	; (8014a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8014a28:	f005 f919 	bl	8019c5e <__aeabi_atexit>
 8014a2c:	4b05      	ldr	r3, [pc, #20]	; (8014a44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8014a2e:	632b      	str	r3, [r5, #48]	; 0x30
 8014a30:	4b07      	ldr	r3, [pc, #28]	; (8014a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8014a32:	636b      	str	r3, [r5, #52]	; 0x34
 8014a34:	bd38      	pop	{r3, r4, r5, pc}
 8014a36:	bf00      	nop
 8014a38:	24006bac 	.word	0x24006bac
 8014a3c:	24000000 	.word	0x24000000
 8014a40:	08013111 	.word	0x08013111
 8014a44:	24000084 	.word	0x24000084
 8014a48:	24006bb0 	.word	0x24006bb0
 8014a4c:	0801310f 	.word	0x0801310f
 8014a50:	24000088 	.word	0x24000088

08014a54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8014a54:	b538      	push	{r3, r4, r5, lr}
 8014a56:	4c15      	ldr	r4, [pc, #84]	; (8014aac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8014a58:	4605      	mov	r5, r0
 8014a5a:	7823      	ldrb	r3, [r4, #0]
 8014a5c:	f3bf 8f5b 	dmb	ish
 8014a60:	07da      	lsls	r2, r3, #31
 8014a62:	d40b      	bmi.n	8014a7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8014a64:	4620      	mov	r0, r4
 8014a66:	f005 f901 	bl	8019c6c <__cxa_guard_acquire>
 8014a6a:	b138      	cbz	r0, 8014a7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	f005 f909 	bl	8019c84 <__cxa_guard_release>
 8014a72:	4a0f      	ldr	r2, [pc, #60]	; (8014ab0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8014a74:	490f      	ldr	r1, [pc, #60]	; (8014ab4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8014a76:	4810      	ldr	r0, [pc, #64]	; (8014ab8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8014a78:	f005 f8f1 	bl	8019c5e <__aeabi_atexit>
 8014a7c:	4c0f      	ldr	r4, [pc, #60]	; (8014abc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8014a7e:	7823      	ldrb	r3, [r4, #0]
 8014a80:	f3bf 8f5b 	dmb	ish
 8014a84:	07db      	lsls	r3, r3, #31
 8014a86:	d40b      	bmi.n	8014aa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8014a88:	4620      	mov	r0, r4
 8014a8a:	f005 f8ef 	bl	8019c6c <__cxa_guard_acquire>
 8014a8e:	b138      	cbz	r0, 8014aa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8014a90:	4620      	mov	r0, r4
 8014a92:	f005 f8f7 	bl	8019c84 <__cxa_guard_release>
 8014a96:	4a06      	ldr	r2, [pc, #24]	; (8014ab0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8014a98:	4909      	ldr	r1, [pc, #36]	; (8014ac0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8014a9a:	480a      	ldr	r0, [pc, #40]	; (8014ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8014a9c:	f005 f8df 	bl	8019c5e <__aeabi_atexit>
 8014aa0:	4b05      	ldr	r3, [pc, #20]	; (8014ab8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8014aa2:	62ab      	str	r3, [r5, #40]	; 0x28
 8014aa4:	4b07      	ldr	r3, [pc, #28]	; (8014ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8014aa6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8014aa8:	bd38      	pop	{r3, r4, r5, pc}
 8014aaa:	bf00      	nop
 8014aac:	24006b84 	.word	0x24006b84
 8014ab0:	24000000 	.word	0x24000000
 8014ab4:	08013115 	.word	0x08013115
 8014ab8:	2400005c 	.word	0x2400005c
 8014abc:	24006b88 	.word	0x24006b88
 8014ac0:	08013113 	.word	0x08013113
 8014ac4:	24000060 	.word	0x24000060

08014ac8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8014ac8:	b510      	push	{r4, lr}
 8014aca:	4604      	mov	r4, r0
 8014acc:	f7ff ff88 	bl	80149e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ad6:	f7ff bfbd 	b.w	8014a54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08014adc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8014adc:	b538      	push	{r3, r4, r5, lr}
 8014ade:	4c15      	ldr	r4, [pc, #84]	; (8014b34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8014ae0:	4605      	mov	r5, r0
 8014ae2:	7823      	ldrb	r3, [r4, #0]
 8014ae4:	f3bf 8f5b 	dmb	ish
 8014ae8:	07da      	lsls	r2, r3, #31
 8014aea:	d40b      	bmi.n	8014b04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8014aec:	4620      	mov	r0, r4
 8014aee:	f005 f8bd 	bl	8019c6c <__cxa_guard_acquire>
 8014af2:	b138      	cbz	r0, 8014b04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8014af4:	4620      	mov	r0, r4
 8014af6:	f005 f8c5 	bl	8019c84 <__cxa_guard_release>
 8014afa:	4a0f      	ldr	r2, [pc, #60]	; (8014b38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8014afc:	490f      	ldr	r1, [pc, #60]	; (8014b3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8014afe:	4810      	ldr	r0, [pc, #64]	; (8014b40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8014b00:	f005 f8ad 	bl	8019c5e <__aeabi_atexit>
 8014b04:	4c0f      	ldr	r4, [pc, #60]	; (8014b44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8014b06:	7823      	ldrb	r3, [r4, #0]
 8014b08:	f3bf 8f5b 	dmb	ish
 8014b0c:	07db      	lsls	r3, r3, #31
 8014b0e:	d40b      	bmi.n	8014b28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8014b10:	4620      	mov	r0, r4
 8014b12:	f005 f8ab 	bl	8019c6c <__cxa_guard_acquire>
 8014b16:	b138      	cbz	r0, 8014b28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8014b18:	4620      	mov	r0, r4
 8014b1a:	f005 f8b3 	bl	8019c84 <__cxa_guard_release>
 8014b1e:	4a06      	ldr	r2, [pc, #24]	; (8014b38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8014b20:	4909      	ldr	r1, [pc, #36]	; (8014b48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8014b22:	480a      	ldr	r0, [pc, #40]	; (8014b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8014b24:	f005 f89b 	bl	8019c5e <__aeabi_atexit>
 8014b28:	4b05      	ldr	r3, [pc, #20]	; (8014b40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8014b2a:	642b      	str	r3, [r5, #64]	; 0x40
 8014b2c:	4b07      	ldr	r3, [pc, #28]	; (8014b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8014b2e:	646b      	str	r3, [r5, #68]	; 0x44
 8014b30:	bd38      	pop	{r3, r4, r5, pc}
 8014b32:	bf00      	nop
 8014b34:	24006bb4 	.word	0x24006bb4
 8014b38:	24000000 	.word	0x24000000
 8014b3c:	08013109 	.word	0x08013109
 8014b40:	2400008c 	.word	0x2400008c
 8014b44:	24006bb8 	.word	0x24006bb8
 8014b48:	08013107 	.word	0x08013107
 8014b4c:	24000090 	.word	0x24000090

08014b50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	4c15      	ldr	r4, [pc, #84]	; (8014ba8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8014b54:	4605      	mov	r5, r0
 8014b56:	7823      	ldrb	r3, [r4, #0]
 8014b58:	f3bf 8f5b 	dmb	ish
 8014b5c:	07da      	lsls	r2, r3, #31
 8014b5e:	d40b      	bmi.n	8014b78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8014b60:	4620      	mov	r0, r4
 8014b62:	f005 f883 	bl	8019c6c <__cxa_guard_acquire>
 8014b66:	b138      	cbz	r0, 8014b78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8014b68:	4620      	mov	r0, r4
 8014b6a:	f005 f88b 	bl	8019c84 <__cxa_guard_release>
 8014b6e:	4a0f      	ldr	r2, [pc, #60]	; (8014bac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8014b70:	490f      	ldr	r1, [pc, #60]	; (8014bb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8014b72:	4810      	ldr	r0, [pc, #64]	; (8014bb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8014b74:	f005 f873 	bl	8019c5e <__aeabi_atexit>
 8014b78:	4c0f      	ldr	r4, [pc, #60]	; (8014bb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8014b7a:	7823      	ldrb	r3, [r4, #0]
 8014b7c:	f3bf 8f5b 	dmb	ish
 8014b80:	07db      	lsls	r3, r3, #31
 8014b82:	d40b      	bmi.n	8014b9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8014b84:	4620      	mov	r0, r4
 8014b86:	f005 f871 	bl	8019c6c <__cxa_guard_acquire>
 8014b8a:	b138      	cbz	r0, 8014b9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	f005 f879 	bl	8019c84 <__cxa_guard_release>
 8014b92:	4a06      	ldr	r2, [pc, #24]	; (8014bac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8014b94:	4909      	ldr	r1, [pc, #36]	; (8014bbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8014b96:	480a      	ldr	r0, [pc, #40]	; (8014bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8014b98:	f005 f861 	bl	8019c5e <__aeabi_atexit>
 8014b9c:	4b05      	ldr	r3, [pc, #20]	; (8014bb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8014b9e:	63ab      	str	r3, [r5, #56]	; 0x38
 8014ba0:	4b07      	ldr	r3, [pc, #28]	; (8014bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8014ba2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8014ba4:	bd38      	pop	{r3, r4, r5, pc}
 8014ba6:	bf00      	nop
 8014ba8:	24006b94 	.word	0x24006b94
 8014bac:	24000000 	.word	0x24000000
 8014bb0:	0801310d 	.word	0x0801310d
 8014bb4:	2400006c 	.word	0x2400006c
 8014bb8:	24006b98 	.word	0x24006b98
 8014bbc:	0801310b 	.word	0x0801310b
 8014bc0:	24000070 	.word	0x24000070

08014bc4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8014bc4:	b510      	push	{r4, lr}
 8014bc6:	4604      	mov	r4, r0
 8014bc8:	f7ff ff88 	bl	8014adc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8014bcc:	4620      	mov	r0, r4
 8014bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bd2:	f7ff bfbd 	b.w	8014b50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08014bd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	4c15      	ldr	r4, [pc, #84]	; (8014c30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8014bdc:	4605      	mov	r5, r0
 8014bde:	7823      	ldrb	r3, [r4, #0]
 8014be0:	f3bf 8f5b 	dmb	ish
 8014be4:	07da      	lsls	r2, r3, #31
 8014be6:	d40b      	bmi.n	8014c00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8014be8:	4620      	mov	r0, r4
 8014bea:	f005 f83f 	bl	8019c6c <__cxa_guard_acquire>
 8014bee:	b138      	cbz	r0, 8014c00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	f005 f847 	bl	8019c84 <__cxa_guard_release>
 8014bf6:	4a0f      	ldr	r2, [pc, #60]	; (8014c34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8014bf8:	490f      	ldr	r1, [pc, #60]	; (8014c38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8014bfa:	4810      	ldr	r0, [pc, #64]	; (8014c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8014bfc:	f005 f82f 	bl	8019c5e <__aeabi_atexit>
 8014c00:	4c0f      	ldr	r4, [pc, #60]	; (8014c40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8014c02:	7823      	ldrb	r3, [r4, #0]
 8014c04:	f3bf 8f5b 	dmb	ish
 8014c08:	07db      	lsls	r3, r3, #31
 8014c0a:	d40b      	bmi.n	8014c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f005 f82d 	bl	8019c6c <__cxa_guard_acquire>
 8014c12:	b138      	cbz	r0, 8014c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8014c14:	4620      	mov	r0, r4
 8014c16:	f005 f835 	bl	8019c84 <__cxa_guard_release>
 8014c1a:	4a06      	ldr	r2, [pc, #24]	; (8014c34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8014c1c:	4909      	ldr	r1, [pc, #36]	; (8014c44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8014c1e:	480a      	ldr	r0, [pc, #40]	; (8014c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8014c20:	f005 f81d 	bl	8019c5e <__aeabi_atexit>
 8014c24:	4b05      	ldr	r3, [pc, #20]	; (8014c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8014c26:	652b      	str	r3, [r5, #80]	; 0x50
 8014c28:	4b07      	ldr	r3, [pc, #28]	; (8014c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8014c2a:	656b      	str	r3, [r5, #84]	; 0x54
 8014c2c:	bd38      	pop	{r3, r4, r5, pc}
 8014c2e:	bf00      	nop
 8014c30:	24006b8c 	.word	0x24006b8c
 8014c34:	24000000 	.word	0x24000000
 8014c38:	08013101 	.word	0x08013101
 8014c3c:	24000064 	.word	0x24000064
 8014c40:	24006b90 	.word	0x24006b90
 8014c44:	080130ff 	.word	0x080130ff
 8014c48:	24000068 	.word	0x24000068

08014c4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	4c15      	ldr	r4, [pc, #84]	; (8014ca4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8014c50:	4605      	mov	r5, r0
 8014c52:	7823      	ldrb	r3, [r4, #0]
 8014c54:	f3bf 8f5b 	dmb	ish
 8014c58:	07da      	lsls	r2, r3, #31
 8014c5a:	d40b      	bmi.n	8014c74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	f005 f805 	bl	8019c6c <__cxa_guard_acquire>
 8014c62:	b138      	cbz	r0, 8014c74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8014c64:	4620      	mov	r0, r4
 8014c66:	f005 f80d 	bl	8019c84 <__cxa_guard_release>
 8014c6a:	4a0f      	ldr	r2, [pc, #60]	; (8014ca8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8014c6c:	490f      	ldr	r1, [pc, #60]	; (8014cac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8014c6e:	4810      	ldr	r0, [pc, #64]	; (8014cb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8014c70:	f004 fff5 	bl	8019c5e <__aeabi_atexit>
 8014c74:	4c0f      	ldr	r4, [pc, #60]	; (8014cb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8014c76:	7823      	ldrb	r3, [r4, #0]
 8014c78:	f3bf 8f5b 	dmb	ish
 8014c7c:	07db      	lsls	r3, r3, #31
 8014c7e:	d40b      	bmi.n	8014c98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8014c80:	4620      	mov	r0, r4
 8014c82:	f004 fff3 	bl	8019c6c <__cxa_guard_acquire>
 8014c86:	b138      	cbz	r0, 8014c98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8014c88:	4620      	mov	r0, r4
 8014c8a:	f004 fffb 	bl	8019c84 <__cxa_guard_release>
 8014c8e:	4a06      	ldr	r2, [pc, #24]	; (8014ca8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8014c90:	4909      	ldr	r1, [pc, #36]	; (8014cb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8014c92:	480a      	ldr	r0, [pc, #40]	; (8014cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8014c94:	f004 ffe3 	bl	8019c5e <__aeabi_atexit>
 8014c98:	4b05      	ldr	r3, [pc, #20]	; (8014cb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8014c9a:	64ab      	str	r3, [r5, #72]	; 0x48
 8014c9c:	4b07      	ldr	r3, [pc, #28]	; (8014cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8014c9e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8014ca0:	bd38      	pop	{r3, r4, r5, pc}
 8014ca2:	bf00      	nop
 8014ca4:	24006b7c 	.word	0x24006b7c
 8014ca8:	24000000 	.word	0x24000000
 8014cac:	08013105 	.word	0x08013105
 8014cb0:	24000054 	.word	0x24000054
 8014cb4:	24006b80 	.word	0x24006b80
 8014cb8:	08013103 	.word	0x08013103
 8014cbc:	24000058 	.word	0x24000058

08014cc0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8014cc0:	b510      	push	{r4, lr}
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	f7ff ff88 	bl	8014bd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8014cc8:	4620      	mov	r0, r4
 8014cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cce:	f7ff bfbd 	b.w	8014c4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08014cd2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8014cd2:	b510      	push	{r4, lr}
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	f7ff fff3 	bl	8014cc0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8014cda:	4620      	mov	r0, r4
 8014cdc:	f7ff ff72 	bl	8014bc4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	f7ff fe73 	bl	80149cc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8014ce6:	4620      	mov	r0, r4
 8014ce8:	f7ff fdf2 	bl	80148d0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8014cec:	4620      	mov	r0, r4
 8014cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cf2:	f7ff bee9 	b.w	8014ac8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08014cf8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8014cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	b087      	sub	sp, #28
 8014cfe:	7888      	ldrb	r0, [r1, #2]
 8014d00:	4616      	mov	r6, r2
 8014d02:	9001      	str	r0, [sp, #4]
 8014d04:	7848      	ldrb	r0, [r1, #1]
 8014d06:	9100      	str	r1, [sp, #0]
 8014d08:	9002      	str	r0, [sp, #8]
 8014d0a:	7808      	ldrb	r0, [r1, #0]
 8014d0c:	9901      	ldr	r1, [sp, #4]
 8014d0e:	9003      	str	r0, [sp, #12]
 8014d10:	9802      	ldr	r0, [sp, #8]
 8014d12:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8014d16:	0200      	lsls	r0, r0, #8
 8014d18:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8014d1c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8014d20:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8014d24:	9903      	ldr	r1, [sp, #12]
 8014d26:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8014d2a:	4308      	orrs	r0, r1
 8014d2c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014d30:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8014d34:	9005      	str	r0, [sp, #20]
 8014d36:	fb05 ca0e 	mla	sl, r5, lr, ip
 8014d3a:	2d00      	cmp	r5, #0
 8014d3c:	eb06 080a 	add.w	r8, r6, sl
 8014d40:	db4a      	blt.n	8014dd8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8014d42:	45a9      	cmp	r9, r5
 8014d44:	dd48      	ble.n	8014dd8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8014d46:	f1bc 0f00 	cmp.w	ip, #0
 8014d4a:	db43      	blt.n	8014dd4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8014d4c:	45e6      	cmp	lr, ip
 8014d4e:	dd41      	ble.n	8014dd4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8014d50:	f816 600a 	ldrb.w	r6, [r6, sl]
 8014d54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014d58:	441e      	add	r6, r3
 8014d5a:	f11c 0001 	adds.w	r0, ip, #1
 8014d5e:	d43e      	bmi.n	8014dde <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8014d60:	4586      	cmp	lr, r0
 8014d62:	dd3c      	ble.n	8014dde <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8014d64:	2a00      	cmp	r2, #0
 8014d66:	d03a      	beq.n	8014dde <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8014d68:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014d6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014d70:	4418      	add	r0, r3
 8014d72:	3501      	adds	r5, #1
 8014d74:	d437      	bmi.n	8014de6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8014d76:	45a9      	cmp	r9, r5
 8014d78:	dd35      	ble.n	8014de6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8014d7a:	b3a4      	cbz	r4, 8014de6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8014d7c:	f1bc 0f00 	cmp.w	ip, #0
 8014d80:	db2f      	blt.n	8014de2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8014d82:	45e6      	cmp	lr, ip
 8014d84:	dd2d      	ble.n	8014de2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8014d86:	f818 500e 	ldrb.w	r5, [r8, lr]
 8014d8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d8e:	441d      	add	r5, r3
 8014d90:	f11c 0c01 	adds.w	ip, ip, #1
 8014d94:	d42a      	bmi.n	8014dec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8014d96:	45e6      	cmp	lr, ip
 8014d98:	dd28      	ble.n	8014dec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8014d9a:	b33a      	cbz	r2, 8014dec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8014d9c:	44c6      	add	lr, r8
 8014d9e:	f89e c001 	ldrb.w	ip, [lr, #1]
 8014da2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8014da6:	4463      	add	r3, ip
 8014da8:	ea6f 0c07 	mvn.w	ip, r7
 8014dac:	2a0f      	cmp	r2, #15
 8014dae:	f896 a000 	ldrb.w	sl, [r6]
 8014db2:	fa5f fc8c 	uxtb.w	ip, ip
 8014db6:	f890 b000 	ldrb.w	fp, [r0]
 8014dba:	f895 9000 	ldrb.w	r9, [r5]
 8014dbe:	7819      	ldrb	r1, [r3, #0]
 8014dc0:	d801      	bhi.n	8014dc6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8014dc2:	2c0f      	cmp	r4, #15
 8014dc4:	d914      	bls.n	8014df0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8014dc6:	4b40      	ldr	r3, [pc, #256]	; (8014ec8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8014dc8:	f240 115b 	movw	r1, #347	; 0x15b
 8014dcc:	4a3f      	ldr	r2, [pc, #252]	; (8014ecc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8014dce:	4840      	ldr	r0, [pc, #256]	; (8014ed0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8014dd0:	f004 ff78 	bl	8019cc4 <__assert_func>
 8014dd4:	ae05      	add	r6, sp, #20
 8014dd6:	e7c0      	b.n	8014d5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8014dd8:	a805      	add	r0, sp, #20
 8014dda:	4606      	mov	r6, r0
 8014ddc:	e7c9      	b.n	8014d72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8014dde:	a805      	add	r0, sp, #20
 8014de0:	e7c7      	b.n	8014d72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8014de2:	ad05      	add	r5, sp, #20
 8014de4:	e7d4      	b.n	8014d90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8014de6:	ab05      	add	r3, sp, #20
 8014de8:	461d      	mov	r5, r3
 8014dea:	e7dd      	b.n	8014da8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8014dec:	ab05      	add	r3, sp, #20
 8014dee:	e7db      	b.n	8014da8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8014df0:	b292      	uxth	r2, r2
 8014df2:	b2a4      	uxth	r4, r4
 8014df4:	fa1f fc8c 	uxth.w	ip, ip
 8014df8:	fb02 f804 	mul.w	r8, r2, r4
 8014dfc:	0112      	lsls	r2, r2, #4
 8014dfe:	b2bf      	uxth	r7, r7
 8014e00:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8014e04:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8014e08:	eba2 0208 	sub.w	r2, r2, r8
 8014e0c:	b2a4      	uxth	r4, r4
 8014e0e:	b292      	uxth	r2, r2
 8014e10:	ebae 0e04 	sub.w	lr, lr, r4
 8014e14:	fb02 fb0b 	mul.w	fp, r2, fp
 8014e18:	fa1f fe8e 	uxth.w	lr, lr
 8014e1c:	fb0e ba0a 	mla	sl, lr, sl, fp
 8014e20:	fb04 aa09 	mla	sl, r4, r9, sl
 8014e24:	fb08 aa01 	mla	sl, r8, r1, sl
 8014e28:	9903      	ldr	r1, [sp, #12]
 8014e2a:	fb11 f90c 	smulbb	r9, r1, ip
 8014e2e:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8014e32:	9900      	ldr	r1, [sp, #0]
 8014e34:	fb0a 9a07 	mla	sl, sl, r7, r9
 8014e38:	fa1f fa8a 	uxth.w	sl, sl
 8014e3c:	f10a 0901 	add.w	r9, sl, #1
 8014e40:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8014e44:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014e48:	f881 a000 	strb.w	sl, [r1]
 8014e4c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8014e50:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014e54:	fb02 fa0a 	mul.w	sl, r2, sl
 8014e58:	9902      	ldr	r1, [sp, #8]
 8014e5a:	fb0e aa09 	mla	sl, lr, r9, sl
 8014e5e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8014e62:	fb04 aa09 	mla	sl, r4, r9, sl
 8014e66:	f893 9001 	ldrb.w	r9, [r3, #1]
 8014e6a:	fb08 a909 	mla	r9, r8, r9, sl
 8014e6e:	fb11 fa0c 	smulbb	sl, r1, ip
 8014e72:	9900      	ldr	r1, [sp, #0]
 8014e74:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8014e78:	fb09 a907 	mla	r9, r9, r7, sl
 8014e7c:	fa1f f989 	uxth.w	r9, r9
 8014e80:	f109 0a01 	add.w	sl, r9, #1
 8014e84:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8014e88:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e8c:	f881 9001 	strb.w	r9, [r1, #1]
 8014e90:	7880      	ldrb	r0, [r0, #2]
 8014e92:	78b6      	ldrb	r6, [r6, #2]
 8014e94:	4342      	muls	r2, r0
 8014e96:	78a8      	ldrb	r0, [r5, #2]
 8014e98:	789b      	ldrb	r3, [r3, #2]
 8014e9a:	fb0e 2206 	mla	r2, lr, r6, r2
 8014e9e:	fb04 2400 	mla	r4, r4, r0, r2
 8014ea2:	fb08 4803 	mla	r8, r8, r3, r4
 8014ea6:	9b01      	ldr	r3, [sp, #4]
 8014ea8:	fb13 fc0c 	smulbb	ip, r3, ip
 8014eac:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8014eb0:	fb08 c707 	mla	r7, r8, r7, ip
 8014eb4:	b2bf      	uxth	r7, r7
 8014eb6:	f107 0c01 	add.w	ip, r7, #1
 8014eba:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8014ebe:	123f      	asrs	r7, r7, #8
 8014ec0:	708f      	strb	r7, [r1, #2]
 8014ec2:	b007      	add	sp, #28
 8014ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec8:	0801e734 	.word	0x0801e734
 8014ecc:	0801eb4a 	.word	0x0801eb4a
 8014ed0:	0801e701 	.word	0x0801e701

08014ed4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed8:	ed2d 8b08 	vpush	{d8-d11}
 8014edc:	b093      	sub	sp, #76	; 0x4c
 8014ede:	eeb0 aa40 	vmov.f32	s20, s0
 8014ee2:	eef0 9a60 	vmov.f32	s19, s1
 8014ee6:	9210      	str	r2, [sp, #64]	; 0x40
 8014ee8:	eeb0 9a41 	vmov.f32	s18, s2
 8014eec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014eee:	eeb0 8a62 	vmov.f32	s16, s5
 8014ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8014ef4:	eef0 8a43 	vmov.f32	s17, s6
 8014ef8:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8014efc:	eef0 ba44 	vmov.f32	s23, s8
 8014f00:	9011      	str	r0, [sp, #68]	; 0x44
 8014f02:	eeb0 ba64 	vmov.f32	s22, s9
 8014f06:	930e      	str	r3, [sp, #56]	; 0x38
 8014f08:	eef0 aa45 	vmov.f32	s21, s10
 8014f0c:	6850      	ldr	r0, [r2, #4]
 8014f0e:	910d      	str	r1, [sp, #52]	; 0x34
 8014f10:	6812      	ldr	r2, [r2, #0]
 8014f12:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8014f16:	fb00 1303 	mla	r3, r0, r3, r1
 8014f1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014f1e:	18d3      	adds	r3, r2, r3
 8014f20:	930a      	str	r3, [sp, #40]	; 0x28
 8014f22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	930c      	str	r3, [sp, #48]	; 0x30
 8014f28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014f2a:	685c      	ldr	r4, [r3, #4]
 8014f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f2e:	3404      	adds	r4, #4
 8014f30:	43db      	mvns	r3, r3
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	dc03      	bgt.n	8014f44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f340 8250 	ble.w	80153e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8014f44:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014f46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014f4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014f4e:	1e48      	subs	r0, r1, #1
 8014f50:	1e55      	subs	r5, r2, #1
 8014f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	f340 80ee 	ble.w	8015136 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8014f5a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8014f5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f5e:	1436      	asrs	r6, r6, #16
 8014f60:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014f64:	d406      	bmi.n	8014f74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014f66:	4286      	cmp	r6, r0
 8014f68:	da04      	bge.n	8014f74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	db02      	blt.n	8014f74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014f6e:	42ab      	cmp	r3, r5
 8014f70:	f2c0 80e2 	blt.w	8015138 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8014f74:	3601      	adds	r6, #1
 8014f76:	f100 80cf 	bmi.w	8015118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8014f7a:	42b1      	cmp	r1, r6
 8014f7c:	f2c0 80cc 	blt.w	8015118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8014f80:	3301      	adds	r3, #1
 8014f82:	f100 80c9 	bmi.w	8015118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8014f86:	429a      	cmp	r2, r3
 8014f88:	f2c0 80c6 	blt.w	8015118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8014f8c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8014f90:	f1bb 0f00 	cmp.w	fp, #0
 8014f94:	f340 80f1 	ble.w	801517a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8014f98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f9a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014f9c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014f9e:	141d      	asrs	r5, r3, #16
 8014fa0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014fa2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014fa6:	68c7      	ldr	r7, [r0, #12]
 8014fa8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8014faa:	1418      	asrs	r0, r3, #16
 8014fac:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8014fb0:	6892      	ldr	r2, [r2, #8]
 8014fb2:	f100 8137 	bmi.w	8015224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8014fb6:	f102 3cff 	add.w	ip, r2, #4294967295
 8014fba:	4560      	cmp	r0, ip
 8014fbc:	f280 8132 	bge.w	8015224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8014fc0:	2d00      	cmp	r5, #0
 8014fc2:	f2c0 812f 	blt.w	8015224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8014fc6:	f107 3cff 	add.w	ip, r7, #4294967295
 8014fca:	4565      	cmp	r5, ip
 8014fcc:	f280 812a 	bge.w	8015224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8014fd0:	b212      	sxth	r2, r2
 8014fd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014fd4:	fb05 0002 	mla	r0, r5, r2, r0
 8014fd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014fda:	f817 c000 	ldrb.w	ip, [r7, r0]
 8014fde:	4405      	add	r5, r0
 8014fe0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8014fe4:	eb04 0e0c 	add.w	lr, r4, ip
 8014fe8:	f1b8 0f00 	cmp.w	r8, #0
 8014fec:	f000 810c 	beq.w	8015208 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8014ff0:	786f      	ldrb	r7, [r5, #1]
 8014ff2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014ff6:	4427      	add	r7, r4
 8014ff8:	2900      	cmp	r1, #0
 8014ffa:	f000 810d 	beq.w	8015218 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8014ffe:	18a8      	adds	r0, r5, r2
 8015000:	5caa      	ldrb	r2, [r5, r2]
 8015002:	7840      	ldrb	r0, [r0, #1]
 8015004:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015008:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801500c:	4422      	add	r2, r4
 801500e:	4420      	add	r0, r4
 8015010:	fa1f f388 	uxth.w	r3, r8
 8015014:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8015018:	b289      	uxth	r1, r1
 801501a:	f897 c000 	ldrb.w	ip, [r7]
 801501e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015022:	fb03 f901 	mul.w	r9, r3, r1
 8015026:	011b      	lsls	r3, r3, #4
 8015028:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801502c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8015030:	eba3 0309 	sub.w	r3, r3, r9
 8015034:	b289      	uxth	r1, r1
 8015036:	b29b      	uxth	r3, r3
 8015038:	eba8 0801 	sub.w	r8, r8, r1
 801503c:	fb03 fc0c 	mul.w	ip, r3, ip
 8015040:	fa1f f888 	uxth.w	r8, r8
 8015044:	930f      	str	r3, [sp, #60]	; 0x3c
 8015046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015048:	fb08 cc0a 	mla	ip, r8, sl, ip
 801504c:	f892 a000 	ldrb.w	sl, [r2]
 8015050:	fb01 cc0a 	mla	ip, r1, sl, ip
 8015054:	f890 a000 	ldrb.w	sl, [r0]
 8015058:	fb09 cc0a 	mla	ip, r9, sl, ip
 801505c:	f896 a000 	ldrb.w	sl, [r6]
 8015060:	fb1a fa03 	smulbb	sl, sl, r3
 8015064:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8015068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801506a:	fb0c ac05 	mla	ip, ip, r5, sl
 801506e:	fa1f fc8c 	uxth.w	ip, ip
 8015072:	f10c 0a01 	add.w	sl, ip, #1
 8015076:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801507a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801507e:	f886 a000 	strb.w	sl, [r6]
 8015082:	f897 c001 	ldrb.w	ip, [r7, #1]
 8015086:	f89e a001 	ldrb.w	sl, [lr, #1]
 801508a:	fb03 fc0c 	mul.w	ip, r3, ip
 801508e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015090:	fb08 cc0a 	mla	ip, r8, sl, ip
 8015094:	f892 a001 	ldrb.w	sl, [r2, #1]
 8015098:	fb01 cc0a 	mla	ip, r1, sl, ip
 801509c:	f890 a001 	ldrb.w	sl, [r0, #1]
 80150a0:	fb09 cc0a 	mla	ip, r9, sl, ip
 80150a4:	f896 a001 	ldrb.w	sl, [r6, #1]
 80150a8:	fb1a fa03 	smulbb	sl, sl, r3
 80150ac:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80150b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150b2:	fb0c ac05 	mla	ip, ip, r5, sl
 80150b6:	fa1f fc8c 	uxth.w	ip, ip
 80150ba:	f10c 0a01 	add.w	sl, ip, #1
 80150be:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80150c2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80150c6:	f886 c001 	strb.w	ip, [r6, #1]
 80150ca:	78bf      	ldrb	r7, [r7, #2]
 80150cc:	f89e c002 	ldrb.w	ip, [lr, #2]
 80150d0:	437b      	muls	r3, r7
 80150d2:	fb08 330c 	mla	r3, r8, ip, r3
 80150d6:	f892 c002 	ldrb.w	ip, [r2, #2]
 80150da:	7882      	ldrb	r2, [r0, #2]
 80150dc:	fb01 310c 	mla	r1, r1, ip, r3
 80150e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150e2:	fb09 1902 	mla	r9, r9, r2, r1
 80150e6:	78b1      	ldrb	r1, [r6, #2]
 80150e8:	fb11 f103 	smulbb	r1, r1, r3
 80150ec:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80150f0:	fb09 1505 	mla	r5, r9, r5, r1
 80150f4:	b2ad      	uxth	r5, r5
 80150f6:	1c6b      	adds	r3, r5, #1
 80150f8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80150fc:	122d      	asrs	r5, r5, #8
 80150fe:	70b5      	strb	r5, [r6, #2]
 8015100:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015102:	3603      	adds	r6, #3
 8015104:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015106:	f10b 3bff 	add.w	fp, fp, #4294967295
 801510a:	4413      	add	r3, r2
 801510c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801510e:	9325      	str	r3, [sp, #148]	; 0x94
 8015110:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015112:	4413      	add	r3, r2
 8015114:	9326      	str	r3, [sp, #152]	; 0x98
 8015116:	e73b      	b.n	8014f90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8015118:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801511a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801511c:	4433      	add	r3, r6
 801511e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8015120:	9325      	str	r3, [sp, #148]	; 0x94
 8015122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015124:	4433      	add	r3, r6
 8015126:	9326      	str	r3, [sp, #152]	; 0x98
 8015128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801512a:	3b01      	subs	r3, #1
 801512c:	9309      	str	r3, [sp, #36]	; 0x24
 801512e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015130:	3303      	adds	r3, #3
 8015132:	930a      	str	r3, [sp, #40]	; 0x28
 8015134:	e70d      	b.n	8014f52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015136:	d028      	beq.n	801518a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8015138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801513a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801513c:	3b01      	subs	r3, #1
 801513e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8015140:	fb00 5003 	mla	r0, r0, r3, r5
 8015144:	1400      	asrs	r0, r0, #16
 8015146:	f53f af21 	bmi.w	8014f8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801514a:	3901      	subs	r1, #1
 801514c:	4288      	cmp	r0, r1
 801514e:	f6bf af1d 	bge.w	8014f8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015152:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8015154:	9826      	ldr	r0, [sp, #152]	; 0x98
 8015156:	fb01 0303 	mla	r3, r1, r3, r0
 801515a:	141b      	asrs	r3, r3, #16
 801515c:	f53f af16 	bmi.w	8014f8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015160:	3a01      	subs	r2, #1
 8015162:	4293      	cmp	r3, r2
 8015164:	f6bf af12 	bge.w	8014f8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801516a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801516e:	1cdf      	adds	r7, r3, #3
 8015170:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8015174:	f1b9 0f00 	cmp.w	r9, #0
 8015178:	dc73      	bgt.n	8015262 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801517a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801517c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801517e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015182:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015186:	441a      	add	r2, r3
 8015188:	920a      	str	r2, [sp, #40]	; 0x28
 801518a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801518c:	2b00      	cmp	r3, #0
 801518e:	f340 8129 	ble.w	80153e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8015192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015196:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015198:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801519c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80151a0:	eef0 6a48 	vmov.f32	s13, s16
 80151a4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80151a8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80151ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80151b0:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80151b4:	eef0 6a68 	vmov.f32	s13, s17
 80151b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80151bc:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80151c0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80151c4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80151c8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80151cc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80151d0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80151d4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80151d8:	ee18 2a10 	vmov	r2, s16
 80151dc:	eeb0 8a47 	vmov.f32	s16, s14
 80151e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80151e4:	ee18 2a90 	vmov	r2, s17
 80151e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80151ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80151ec:	eef0 8a67 	vmov.f32	s17, s15
 80151f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80151f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80151f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151fa:	3b01      	subs	r3, #1
 80151fc:	930d      	str	r3, [sp, #52]	; 0x34
 80151fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015200:	bf08      	it	eq
 8015202:	4613      	moveq	r3, r2
 8015204:	9309      	str	r3, [sp, #36]	; 0x24
 8015206:	e696      	b.n	8014f36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8015208:	b149      	cbz	r1, 801521e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801520a:	5caa      	ldrb	r2, [r5, r2]
 801520c:	4670      	mov	r0, lr
 801520e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015212:	4422      	add	r2, r4
 8015214:	4677      	mov	r7, lr
 8015216:	e6fb      	b.n	8015010 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8015218:	4670      	mov	r0, lr
 801521a:	4672      	mov	r2, lr
 801521c:	e6f8      	b.n	8015010 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801521e:	4670      	mov	r0, lr
 8015220:	4672      	mov	r2, lr
 8015222:	e7f7      	b.n	8015214 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8015224:	f110 0c01 	adds.w	ip, r0, #1
 8015228:	f53f af6a 	bmi.w	8015100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801522c:	4562      	cmp	r2, ip
 801522e:	f6ff af67 	blt.w	8015100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8015232:	f115 0c01 	adds.w	ip, r5, #1
 8015236:	f53f af63 	bmi.w	8015100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801523a:	4567      	cmp	r7, ip
 801523c:	f6ff af60 	blt.w	8015100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8015240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015242:	b23f      	sxth	r7, r7
 8015244:	b212      	sxth	r2, r2
 8015246:	9002      	str	r0, [sp, #8]
 8015248:	9701      	str	r7, [sp, #4]
 801524a:	9200      	str	r2, [sp, #0]
 801524c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801524e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015250:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8015254:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8015258:	4623      	mov	r3, r4
 801525a:	4631      	mov	r1, r6
 801525c:	f7ff fd4c 	bl	8014cf8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8015260:	e74e      	b.n	8015100 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8015262:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015264:	9826      	ldr	r0, [sp, #152]	; 0x98
 8015266:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801526a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801526c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801526e:	1400      	asrs	r0, r0, #16
 8015270:	142d      	asrs	r5, r5, #16
 8015272:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015274:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8015278:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801527c:	fb02 5000 	mla	r0, r2, r0, r5
 8015280:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015282:	f815 e000 	ldrb.w	lr, [r5, r0]
 8015286:	eb05 0c00 	add.w	ip, r5, r0
 801528a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801528e:	eb04 060e 	add.w	r6, r4, lr
 8015292:	2b00      	cmp	r3, #0
 8015294:	f000 8097 	beq.w	80153c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8015298:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801529c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80152a0:	4425      	add	r5, r4
 80152a2:	2900      	cmp	r1, #0
 80152a4:	f000 8098 	beq.w	80153d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80152a8:	eb0c 0002 	add.w	r0, ip, r2
 80152ac:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80152b0:	7840      	ldrb	r0, [r0, #1]
 80152b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80152b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80152ba:	4422      	add	r2, r4
 80152bc:	4420      	add	r0, r4
 80152be:	b29b      	uxth	r3, r3
 80152c0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80152c4:	b289      	uxth	r1, r1
 80152c6:	f895 e000 	ldrb.w	lr, [r5]
 80152ca:	3703      	adds	r7, #3
 80152cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80152d0:	fb03 f801 	mul.w	r8, r3, r1
 80152d4:	011b      	lsls	r3, r3, #4
 80152d6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80152da:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80152de:	eba3 0308 	sub.w	r3, r3, r8
 80152e2:	b289      	uxth	r1, r1
 80152e4:	b29b      	uxth	r3, r3
 80152e6:	ebac 0c01 	sub.w	ip, ip, r1
 80152ea:	fb03 fe0e 	mul.w	lr, r3, lr
 80152ee:	fa1f fc8c 	uxth.w	ip, ip
 80152f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80152f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152f6:	fb0c ee0b 	mla	lr, ip, fp, lr
 80152fa:	f892 b000 	ldrb.w	fp, [r2]
 80152fe:	fb01 ee0b 	mla	lr, r1, fp, lr
 8015302:	f890 b000 	ldrb.w	fp, [r0]
 8015306:	fb08 ee0b 	mla	lr, r8, fp, lr
 801530a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801530e:	fb1b fb03 	smulbb	fp, fp, r3
 8015312:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8015316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015318:	fb0e be0a 	mla	lr, lr, sl, fp
 801531c:	fa1f fe8e 	uxth.w	lr, lr
 8015320:	f10e 0b01 	add.w	fp, lr, #1
 8015324:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8015328:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801532c:	f807 ec06 	strb.w	lr, [r7, #-6]
 8015330:	f895 e001 	ldrb.w	lr, [r5, #1]
 8015334:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015338:	fb03 fe0e 	mul.w	lr, r3, lr
 801533c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801533e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8015342:	f892 b001 	ldrb.w	fp, [r2, #1]
 8015346:	fb01 ee0b 	mla	lr, r1, fp, lr
 801534a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801534e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8015352:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8015356:	fb1b fb03 	smulbb	fp, fp, r3
 801535a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801535e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015360:	fb0e be0a 	mla	lr, lr, sl, fp
 8015364:	fa1f fe8e 	uxth.w	lr, lr
 8015368:	f10e 0b01 	add.w	fp, lr, #1
 801536c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8015370:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015374:	f807 ec05 	strb.w	lr, [r7, #-5]
 8015378:	78ad      	ldrb	r5, [r5, #2]
 801537a:	78b6      	ldrb	r6, [r6, #2]
 801537c:	436b      	muls	r3, r5
 801537e:	7895      	ldrb	r5, [r2, #2]
 8015380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015382:	fb0c 3306 	mla	r3, ip, r6, r3
 8015386:	fb01 3305 	mla	r3, r1, r5, r3
 801538a:	7885      	ldrb	r5, [r0, #2]
 801538c:	fb08 3805 	mla	r8, r8, r5, r3
 8015390:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8015394:	fb13 f302 	smulbb	r3, r3, r2
 8015398:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801539c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801539e:	fb08 380a 	mla	r8, r8, sl, r3
 80153a2:	fa1f f888 	uxth.w	r8, r8
 80153a6:	f108 0301 	add.w	r3, r8, #1
 80153aa:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80153ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80153b0:	4413      	add	r3, r2
 80153b2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80153b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80153b8:	9325      	str	r3, [sp, #148]	; 0x94
 80153ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80153bc:	f807 8c04 	strb.w	r8, [r7, #-4]
 80153c0:	4413      	add	r3, r2
 80153c2:	9326      	str	r3, [sp, #152]	; 0x98
 80153c4:	e6d6      	b.n	8015174 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80153c6:	b151      	cbz	r1, 80153de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80153c8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80153cc:	4630      	mov	r0, r6
 80153ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80153d2:	4422      	add	r2, r4
 80153d4:	4635      	mov	r5, r6
 80153d6:	e772      	b.n	80152be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80153d8:	4630      	mov	r0, r6
 80153da:	4632      	mov	r2, r6
 80153dc:	e76f      	b.n	80152be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80153de:	4630      	mov	r0, r6
 80153e0:	4632      	mov	r2, r6
 80153e2:	e7f7      	b.n	80153d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80153e4:	b013      	add	sp, #76	; 0x4c
 80153e6:	ecbd 8b08 	vpop	{d8-d11}
 80153ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080153f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80153f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153f4:	784d      	ldrb	r5, [r1, #1]
 80153f6:	f891 9002 	ldrb.w	r9, [r1, #2]
 80153fa:	022d      	lsls	r5, r5, #8
 80153fc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8015400:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8015404:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8015408:	f891 9000 	ldrb.w	r9, [r1]
 801540c:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8015410:	ea45 0509 	orr.w	r5, r5, r9
 8015414:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8015418:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801541c:	9501      	str	r5, [sp, #4]
 801541e:	fb06 470c 	mla	r7, r6, ip, r4
 8015422:	2e00      	cmp	r6, #0
 8015424:	eb02 0e07 	add.w	lr, r2, r7
 8015428:	db46      	blt.n	80154b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801542a:	45b0      	cmp	r8, r6
 801542c:	dd44      	ble.n	80154b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801542e:	2c00      	cmp	r4, #0
 8015430:	db40      	blt.n	80154b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8015432:	45a4      	cmp	ip, r4
 8015434:	dd3e      	ble.n	80154b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8015436:	5dd7      	ldrb	r7, [r2, r7]
 8015438:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801543c:	441f      	add	r7, r3
 801543e:	1c62      	adds	r2, r4, #1
 8015440:	d43d      	bmi.n	80154be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8015442:	4594      	cmp	ip, r2
 8015444:	dd3b      	ble.n	80154be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8015446:	f1ba 0f00 	cmp.w	sl, #0
 801544a:	d038      	beq.n	80154be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801544c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8015450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015454:	441d      	add	r5, r3
 8015456:	3601      	adds	r6, #1
 8015458:	d435      	bmi.n	80154c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801545a:	45b0      	cmp	r8, r6
 801545c:	dd33      	ble.n	80154c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801545e:	b390      	cbz	r0, 80154c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8015460:	2c00      	cmp	r4, #0
 8015462:	db2e      	blt.n	80154c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8015464:	45a4      	cmp	ip, r4
 8015466:	dd2c      	ble.n	80154c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8015468:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801546c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015470:	441e      	add	r6, r3
 8015472:	1c62      	adds	r2, r4, #1
 8015474:	d42a      	bmi.n	80154cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8015476:	4594      	cmp	ip, r2
 8015478:	dd28      	ble.n	80154cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801547a:	f1ba 0f00 	cmp.w	sl, #0
 801547e:	d025      	beq.n	80154cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8015480:	44f4      	add	ip, lr
 8015482:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8015486:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801548a:	4413      	add	r3, r2
 801548c:	f1ba 0f0f 	cmp.w	sl, #15
 8015490:	f897 8000 	ldrb.w	r8, [r7]
 8015494:	f895 9000 	ldrb.w	r9, [r5]
 8015498:	f896 e000 	ldrb.w	lr, [r6]
 801549c:	f893 c000 	ldrb.w	ip, [r3]
 80154a0:	d801      	bhi.n	80154a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 80154a2:	280f      	cmp	r0, #15
 80154a4:	d914      	bls.n	80154d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 80154a6:	4b29      	ldr	r3, [pc, #164]	; (801554c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 80154a8:	f240 115b 	movw	r1, #347	; 0x15b
 80154ac:	4a28      	ldr	r2, [pc, #160]	; (8015550 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80154ae:	4829      	ldr	r0, [pc, #164]	; (8015554 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80154b0:	f004 fc08 	bl	8019cc4 <__assert_func>
 80154b4:	af01      	add	r7, sp, #4
 80154b6:	e7c2      	b.n	801543e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80154b8:	ad01      	add	r5, sp, #4
 80154ba:	462f      	mov	r7, r5
 80154bc:	e7cb      	b.n	8015456 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80154be:	ad01      	add	r5, sp, #4
 80154c0:	e7c9      	b.n	8015456 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80154c2:	ae01      	add	r6, sp, #4
 80154c4:	e7d5      	b.n	8015472 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80154c6:	ab01      	add	r3, sp, #4
 80154c8:	461e      	mov	r6, r3
 80154ca:	e7df      	b.n	801548c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80154cc:	ab01      	add	r3, sp, #4
 80154ce:	e7dd      	b.n	801548c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80154d0:	fa1f f48a 	uxth.w	r4, sl
 80154d4:	b280      	uxth	r0, r0
 80154d6:	fb04 fa00 	mul.w	sl, r4, r0
 80154da:	0124      	lsls	r4, r4, #4
 80154dc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80154e0:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80154e4:	b282      	uxth	r2, r0
 80154e6:	eba4 000a 	sub.w	r0, r4, sl
 80154ea:	ebab 0b02 	sub.w	fp, fp, r2
 80154ee:	b280      	uxth	r0, r0
 80154f0:	fa1f fb8b 	uxth.w	fp, fp
 80154f4:	fb00 f909 	mul.w	r9, r0, r9
 80154f8:	fb0b 9808 	mla	r8, fp, r8, r9
 80154fc:	fb02 8e0e 	mla	lr, r2, lr, r8
 8015500:	fb0a ec0c 	mla	ip, sl, ip, lr
 8015504:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015508:	f881 c000 	strb.w	ip, [r1]
 801550c:	786c      	ldrb	r4, [r5, #1]
 801550e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8015512:	4344      	muls	r4, r0
 8015514:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8015518:	7874      	ldrb	r4, [r6, #1]
 801551a:	fb02 cc04 	mla	ip, r2, r4, ip
 801551e:	785c      	ldrb	r4, [r3, #1]
 8015520:	fb0a c404 	mla	r4, sl, r4, ip
 8015524:	1224      	asrs	r4, r4, #8
 8015526:	704c      	strb	r4, [r1, #1]
 8015528:	78ad      	ldrb	r5, [r5, #2]
 801552a:	78bc      	ldrb	r4, [r7, #2]
 801552c:	4368      	muls	r0, r5
 801552e:	fb0b 0b04 	mla	fp, fp, r4, r0
 8015532:	78b0      	ldrb	r0, [r6, #2]
 8015534:	fb02 b000 	mla	r0, r2, r0, fp
 8015538:	789a      	ldrb	r2, [r3, #2]
 801553a:	fb0a 0a02 	mla	sl, sl, r2, r0
 801553e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015542:	f881 a002 	strb.w	sl, [r1, #2]
 8015546:	b003      	add	sp, #12
 8015548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801554c:	0801e734 	.word	0x0801e734
 8015550:	0801eb4a 	.word	0x0801eb4a
 8015554:	0801e701 	.word	0x0801e701

08015558 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801555c:	ed2d 8b0a 	vpush	{d8-d12}
 8015560:	b08d      	sub	sp, #52	; 0x34
 8015562:	eeb0 aa40 	vmov.f32	s20, s0
 8015566:	eef0 9a60 	vmov.f32	s19, s1
 801556a:	900b      	str	r0, [sp, #44]	; 0x2c
 801556c:	eeb0 9a41 	vmov.f32	s18, s2
 8015570:	9306      	str	r3, [sp, #24]
 8015572:	eeb0 8a62 	vmov.f32	s16, s5
 8015576:	eef0 8a43 	vmov.f32	s17, s6
 801557a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801557c:	eeb0 ca44 	vmov.f32	s24, s8
 8015580:	eef0 ba64 	vmov.f32	s23, s9
 8015584:	eeb0 ba45 	vmov.f32	s22, s10
 8015588:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801558c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8015590:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8015592:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8015596:	6850      	ldr	r0, [r2, #4]
 8015598:	6812      	ldr	r2, [r2, #0]
 801559a:	fb00 1303 	mla	r3, r0, r3, r1
 801559e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80155a2:	18d3      	adds	r3, r2, r3
 80155a4:	9307      	str	r3, [sp, #28]
 80155a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	9308      	str	r3, [sp, #32]
 80155ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80155ae:	685d      	ldr	r5, [r3, #4]
 80155b0:	3504      	adds	r5, #4
 80155b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	dc03      	bgt.n	80155c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80155b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	f340 81e6 	ble.w	801598c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80155c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80155c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80155c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80155ca:	1e48      	subs	r0, r1, #1
 80155cc:	1e56      	subs	r6, r2, #1
 80155ce:	9b06      	ldr	r3, [sp, #24]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	f340 80bd 	ble.w	8015750 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80155d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80155d8:	1427      	asrs	r7, r4, #16
 80155da:	ea4f 4323 	mov.w	r3, r3, asr #16
 80155de:	d406      	bmi.n	80155ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80155e0:	4287      	cmp	r7, r0
 80155e2:	da04      	bge.n	80155ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	db02      	blt.n	80155ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80155e8:	42b3      	cmp	r3, r6
 80155ea:	f2c0 80b2 	blt.w	8015752 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80155ee:	3701      	adds	r7, #1
 80155f0:	f100 80a1 	bmi.w	8015736 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80155f4:	42b9      	cmp	r1, r7
 80155f6:	f2c0 809e 	blt.w	8015736 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80155fa:	3301      	adds	r3, #1
 80155fc:	f100 809b 	bmi.w	8015736 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8015600:	429a      	cmp	r2, r3
 8015602:	f2c0 8098 	blt.w	8015736 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8015606:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801560a:	f1bb 0f00 	cmp.w	fp, #0
 801560e:	f340 80bf 	ble.w	8015790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8015612:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015614:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8015616:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015618:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801561c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8015620:	1420      	asrs	r0, r4, #16
 8015622:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8015624:	ea4f 4723 	mov.w	r7, r3, asr #16
 8015628:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801562c:	6892      	ldr	r2, [r2, #8]
 801562e:	f100 8103 	bmi.w	8015838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8015632:	f102 3eff 	add.w	lr, r2, #4294967295
 8015636:	4570      	cmp	r0, lr
 8015638:	f280 80fe 	bge.w	8015838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801563c:	2f00      	cmp	r7, #0
 801563e:	f2c0 80fb 	blt.w	8015838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8015642:	f10c 3eff 	add.w	lr, ip, #4294967295
 8015646:	4577      	cmp	r7, lr
 8015648:	f280 80f6 	bge.w	8015838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801564c:	b212      	sxth	r2, r2
 801564e:	fb07 0002 	mla	r0, r7, r2, r0
 8015652:	9f08      	ldr	r7, [sp, #32]
 8015654:	f817 8000 	ldrb.w	r8, [r7, r0]
 8015658:	eb07 0e00 	add.w	lr, r7, r0
 801565c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015660:	eb05 0c08 	add.w	ip, r5, r8
 8015664:	2b00      	cmp	r3, #0
 8015666:	f000 80d8 	beq.w	801581a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801566a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801566e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015672:	442f      	add	r7, r5
 8015674:	2900      	cmp	r1, #0
 8015676:	f000 80d9 	beq.w	801582c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801567a:	eb0e 0002 	add.w	r0, lr, r2
 801567e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8015682:	7840      	ldrb	r0, [r0, #1]
 8015684:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015688:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801568c:	442a      	add	r2, r5
 801568e:	4428      	add	r0, r5
 8015690:	b29b      	uxth	r3, r3
 8015692:	f815 a008 	ldrb.w	sl, [r5, r8]
 8015696:	b289      	uxth	r1, r1
 8015698:	f897 8000 	ldrb.w	r8, [r7]
 801569c:	fb03 f901 	mul.w	r9, r3, r1
 80156a0:	011b      	lsls	r3, r3, #4
 80156a2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80156a6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80156aa:	eba3 0309 	sub.w	r3, r3, r9
 80156ae:	b289      	uxth	r1, r1
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	ebae 0e01 	sub.w	lr, lr, r1
 80156b6:	fb03 f808 	mul.w	r8, r3, r8
 80156ba:	fa1f fe8e 	uxth.w	lr, lr
 80156be:	fb0e 880a 	mla	r8, lr, sl, r8
 80156c2:	f892 a000 	ldrb.w	sl, [r2]
 80156c6:	fb01 880a 	mla	r8, r1, sl, r8
 80156ca:	f890 a000 	ldrb.w	sl, [r0]
 80156ce:	fb09 880a 	mla	r8, r9, sl, r8
 80156d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80156d6:	f886 8000 	strb.w	r8, [r6]
 80156da:	f897 8001 	ldrb.w	r8, [r7, #1]
 80156de:	f89c a001 	ldrb.w	sl, [ip, #1]
 80156e2:	fb03 f808 	mul.w	r8, r3, r8
 80156e6:	fb0e 880a 	mla	r8, lr, sl, r8
 80156ea:	f892 a001 	ldrb.w	sl, [r2, #1]
 80156ee:	fb01 880a 	mla	r8, r1, sl, r8
 80156f2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80156f6:	fb09 880a 	mla	r8, r9, sl, r8
 80156fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80156fe:	f886 8001 	strb.w	r8, [r6, #1]
 8015702:	78bf      	ldrb	r7, [r7, #2]
 8015704:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015708:	437b      	muls	r3, r7
 801570a:	7892      	ldrb	r2, [r2, #2]
 801570c:	fb0e 330c 	mla	r3, lr, ip, r3
 8015710:	fb01 3102 	mla	r1, r1, r2, r3
 8015714:	7882      	ldrb	r2, [r0, #2]
 8015716:	fb09 1902 	mla	r9, r9, r2, r1
 801571a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801571e:	f886 9002 	strb.w	r9, [r6, #2]
 8015722:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015724:	3603      	adds	r6, #3
 8015726:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015728:	f10b 3bff 	add.w	fp, fp, #4294967295
 801572c:	441c      	add	r4, r3
 801572e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015730:	4413      	add	r3, r2
 8015732:	9322      	str	r3, [sp, #136]	; 0x88
 8015734:	e769      	b.n	801560a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8015736:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015738:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801573a:	441c      	add	r4, r3
 801573c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801573e:	443b      	add	r3, r7
 8015740:	9322      	str	r3, [sp, #136]	; 0x88
 8015742:	9b06      	ldr	r3, [sp, #24]
 8015744:	3b01      	subs	r3, #1
 8015746:	9306      	str	r3, [sp, #24]
 8015748:	9b07      	ldr	r3, [sp, #28]
 801574a:	3303      	adds	r3, #3
 801574c:	9307      	str	r3, [sp, #28]
 801574e:	e73e      	b.n	80155ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015750:	d026      	beq.n	80157a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015752:	9b06      	ldr	r3, [sp, #24]
 8015754:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8015756:	3b01      	subs	r3, #1
 8015758:	fb00 4003 	mla	r0, r0, r3, r4
 801575c:	1400      	asrs	r0, r0, #16
 801575e:	f53f af52 	bmi.w	8015606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8015762:	3901      	subs	r1, #1
 8015764:	4288      	cmp	r0, r1
 8015766:	f6bf af4e 	bge.w	8015606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801576a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801576c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801576e:	fb01 0303 	mla	r3, r1, r3, r0
 8015772:	141b      	asrs	r3, r3, #16
 8015774:	f53f af47 	bmi.w	8015606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8015778:	3a01      	subs	r2, #1
 801577a:	4293      	cmp	r3, r2
 801577c:	f6bf af43 	bge.w	8015606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8015780:	9b07      	ldr	r3, [sp, #28]
 8015782:	f8dd a018 	ldr.w	sl, [sp, #24]
 8015786:	f103 0803 	add.w	r8, r3, #3
 801578a:	f1ba 0f00 	cmp.w	sl, #0
 801578e:	dc71      	bgt.n	8015874 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8015790:	9b06      	ldr	r3, [sp, #24]
 8015792:	9a07      	ldr	r2, [sp, #28]
 8015794:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801579c:	441a      	add	r2, r3
 801579e:	9207      	str	r2, [sp, #28]
 80157a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	f340 80f2 	ble.w	801598c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80157a8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80157ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157ae:	ee79 9aab 	vadd.f32	s19, s19, s23
 80157b2:	eef0 6a48 	vmov.f32	s13, s16
 80157b6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80157ba:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80157be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80157c2:	ee16 4a90 	vmov	r4, s13
 80157c6:	eef0 6a68 	vmov.f32	s13, s17
 80157ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80157ce:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80157d2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80157d6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80157da:	ee37 8a48 	vsub.f32	s16, s14, s16
 80157de:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80157e2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80157e6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80157ea:	ee18 2a10 	vmov	r2, s16
 80157ee:	eeb0 8a47 	vmov.f32	s16, s14
 80157f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80157f6:	ee18 2a90 	vmov	r2, s17
 80157fa:	9323      	str	r3, [sp, #140]	; 0x8c
 80157fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157fe:	eef0 8a67 	vmov.f32	s17, s15
 8015802:	fb92 f3f3 	sdiv	r3, r2, r3
 8015806:	9324      	str	r3, [sp, #144]	; 0x90
 8015808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801580a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801580c:	3b01      	subs	r3, #1
 801580e:	9309      	str	r3, [sp, #36]	; 0x24
 8015810:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015812:	bf08      	it	eq
 8015814:	4613      	moveq	r3, r2
 8015816:	9306      	str	r3, [sp, #24]
 8015818:	e6cb      	b.n	80155b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801581a:	b151      	cbz	r1, 8015832 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801581c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8015820:	4660      	mov	r0, ip
 8015822:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015826:	442a      	add	r2, r5
 8015828:	4667      	mov	r7, ip
 801582a:	e731      	b.n	8015690 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801582c:	4660      	mov	r0, ip
 801582e:	4662      	mov	r2, ip
 8015830:	e72e      	b.n	8015690 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015832:	4660      	mov	r0, ip
 8015834:	4662      	mov	r2, ip
 8015836:	e7f7      	b.n	8015828 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8015838:	f110 0e01 	adds.w	lr, r0, #1
 801583c:	f53f af71 	bmi.w	8015722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8015840:	4572      	cmp	r2, lr
 8015842:	f6ff af6e 	blt.w	8015722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8015846:	f117 0e01 	adds.w	lr, r7, #1
 801584a:	f53f af6a 	bmi.w	8015722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801584e:	45f4      	cmp	ip, lr
 8015850:	f6ff af67 	blt.w	8015722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8015854:	b212      	sxth	r2, r2
 8015856:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801585a:	fa0f f38c 	sxth.w	r3, ip
 801585e:	9200      	str	r2, [sp, #0]
 8015860:	4631      	mov	r1, r6
 8015862:	9a08      	ldr	r2, [sp, #32]
 8015864:	9301      	str	r3, [sp, #4]
 8015866:	462b      	mov	r3, r5
 8015868:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801586c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801586e:	f7ff fdbf 	bl	80153f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8015872:	e756      	b.n	8015722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8015874:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015876:	1426      	asrs	r6, r4, #16
 8015878:	9822      	ldr	r0, [sp, #136]	; 0x88
 801587a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801587e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8015882:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8015884:	1400      	asrs	r0, r0, #16
 8015886:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801588a:	fb02 6000 	mla	r0, r2, r0, r6
 801588e:	9e08      	ldr	r6, [sp, #32]
 8015890:	f816 e000 	ldrb.w	lr, [r6, r0]
 8015894:	eb06 0c00 	add.w	ip, r6, r0
 8015898:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801589c:	eb05 070e 	add.w	r7, r5, lr
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d064      	beq.n	801596e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 80158a4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80158a8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80158ac:	442e      	add	r6, r5
 80158ae:	2900      	cmp	r1, #0
 80158b0:	d066      	beq.n	8015980 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80158b2:	eb0c 0002 	add.w	r0, ip, r2
 80158b6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80158ba:	7840      	ldrb	r0, [r0, #1]
 80158bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80158c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80158c4:	442a      	add	r2, r5
 80158c6:	4428      	add	r0, r5
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80158ce:	b289      	uxth	r1, r1
 80158d0:	f896 e000 	ldrb.w	lr, [r6]
 80158d4:	f108 0803 	add.w	r8, r8, #3
 80158d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80158dc:	fb03 f901 	mul.w	r9, r3, r1
 80158e0:	011b      	lsls	r3, r3, #4
 80158e2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80158e6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80158ea:	eba3 0309 	sub.w	r3, r3, r9
 80158ee:	b289      	uxth	r1, r1
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	ebac 0c01 	sub.w	ip, ip, r1
 80158f6:	fb03 fe0e 	mul.w	lr, r3, lr
 80158fa:	fa1f fc8c 	uxth.w	ip, ip
 80158fe:	fb0c ee0b 	mla	lr, ip, fp, lr
 8015902:	f892 b000 	ldrb.w	fp, [r2]
 8015906:	fb01 ee0b 	mla	lr, r1, fp, lr
 801590a:	f890 b000 	ldrb.w	fp, [r0]
 801590e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8015912:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015916:	f808 ec06 	strb.w	lr, [r8, #-6]
 801591a:	f896 e001 	ldrb.w	lr, [r6, #1]
 801591e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8015922:	fb03 fe0e 	mul.w	lr, r3, lr
 8015926:	fb0c ee0b 	mla	lr, ip, fp, lr
 801592a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801592e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8015932:	f890 b001 	ldrb.w	fp, [r0, #1]
 8015936:	fb09 ee0b 	mla	lr, r9, fp, lr
 801593a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801593e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8015942:	78b6      	ldrb	r6, [r6, #2]
 8015944:	78bf      	ldrb	r7, [r7, #2]
 8015946:	4373      	muls	r3, r6
 8015948:	7896      	ldrb	r6, [r2, #2]
 801594a:	7882      	ldrb	r2, [r0, #2]
 801594c:	fb0c 3307 	mla	r3, ip, r7, r3
 8015950:	fb01 3306 	mla	r3, r1, r6, r3
 8015954:	fb09 3902 	mla	r9, r9, r2, r3
 8015958:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801595a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801595c:	441c      	add	r4, r3
 801595e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015960:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015964:	4413      	add	r3, r2
 8015966:	f808 9c04 	strb.w	r9, [r8, #-4]
 801596a:	9322      	str	r3, [sp, #136]	; 0x88
 801596c:	e70d      	b.n	801578a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801596e:	b151      	cbz	r1, 8015986 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8015970:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015974:	4638      	mov	r0, r7
 8015976:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801597a:	442a      	add	r2, r5
 801597c:	463e      	mov	r6, r7
 801597e:	e7a3      	b.n	80158c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8015980:	4638      	mov	r0, r7
 8015982:	463a      	mov	r2, r7
 8015984:	e7a0      	b.n	80158c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8015986:	4638      	mov	r0, r7
 8015988:	463a      	mov	r2, r7
 801598a:	e7f7      	b.n	801597c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801598c:	b00d      	add	sp, #52	; 0x34
 801598e:	ecbd 8b0a 	vpop	{d8-d12}
 8015992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015998 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8015998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801599c:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 80159a0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80159a4:	2d00      	cmp	r5, #0
 80159a6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80159aa:	fb05 040e 	mla	r4, r5, lr, r0
 80159ae:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80159b2:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80159b6:	eb02 0804 	add.w	r8, r2, r4
 80159ba:	db40      	blt.n	8015a3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80159bc:	45a9      	cmp	r9, r5
 80159be:	dd3e      	ble.n	8015a3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	db3a      	blt.n	8015a3a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80159c4:	4586      	cmp	lr, r0
 80159c6:	dd38      	ble.n	8015a3a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80159c8:	5d12      	ldrb	r2, [r2, r4]
 80159ca:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80159ce:	1c42      	adds	r2, r0, #1
 80159d0:	d438      	bmi.n	8015a44 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80159d2:	4596      	cmp	lr, r2
 80159d4:	dd36      	ble.n	8015a44 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80159d6:	b3bf      	cbz	r7, 8015a48 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 80159d8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80159dc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80159e0:	3501      	adds	r5, #1
 80159e2:	d435      	bmi.n	8015a50 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80159e4:	45a9      	cmp	r9, r5
 80159e6:	dd33      	ble.n	8015a50 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80159e8:	f1bc 0f00 	cmp.w	ip, #0
 80159ec:	d033      	beq.n	8015a56 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	db2c      	blt.n	8015a4c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80159f2:	4586      	cmp	lr, r0
 80159f4:	dd2a      	ble.n	8015a4c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80159f6:	f818 200e 	ldrb.w	r2, [r8, lr]
 80159fa:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80159fe:	3001      	adds	r0, #1
 8015a00:	d42c      	bmi.n	8015a5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8015a02:	4586      	cmp	lr, r0
 8015a04:	dd2a      	ble.n	8015a5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8015a06:	b35f      	cbz	r7, 8015a60 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8015a08:	44c6      	add	lr, r8
 8015a0a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8015a0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015a12:	2f0f      	cmp	r7, #15
 8015a14:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8015a18:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8015a1c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8015a20:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8015a24:	d802      	bhi.n	8015a2c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8015a26:	f1bc 0f0f 	cmp.w	ip, #15
 8015a2a:	d91b      	bls.n	8015a64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8015a2c:	4b77      	ldr	r3, [pc, #476]	; (8015c0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8015a2e:	f240 115b 	movw	r1, #347	; 0x15b
 8015a32:	4a77      	ldr	r2, [pc, #476]	; (8015c10 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8015a34:	4877      	ldr	r0, [pc, #476]	; (8015c14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8015a36:	f004 f945 	bl	8019cc4 <__assert_func>
 8015a3a:	2600      	movs	r6, #0
 8015a3c:	e7c7      	b.n	80159ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8015a3e:	2400      	movs	r4, #0
 8015a40:	4626      	mov	r6, r4
 8015a42:	e7cd      	b.n	80159e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8015a44:	2400      	movs	r4, #0
 8015a46:	e7cb      	b.n	80159e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8015a48:	463c      	mov	r4, r7
 8015a4a:	e7c9      	b.n	80159e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8015a4c:	2500      	movs	r5, #0
 8015a4e:	e7d6      	b.n	80159fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8015a50:	2200      	movs	r2, #0
 8015a52:	4615      	mov	r5, r2
 8015a54:	e7dd      	b.n	8015a12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8015a56:	4662      	mov	r2, ip
 8015a58:	4665      	mov	r5, ip
 8015a5a:	e7da      	b.n	8015a12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	e7d8      	b.n	8015a12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8015a60:	463a      	mov	r2, r7
 8015a62:	e7d6      	b.n	8015a12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8015a64:	b2bf      	uxth	r7, r7
 8015a66:	fa1f f08c 	uxth.w	r0, ip
 8015a6a:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8015a6e:	fb00 fe07 	mul.w	lr, r0, r7
 8015a72:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8015a76:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8015a7a:	ebac 070e 	sub.w	r7, ip, lr
 8015a7e:	b280      	uxth	r0, r0
 8015a80:	b2bf      	uxth	r7, r7
 8015a82:	1a1b      	subs	r3, r3, r0
 8015a84:	fb07 fc0a 	mul.w	ip, r7, sl
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	fb03 cc0b 	mla	ip, r3, fp, ip
 8015a8e:	9300      	str	r3, [sp, #0]
 8015a90:	fb00 cc09 	mla	ip, r0, r9, ip
 8015a94:	fb0e cc08 	mla	ip, lr, r8, ip
 8015a98:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8015a9c:	9301      	str	r3, [sp, #4]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	f000 80b0 	beq.w	8015c04 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8015aa4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8015aa8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015aac:	fb0b fc0c 	mul.w	ip, fp, ip
 8015ab0:	fb0b f606 	mul.w	r6, fp, r6
 8015ab4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015ab8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8015abc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8015ac0:	44dc      	add	ip, fp
 8015ac2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015ac6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8015aca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015ace:	fb0a fb0b 	mul.w	fp, sl, fp
 8015ad2:	fb0a fa04 	mul.w	sl, sl, r4
 8015ad6:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8015ada:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8015ade:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8015ae2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8015ae6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8015aea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015aee:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8015af2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015af6:	0a36      	lsrs	r6, r6, #8
 8015af8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015afc:	44dc      	add	ip, fp
 8015afe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8015b02:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8015b06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015b0a:	fb09 fb0b 	mul.w	fp, r9, fp
 8015b0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015b12:	fb09 f905 	mul.w	r9, r9, r5
 8015b16:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015b1a:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8015b1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b22:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8015b26:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015b2a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015b2e:	fb0c fc07 	mul.w	ip, ip, r7
 8015b32:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8015b36:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8015b3a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015b3e:	445c      	add	r4, fp
 8015b40:	fb08 f505 	mul.w	r5, r8, r5
 8015b44:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015b48:	fb08 f802 	mul.w	r8, r8, r2
 8015b4c:	0a24      	lsrs	r4, r4, #8
 8015b4e:	0a2a      	lsrs	r2, r5, #8
 8015b50:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8015b54:	fb07 f70a 	mul.w	r7, r7, sl
 8015b58:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015b5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015b60:	4415      	add	r5, r2
 8015b62:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8015b66:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8015b6a:	9a00      	ldr	r2, [sp, #0]
 8015b6c:	0a2d      	lsrs	r5, r5, #8
 8015b6e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8015b72:	fb03 cc02 	mla	ip, r3, r2, ip
 8015b76:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8015b7a:	fb02 7306 	mla	r3, r2, r6, r7
 8015b7e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8015b82:	9a01      	ldr	r2, [sp, #4]
 8015b84:	fb05 c50e 	mla	r5, r5, lr, ip
 8015b88:	fb0e 3e08 	mla	lr, lr, r8, r3
 8015b8c:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8015b90:	fb04 5400 	mla	r4, r4, r0, r5
 8015b94:	fb00 e303 	mla	r3, r0, r3, lr
 8015b98:	0a24      	lsrs	r4, r4, #8
 8015b9a:	0a1b      	lsrs	r3, r3, #8
 8015b9c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015ba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015ba4:	431c      	orrs	r4, r3
 8015ba6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	b2e0      	uxtb	r0, r4
 8015bae:	435a      	muls	r2, r3
 8015bb0:	fb10 f003 	smulbb	r0, r0, r3
 8015bb4:	1c55      	adds	r5, r2, #1
 8015bb6:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8015bba:	780a      	ldrb	r2, [r1, #0]
 8015bbc:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8015bc0:	b2ed      	uxtb	r5, r5
 8015bc2:	fb02 0205 	mla	r2, r2, r5, r0
 8015bc6:	b292      	uxth	r2, r2
 8015bc8:	1c50      	adds	r0, r2, #1
 8015bca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015bce:	7848      	ldrb	r0, [r1, #1]
 8015bd0:	fb10 f005 	smulbb	r0, r0, r5
 8015bd4:	1212      	asrs	r2, r2, #8
 8015bd6:	700a      	strb	r2, [r1, #0]
 8015bd8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8015bdc:	0c24      	lsrs	r4, r4, #16
 8015bde:	fb02 0203 	mla	r2, r2, r3, r0
 8015be2:	b292      	uxth	r2, r2
 8015be4:	1c50      	adds	r0, r2, #1
 8015be6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015bea:	1212      	asrs	r2, r2, #8
 8015bec:	704a      	strb	r2, [r1, #1]
 8015bee:	788a      	ldrb	r2, [r1, #2]
 8015bf0:	fb12 f505 	smulbb	r5, r2, r5
 8015bf4:	fb04 5303 	mla	r3, r4, r3, r5
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	1c5a      	adds	r2, r3, #1
 8015bfc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015c00:	121b      	asrs	r3, r3, #8
 8015c02:	708b      	strb	r3, [r1, #2]
 8015c04:	b003      	add	sp, #12
 8015c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c0a:	bf00      	nop
 8015c0c:	0801e734 	.word	0x0801e734
 8015c10:	0801eb4a 	.word	0x0801eb4a
 8015c14:	0801e701 	.word	0x0801e701

08015c18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1c:	ed2d 8b08 	vpush	{d8-d11}
 8015c20:	b09f      	sub	sp, #124	; 0x7c
 8015c22:	eeb0 aa40 	vmov.f32	s20, s0
 8015c26:	eef0 9a60 	vmov.f32	s19, s1
 8015c2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8015c2c:	eeb0 9a41 	vmov.f32	s18, s2
 8015c30:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8015c32:	eeb0 8a62 	vmov.f32	s16, s5
 8015c36:	9309      	str	r3, [sp, #36]	; 0x24
 8015c38:	eef0 8a43 	vmov.f32	s17, s6
 8015c3c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8015c40:	eef0 ba44 	vmov.f32	s23, s8
 8015c44:	901d      	str	r0, [sp, #116]	; 0x74
 8015c46:	eeb0 ba64 	vmov.f32	s22, s9
 8015c4a:	931c      	str	r3, [sp, #112]	; 0x70
 8015c4c:	eef0 aa45 	vmov.f32	s21, s10
 8015c50:	6850      	ldr	r0, [r2, #4]
 8015c52:	9119      	str	r1, [sp, #100]	; 0x64
 8015c54:	6812      	ldr	r2, [r2, #0]
 8015c56:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8015c58:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8015c5c:	fb00 1303 	mla	r3, r0, r3, r1
 8015c60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c64:	18d3      	adds	r3, r2, r3
 8015c66:	930c      	str	r3, [sp, #48]	; 0x30
 8015c68:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	9312      	str	r3, [sp, #72]	; 0x48
 8015c6e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015c70:	685e      	ldr	r6, [r3, #4]
 8015c72:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015c76:	3604      	adds	r6, #4
 8015c78:	930d      	str	r3, [sp, #52]	; 0x34
 8015c7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	dc03      	bgt.n	8015c88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015c80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	f340 8378 	ble.w	8016378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8015c88:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015c8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015c8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015c92:	1e48      	subs	r0, r1, #1
 8015c94:	1e57      	subs	r7, r2, #1
 8015c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	f340 818c 	ble.w	8015fb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8015c9e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015ca0:	142b      	asrs	r3, r5, #16
 8015ca2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8015ca6:	d406      	bmi.n	8015cb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015ca8:	4584      	cmp	ip, r0
 8015caa:	da04      	bge.n	8015cb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	db02      	blt.n	8015cb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015cb0:	42bb      	cmp	r3, r7
 8015cb2:	f2c0 8181 	blt.w	8015fb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8015cb6:	f11c 0c01 	adds.w	ip, ip, #1
 8015cba:	f100 816f 	bmi.w	8015f9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8015cbe:	4561      	cmp	r1, ip
 8015cc0:	f2c0 816c 	blt.w	8015f9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8015cc4:	3301      	adds	r3, #1
 8015cc6:	f100 8169 	bmi.w	8015f9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	f2c0 8166 	blt.w	8015f9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8015cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8015cd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f340 818c 	ble.w	8015ff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8015cde:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015ce0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8015ce4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015ce8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8015cec:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015cee:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8015cf2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015cf4:	141b      	asrs	r3, r3, #16
 8015cf6:	f100 81d0 	bmi.w	801609a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8015cfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8015cfe:	4543      	cmp	r3, r8
 8015d00:	f280 81cb 	bge.w	801609a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8015d04:	f1bc 0f00 	cmp.w	ip, #0
 8015d08:	f2c0 81c7 	blt.w	801609a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8015d0c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8015d10:	45c4      	cmp	ip, r8
 8015d12:	f280 81c2 	bge.w	801609a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8015d16:	b200      	sxth	r0, r0
 8015d18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015d1a:	fb0c 3300 	mla	r3, ip, r0, r3
 8015d1e:	eb04 0803 	add.w	r8, r4, r3
 8015d22:	5ce3      	ldrb	r3, [r4, r3]
 8015d24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015d28:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8015d2c:	2a00      	cmp	r2, #0
 8015d2e:	f000 81a9 	beq.w	8016084 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8015d32:	f898 c001 	ldrb.w	ip, [r8, #1]
 8015d36:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8015d3a:	940e      	str	r4, [sp, #56]	; 0x38
 8015d3c:	0e24      	lsrs	r4, r4, #24
 8015d3e:	9415      	str	r4, [sp, #84]	; 0x54
 8015d40:	b179      	cbz	r1, 8015d62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015d42:	eb08 0c00 	add.w	ip, r8, r0
 8015d46:	f818 0000 	ldrb.w	r0, [r8, r0]
 8015d4a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015d4e:	900a      	str	r0, [sp, #40]	; 0x28
 8015d50:	0e00      	lsrs	r0, r0, #24
 8015d52:	9013      	str	r0, [sp, #76]	; 0x4c
 8015d54:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8015d58:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015d5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8015d5e:	0e00      	lsrs	r0, r0, #24
 8015d60:	9016      	str	r0, [sp, #88]	; 0x58
 8015d62:	b292      	uxth	r2, r2
 8015d64:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015d66:	b289      	uxth	r1, r1
 8015d68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015d6a:	fb02 f901 	mul.w	r9, r2, r1
 8015d6e:	0112      	lsls	r2, r2, #4
 8015d70:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8015d74:	eba2 0809 	sub.w	r8, r2, r9
 8015d78:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015d7c:	b289      	uxth	r1, r1
 8015d7e:	fa1f f888 	uxth.w	r8, r8
 8015d82:	1a52      	subs	r2, r2, r1
 8015d84:	fb08 f000 	mul.w	r0, r8, r0
 8015d88:	b292      	uxth	r2, r2
 8015d8a:	fb02 000e 	mla	r0, r2, lr, r0
 8015d8e:	fb01 0004 	mla	r0, r1, r4, r0
 8015d92:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8015d94:	fb09 0004 	mla	r0, r9, r4, r0
 8015d98:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015d9c:	2800      	cmp	r0, #0
 8015d9e:	f000 80f2 	beq.w	8015f86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015da2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015da6:	d01b      	beq.n	8015de0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8015da8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015dac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015db0:	fb0e fa0a 	mul.w	sl, lr, sl
 8015db4:	fb0e fe03 	mul.w	lr, lr, r3
 8015db8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015dbc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015dc0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8015dc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015dc8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8015dcc:	4453      	add	r3, sl
 8015dce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015dd2:	0a1b      	lsrs	r3, r3, #8
 8015dd4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015dd8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015ddc:	ea43 030c 	orr.w	r3, r3, ip
 8015de0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015de2:	2cff      	cmp	r4, #255	; 0xff
 8015de4:	d021      	beq.n	8015e2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8015de6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015de8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015dec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015dee:	fb04 fb0b 	mul.w	fp, r4, fp
 8015df2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015df4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015df8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015dfa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015dfe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e02:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015e0e:	44de      	add	lr, fp
 8015e10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015e1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e24:	ea4e 040a 	orr.w	r4, lr, sl
 8015e28:	940e      	str	r4, [sp, #56]	; 0x38
 8015e2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015e2c:	2cff      	cmp	r4, #255	; 0xff
 8015e2e:	d021      	beq.n	8015e74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8015e30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e32:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015e36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015e38:	fb04 fb0b 	mul.w	fp, r4, fp
 8015e3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e3e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015e42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015e44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015e48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e4c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e54:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015e58:	44de      	add	lr, fp
 8015e5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015e66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e6e:	ea4e 040a 	orr.w	r4, lr, sl
 8015e72:	940a      	str	r4, [sp, #40]	; 0x28
 8015e74:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8015e76:	2cff      	cmp	r4, #255	; 0xff
 8015e78:	d021      	beq.n	8015ebe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8015e7a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015e7c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015e80:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8015e82:	fb04 fb0b 	mul.w	fp, r4, fp
 8015e86:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015e88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015e8c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8015e8e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015e92:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e96:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e9e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015ea2:	44de      	add	lr, fp
 8015ea4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015ea8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015eac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015eb0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015eb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015eb8:	ea4e 040a 	orr.w	r4, lr, sl
 8015ebc:	940f      	str	r4, [sp, #60]	; 0x3c
 8015ebe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015ec0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8015ec4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015ec8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015ecc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ece:	fb08 fc0c 	mul.w	ip, r8, ip
 8015ed2:	fb02 cc0e 	mla	ip, r2, lr, ip
 8015ed6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015eda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015edc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8015ee0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015ee4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015ee6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8015eea:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8015eee:	fb08 f80e 	mul.w	r8, r8, lr
 8015ef2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015ef6:	fb02 8303 	mla	r3, r2, r3, r8
 8015efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015efc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015f00:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8015f04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f06:	fb01 330a 	mla	r3, r1, sl, r3
 8015f0a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8015f0e:	fb09 3901 	mla	r9, r9, r1, r3
 8015f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015f16:	4343      	muls	r3, r0
 8015f18:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015f1c:	1c58      	adds	r0, r3, #1
 8015f1e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8015f22:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015f26:	ea4c 0c09 	orr.w	ip, ip, r9
 8015f2a:	783b      	ldrb	r3, [r7, #0]
 8015f2c:	fa5f f28c 	uxtb.w	r2, ip
 8015f30:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8015f34:	fb12 f201 	smulbb	r2, r2, r1
 8015f38:	b2c0      	uxtb	r0, r0
 8015f3a:	fb03 2300 	mla	r3, r3, r0, r2
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	1c5a      	adds	r2, r3, #1
 8015f42:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015f46:	787a      	ldrb	r2, [r7, #1]
 8015f48:	fb12 f200 	smulbb	r2, r2, r0
 8015f4c:	121b      	asrs	r3, r3, #8
 8015f4e:	703b      	strb	r3, [r7, #0]
 8015f50:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8015f54:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8015f58:	fb03 2301 	mla	r3, r3, r1, r2
 8015f5c:	b29b      	uxth	r3, r3
 8015f5e:	1c5a      	adds	r2, r3, #1
 8015f60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015f64:	121b      	asrs	r3, r3, #8
 8015f66:	707b      	strb	r3, [r7, #1]
 8015f68:	78bb      	ldrb	r3, [r7, #2]
 8015f6a:	fb13 f000 	smulbb	r0, r3, r0
 8015f6e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8015f72:	fa1f fc8c 	uxth.w	ip, ip
 8015f76:	f10c 0301 	add.w	r3, ip, #1
 8015f7a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8015f7e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015f82:	f887 c002 	strb.w	ip, [r7, #2]
 8015f86:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8015f88:	3703      	adds	r7, #3
 8015f8a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8015f8c:	441a      	add	r2, r3
 8015f8e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015f90:	441d      	add	r5, r3
 8015f92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015f94:	9231      	str	r2, [sp, #196]	; 0xc4
 8015f96:	3b01      	subs	r3, #1
 8015f98:	931a      	str	r3, [sp, #104]	; 0x68
 8015f9a:	e69c      	b.n	8015cd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8015f9c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8015f9e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015fa0:	441c      	add	r4, r3
 8015fa2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015fa4:	441d      	add	r5, r3
 8015fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fa8:	9431      	str	r4, [sp, #196]	; 0xc4
 8015faa:	3b01      	subs	r3, #1
 8015fac:	9309      	str	r3, [sp, #36]	; 0x24
 8015fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fb0:	3303      	adds	r3, #3
 8015fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8015fb4:	e66f      	b.n	8015c96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015fb6:	d026      	beq.n	8016006 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8015fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fba:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8015fbc:	3b01      	subs	r3, #1
 8015fbe:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015fc0:	fb00 4003 	mla	r0, r0, r3, r4
 8015fc4:	1400      	asrs	r0, r0, #16
 8015fc6:	f53f ae83 	bmi.w	8015cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015fca:	3901      	subs	r1, #1
 8015fcc:	4288      	cmp	r0, r1
 8015fce:	f6bf ae7f 	bge.w	8015cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015fd2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8015fd4:	fb01 5303 	mla	r3, r1, r3, r5
 8015fd8:	141b      	asrs	r3, r3, #16
 8015fda:	f53f ae79 	bmi.w	8015cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015fde:	3a01      	subs	r2, #1
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	f6bf ae75 	bge.w	8015cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fe8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8015fec:	f103 0e03 	add.w	lr, r3, #3
 8015ff0:	f1bb 0f00 	cmp.w	fp, #0
 8015ff4:	dc71      	bgt.n	80160da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8015ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ffe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016002:	4423      	add	r3, r4
 8016004:	930c      	str	r3, [sp, #48]	; 0x30
 8016006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016008:	2b00      	cmp	r3, #0
 801600a:	f340 81b5 	ble.w	8016378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801600e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016012:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016014:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016018:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801601c:	eef0 6a48 	vmov.f32	s13, s16
 8016020:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016024:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016028:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801602c:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8016030:	eef0 6a68 	vmov.f32	s13, s17
 8016034:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016038:	ee16 5a90 	vmov	r5, s13
 801603c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016040:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016044:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016048:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801604c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016050:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016054:	ee18 2a10 	vmov	r2, s16
 8016058:	eeb0 8a47 	vmov.f32	s16, s14
 801605c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016060:	ee18 2a90 	vmov	r2, s17
 8016064:	9333      	str	r3, [sp, #204]	; 0xcc
 8016066:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016068:	eef0 8a67 	vmov.f32	s17, s15
 801606c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016070:	9334      	str	r3, [sp, #208]	; 0xd0
 8016072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016074:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016076:	3b01      	subs	r3, #1
 8016078:	9319      	str	r3, [sp, #100]	; 0x64
 801607a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801607c:	bf08      	it	eq
 801607e:	4613      	moveq	r3, r2
 8016080:	9309      	str	r3, [sp, #36]	; 0x24
 8016082:	e5fa      	b.n	8015c7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016084:	2900      	cmp	r1, #0
 8016086:	f43f ae6c 	beq.w	8015d62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801608a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801608e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8016092:	900a      	str	r0, [sp, #40]	; 0x28
 8016094:	0e00      	lsrs	r0, r0, #24
 8016096:	9013      	str	r0, [sp, #76]	; 0x4c
 8016098:	e663      	b.n	8015d62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801609a:	f113 0801 	adds.w	r8, r3, #1
 801609e:	f53f af72 	bmi.w	8015f86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80160a2:	4540      	cmp	r0, r8
 80160a4:	f6ff af6f 	blt.w	8015f86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80160a8:	f11c 0801 	adds.w	r8, ip, #1
 80160ac:	f53f af6b 	bmi.w	8015f86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80160b0:	45c6      	cmp	lr, r8
 80160b2:	f6ff af68 	blt.w	8015f86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80160b6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80160b8:	b200      	sxth	r0, r0
 80160ba:	9302      	str	r3, [sp, #8]
 80160bc:	fa0f f38e 	sxth.w	r3, lr
 80160c0:	9000      	str	r0, [sp, #0]
 80160c2:	9301      	str	r3, [sp, #4]
 80160c4:	4633      	mov	r3, r6
 80160c6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80160c8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80160cc:	e9cd c203 	strd	ip, r2, [sp, #12]
 80160d0:	4639      	mov	r1, r7
 80160d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160d4:	f7ff fc60 	bl	8015998 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80160d8:	e755      	b.n	8015f86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80160da:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80160dc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80160e0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80160e2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80160e6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80160e8:	1427      	asrs	r7, r4, #16
 80160ea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80160ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80160f0:	142b      	asrs	r3, r5, #16
 80160f2:	fb01 7303 	mla	r3, r1, r3, r7
 80160f6:	18e7      	adds	r7, r4, r3
 80160f8:	5ce3      	ldrb	r3, [r4, r3]
 80160fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80160fe:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8016102:	2a00      	cmp	r2, #0
 8016104:	f000 812e 	beq.w	8016364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8016108:	f897 8001 	ldrb.w	r8, [r7, #1]
 801610c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8016110:	9410      	str	r4, [sp, #64]	; 0x40
 8016112:	0e24      	lsrs	r4, r4, #24
 8016114:	9417      	str	r4, [sp, #92]	; 0x5c
 8016116:	b170      	cbz	r0, 8016136 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8016118:	eb07 0801 	add.w	r8, r7, r1
 801611c:	5c79      	ldrb	r1, [r7, r1]
 801611e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016122:	910b      	str	r1, [sp, #44]	; 0x2c
 8016124:	0e09      	lsrs	r1, r1, #24
 8016126:	9114      	str	r1, [sp, #80]	; 0x50
 8016128:	f898 1001 	ldrb.w	r1, [r8, #1]
 801612c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016130:	9111      	str	r1, [sp, #68]	; 0x44
 8016132:	0e09      	lsrs	r1, r1, #24
 8016134:	9118      	str	r1, [sp, #96]	; 0x60
 8016136:	b292      	uxth	r2, r2
 8016138:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801613a:	b280      	uxth	r0, r0
 801613c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801613e:	fb02 f900 	mul.w	r9, r2, r0
 8016142:	0112      	lsls	r2, r2, #4
 8016144:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8016148:	eba2 0809 	sub.w	r8, r2, r9
 801614c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016150:	b280      	uxth	r0, r0
 8016152:	fa1f f888 	uxth.w	r8, r8
 8016156:	1a12      	subs	r2, r2, r0
 8016158:	fb08 f101 	mul.w	r1, r8, r1
 801615c:	b292      	uxth	r2, r2
 801615e:	fb02 110c 	mla	r1, r2, ip, r1
 8016162:	fb00 1104 	mla	r1, r0, r4, r1
 8016166:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8016168:	fb09 1104 	mla	r1, r9, r4, r1
 801616c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016170:	2900      	cmp	r1, #0
 8016172:	f000 80ec 	beq.w	801634e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8016176:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801617a:	d019      	beq.n	80161b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801617c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016180:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016184:	fb0c fa0a 	mul.w	sl, ip, sl
 8016188:	fb0c fc03 	mul.w	ip, ip, r3
 801618c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016190:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016194:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8016198:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801619c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80161a0:	4453      	add	r3, sl
 80161a2:	0a3f      	lsrs	r7, r7, #8
 80161a4:	0a1b      	lsrs	r3, r3, #8
 80161a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80161aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80161ae:	433b      	orrs	r3, r7
 80161b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80161b2:	2cff      	cmp	r4, #255	; 0xff
 80161b4:	d020      	beq.n	80161f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80161b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80161b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80161bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80161be:	4367      	muls	r7, r4
 80161c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80161c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80161c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80161ca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80161cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80161d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80161d8:	44bc      	add	ip, r7
 80161da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80161de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80161e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80161e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80161ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80161f2:	ea4c 040a 	orr.w	r4, ip, sl
 80161f6:	9410      	str	r4, [sp, #64]	; 0x40
 80161f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80161fa:	2cff      	cmp	r4, #255	; 0xff
 80161fc:	d020      	beq.n	8016240 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80161fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016200:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016204:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016206:	4367      	muls	r7, r4
 8016208:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801620a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801620e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016212:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016214:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016218:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801621c:	fb04 fa0a 	mul.w	sl, r4, sl
 8016220:	44bc      	add	ip, r7
 8016222:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016226:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801622a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801622e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016232:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016236:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801623a:	ea4c 040a 	orr.w	r4, ip, sl
 801623e:	940b      	str	r4, [sp, #44]	; 0x2c
 8016240:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8016242:	2cff      	cmp	r4, #255	; 0xff
 8016244:	d020      	beq.n	8016288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8016246:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016248:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801624c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801624e:	4367      	muls	r7, r4
 8016250:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016252:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016256:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801625a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801625c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016260:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016264:	fb04 fa0a 	mul.w	sl, r4, sl
 8016268:	44bc      	add	ip, r7
 801626a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801626e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016272:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016276:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801627a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801627e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016282:	ea4c 040a 	orr.w	r4, ip, sl
 8016286:	9411      	str	r4, [sp, #68]	; 0x44
 8016288:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801628a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801628e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016292:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016296:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016298:	fb08 f707 	mul.w	r7, r8, r7
 801629c:	fb02 770c 	mla	r7, r2, ip, r7
 80162a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80162a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80162a6:	fb00 770c 	mla	r7, r0, ip, r7
 80162aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80162ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80162b0:	fb09 770c 	mla	r7, r9, ip, r7
 80162b4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80162b8:	fb08 f80c 	mul.w	r8, r8, ip
 80162bc:	0a3f      	lsrs	r7, r7, #8
 80162be:	fb02 8303 	mla	r3, r2, r3, r8
 80162c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162c4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80162c8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80162cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80162ce:	fb00 330a 	mla	r3, r0, sl, r3
 80162d2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80162d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80162d8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80162dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80162e2:	434b      	muls	r3, r1
 80162e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80162e8:	1c59      	adds	r1, r3, #1
 80162ea:	ea47 070c 	orr.w	r7, r7, ip
 80162ee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80162f2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80162f6:	b2fa      	uxtb	r2, r7
 80162f8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80162fc:	fb12 f200 	smulbb	r2, r2, r0
 8016300:	b2c9      	uxtb	r1, r1
 8016302:	fb03 2301 	mla	r3, r3, r1, r2
 8016306:	b29b      	uxth	r3, r3
 8016308:	1c5a      	adds	r2, r3, #1
 801630a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801630e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8016312:	fb12 f201 	smulbb	r2, r2, r1
 8016316:	121b      	asrs	r3, r3, #8
 8016318:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801631c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8016320:	0c3f      	lsrs	r7, r7, #16
 8016322:	fb03 2300 	mla	r3, r3, r0, r2
 8016326:	b29b      	uxth	r3, r3
 8016328:	1c5a      	adds	r2, r3, #1
 801632a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801632e:	121b      	asrs	r3, r3, #8
 8016330:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8016334:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8016338:	fb13 f101 	smulbb	r1, r3, r1
 801633c:	fb07 1700 	mla	r7, r7, r0, r1
 8016340:	b2bf      	uxth	r7, r7
 8016342:	1c7b      	adds	r3, r7, #1
 8016344:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8016348:	123f      	asrs	r7, r7, #8
 801634a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801634e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8016350:	f10e 0e03 	add.w	lr, lr, #3
 8016354:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8016356:	f10b 3bff 	add.w	fp, fp, #4294967295
 801635a:	441a      	add	r2, r3
 801635c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801635e:	9231      	str	r2, [sp, #196]	; 0xc4
 8016360:	441d      	add	r5, r3
 8016362:	e645      	b.n	8015ff0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8016364:	2800      	cmp	r0, #0
 8016366:	f43f aee6 	beq.w	8016136 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801636a:	5c79      	ldrb	r1, [r7, r1]
 801636c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016370:	910b      	str	r1, [sp, #44]	; 0x2c
 8016372:	0e09      	lsrs	r1, r1, #24
 8016374:	9114      	str	r1, [sp, #80]	; 0x50
 8016376:	e6de      	b.n	8016136 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8016378:	b01f      	add	sp, #124	; 0x7c
 801637a:	ecbd 8b08 	vpop	{d8-d11}
 801637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016384 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8016384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016388:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801638c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8016390:	2c00      	cmp	r4, #0
 8016392:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8016396:	fb04 060c 	mla	r6, r4, ip, r0
 801639a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801639e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80163a2:	eb02 0e06 	add.w	lr, r2, r6
 80163a6:	db3d      	blt.n	8016424 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80163a8:	45a0      	cmp	r8, r4
 80163aa:	dd3b      	ble.n	8016424 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80163ac:	2800      	cmp	r0, #0
 80163ae:	db37      	blt.n	8016420 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80163b0:	4584      	cmp	ip, r0
 80163b2:	dd35      	ble.n	8016420 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80163b4:	5d92      	ldrb	r2, [r2, r6]
 80163b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80163ba:	1c46      	adds	r6, r0, #1
 80163bc:	d435      	bmi.n	801642a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80163be:	45b4      	cmp	ip, r6
 80163c0:	dd33      	ble.n	801642a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80163c2:	b3a5      	cbz	r5, 801642e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80163c4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80163c8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80163cc:	3401      	adds	r4, #1
 80163ce:	d432      	bmi.n	8016436 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80163d0:	45a0      	cmp	r8, r4
 80163d2:	dd30      	ble.n	8016436 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80163d4:	b397      	cbz	r7, 801643c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80163d6:	2800      	cmp	r0, #0
 80163d8:	db2b      	blt.n	8016432 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80163da:	4584      	cmp	ip, r0
 80163dc:	dd29      	ble.n	8016432 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80163de:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80163e2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80163e6:	3001      	adds	r0, #1
 80163e8:	d42b      	bmi.n	8016442 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80163ea:	4584      	cmp	ip, r0
 80163ec:	dd29      	ble.n	8016442 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80163ee:	b355      	cbz	r5, 8016446 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 80163f0:	44f4      	add	ip, lr
 80163f2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80163f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80163fa:	2d0f      	cmp	r5, #15
 80163fc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8016400:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8016404:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8016408:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801640c:	d801      	bhi.n	8016412 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801640e:	2f0f      	cmp	r7, #15
 8016410:	d91b      	bls.n	801644a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8016412:	4b7f      	ldr	r3, [pc, #508]	; (8016610 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8016414:	f240 115b 	movw	r1, #347	; 0x15b
 8016418:	4a7e      	ldr	r2, [pc, #504]	; (8016614 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801641a:	487f      	ldr	r0, [pc, #508]	; (8016618 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801641c:	f003 fc52 	bl	8019cc4 <__assert_func>
 8016420:	2200      	movs	r2, #0
 8016422:	e7ca      	b.n	80163ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8016424:	2600      	movs	r6, #0
 8016426:	4632      	mov	r2, r6
 8016428:	e7d0      	b.n	80163cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801642a:	2600      	movs	r6, #0
 801642c:	e7ce      	b.n	80163cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801642e:	462e      	mov	r6, r5
 8016430:	e7cc      	b.n	80163cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8016432:	2400      	movs	r4, #0
 8016434:	e7d7      	b.n	80163e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8016436:	2300      	movs	r3, #0
 8016438:	461c      	mov	r4, r3
 801643a:	e7de      	b.n	80163fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801643c:	463b      	mov	r3, r7
 801643e:	463c      	mov	r4, r7
 8016440:	e7db      	b.n	80163fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8016442:	2300      	movs	r3, #0
 8016444:	e7d9      	b.n	80163fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8016446:	462b      	mov	r3, r5
 8016448:	e7d7      	b.n	80163fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801644a:	b2a8      	uxth	r0, r5
 801644c:	b2bf      	uxth	r7, r7
 801644e:	fb07 fe00 	mul.w	lr, r7, r0
 8016452:	0100      	lsls	r0, r0, #4
 8016454:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8016458:	eba0 0c0e 	sub.w	ip, r0, lr
 801645c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8016460:	b2bf      	uxth	r7, r7
 8016462:	fa1f fc8c 	uxth.w	ip, ip
 8016466:	1bc5      	subs	r5, r0, r7
 8016468:	fb0c f00a 	mul.w	r0, ip, sl
 801646c:	b2ad      	uxth	r5, r5
 801646e:	fb05 000b 	mla	r0, r5, fp, r0
 8016472:	fb07 0009 	mla	r0, r7, r9, r0
 8016476:	fb0e 0008 	mla	r0, lr, r8, r0
 801647a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801647e:	9001      	str	r0, [sp, #4]
 8016480:	2800      	cmp	r0, #0
 8016482:	f000 80c2 	beq.w	801660a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8016486:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801648a:	d018      	beq.n	80164be <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801648c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8016490:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016494:	fb0b f000 	mul.w	r0, fp, r0
 8016498:	fb0b fb02 	mul.w	fp, fp, r2
 801649c:	0a02      	lsrs	r2, r0, #8
 801649e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80164a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80164a6:	4402      	add	r2, r0
 80164a8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80164ac:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80164b0:	0a12      	lsrs	r2, r2, #8
 80164b2:	0a00      	lsrs	r0, r0, #8
 80164b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80164b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80164bc:	4302      	orrs	r2, r0
 80164be:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80164c2:	d01a      	beq.n	80164fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80164c4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80164c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80164cc:	fb0a f000 	mul.w	r0, sl, r0
 80164d0:	fb0a fa06 	mul.w	sl, sl, r6
 80164d4:	0a06      	lsrs	r6, r0, #8
 80164d6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80164da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80164de:	4406      	add	r6, r0
 80164e0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80164e4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80164e8:	0a36      	lsrs	r6, r6, #8
 80164ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80164ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80164f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80164f6:	ea46 060a 	orr.w	r6, r6, sl
 80164fa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80164fe:	d01b      	beq.n	8016538 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8016500:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8016504:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016508:	fb09 fa0a 	mul.w	sl, r9, sl
 801650c:	fb09 f004 	mul.w	r0, r9, r4
 8016510:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8016514:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016518:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801651c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016520:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8016524:	4454      	add	r4, sl
 8016526:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801652a:	0a24      	lsrs	r4, r4, #8
 801652c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8016530:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016534:	ea44 0409 	orr.w	r4, r4, r9
 8016538:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801653c:	d01b      	beq.n	8016576 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801653e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8016542:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016546:	fb08 f909 	mul.w	r9, r8, r9
 801654a:	fb08 f003 	mul.w	r0, r8, r3
 801654e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8016552:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8016556:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801655a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801655e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8016562:	444b      	add	r3, r9
 8016564:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8016568:	0a1b      	lsrs	r3, r3, #8
 801656a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801656e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016572:	ea43 0308 	orr.w	r3, r3, r8
 8016576:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801657a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801657e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8016582:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016586:	fb0c f000 	mul.w	r0, ip, r0
 801658a:	fb0c f606 	mul.w	r6, ip, r6
 801658e:	fb05 0808 	mla	r8, r5, r8, r0
 8016592:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8016596:	fb05 6502 	mla	r5, r5, r2, r6
 801659a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801659e:	fb07 8800 	mla	r8, r7, r0, r8
 80165a2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80165a6:	fb07 5704 	mla	r7, r7, r4, r5
 80165aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80165ae:	fb0e 8000 	mla	r0, lr, r0, r8
 80165b2:	780a      	ldrb	r2, [r1, #0]
 80165b4:	fb0e 7e03 	mla	lr, lr, r3, r7
 80165b8:	9b01      	ldr	r3, [sp, #4]
 80165ba:	0a00      	lsrs	r0, r0, #8
 80165bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80165c0:	43db      	mvns	r3, r3
 80165c2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80165c6:	b2db      	uxtb	r3, r3
 80165c8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80165cc:	ea40 0e0e 	orr.w	lr, r0, lr
 80165d0:	fb02 f003 	mul.w	r0, r2, r3
 80165d4:	1c42      	adds	r2, r0, #1
 80165d6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80165da:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80165de:	700a      	strb	r2, [r1, #0]
 80165e0:	784a      	ldrb	r2, [r1, #1]
 80165e2:	435a      	muls	r2, r3
 80165e4:	1c50      	adds	r0, r2, #1
 80165e6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80165ea:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80165ee:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80165f2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80165f6:	704a      	strb	r2, [r1, #1]
 80165f8:	788a      	ldrb	r2, [r1, #2]
 80165fa:	4353      	muls	r3, r2
 80165fc:	1c5a      	adds	r2, r3, #1
 80165fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016602:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8016606:	f881 e002 	strb.w	lr, [r1, #2]
 801660a:	b003      	add	sp, #12
 801660c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016610:	0801e734 	.word	0x0801e734
 8016614:	0801eb4a 	.word	0x0801eb4a
 8016618:	0801e701 	.word	0x0801e701

0801661c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016620:	ed2d 8b0a 	vpush	{d8-d12}
 8016624:	b09b      	sub	sp, #108	; 0x6c
 8016626:	eeb0 aa40 	vmov.f32	s20, s0
 801662a:	eef0 9a60 	vmov.f32	s19, s1
 801662e:	9218      	str	r2, [sp, #96]	; 0x60
 8016630:	eeb0 9a41 	vmov.f32	s18, s2
 8016634:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8016636:	eeb0 8a62 	vmov.f32	s16, s5
 801663a:	9019      	str	r0, [sp, #100]	; 0x64
 801663c:	eef0 8a43 	vmov.f32	s17, s6
 8016640:	6850      	ldr	r0, [r2, #4]
 8016642:	eeb0 ca44 	vmov.f32	s24, s8
 8016646:	9116      	str	r1, [sp, #88]	; 0x58
 8016648:	eef0 ba64 	vmov.f32	s23, s9
 801664c:	9307      	str	r3, [sp, #28]
 801664e:	eeb0 ba45 	vmov.f32	s22, s10
 8016652:	6812      	ldr	r2, [r2, #0]
 8016654:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8016658:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801665a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801665e:	fb00 1303 	mla	r3, r0, r3, r1
 8016662:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016666:	18d3      	adds	r3, r2, r3
 8016668:	930a      	str	r3, [sp, #40]	; 0x28
 801666a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016670:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8016672:	685e      	ldr	r6, [r3, #4]
 8016674:	3604      	adds	r6, #4
 8016676:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016678:	2b00      	cmp	r3, #0
 801667a:	dc03      	bgt.n	8016684 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801667c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801667e:	2b00      	cmp	r3, #0
 8016680:	f340 834f 	ble.w	8016d22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8016684:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8016686:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801668a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801668e:	1e48      	subs	r0, r1, #1
 8016690:	1e57      	subs	r7, r2, #1
 8016692:	9b07      	ldr	r3, [sp, #28]
 8016694:	2b00      	cmp	r3, #0
 8016696:	f340 8178 	ble.w	801698a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801669a:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801669c:	142b      	asrs	r3, r5, #16
 801669e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80166a2:	d406      	bmi.n	80166b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80166a4:	4584      	cmp	ip, r0
 80166a6:	da04      	bge.n	80166b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	db02      	blt.n	80166b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80166ac:	42bb      	cmp	r3, r7
 80166ae:	f2c0 816d 	blt.w	801698c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80166b2:	f11c 0c01 	adds.w	ip, ip, #1
 80166b6:	f100 815b 	bmi.w	8016970 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80166ba:	4561      	cmp	r1, ip
 80166bc:	f2c0 8158 	blt.w	8016970 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80166c0:	3301      	adds	r3, #1
 80166c2:	f100 8155 	bmi.w	8016970 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80166c6:	429a      	cmp	r2, r3
 80166c8:	f2c0 8152 	blt.w	8016970 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80166cc:	9b07      	ldr	r3, [sp, #28]
 80166ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80166d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80166d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f340 8178 	ble.w	80169ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80166da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80166dc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80166e0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80166e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80166e8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80166ea:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80166ee:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80166f0:	141b      	asrs	r3, r3, #16
 80166f2:	f100 81ba 	bmi.w	8016a6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80166f6:	f101 38ff 	add.w	r8, r1, #4294967295
 80166fa:	4543      	cmp	r3, r8
 80166fc:	f280 81b5 	bge.w	8016a6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8016700:	f1bc 0f00 	cmp.w	ip, #0
 8016704:	f2c0 81b1 	blt.w	8016a6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8016708:	f10e 38ff 	add.w	r8, lr, #4294967295
 801670c:	45c4      	cmp	ip, r8
 801670e:	f280 81ac 	bge.w	8016a6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8016712:	b209      	sxth	r1, r1
 8016714:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016716:	fb0c 3301 	mla	r3, ip, r1, r3
 801671a:	eb04 0803 	add.w	r8, r4, r3
 801671e:	5ce3      	ldrb	r3, [r4, r3]
 8016720:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8016724:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8016728:	2a00      	cmp	r2, #0
 801672a:	f000 8193 	beq.w	8016a54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801672e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8016732:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8016736:	940b      	str	r4, [sp, #44]	; 0x2c
 8016738:	0e24      	lsrs	r4, r4, #24
 801673a:	9412      	str	r4, [sp, #72]	; 0x48
 801673c:	b178      	cbz	r0, 801675e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801673e:	eb08 0c01 	add.w	ip, r8, r1
 8016742:	f818 1001 	ldrb.w	r1, [r8, r1]
 8016746:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801674a:	9108      	str	r1, [sp, #32]
 801674c:	0e09      	lsrs	r1, r1, #24
 801674e:	9110      	str	r1, [sp, #64]	; 0x40
 8016750:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8016754:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016758:	910c      	str	r1, [sp, #48]	; 0x30
 801675a:	0e09      	lsrs	r1, r1, #24
 801675c:	9113      	str	r1, [sp, #76]	; 0x4c
 801675e:	b292      	uxth	r2, r2
 8016760:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016762:	b280      	uxth	r0, r0
 8016764:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016766:	fb02 f900 	mul.w	r9, r2, r0
 801676a:	0112      	lsls	r2, r2, #4
 801676c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8016770:	eba2 0809 	sub.w	r8, r2, r9
 8016774:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016778:	b280      	uxth	r0, r0
 801677a:	fa1f f888 	uxth.w	r8, r8
 801677e:	1a12      	subs	r2, r2, r0
 8016780:	fb08 f101 	mul.w	r1, r8, r1
 8016784:	b292      	uxth	r2, r2
 8016786:	fb02 110e 	mla	r1, r2, lr, r1
 801678a:	fb00 1104 	mla	r1, r0, r4, r1
 801678e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016790:	fb09 1104 	mla	r1, r9, r4, r1
 8016794:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016798:	2900      	cmp	r1, #0
 801679a:	f000 80de 	beq.w	801695a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801679e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80167a2:	d01b      	beq.n	80167dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80167a4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80167a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80167ac:	fb0e fa0a 	mul.w	sl, lr, sl
 80167b0:	fb0e fe03 	mul.w	lr, lr, r3
 80167b4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80167b8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80167bc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80167c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80167c4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80167c8:	4453      	add	r3, sl
 80167ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80167ce:	0a1b      	lsrs	r3, r3, #8
 80167d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80167d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80167d8:	ea43 030c 	orr.w	r3, r3, ip
 80167dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167de:	2cff      	cmp	r4, #255	; 0xff
 80167e0:	d021      	beq.n	8016826 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80167e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80167e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80167ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80167f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80167fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80167fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8016802:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016806:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801680a:	44de      	add	lr, fp
 801680c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016810:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016814:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016818:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801681c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016820:	ea4e 040a 	orr.w	r4, lr, sl
 8016824:	940b      	str	r4, [sp, #44]	; 0x2c
 8016826:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016828:	2cff      	cmp	r4, #255	; 0xff
 801682a:	d021      	beq.n	8016870 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801682c:	9c08      	ldr	r4, [sp, #32]
 801682e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016832:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016834:	fb04 fb0b 	mul.w	fp, r4, fp
 8016838:	9c08      	ldr	r4, [sp, #32]
 801683a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801683e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016840:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016844:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016848:	fb04 fa0a 	mul.w	sl, r4, sl
 801684c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016850:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016854:	44de      	add	lr, fp
 8016856:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801685a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801685e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016862:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016866:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801686a:	ea4e 040a 	orr.w	r4, lr, sl
 801686e:	9408      	str	r4, [sp, #32]
 8016870:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016872:	2cff      	cmp	r4, #255	; 0xff
 8016874:	d021      	beq.n	80168ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8016876:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016878:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801687c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801687e:	fb04 fb0b 	mul.w	fp, r4, fp
 8016882:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016884:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016888:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801688a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801688e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016892:	fb04 fa0a 	mul.w	sl, r4, sl
 8016896:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801689a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801689e:	44de      	add	lr, fp
 80168a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80168a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80168a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80168ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80168b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80168b4:	ea4e 040a 	orr.w	r4, lr, sl
 80168b8:	940c      	str	r4, [sp, #48]	; 0x30
 80168ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80168bc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80168c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80168c4:	43c9      	mvns	r1, r1
 80168c6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80168ca:	9c08      	ldr	r4, [sp, #32]
 80168cc:	b2c9      	uxtb	r1, r1
 80168ce:	fb08 fc0c 	mul.w	ip, r8, ip
 80168d2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80168d6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80168da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80168dc:	fb00 cc0e 	mla	ip, r0, lr, ip
 80168e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80168e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80168e6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80168ea:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80168ee:	fb08 f80e 	mul.w	r8, r8, lr
 80168f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80168f6:	fb02 8303 	mla	r3, r2, r3, r8
 80168fa:	9a08      	ldr	r2, [sp, #32]
 80168fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016900:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8016904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016906:	fb00 330a 	mla	r3, r0, sl, r3
 801690a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801690e:	fb09 3900 	mla	r9, r9, r0, r3
 8016912:	783b      	ldrb	r3, [r7, #0]
 8016914:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8016918:	fb03 f201 	mul.w	r2, r3, r1
 801691c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8016920:	1c53      	adds	r3, r2, #1
 8016922:	ea4c 0c09 	orr.w	ip, ip, r9
 8016926:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801692a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801692e:	703b      	strb	r3, [r7, #0]
 8016930:	787b      	ldrb	r3, [r7, #1]
 8016932:	434b      	muls	r3, r1
 8016934:	1c5a      	adds	r2, r3, #1
 8016936:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801693a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801693e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8016942:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016946:	707b      	strb	r3, [r7, #1]
 8016948:	78bb      	ldrb	r3, [r7, #2]
 801694a:	4359      	muls	r1, r3
 801694c:	1c4b      	adds	r3, r1, #1
 801694e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8016952:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8016956:	f887 c002 	strb.w	ip, [r7, #2]
 801695a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801695c:	3703      	adds	r7, #3
 801695e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016960:	441a      	add	r2, r3
 8016962:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016964:	441d      	add	r5, r3
 8016966:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016968:	922f      	str	r2, [sp, #188]	; 0xbc
 801696a:	3b01      	subs	r3, #1
 801696c:	9317      	str	r3, [sp, #92]	; 0x5c
 801696e:	e6b0      	b.n	80166d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8016970:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016972:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8016974:	441c      	add	r4, r3
 8016976:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016978:	441d      	add	r5, r3
 801697a:	9b07      	ldr	r3, [sp, #28]
 801697c:	942f      	str	r4, [sp, #188]	; 0xbc
 801697e:	3b01      	subs	r3, #1
 8016980:	9307      	str	r3, [sp, #28]
 8016982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016984:	3303      	adds	r3, #3
 8016986:	930a      	str	r3, [sp, #40]	; 0x28
 8016988:	e683      	b.n	8016692 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801698a:	d026      	beq.n	80169da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801698c:	9b07      	ldr	r3, [sp, #28]
 801698e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8016990:	3b01      	subs	r3, #1
 8016992:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8016994:	fb00 4003 	mla	r0, r0, r3, r4
 8016998:	1400      	asrs	r0, r0, #16
 801699a:	f53f ae97 	bmi.w	80166cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801699e:	3901      	subs	r1, #1
 80169a0:	4288      	cmp	r0, r1
 80169a2:	f6bf ae93 	bge.w	80166cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80169a6:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80169a8:	fb01 5303 	mla	r3, r1, r3, r5
 80169ac:	141b      	asrs	r3, r3, #16
 80169ae:	f53f ae8d 	bmi.w	80166cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80169b2:	3a01      	subs	r2, #1
 80169b4:	4293      	cmp	r3, r2
 80169b6:	f6bf ae89 	bge.w	80166cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80169ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169bc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80169c0:	f103 0e03 	add.w	lr, r3, #3
 80169c4:	f1bb 0f00 	cmp.w	fp, #0
 80169c8:	dc6d      	bgt.n	8016aa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80169ca:	9b07      	ldr	r3, [sp, #28]
 80169cc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80169d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80169d6:	4423      	add	r3, r4
 80169d8:	930a      	str	r3, [sp, #40]	; 0x28
 80169da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80169dc:	2b00      	cmp	r3, #0
 80169de:	f340 81a0 	ble.w	8016d22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80169e2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80169e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169e8:	ee79 9aab 	vadd.f32	s19, s19, s23
 80169ec:	eef0 6a48 	vmov.f32	s13, s16
 80169f0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80169f4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80169f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169fc:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8016a00:	eef0 6a68 	vmov.f32	s13, s17
 8016a04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a08:	ee16 5a90 	vmov	r5, s13
 8016a0c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016a10:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016a14:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016a18:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016a1c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016a20:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016a24:	ee18 2a10 	vmov	r2, s16
 8016a28:	eeb0 8a47 	vmov.f32	s16, s14
 8016a2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a30:	ee18 2a90 	vmov	r2, s17
 8016a34:	9331      	str	r3, [sp, #196]	; 0xc4
 8016a36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016a38:	eef0 8a67 	vmov.f32	s17, s15
 8016a3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a40:	9332      	str	r3, [sp, #200]	; 0xc8
 8016a42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016a44:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a46:	3b01      	subs	r3, #1
 8016a48:	9316      	str	r3, [sp, #88]	; 0x58
 8016a4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016a4c:	bf08      	it	eq
 8016a4e:	4613      	moveq	r3, r2
 8016a50:	9307      	str	r3, [sp, #28]
 8016a52:	e610      	b.n	8016676 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016a54:	2800      	cmp	r0, #0
 8016a56:	f43f ae82 	beq.w	801675e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016a5a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8016a5e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016a62:	9108      	str	r1, [sp, #32]
 8016a64:	0e09      	lsrs	r1, r1, #24
 8016a66:	9110      	str	r1, [sp, #64]	; 0x40
 8016a68:	e679      	b.n	801675e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016a6a:	f113 0801 	adds.w	r8, r3, #1
 8016a6e:	f53f af74 	bmi.w	801695a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8016a72:	4541      	cmp	r1, r8
 8016a74:	f6ff af71 	blt.w	801695a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8016a78:	f11c 0801 	adds.w	r8, ip, #1
 8016a7c:	f53f af6d 	bmi.w	801695a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8016a80:	45c6      	cmp	lr, r8
 8016a82:	f6ff af6a 	blt.w	801695a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8016a86:	b209      	sxth	r1, r1
 8016a88:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8016a8c:	fa0f f38e 	sxth.w	r3, lr
 8016a90:	9100      	str	r1, [sp, #0]
 8016a92:	4639      	mov	r1, r7
 8016a94:	9301      	str	r3, [sp, #4]
 8016a96:	4633      	mov	r3, r6
 8016a98:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8016a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016aa0:	f7ff fc70 	bl	8016384 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8016aa4:	e759      	b.n	801695a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8016aa6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016aa8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8016aac:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8016aae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8016ab2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8016ab4:	1427      	asrs	r7, r4, #16
 8016ab6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016ab8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016abc:	142b      	asrs	r3, r5, #16
 8016abe:	fb01 7303 	mla	r3, r1, r3, r7
 8016ac2:	18e7      	adds	r7, r4, r3
 8016ac4:	5ce3      	ldrb	r3, [r4, r3]
 8016ac6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8016aca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8016ace:	2a00      	cmp	r2, #0
 8016ad0:	f000 811d 	beq.w	8016d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8016ad4:	f897 8001 	ldrb.w	r8, [r7, #1]
 8016ad8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8016adc:	940d      	str	r4, [sp, #52]	; 0x34
 8016ade:	0e24      	lsrs	r4, r4, #24
 8016ae0:	9414      	str	r4, [sp, #80]	; 0x50
 8016ae2:	b170      	cbz	r0, 8016b02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8016ae4:	eb07 0801 	add.w	r8, r7, r1
 8016ae8:	5c79      	ldrb	r1, [r7, r1]
 8016aea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016aee:	9109      	str	r1, [sp, #36]	; 0x24
 8016af0:	0e09      	lsrs	r1, r1, #24
 8016af2:	9111      	str	r1, [sp, #68]	; 0x44
 8016af4:	f898 1001 	ldrb.w	r1, [r8, #1]
 8016af8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016afc:	910e      	str	r1, [sp, #56]	; 0x38
 8016afe:	0e09      	lsrs	r1, r1, #24
 8016b00:	9115      	str	r1, [sp, #84]	; 0x54
 8016b02:	b292      	uxth	r2, r2
 8016b04:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016b06:	b280      	uxth	r0, r0
 8016b08:	fb02 f900 	mul.w	r9, r2, r0
 8016b0c:	0112      	lsls	r2, r2, #4
 8016b0e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8016b12:	eba2 0809 	sub.w	r8, r2, r9
 8016b16:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8016b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016b1c:	b280      	uxth	r0, r0
 8016b1e:	fa1f f888 	uxth.w	r8, r8
 8016b22:	1a09      	subs	r1, r1, r0
 8016b24:	fb08 f202 	mul.w	r2, r8, r2
 8016b28:	b289      	uxth	r1, r1
 8016b2a:	fb01 220c 	mla	r2, r1, ip, r2
 8016b2e:	fb00 2204 	mla	r2, r0, r4, r2
 8016b32:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016b34:	fb09 2204 	mla	r2, r9, r4, r2
 8016b38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016b3c:	2a00      	cmp	r2, #0
 8016b3e:	f000 80db 	beq.w	8016cf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8016b42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8016b46:	d019      	beq.n	8016b7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8016b48:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016b4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016b50:	fb0c fa0a 	mul.w	sl, ip, sl
 8016b54:	fb0c fc03 	mul.w	ip, ip, r3
 8016b58:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016b5c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016b60:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8016b64:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016b68:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8016b6c:	4453      	add	r3, sl
 8016b6e:	0a3f      	lsrs	r7, r7, #8
 8016b70:	0a1b      	lsrs	r3, r3, #8
 8016b72:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8016b76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016b7a:	433b      	orrs	r3, r7
 8016b7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b7e:	2cff      	cmp	r4, #255	; 0xff
 8016b80:	d020      	beq.n	8016bc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8016b82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016b84:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016b88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b8a:	4367      	muls	r7, r4
 8016b8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016b8e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016b92:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016b96:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b98:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016b9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016ba0:	fb04 fa0a 	mul.w	sl, r4, sl
 8016ba4:	44bc      	add	ip, r7
 8016ba6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016baa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016bae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016bb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016bb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016bba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016bbe:	ea4c 040a 	orr.w	r4, ip, sl
 8016bc2:	940d      	str	r4, [sp, #52]	; 0x34
 8016bc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016bc6:	2cff      	cmp	r4, #255	; 0xff
 8016bc8:	d020      	beq.n	8016c0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8016bca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016bcc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016bd0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016bd2:	4367      	muls	r7, r4
 8016bd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016bd6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016bda:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016bde:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016be0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016be4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016be8:	fb04 fa0a 	mul.w	sl, r4, sl
 8016bec:	44bc      	add	ip, r7
 8016bee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016bf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016bf6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016bfa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016bfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016c02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016c06:	ea4c 040a 	orr.w	r4, ip, sl
 8016c0a:	9409      	str	r4, [sp, #36]	; 0x24
 8016c0c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016c0e:	2cff      	cmp	r4, #255	; 0xff
 8016c10:	d020      	beq.n	8016c54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8016c12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016c14:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016c18:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016c1a:	4367      	muls	r7, r4
 8016c1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016c1e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016c22:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016c26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016c28:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016c2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016c30:	fb04 fa0a 	mul.w	sl, r4, sl
 8016c34:	44bc      	add	ip, r7
 8016c36:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016c3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016c3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016c42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016c46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016c4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016c4e:	ea4c 040a 	orr.w	r4, ip, sl
 8016c52:	940e      	str	r4, [sp, #56]	; 0x38
 8016c54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016c56:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8016c5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016c5e:	43d2      	mvns	r2, r2
 8016c60:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016c64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016c66:	b2d2      	uxtb	r2, r2
 8016c68:	fb08 f707 	mul.w	r7, r8, r7
 8016c6c:	fb01 770c 	mla	r7, r1, ip, r7
 8016c70:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016c74:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016c76:	fb00 770c 	mla	r7, r0, ip, r7
 8016c7a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016c7e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016c80:	fb09 770c 	mla	r7, r9, ip, r7
 8016c84:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8016c88:	fb08 f80c 	mul.w	r8, r8, ip
 8016c8c:	0a3f      	lsrs	r7, r7, #8
 8016c8e:	fb01 8303 	mla	r3, r1, r3, r8
 8016c92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016c94:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8016c98:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8016c9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016c9e:	fb00 330a 	mla	r3, r0, sl, r3
 8016ca2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8016ca6:	fb09 3c0c 	mla	ip, r9, ip, r3
 8016caa:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8016cae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016cb2:	fb03 f102 	mul.w	r1, r3, r2
 8016cb6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016cba:	1c4b      	adds	r3, r1, #1
 8016cbc:	ea47 070c 	orr.w	r7, r7, ip
 8016cc0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8016cc4:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8016cc8:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8016ccc:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8016cd0:	4353      	muls	r3, r2
 8016cd2:	1c59      	adds	r1, r3, #1
 8016cd4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8016cd8:	0a3b      	lsrs	r3, r7, #8
 8016cda:	0c3f      	lsrs	r7, r7, #16
 8016cdc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8016ce0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8016ce4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8016ce8:	435a      	muls	r2, r3
 8016cea:	1c53      	adds	r3, r2, #1
 8016cec:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016cf0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8016cf4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8016cf8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016cfa:	f10e 0e03 	add.w	lr, lr, #3
 8016cfe:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016d00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d04:	441a      	add	r2, r3
 8016d06:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016d08:	922f      	str	r2, [sp, #188]	; 0xbc
 8016d0a:	441d      	add	r5, r3
 8016d0c:	e65a      	b.n	80169c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8016d0e:	2800      	cmp	r0, #0
 8016d10:	f43f aef7 	beq.w	8016b02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8016d14:	5c79      	ldrb	r1, [r7, r1]
 8016d16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8016d1a:	9109      	str	r1, [sp, #36]	; 0x24
 8016d1c:	0e09      	lsrs	r1, r1, #24
 8016d1e:	9111      	str	r1, [sp, #68]	; 0x44
 8016d20:	e6ef      	b.n	8016b02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8016d22:	b01b      	add	sp, #108	; 0x6c
 8016d24:	ecbd 8b0a 	vpop	{d8-d12}
 8016d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d2c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8016d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d30:	b08d      	sub	sp, #52	; 0x34
 8016d32:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8016d36:	9103      	str	r1, [sp, #12]
 8016d38:	fb07 5803 	mla	r8, r7, r3, r5
 8016d3c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8016d40:	9803      	ldr	r0, [sp, #12]
 8016d42:	2f00      	cmp	r7, #0
 8016d44:	910b      	str	r1, [sp, #44]	; 0x2c
 8016d46:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016d4a:	9903      	ldr	r1, [sp, #12]
 8016d4c:	9c03      	ldr	r4, [sp, #12]
 8016d4e:	eb02 0608 	add.w	r6, r2, r8
 8016d52:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8016d56:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8016d5a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8016d5e:	7809      	ldrb	r1, [r1, #0]
 8016d60:	7840      	ldrb	r0, [r0, #1]
 8016d62:	78a4      	ldrb	r4, [r4, #2]
 8016d64:	db51      	blt.n	8016e0a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8016d66:	45be      	cmp	lr, r7
 8016d68:	dd4f      	ble.n	8016e0a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8016d6a:	2d00      	cmp	r5, #0
 8016d6c:	db49      	blt.n	8016e02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8016d6e:	42ab      	cmp	r3, r5
 8016d70:	dd47      	ble.n	8016e02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8016d72:	f812 2008 	ldrb.w	r2, [r2, r8]
 8016d76:	9204      	str	r2, [sp, #16]
 8016d78:	7872      	ldrb	r2, [r6, #1]
 8016d7a:	9205      	str	r2, [sp, #20]
 8016d7c:	78b2      	ldrb	r2, [r6, #2]
 8016d7e:	9206      	str	r2, [sp, #24]
 8016d80:	1c6a      	adds	r2, r5, #1
 8016d82:	d449      	bmi.n	8016e18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8016d84:	4293      	cmp	r3, r2
 8016d86:	dd47      	ble.n	8016e18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8016d88:	f1bc 0f00 	cmp.w	ip, #0
 8016d8c:	d044      	beq.n	8016e18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8016d8e:	7972      	ldrb	r2, [r6, #5]
 8016d90:	f896 b003 	ldrb.w	fp, [r6, #3]
 8016d94:	f896 a004 	ldrb.w	sl, [r6, #4]
 8016d98:	9201      	str	r2, [sp, #4]
 8016d9a:	3701      	adds	r7, #1
 8016d9c:	d444      	bmi.n	8016e28 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8016d9e:	45be      	cmp	lr, r7
 8016da0:	dd42      	ble.n	8016e28 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8016da2:	f1b9 0f00 	cmp.w	r9, #0
 8016da6:	f000 80c1 	beq.w	8016f2c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8016daa:	2d00      	cmp	r5, #0
 8016dac:	db38      	blt.n	8016e20 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8016dae:	42ab      	cmp	r3, r5
 8016db0:	dd36      	ble.n	8016e20 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8016db2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016db6:	f816 8002 	ldrb.w	r8, [r6, r2]
 8016dba:	2203      	movs	r2, #3
 8016dbc:	fb03 6702 	mla	r7, r3, r2, r6
 8016dc0:	fb03 6202 	mla	r2, r3, r2, r6
 8016dc4:	787f      	ldrb	r7, [r7, #1]
 8016dc6:	f892 e002 	ldrb.w	lr, [r2, #2]
 8016dca:	9702      	str	r7, [sp, #8]
 8016dcc:	3501      	adds	r5, #1
 8016dce:	d432      	bmi.n	8016e36 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8016dd0:	42ab      	cmp	r3, r5
 8016dd2:	dd30      	ble.n	8016e36 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8016dd4:	f1bc 0f00 	cmp.w	ip, #0
 8016dd8:	d031      	beq.n	8016e3e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8016dda:	2703      	movs	r7, #3
 8016ddc:	fb13 7207 	smlabb	r2, r3, r7, r7
 8016de0:	5cb5      	ldrb	r5, [r6, r2]
 8016de2:	fb03 6207 	mla	r2, r3, r7, r6
 8016de6:	fb03 6307 	mla	r3, r3, r7, r6
 8016dea:	7912      	ldrb	r2, [r2, #4]
 8016dec:	795e      	ldrb	r6, [r3, #5]
 8016dee:	f1bc 0f0f 	cmp.w	ip, #15
 8016df2:	d927      	bls.n	8016e44 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8016df4:	4b53      	ldr	r3, [pc, #332]	; (8016f44 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8016df6:	f240 115b 	movw	r1, #347	; 0x15b
 8016dfa:	4a53      	ldr	r2, [pc, #332]	; (8016f48 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8016dfc:	4853      	ldr	r0, [pc, #332]	; (8016f4c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8016dfe:	f002 ff61 	bl	8019cc4 <__assert_func>
 8016e02:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8016e06:	9104      	str	r1, [sp, #16]
 8016e08:	e7ba      	b.n	8016d80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8016e0a:	9401      	str	r4, [sp, #4]
 8016e0c:	4682      	mov	sl, r0
 8016e0e:	468b      	mov	fp, r1
 8016e10:	9104      	str	r1, [sp, #16]
 8016e12:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8016e16:	e7c0      	b.n	8016d9a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8016e18:	9401      	str	r4, [sp, #4]
 8016e1a:	4682      	mov	sl, r0
 8016e1c:	468b      	mov	fp, r1
 8016e1e:	e7bc      	b.n	8016d9a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8016e20:	46a6      	mov	lr, r4
 8016e22:	9002      	str	r0, [sp, #8]
 8016e24:	4688      	mov	r8, r1
 8016e26:	e7d1      	b.n	8016dcc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8016e28:	4626      	mov	r6, r4
 8016e2a:	4602      	mov	r2, r0
 8016e2c:	460d      	mov	r5, r1
 8016e2e:	46a6      	mov	lr, r4
 8016e30:	9002      	str	r0, [sp, #8]
 8016e32:	4688      	mov	r8, r1
 8016e34:	e7db      	b.n	8016dee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8016e36:	4626      	mov	r6, r4
 8016e38:	4602      	mov	r2, r0
 8016e3a:	460d      	mov	r5, r1
 8016e3c:	e7d7      	b.n	8016dee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8016e3e:	4626      	mov	r6, r4
 8016e40:	4602      	mov	r2, r0
 8016e42:	460d      	mov	r5, r1
 8016e44:	f1b9 0f0f 	cmp.w	r9, #15
 8016e48:	d8d4      	bhi.n	8016df4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8016e4a:	fa1f f38c 	uxth.w	r3, ip
 8016e4e:	fa1f fc89 	uxth.w	ip, r9
 8016e52:	fb03 f70c 	mul.w	r7, r3, ip
 8016e56:	011b      	lsls	r3, r3, #4
 8016e58:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8016e5c:	9707      	str	r7, [sp, #28]
 8016e5e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8016e62:	fa1f fc8c 	uxth.w	ip, ip
 8016e66:	eba7 070c 	sub.w	r7, r7, ip
 8016e6a:	b2bf      	uxth	r7, r7
 8016e6c:	9709      	str	r7, [sp, #36]	; 0x24
 8016e6e:	9f07      	ldr	r7, [sp, #28]
 8016e70:	1bdb      	subs	r3, r3, r7
 8016e72:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8016e76:	b29b      	uxth	r3, r3
 8016e78:	9708      	str	r7, [sp, #32]
 8016e7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8016e7e:	ea6f 0907 	mvn.w	r9, r7
 8016e82:	fb03 fb0b 	mul.w	fp, r3, fp
 8016e86:	9f04      	ldr	r7, [sp, #16]
 8016e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e8a:	fa5f f989 	uxtb.w	r9, r9
 8016e8e:	fb03 bb07 	mla	fp, r3, r7, fp
 8016e92:	9f07      	ldr	r7, [sp, #28]
 8016e94:	fb11 f109 	smulbb	r1, r1, r9
 8016e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e9a:	fb0c b808 	mla	r8, ip, r8, fp
 8016e9e:	fb10 f009 	smulbb	r0, r0, r9
 8016ea2:	fb14 f409 	smulbb	r4, r4, r9
 8016ea6:	fb07 8805 	mla	r8, r7, r5, r8
 8016eaa:	9d08      	ldr	r5, [sp, #32]
 8016eac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016eae:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8016eb2:	fb08 1805 	mla	r8, r8, r5, r1
 8016eb6:	9d05      	ldr	r5, [sp, #20]
 8016eb8:	fa1f f888 	uxth.w	r8, r8
 8016ebc:	f108 0101 	add.w	r1, r8, #1
 8016ec0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8016ec4:	9903      	ldr	r1, [sp, #12]
 8016ec6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016eca:	f881 8000 	strb.w	r8, [r1]
 8016ece:	fb03 f10a 	mul.w	r1, r3, sl
 8016ed2:	fb07 1105 	mla	r1, r7, r5, r1
 8016ed6:	9d02      	ldr	r5, [sp, #8]
 8016ed8:	fb0c 1105 	mla	r1, ip, r5, r1
 8016edc:	9d07      	ldr	r5, [sp, #28]
 8016ede:	fb05 1102 	mla	r1, r5, r2, r1
 8016ee2:	9a08      	ldr	r2, [sp, #32]
 8016ee4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016ee8:	fb01 0102 	mla	r1, r1, r2, r0
 8016eec:	9a03      	ldr	r2, [sp, #12]
 8016eee:	b289      	uxth	r1, r1
 8016ef0:	1c48      	adds	r0, r1, #1
 8016ef2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8016ef6:	1209      	asrs	r1, r1, #8
 8016ef8:	7051      	strb	r1, [r2, #1]
 8016efa:	9a01      	ldr	r2, [sp, #4]
 8016efc:	4353      	muls	r3, r2
 8016efe:	9a06      	ldr	r2, [sp, #24]
 8016f00:	fb07 3702 	mla	r7, r7, r2, r3
 8016f04:	9b08      	ldr	r3, [sp, #32]
 8016f06:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8016f0a:	fb05 c606 	mla	r6, r5, r6, ip
 8016f0e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8016f12:	fb06 4603 	mla	r6, r6, r3, r4
 8016f16:	9b03      	ldr	r3, [sp, #12]
 8016f18:	b2b6      	uxth	r6, r6
 8016f1a:	f106 0e01 	add.w	lr, r6, #1
 8016f1e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8016f22:	1236      	asrs	r6, r6, #8
 8016f24:	709e      	strb	r6, [r3, #2]
 8016f26:	b00d      	add	sp, #52	; 0x34
 8016f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f2c:	f1bc 0f0f 	cmp.w	ip, #15
 8016f30:	f63f af60 	bhi.w	8016df4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8016f34:	4626      	mov	r6, r4
 8016f36:	4602      	mov	r2, r0
 8016f38:	460d      	mov	r5, r1
 8016f3a:	46a6      	mov	lr, r4
 8016f3c:	9002      	str	r0, [sp, #8]
 8016f3e:	4688      	mov	r8, r1
 8016f40:	e783      	b.n	8016e4a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8016f42:	bf00      	nop
 8016f44:	0801e734 	.word	0x0801e734
 8016f48:	0801eb4a 	.word	0x0801eb4a
 8016f4c:	0801e701 	.word	0x0801e701

08016f50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f54:	ed2d 8b08 	vpush	{d8-d11}
 8016f58:	b09f      	sub	sp, #124	; 0x7c
 8016f5a:	eeb0 aa40 	vmov.f32	s20, s0
 8016f5e:	eef0 9a60 	vmov.f32	s19, s1
 8016f62:	920e      	str	r2, [sp, #56]	; 0x38
 8016f64:	eeb0 9a41 	vmov.f32	s18, s2
 8016f68:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8016f6a:	eeb0 8a62 	vmov.f32	s16, s5
 8016f6e:	9307      	str	r3, [sp, #28]
 8016f70:	eef0 8a43 	vmov.f32	s17, s6
 8016f74:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8016f78:	eef0 ba44 	vmov.f32	s23, s8
 8016f7c:	901d      	str	r0, [sp, #116]	; 0x74
 8016f7e:	eeb0 ba64 	vmov.f32	s22, s9
 8016f82:	930c      	str	r3, [sp, #48]	; 0x30
 8016f84:	eef0 aa45 	vmov.f32	s21, s10
 8016f88:	6850      	ldr	r0, [r2, #4]
 8016f8a:	910b      	str	r1, [sp, #44]	; 0x2c
 8016f8c:	6812      	ldr	r2, [r2, #0]
 8016f8e:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8016f92:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8016f96:	fb00 1303 	mla	r3, r0, r3, r1
 8016f9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f9e:	18d3      	adds	r3, r2, r3
 8016fa0:	9308      	str	r3, [sp, #32]
 8016fa2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8016fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016faa:	43db      	mvns	r3, r3
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	9309      	str	r3, [sp, #36]	; 0x24
 8016fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	dc03      	bgt.n	8016fbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	f340 81f5 	ble.w	80173a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8016fbe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016fc0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016fc4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016fc8:	1e48      	subs	r0, r1, #1
 8016fca:	1e54      	subs	r4, r2, #1
 8016fcc:	9b07      	ldr	r3, [sp, #28]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	f340 80d5 	ble.w	801717e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8016fd4:	ea5f 452a 	movs.w	r5, sl, asr #16
 8016fd8:	ea4f 4328 	mov.w	r3, r8, asr #16
 8016fdc:	d406      	bmi.n	8016fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016fde:	4285      	cmp	r5, r0
 8016fe0:	da04      	bge.n	8016fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	db02      	blt.n	8016fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016fe6:	42a3      	cmp	r3, r4
 8016fe8:	f2c0 80ca 	blt.w	8017180 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8016fec:	3501      	adds	r5, #1
 8016fee:	f100 80bb 	bmi.w	8017168 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8016ff2:	42a9      	cmp	r1, r5
 8016ff4:	f2c0 80b8 	blt.w	8017168 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	f100 80b5 	bmi.w	8017168 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8016ffe:	429a      	cmp	r2, r3
 8017000:	f2c0 80b2 	blt.w	8017168 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8017004:	9b07      	ldr	r3, [sp, #28]
 8017006:	9d08      	ldr	r5, [sp, #32]
 8017008:	930d      	str	r3, [sp, #52]	; 0x34
 801700a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801700c:	2b00      	cmp	r3, #0
 801700e:	f340 80d6 	ble.w	80171be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8017012:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8017014:	ea4f 4428 	mov.w	r4, r8, asr #16
 8017018:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801701a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801701e:	68c6      	ldr	r6, [r0, #12]
 8017020:	ea5f 402a 	movs.w	r0, sl, asr #16
 8017024:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8017028:	689b      	ldr	r3, [r3, #8]
 801702a:	f100 810f 	bmi.w	801724c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801702e:	1e5f      	subs	r7, r3, #1
 8017030:	42b8      	cmp	r0, r7
 8017032:	f280 810b 	bge.w	801724c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8017036:	2c00      	cmp	r4, #0
 8017038:	f2c0 8108 	blt.w	801724c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801703c:	1e77      	subs	r7, r6, #1
 801703e:	42bc      	cmp	r4, r7
 8017040:	f280 8104 	bge.w	801724c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8017044:	b21b      	sxth	r3, r3
 8017046:	fb04 0003 	mla	r0, r4, r3, r0
 801704a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801704c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017050:	1826      	adds	r6, r4, r0
 8017052:	5c24      	ldrb	r4, [r4, r0]
 8017054:	78b7      	ldrb	r7, [r6, #2]
 8017056:	7870      	ldrb	r0, [r6, #1]
 8017058:	970f      	str	r7, [sp, #60]	; 0x3c
 801705a:	7977      	ldrb	r7, [r6, #5]
 801705c:	f896 e003 	ldrb.w	lr, [r6, #3]
 8017060:	f896 c004 	ldrb.w	ip, [r6, #4]
 8017064:	9710      	str	r7, [sp, #64]	; 0x40
 8017066:	b1c9      	cbz	r1, 801709c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017068:	f04f 0b03 	mov.w	fp, #3
 801706c:	f06f 0904 	mvn.w	r9, #4
 8017070:	3605      	adds	r6, #5
 8017072:	fb13 930b 	smlabb	r3, r3, fp, r9
 8017076:	eb06 0b03 	add.w	fp, r6, r3
 801707a:	5cf3      	ldrb	r3, [r6, r3]
 801707c:	9311      	str	r3, [sp, #68]	; 0x44
 801707e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8017082:	9313      	str	r3, [sp, #76]	; 0x4c
 8017084:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8017088:	9315      	str	r3, [sp, #84]	; 0x54
 801708a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801708e:	9312      	str	r3, [sp, #72]	; 0x48
 8017090:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8017094:	9314      	str	r3, [sp, #80]	; 0x50
 8017096:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801709a:	9316      	str	r3, [sp, #88]	; 0x58
 801709c:	b292      	uxth	r2, r2
 801709e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80170a0:	b289      	uxth	r1, r1
 80170a2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80170a6:	fb02 f601 	mul.w	r6, r2, r1
 80170aa:	0112      	lsls	r2, r2, #4
 80170ac:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80170b0:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80170b4:	1b92      	subs	r2, r2, r6
 80170b6:	b289      	uxth	r1, r1
 80170b8:	b292      	uxth	r2, r2
 80170ba:	eba9 0901 	sub.w	r9, r9, r1
 80170be:	fb02 fe0e 	mul.w	lr, r2, lr
 80170c2:	fa1f f989 	uxth.w	r9, r9
 80170c6:	fb02 fc0c 	mul.w	ip, r2, ip
 80170ca:	fb09 e404 	mla	r4, r9, r4, lr
 80170ce:	f895 e000 	ldrb.w	lr, [r5]
 80170d2:	fb09 c000 	mla	r0, r9, r0, ip
 80170d6:	fb01 4407 	mla	r4, r1, r7, r4
 80170da:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80170dc:	fb06 4407 	mla	r4, r6, r7, r4
 80170e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80170e2:	fb1e fe07 	smulbb	lr, lr, r7
 80170e6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80170ea:	fb04 e403 	mla	r4, r4, r3, lr
 80170ee:	b2a4      	uxth	r4, r4
 80170f0:	f104 0e01 	add.w	lr, r4, #1
 80170f4:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80170f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80170fa:	fb01 0004 	mla	r0, r1, r4, r0
 80170fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017100:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017104:	fb06 0004 	mla	r0, r6, r4, r0
 8017108:	786c      	ldrb	r4, [r5, #1]
 801710a:	f885 e000 	strb.w	lr, [r5]
 801710e:	fb14 f407 	smulbb	r4, r4, r7
 8017112:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017116:	fb00 4003 	mla	r0, r0, r3, r4
 801711a:	b280      	uxth	r0, r0
 801711c:	1c44      	adds	r4, r0, #1
 801711e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8017122:	1200      	asrs	r0, r0, #8
 8017124:	7068      	strb	r0, [r5, #1]
 8017126:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017128:	4342      	muls	r2, r0
 801712a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801712c:	fb09 2200 	mla	r2, r9, r0, r2
 8017130:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017132:	fb01 2100 	mla	r1, r1, r0, r2
 8017136:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017138:	fb06 1602 	mla	r6, r6, r2, r1
 801713c:	78a9      	ldrb	r1, [r5, #2]
 801713e:	fb11 f107 	smulbb	r1, r1, r7
 8017142:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8017146:	fb06 1303 	mla	r3, r6, r3, r1
 801714a:	b29b      	uxth	r3, r3
 801714c:	1c5e      	adds	r6, r3, #1
 801714e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8017152:	121b      	asrs	r3, r3, #8
 8017154:	70ab      	strb	r3, [r5, #2]
 8017156:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017158:	3503      	adds	r5, #3
 801715a:	449a      	add	sl, r3
 801715c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801715e:	4498      	add	r8, r3
 8017160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017162:	3b01      	subs	r3, #1
 8017164:	930d      	str	r3, [sp, #52]	; 0x34
 8017166:	e750      	b.n	801700a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8017168:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801716a:	449a      	add	sl, r3
 801716c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801716e:	4498      	add	r8, r3
 8017170:	9b07      	ldr	r3, [sp, #28]
 8017172:	3b01      	subs	r3, #1
 8017174:	9307      	str	r3, [sp, #28]
 8017176:	9b08      	ldr	r3, [sp, #32]
 8017178:	3303      	adds	r3, #3
 801717a:	9308      	str	r3, [sp, #32]
 801717c:	e726      	b.n	8016fcc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801717e:	d026      	beq.n	80171ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017180:	9b07      	ldr	r3, [sp, #28]
 8017182:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8017184:	3b01      	subs	r3, #1
 8017186:	fb00 a003 	mla	r0, r0, r3, sl
 801718a:	1400      	asrs	r0, r0, #16
 801718c:	f53f af3a 	bmi.w	8017004 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8017190:	3901      	subs	r1, #1
 8017192:	4288      	cmp	r0, r1
 8017194:	f6bf af36 	bge.w	8017004 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8017198:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801719a:	fb01 8303 	mla	r3, r1, r3, r8
 801719e:	141b      	asrs	r3, r3, #16
 80171a0:	f53f af30 	bmi.w	8017004 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80171a4:	3a01      	subs	r2, #1
 80171a6:	4293      	cmp	r3, r2
 80171a8:	f6bf af2c 	bge.w	8017004 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80171ac:	9b08      	ldr	r3, [sp, #32]
 80171ae:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80171b2:	1cdd      	adds	r5, r3, #3
 80171b4:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80171b8:	f1bc 0f00 	cmp.w	ip, #0
 80171bc:	dc5f      	bgt.n	801727e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80171be:	9b07      	ldr	r3, [sp, #28]
 80171c0:	9a08      	ldr	r2, [sp, #32]
 80171c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80171c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80171ca:	441a      	add	r2, r3
 80171cc:	9208      	str	r2, [sp, #32]
 80171ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	f340 80e9 	ble.w	80173a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80171d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80171da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80171dc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80171e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80171e4:	eef0 6a48 	vmov.f32	s13, s16
 80171e8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80171ec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80171f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80171f4:	ee16 aa90 	vmov	sl, s13
 80171f8:	eef0 6a68 	vmov.f32	s13, s17
 80171fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017200:	ee16 8a90 	vmov	r8, s13
 8017204:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017208:	ee69 7a27 	vmul.f32	s15, s18, s15
 801720c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017210:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017214:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017218:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801721c:	ee18 2a10 	vmov	r2, s16
 8017220:	eeb0 8a47 	vmov.f32	s16, s14
 8017224:	fb92 f3f3 	sdiv	r3, r2, r3
 8017228:	ee18 2a90 	vmov	r2, s17
 801722c:	9333      	str	r3, [sp, #204]	; 0xcc
 801722e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017230:	eef0 8a67 	vmov.f32	s17, s15
 8017234:	fb92 f3f3 	sdiv	r3, r2, r3
 8017238:	9334      	str	r3, [sp, #208]	; 0xd0
 801723a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801723c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801723e:	3b01      	subs	r3, #1
 8017240:	930b      	str	r3, [sp, #44]	; 0x2c
 8017242:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017244:	bf08      	it	eq
 8017246:	4613      	moveq	r3, r2
 8017248:	9307      	str	r3, [sp, #28]
 801724a:	e6b1      	b.n	8016fb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801724c:	1c47      	adds	r7, r0, #1
 801724e:	d482      	bmi.n	8017156 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017250:	42bb      	cmp	r3, r7
 8017252:	db80      	blt.n	8017156 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017254:	1c67      	adds	r7, r4, #1
 8017256:	f53f af7e 	bmi.w	8017156 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801725a:	42be      	cmp	r6, r7
 801725c:	f6ff af7b 	blt.w	8017156 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017260:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017262:	b236      	sxth	r6, r6
 8017264:	9001      	str	r0, [sp, #4]
 8017266:	b21b      	sxth	r3, r3
 8017268:	9600      	str	r6, [sp, #0]
 801726a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801726c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8017270:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8017274:	4629      	mov	r1, r5
 8017276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017278:	f7ff fd58 	bl	8016d2c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801727c:	e76b      	b.n	8017156 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801727e:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8017280:	ea4f 402a 	mov.w	r0, sl, asr #16
 8017284:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8017288:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801728c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8017290:	ea4f 4128 	mov.w	r1, r8, asr #16
 8017294:	fb07 0101 	mla	r1, r7, r1, r0
 8017298:	980a      	ldr	r0, [sp, #40]	; 0x28
 801729a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801729e:	1844      	adds	r4, r0, r1
 80172a0:	5c40      	ldrb	r0, [r0, r1]
 80172a2:	78a6      	ldrb	r6, [r4, #2]
 80172a4:	7861      	ldrb	r1, [r4, #1]
 80172a6:	960f      	str	r6, [sp, #60]	; 0x3c
 80172a8:	78e6      	ldrb	r6, [r4, #3]
 80172aa:	910d      	str	r1, [sp, #52]	; 0x34
 80172ac:	9610      	str	r6, [sp, #64]	; 0x40
 80172ae:	f894 9004 	ldrb.w	r9, [r4, #4]
 80172b2:	f894 b005 	ldrb.w	fp, [r4, #5]
 80172b6:	b192      	cbz	r2, 80172de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80172b8:	f06f 0604 	mvn.w	r6, #4
 80172bc:	2103      	movs	r1, #3
 80172be:	3405      	adds	r4, #5
 80172c0:	fb17 6701 	smlabb	r7, r7, r1, r6
 80172c4:	19e6      	adds	r6, r4, r7
 80172c6:	5de4      	ldrb	r4, [r4, r7]
 80172c8:	9417      	str	r4, [sp, #92]	; 0x5c
 80172ca:	7874      	ldrb	r4, [r6, #1]
 80172cc:	9419      	str	r4, [sp, #100]	; 0x64
 80172ce:	78b4      	ldrb	r4, [r6, #2]
 80172d0:	941b      	str	r4, [sp, #108]	; 0x6c
 80172d2:	78f4      	ldrb	r4, [r6, #3]
 80172d4:	9418      	str	r4, [sp, #96]	; 0x60
 80172d6:	7934      	ldrb	r4, [r6, #4]
 80172d8:	941a      	str	r4, [sp, #104]	; 0x68
 80172da:	7974      	ldrb	r4, [r6, #5]
 80172dc:	941c      	str	r4, [sp, #112]	; 0x70
 80172de:	b29b      	uxth	r3, r3
 80172e0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80172e2:	b292      	uxth	r2, r2
 80172e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80172e6:	3503      	adds	r5, #3
 80172e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80172ec:	fb03 f402 	mul.w	r4, r3, r2
 80172f0:	011b      	lsls	r3, r3, #4
 80172f2:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80172f6:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80172fa:	1b1b      	subs	r3, r3, r4
 80172fc:	b292      	uxth	r2, r2
 80172fe:	b29b      	uxth	r3, r3
 8017300:	1ab6      	subs	r6, r6, r2
 8017302:	435f      	muls	r7, r3
 8017304:	b2b6      	uxth	r6, r6
 8017306:	fb03 f909 	mul.w	r9, r3, r9
 801730a:	fb03 fb0b 	mul.w	fp, r3, fp
 801730e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017310:	fb06 7000 	mla	r0, r6, r0, r7
 8017314:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8017316:	fb06 bb03 	mla	fp, r6, r3, fp
 801731a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801731c:	fb02 0007 	mla	r0, r2, r7, r0
 8017320:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8017322:	fb02 bb03 	mla	fp, r2, r3, fp
 8017326:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017328:	fb04 0007 	mla	r0, r4, r7, r0
 801732c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8017330:	fb17 f701 	smulbb	r7, r7, r1
 8017334:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017338:	990d      	ldr	r1, [sp, #52]	; 0x34
 801733a:	fb00 700e 	mla	r0, r0, lr, r7
 801733e:	fb06 9101 	mla	r1, r6, r1, r9
 8017342:	b280      	uxth	r0, r0
 8017344:	1c47      	adds	r7, r0, #1
 8017346:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801734a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801734c:	1200      	asrs	r0, r0, #8
 801734e:	f805 0c06 	strb.w	r0, [r5, #-6]
 8017352:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017354:	fb02 1100 	mla	r1, r2, r0, r1
 8017358:	981a      	ldr	r0, [sp, #104]	; 0x68
 801735a:	fb04 1100 	mla	r1, r4, r0, r1
 801735e:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8017362:	fb04 b403 	mla	r4, r4, r3, fp
 8017366:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801736a:	fb10 f007 	smulbb	r0, r0, r7
 801736e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017372:	fb13 f307 	smulbb	r3, r3, r7
 8017376:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801737a:	fb01 010e 	mla	r1, r1, lr, r0
 801737e:	fb04 340e 	mla	r4, r4, lr, r3
 8017382:	b289      	uxth	r1, r1
 8017384:	b2a4      	uxth	r4, r4
 8017386:	1c48      	adds	r0, r1, #1
 8017388:	1c63      	adds	r3, r4, #1
 801738a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801738e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8017392:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017394:	1209      	asrs	r1, r1, #8
 8017396:	1224      	asrs	r4, r4, #8
 8017398:	449a      	add	sl, r3
 801739a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801739c:	f805 1c05 	strb.w	r1, [r5, #-5]
 80173a0:	f805 4c04 	strb.w	r4, [r5, #-4]
 80173a4:	4498      	add	r8, r3
 80173a6:	e707      	b.n	80171b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80173a8:	b01f      	add	sp, #124	; 0x7c
 80173aa:	ecbd 8b08 	vpop	{d8-d11}
 80173ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080173b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80173b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b8:	b085      	sub	sp, #20
 80173ba:	784d      	ldrb	r5, [r1, #1]
 80173bc:	788e      	ldrb	r6, [r1, #2]
 80173be:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80173c2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80173c6:	9403      	str	r4, [sp, #12]
 80173c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80173cc:	780c      	ldrb	r4, [r1, #0]
 80173ce:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80173d2:	fb07 ce03 	mla	lr, r7, r3, ip
 80173d6:	2f00      	cmp	r7, #0
 80173d8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80173dc:	eb02 0b0e 	add.w	fp, r2, lr
 80173e0:	db56      	blt.n	8017490 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80173e2:	45b9      	cmp	r9, r7
 80173e4:	dd54      	ble.n	8017490 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80173e6:	f1bc 0f00 	cmp.w	ip, #0
 80173ea:	db4d      	blt.n	8017488 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80173ec:	4563      	cmp	r3, ip
 80173ee:	dd4b      	ble.n	8017488 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80173f0:	f812 200e 	ldrb.w	r2, [r2, lr]
 80173f4:	9200      	str	r2, [sp, #0]
 80173f6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80173fa:	9201      	str	r2, [sp, #4]
 80173fc:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8017400:	9202      	str	r2, [sp, #8]
 8017402:	f11c 0201 	adds.w	r2, ip, #1
 8017406:	d44a      	bmi.n	801749e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8017408:	4293      	cmp	r3, r2
 801740a:	dd48      	ble.n	801749e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801740c:	2800      	cmp	r0, #0
 801740e:	d046      	beq.n	801749e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8017410:	f89b e003 	ldrb.w	lr, [fp, #3]
 8017414:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8017418:	f89b a005 	ldrb.w	sl, [fp, #5]
 801741c:	3701      	adds	r7, #1
 801741e:	d446      	bmi.n	80174ae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8017420:	45b9      	cmp	r9, r7
 8017422:	dd44      	ble.n	80174ae <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8017424:	9a03      	ldr	r2, [sp, #12]
 8017426:	2a00      	cmp	r2, #0
 8017428:	d045      	beq.n	80174b6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801742a:	f1bc 0f00 	cmp.w	ip, #0
 801742e:	db3a      	blt.n	80174a6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8017430:	4563      	cmp	r3, ip
 8017432:	dd38      	ble.n	80174a6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8017434:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017438:	f04f 0903 	mov.w	r9, #3
 801743c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8017440:	fb03 b209 	mla	r2, r3, r9, fp
 8017444:	fb03 b909 	mla	r9, r3, r9, fp
 8017448:	7852      	ldrb	r2, [r2, #1]
 801744a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801744e:	f11c 0c01 	adds.w	ip, ip, #1
 8017452:	d40d      	bmi.n	8017470 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8017454:	4563      	cmp	r3, ip
 8017456:	dd0b      	ble.n	8017470 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8017458:	b160      	cbz	r0, 8017474 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801745a:	2603      	movs	r6, #3
 801745c:	fb13 6406 	smlabb	r4, r3, r6, r6
 8017460:	fb03 b506 	mla	r5, r3, r6, fp
 8017464:	fb03 b306 	mla	r3, r3, r6, fp
 8017468:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801746c:	792d      	ldrb	r5, [r5, #4]
 801746e:	795e      	ldrb	r6, [r3, #5]
 8017470:	280f      	cmp	r0, #15
 8017472:	d802      	bhi.n	801747a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8017474:	9b03      	ldr	r3, [sp, #12]
 8017476:	2b0f      	cmp	r3, #15
 8017478:	d922      	bls.n	80174c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801747a:	4b2f      	ldr	r3, [pc, #188]	; (8017538 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801747c:	f240 115b 	movw	r1, #347	; 0x15b
 8017480:	4a2e      	ldr	r2, [pc, #184]	; (801753c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8017482:	482f      	ldr	r0, [pc, #188]	; (8017540 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8017484:	f002 fc1e 	bl	8019cc4 <__assert_func>
 8017488:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801748c:	9400      	str	r4, [sp, #0]
 801748e:	e7b8      	b.n	8017402 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8017490:	46b2      	mov	sl, r6
 8017492:	46a8      	mov	r8, r5
 8017494:	46a6      	mov	lr, r4
 8017496:	9400      	str	r4, [sp, #0]
 8017498:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801749c:	e7be      	b.n	801741c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801749e:	46b2      	mov	sl, r6
 80174a0:	46a8      	mov	r8, r5
 80174a2:	46a6      	mov	lr, r4
 80174a4:	e7ba      	b.n	801741c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80174a6:	46b1      	mov	r9, r6
 80174a8:	462a      	mov	r2, r5
 80174aa:	4627      	mov	r7, r4
 80174ac:	e7cf      	b.n	801744e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80174ae:	46b1      	mov	r9, r6
 80174b0:	462a      	mov	r2, r5
 80174b2:	4627      	mov	r7, r4
 80174b4:	e7dc      	b.n	8017470 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80174b6:	280f      	cmp	r0, #15
 80174b8:	d8df      	bhi.n	801747a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80174ba:	46b1      	mov	r9, r6
 80174bc:	462a      	mov	r2, r5
 80174be:	4627      	mov	r7, r4
 80174c0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80174c4:	b280      	uxth	r0, r0
 80174c6:	fb00 f30b 	mul.w	r3, r0, fp
 80174ca:	0100      	lsls	r0, r0, #4
 80174cc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80174d0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80174d4:	1ac0      	subs	r0, r0, r3
 80174d6:	fa1f fb8b 	uxth.w	fp, fp
 80174da:	b280      	uxth	r0, r0
 80174dc:	ebac 0c0b 	sub.w	ip, ip, fp
 80174e0:	9003      	str	r0, [sp, #12]
 80174e2:	fa1f fc8c 	uxth.w	ip, ip
 80174e6:	fb00 fe0e 	mul.w	lr, r0, lr
 80174ea:	9800      	ldr	r0, [sp, #0]
 80174ec:	fb0c ee00 	mla	lr, ip, r0, lr
 80174f0:	9803      	ldr	r0, [sp, #12]
 80174f2:	fb00 f808 	mul.w	r8, r0, r8
 80174f6:	9801      	ldr	r0, [sp, #4]
 80174f8:	fb0b ee07 	mla	lr, fp, r7, lr
 80174fc:	fb0c 8800 	mla	r8, ip, r0, r8
 8017500:	fb03 ee04 	mla	lr, r3, r4, lr
 8017504:	fb0b 8202 	mla	r2, fp, r2, r8
 8017508:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801750c:	fb03 2505 	mla	r5, r3, r5, r2
 8017510:	9a03      	ldr	r2, [sp, #12]
 8017512:	f881 e000 	strb.w	lr, [r1]
 8017516:	fb02 f00a 	mul.w	r0, r2, sl
 801751a:	9a02      	ldr	r2, [sp, #8]
 801751c:	122d      	asrs	r5, r5, #8
 801751e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8017522:	704d      	strb	r5, [r1, #1]
 8017524:	fb0b c909 	mla	r9, fp, r9, ip
 8017528:	fb03 9606 	mla	r6, r3, r6, r9
 801752c:	1236      	asrs	r6, r6, #8
 801752e:	708e      	strb	r6, [r1, #2]
 8017530:	b005      	add	sp, #20
 8017532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017536:	bf00      	nop
 8017538:	0801e734 	.word	0x0801e734
 801753c:	0801eb4a 	.word	0x0801eb4a
 8017540:	0801e701 	.word	0x0801e701

08017544 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017548:	ed2d 8b08 	vpush	{d8-d11}
 801754c:	b09b      	sub	sp, #108	; 0x6c
 801754e:	eeb0 aa40 	vmov.f32	s20, s0
 8017552:	eef0 9a60 	vmov.f32	s19, s1
 8017556:	920b      	str	r2, [sp, #44]	; 0x2c
 8017558:	eeb0 9a41 	vmov.f32	s18, s2
 801755c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801755e:	eeb0 8a62 	vmov.f32	s16, s5
 8017562:	9019      	str	r0, [sp, #100]	; 0x64
 8017564:	eef0 8a43 	vmov.f32	s17, s6
 8017568:	6850      	ldr	r0, [r2, #4]
 801756a:	eef0 ba44 	vmov.f32	s23, s8
 801756e:	9109      	str	r1, [sp, #36]	; 0x24
 8017570:	eeb0 ba64 	vmov.f32	s22, s9
 8017574:	9306      	str	r3, [sp, #24]
 8017576:	eef0 aa45 	vmov.f32	s21, s10
 801757a:	6812      	ldr	r2, [r2, #0]
 801757c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8017580:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8017584:	fb00 1303 	mla	r3, r0, r3, r1
 8017588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801758c:	18d3      	adds	r3, r2, r3
 801758e:	9307      	str	r3, [sp, #28]
 8017590:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	9308      	str	r3, [sp, #32]
 8017596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017598:	2b00      	cmp	r3, #0
 801759a:	dc03      	bgt.n	80175a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801759c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801759e:	2b00      	cmp	r3, #0
 80175a0:	f340 81ab 	ble.w	80178fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80175a4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80175a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80175aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80175ae:	1e48      	subs	r0, r1, #1
 80175b0:	1e55      	subs	r5, r2, #1
 80175b2:	9b06      	ldr	r3, [sp, #24]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f340 80b1 	ble.w	801771c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80175ba:	ea5f 462b 	movs.w	r6, fp, asr #16
 80175be:	ea4f 4324 	mov.w	r3, r4, asr #16
 80175c2:	d406      	bmi.n	80175d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80175c4:	4286      	cmp	r6, r0
 80175c6:	da04      	bge.n	80175d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	db02      	blt.n	80175d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80175cc:	42ab      	cmp	r3, r5
 80175ce:	f2c0 80a6 	blt.w	801771e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80175d2:	3601      	adds	r6, #1
 80175d4:	f100 8097 	bmi.w	8017706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80175d8:	42b1      	cmp	r1, r6
 80175da:	f2c0 8094 	blt.w	8017706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80175de:	3301      	adds	r3, #1
 80175e0:	f100 8091 	bmi.w	8017706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80175e4:	429a      	cmp	r2, r3
 80175e6:	f2c0 808e 	blt.w	8017706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80175ea:	9b06      	ldr	r3, [sp, #24]
 80175ec:	9e07      	ldr	r6, [sp, #28]
 80175ee:	930a      	str	r3, [sp, #40]	; 0x28
 80175f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	f340 80b0 	ble.w	8017758 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80175f8:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80175fa:	1425      	asrs	r5, r4, #16
 80175fc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80175fe:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8017602:	68c7      	ldr	r7, [r0, #12]
 8017604:	ea5f 402b 	movs.w	r0, fp, asr #16
 8017608:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801760c:	689b      	ldr	r3, [r3, #8]
 801760e:	f100 80ea 	bmi.w	80177e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017612:	f103 3cff 	add.w	ip, r3, #4294967295
 8017616:	4560      	cmp	r0, ip
 8017618:	f280 80e5 	bge.w	80177e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801761c:	2d00      	cmp	r5, #0
 801761e:	f2c0 80e2 	blt.w	80177e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017622:	f107 3cff 	add.w	ip, r7, #4294967295
 8017626:	4565      	cmp	r5, ip
 8017628:	f280 80dd 	bge.w	80177e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801762c:	b21b      	sxth	r3, r3
 801762e:	fb05 0003 	mla	r0, r5, r3, r0
 8017632:	9d08      	ldr	r5, [sp, #32]
 8017634:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017638:	182f      	adds	r7, r5, r0
 801763a:	5c2d      	ldrb	r5, [r5, r0]
 801763c:	7878      	ldrb	r0, [r7, #1]
 801763e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8017642:	900c      	str	r0, [sp, #48]	; 0x30
 8017644:	f897 9003 	ldrb.w	r9, [r7, #3]
 8017648:	f897 8004 	ldrb.w	r8, [r7, #4]
 801764c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8017650:	b1c9      	cbz	r1, 8017686 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017652:	f04f 0c03 	mov.w	ip, #3
 8017656:	f06f 0004 	mvn.w	r0, #4
 801765a:	3705      	adds	r7, #5
 801765c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8017660:	eb07 0c03 	add.w	ip, r7, r3
 8017664:	5cfb      	ldrb	r3, [r7, r3]
 8017666:	930d      	str	r3, [sp, #52]	; 0x34
 8017668:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801766c:	930f      	str	r3, [sp, #60]	; 0x3c
 801766e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8017672:	9311      	str	r3, [sp, #68]	; 0x44
 8017674:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8017678:	930e      	str	r3, [sp, #56]	; 0x38
 801767a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801767e:	9310      	str	r3, [sp, #64]	; 0x40
 8017680:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8017684:	9312      	str	r3, [sp, #72]	; 0x48
 8017686:	b292      	uxth	r2, r2
 8017688:	980c      	ldr	r0, [sp, #48]	; 0x30
 801768a:	b289      	uxth	r1, r1
 801768c:	fb02 f301 	mul.w	r3, r2, r1
 8017690:	0112      	lsls	r2, r2, #4
 8017692:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8017696:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801769a:	1ad2      	subs	r2, r2, r3
 801769c:	b289      	uxth	r1, r1
 801769e:	b292      	uxth	r2, r2
 80176a0:	1a7f      	subs	r7, r7, r1
 80176a2:	fb02 f909 	mul.w	r9, r2, r9
 80176a6:	b2bf      	uxth	r7, r7
 80176a8:	fb02 f808 	mul.w	r8, r2, r8
 80176ac:	fb02 fa0a 	mul.w	sl, r2, sl
 80176b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80176b2:	fb07 9905 	mla	r9, r7, r5, r9
 80176b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80176b8:	fb07 8800 	mla	r8, r7, r0, r8
 80176bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80176be:	fb07 aa0e 	mla	sl, r7, lr, sl
 80176c2:	fb01 9905 	mla	r9, r1, r5, r9
 80176c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80176c8:	fb01 8800 	mla	r8, r1, r0, r8
 80176cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80176ce:	fb01 a102 	mla	r1, r1, r2, sl
 80176d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176d4:	fb03 9905 	mla	r9, r3, r5, r9
 80176d8:	fb03 8800 	mla	r8, r3, r0, r8
 80176dc:	fb03 1302 	mla	r3, r3, r2, r1
 80176e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80176e4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80176e8:	121b      	asrs	r3, r3, #8
 80176ea:	f886 9000 	strb.w	r9, [r6]
 80176ee:	f886 8001 	strb.w	r8, [r6, #1]
 80176f2:	70b3      	strb	r3, [r6, #2]
 80176f4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80176f6:	3603      	adds	r6, #3
 80176f8:	449b      	add	fp, r3
 80176fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80176fc:	441c      	add	r4, r3
 80176fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017700:	3b01      	subs	r3, #1
 8017702:	930a      	str	r3, [sp, #40]	; 0x28
 8017704:	e774      	b.n	80175f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8017706:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8017708:	449b      	add	fp, r3
 801770a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801770c:	441c      	add	r4, r3
 801770e:	9b06      	ldr	r3, [sp, #24]
 8017710:	3b01      	subs	r3, #1
 8017712:	9306      	str	r3, [sp, #24]
 8017714:	9b07      	ldr	r3, [sp, #28]
 8017716:	3303      	adds	r3, #3
 8017718:	9307      	str	r3, [sp, #28]
 801771a:	e74a      	b.n	80175b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801771c:	d024      	beq.n	8017768 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801771e:	9b06      	ldr	r3, [sp, #24]
 8017720:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8017722:	3b01      	subs	r3, #1
 8017724:	fb00 b003 	mla	r0, r0, r3, fp
 8017728:	1400      	asrs	r0, r0, #16
 801772a:	f53f af5e 	bmi.w	80175ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801772e:	3901      	subs	r1, #1
 8017730:	4288      	cmp	r0, r1
 8017732:	f6bf af5a 	bge.w	80175ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017736:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8017738:	fb01 4303 	mla	r3, r1, r3, r4
 801773c:	141b      	asrs	r3, r3, #16
 801773e:	f53f af54 	bmi.w	80175ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017742:	3a01      	subs	r2, #1
 8017744:	4293      	cmp	r3, r2
 8017746:	f6bf af50 	bge.w	80175ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801774a:	9b07      	ldr	r3, [sp, #28]
 801774c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8017750:	1cde      	adds	r6, r3, #3
 8017752:	f1be 0f00 	cmp.w	lr, #0
 8017756:	dc5f      	bgt.n	8017818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8017758:	9b06      	ldr	r3, [sp, #24]
 801775a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801775e:	9b07      	ldr	r3, [sp, #28]
 8017760:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017764:	4423      	add	r3, r4
 8017766:	9307      	str	r3, [sp, #28]
 8017768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801776a:	2b00      	cmp	r3, #0
 801776c:	f340 80c5 	ble.w	80178fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8017770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017774:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017776:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801777a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801777e:	eef0 6a48 	vmov.f32	s13, s16
 8017782:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017786:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801778a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801778e:	ee16 ba90 	vmov	fp, s13
 8017792:	eef0 6a68 	vmov.f32	s13, s17
 8017796:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801779a:	ee16 4a90 	vmov	r4, s13
 801779e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80177a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80177a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80177aa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80177ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80177b2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80177b6:	ee18 2a10 	vmov	r2, s16
 80177ba:	eeb0 8a47 	vmov.f32	s16, s14
 80177be:	fb92 f3f3 	sdiv	r3, r2, r3
 80177c2:	ee18 2a90 	vmov	r2, s17
 80177c6:	932f      	str	r3, [sp, #188]	; 0xbc
 80177c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80177ca:	eef0 8a67 	vmov.f32	s17, s15
 80177ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80177d2:	9330      	str	r3, [sp, #192]	; 0xc0
 80177d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80177d8:	3b01      	subs	r3, #1
 80177da:	9309      	str	r3, [sp, #36]	; 0x24
 80177dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80177de:	bf08      	it	eq
 80177e0:	4613      	moveq	r3, r2
 80177e2:	9306      	str	r3, [sp, #24]
 80177e4:	e6d7      	b.n	8017596 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80177e6:	f110 0c01 	adds.w	ip, r0, #1
 80177ea:	d483      	bmi.n	80176f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80177ec:	4563      	cmp	r3, ip
 80177ee:	db81      	blt.n	80176f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80177f0:	f115 0c01 	adds.w	ip, r5, #1
 80177f4:	f53f af7e 	bmi.w	80176f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80177f8:	4567      	cmp	r7, ip
 80177fa:	f6ff af7b 	blt.w	80176f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80177fe:	b23f      	sxth	r7, r7
 8017800:	b21b      	sxth	r3, r3
 8017802:	9700      	str	r7, [sp, #0]
 8017804:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8017808:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801780c:	9a08      	ldr	r2, [sp, #32]
 801780e:	4631      	mov	r1, r6
 8017810:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017812:	f7ff fdcf 	bl	80173b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8017816:	e76d      	b.n	80176f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8017818:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801781a:	ea4f 402b 	mov.w	r0, fp, asr #16
 801781e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8017822:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8017826:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801782a:	1421      	asrs	r1, r4, #16
 801782c:	930a      	str	r3, [sp, #40]	; 0x28
 801782e:	fb0c 0101 	mla	r1, ip, r1, r0
 8017832:	9808      	ldr	r0, [sp, #32]
 8017834:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017838:	1845      	adds	r5, r0, r1
 801783a:	5c40      	ldrb	r0, [r0, r1]
 801783c:	796f      	ldrb	r7, [r5, #5]
 801783e:	7869      	ldrb	r1, [r5, #1]
 8017840:	f895 8002 	ldrb.w	r8, [r5, #2]
 8017844:	f895 a003 	ldrb.w	sl, [r5, #3]
 8017848:	f895 9004 	ldrb.w	r9, [r5, #4]
 801784c:	970c      	str	r7, [sp, #48]	; 0x30
 801784e:	b1a2      	cbz	r2, 801787a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8017850:	2703      	movs	r7, #3
 8017852:	f06f 0304 	mvn.w	r3, #4
 8017856:	3505      	adds	r5, #5
 8017858:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801785c:	eb05 070c 	add.w	r7, r5, ip
 8017860:	f815 500c 	ldrb.w	r5, [r5, ip]
 8017864:	9513      	str	r5, [sp, #76]	; 0x4c
 8017866:	787d      	ldrb	r5, [r7, #1]
 8017868:	9515      	str	r5, [sp, #84]	; 0x54
 801786a:	78bd      	ldrb	r5, [r7, #2]
 801786c:	9517      	str	r5, [sp, #92]	; 0x5c
 801786e:	78fd      	ldrb	r5, [r7, #3]
 8017870:	9514      	str	r5, [sp, #80]	; 0x50
 8017872:	793d      	ldrb	r5, [r7, #4]
 8017874:	9516      	str	r5, [sp, #88]	; 0x58
 8017876:	797d      	ldrb	r5, [r7, #5]
 8017878:	9518      	str	r5, [sp, #96]	; 0x60
 801787a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801787e:	b292      	uxth	r2, r2
 8017880:	3603      	adds	r6, #3
 8017882:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017886:	fb03 f502 	mul.w	r5, r3, r2
 801788a:	011b      	lsls	r3, r3, #4
 801788c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8017890:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8017894:	1b5b      	subs	r3, r3, r5
 8017896:	b292      	uxth	r2, r2
 8017898:	b29b      	uxth	r3, r3
 801789a:	1abf      	subs	r7, r7, r2
 801789c:	fb03 f909 	mul.w	r9, r3, r9
 80178a0:	b2bf      	uxth	r7, r7
 80178a2:	fb03 fa0a 	mul.w	sl, r3, sl
 80178a6:	fb07 9901 	mla	r9, r7, r1, r9
 80178aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80178ac:	fb07 aa00 	mla	sl, r7, r0, sl
 80178b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80178b2:	fb02 9901 	mla	r9, r2, r1, r9
 80178b6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80178b8:	fb02 aa00 	mla	sl, r2, r0, sl
 80178bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80178be:	fb05 9901 	mla	r9, r5, r1, r9
 80178c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80178c4:	fb05 aa00 	mla	sl, r5, r0, sl
 80178c8:	434b      	muls	r3, r1
 80178ca:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80178cc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80178d0:	fb07 3308 	mla	r3, r7, r8, r3
 80178d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80178d8:	f806 ac06 	strb.w	sl, [r6, #-6]
 80178dc:	fb02 3201 	mla	r2, r2, r1, r3
 80178e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80178e2:	f806 9c05 	strb.w	r9, [r6, #-5]
 80178e6:	fb05 2503 	mla	r5, r5, r3, r2
 80178ea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80178ec:	122d      	asrs	r5, r5, #8
 80178ee:	449b      	add	fp, r3
 80178f0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80178f2:	f806 5c04 	strb.w	r5, [r6, #-4]
 80178f6:	441c      	add	r4, r3
 80178f8:	e72b      	b.n	8017752 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80178fa:	b01b      	add	sp, #108	; 0x6c
 80178fc:	ecbd 8b08 	vpop	{d8-d11}
 8017900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017904 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8017904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017908:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801790c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8017910:	fb04 5603 	mla	r6, r4, r3, r5
 8017914:	2c00      	cmp	r4, #0
 8017916:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801791a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801791e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8017922:	db36      	blt.n	8017992 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8017924:	45a6      	cmp	lr, r4
 8017926:	dd34      	ble.n	8017992 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8017928:	2d00      	cmp	r5, #0
 801792a:	db30      	blt.n	801798e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801792c:	42ab      	cmp	r3, r5
 801792e:	dd2e      	ble.n	801798e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8017930:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8017934:	1c6e      	adds	r6, r5, #1
 8017936:	d42f      	bmi.n	8017998 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8017938:	42b3      	cmp	r3, r6
 801793a:	dd2d      	ble.n	8017998 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801793c:	b370      	cbz	r0, 801799c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 801793e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8017942:	3401      	adds	r4, #1
 8017944:	d42e      	bmi.n	80179a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8017946:	45a6      	cmp	lr, r4
 8017948:	dd2c      	ble.n	80179a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801794a:	b377      	cbz	r7, 80179aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 801794c:	2d00      	cmp	r5, #0
 801794e:	db27      	blt.n	80179a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8017950:	42ab      	cmp	r3, r5
 8017952:	dd25      	ble.n	80179a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8017954:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8017958:	3501      	adds	r5, #1
 801795a:	d429      	bmi.n	80179b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801795c:	42ab      	cmp	r3, r5
 801795e:	dd27      	ble.n	80179b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8017960:	b340      	cbz	r0, 80179b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8017962:	3301      	adds	r3, #1
 8017964:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8017968:	280f      	cmp	r0, #15
 801796a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801796e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8017972:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8017976:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801797a:	d801      	bhi.n	8017980 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 801797c:	2f0f      	cmp	r7, #15
 801797e:	d91b      	bls.n	80179b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8017980:	4b89      	ldr	r3, [pc, #548]	; (8017ba8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8017982:	f240 115b 	movw	r1, #347	; 0x15b
 8017986:	4a89      	ldr	r2, [pc, #548]	; (8017bac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8017988:	4889      	ldr	r0, [pc, #548]	; (8017bb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801798a:	f002 f99b 	bl	8019cc4 <__assert_func>
 801798e:	2200      	movs	r2, #0
 8017990:	e7d0      	b.n	8017934 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8017992:	2600      	movs	r6, #0
 8017994:	4632      	mov	r2, r6
 8017996:	e7d4      	b.n	8017942 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8017998:	2600      	movs	r6, #0
 801799a:	e7d2      	b.n	8017942 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801799c:	4606      	mov	r6, r0
 801799e:	e7d0      	b.n	8017942 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80179a0:	2400      	movs	r4, #0
 80179a2:	e7d9      	b.n	8017958 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 80179a4:	2300      	movs	r3, #0
 80179a6:	461c      	mov	r4, r3
 80179a8:	e7de      	b.n	8017968 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80179aa:	463b      	mov	r3, r7
 80179ac:	463c      	mov	r4, r7
 80179ae:	e7db      	b.n	8017968 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80179b0:	2300      	movs	r3, #0
 80179b2:	e7d9      	b.n	8017968 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80179b4:	4603      	mov	r3, r0
 80179b6:	e7d7      	b.n	8017968 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80179b8:	b280      	uxth	r0, r0
 80179ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80179be:	b2bf      	uxth	r7, r7
 80179c0:	fb00 fe07 	mul.w	lr, r0, r7
 80179c4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80179c8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80179cc:	eba0 0c0e 	sub.w	ip, r0, lr
 80179d0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80179d4:	b2bf      	uxth	r7, r7
 80179d6:	fa1f fc8c 	uxth.w	ip, ip
 80179da:	eba5 0507 	sub.w	r5, r5, r7
 80179de:	fb0c f00a 	mul.w	r0, ip, sl
 80179e2:	b2ad      	uxth	r5, r5
 80179e4:	fb05 000b 	mla	r0, r5, fp, r0
 80179e8:	fb07 0009 	mla	r0, r7, r9, r0
 80179ec:	fb0e 0008 	mla	r0, lr, r8, r0
 80179f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80179f4:	9001      	str	r0, [sp, #4]
 80179f6:	d018      	beq.n	8017a2a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 80179f8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80179fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017a00:	fb0b f000 	mul.w	r0, fp, r0
 8017a04:	fb0b fb02 	mul.w	fp, fp, r2
 8017a08:	0a02      	lsrs	r2, r0, #8
 8017a0a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8017a0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017a12:	4402      	add	r2, r0
 8017a14:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8017a18:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8017a1c:	0a12      	lsrs	r2, r2, #8
 8017a1e:	0a00      	lsrs	r0, r0, #8
 8017a20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017a24:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017a28:	4302      	orrs	r2, r0
 8017a2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8017a2e:	d01a      	beq.n	8017a66 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8017a30:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8017a34:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017a38:	fb0a f000 	mul.w	r0, sl, r0
 8017a3c:	fb0a fa06 	mul.w	sl, sl, r6
 8017a40:	0a06      	lsrs	r6, r0, #8
 8017a42:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8017a46:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017a4a:	4406      	add	r6, r0
 8017a4c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8017a50:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8017a54:	0a36      	lsrs	r6, r6, #8
 8017a56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017a5a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017a5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a62:	ea46 060a 	orr.w	r6, r6, sl
 8017a66:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017a6a:	d01b      	beq.n	8017aa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8017a6c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8017a70:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017a74:	fb09 fa0a 	mul.w	sl, r9, sl
 8017a78:	fb09 f004 	mul.w	r0, r9, r4
 8017a7c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8017a80:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017a84:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8017a88:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017a8c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8017a90:	4454      	add	r4, sl
 8017a92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017a96:	0a24      	lsrs	r4, r4, #8
 8017a98:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017a9c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017aa0:	ea44 0409 	orr.w	r4, r4, r9
 8017aa4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017aa8:	d01b      	beq.n	8017ae2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8017aaa:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8017aae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017ab2:	fb08 f909 	mul.w	r9, r8, r9
 8017ab6:	fb08 f003 	mul.w	r0, r8, r3
 8017aba:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017abe:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8017ac2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8017ac6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017aca:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8017ace:	444b      	add	r3, r9
 8017ad0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017ad4:	0a1b      	lsrs	r3, r3, #8
 8017ad6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8017ada:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017ade:	ea43 0308 	orr.w	r3, r3, r8
 8017ae2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8017ae6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017aea:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8017aee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017af2:	fb0c f000 	mul.w	r0, ip, r0
 8017af6:	fb0c f606 	mul.w	r6, ip, r6
 8017afa:	fb05 0808 	mla	r8, r5, r8, r0
 8017afe:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8017b02:	fb05 6502 	mla	r5, r5, r2, r6
 8017b06:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017b0a:	fb07 8800 	mla	r8, r7, r0, r8
 8017b0e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8017b12:	fb07 5704 	mla	r7, r7, r4, r5
 8017b16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017b1a:	fb0e 8000 	mla	r0, lr, r0, r8
 8017b1e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8017b22:	9b01      	ldr	r3, [sp, #4]
 8017b24:	0a00      	lsrs	r0, r0, #8
 8017b26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017b2a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017b2e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8017b32:	ea40 0e0e 	orr.w	lr, r0, lr
 8017b36:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8017b3a:	b280      	uxth	r0, r0
 8017b3c:	fa5f f48e 	uxtb.w	r4, lr
 8017b40:	4343      	muls	r3, r0
 8017b42:	fb14 f400 	smulbb	r4, r4, r0
 8017b46:	1c5a      	adds	r2, r3, #1
 8017b48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017b4c:	780b      	ldrb	r3, [r1, #0]
 8017b4e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8017b52:	b2d2      	uxtb	r2, r2
 8017b54:	fb03 4302 	mla	r3, r3, r2, r4
 8017b58:	b29b      	uxth	r3, r3
 8017b5a:	1c5c      	adds	r4, r3, #1
 8017b5c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8017b60:	784c      	ldrb	r4, [r1, #1]
 8017b62:	fb14 f402 	smulbb	r4, r4, r2
 8017b66:	121b      	asrs	r3, r3, #8
 8017b68:	700b      	strb	r3, [r1, #0]
 8017b6a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8017b6e:	fb03 4300 	mla	r3, r3, r0, r4
 8017b72:	b29b      	uxth	r3, r3
 8017b74:	1c5c      	adds	r4, r3, #1
 8017b76:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8017b7a:	121b      	asrs	r3, r3, #8
 8017b7c:	704b      	strb	r3, [r1, #1]
 8017b7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8017b82:	f891 e002 	ldrb.w	lr, [r1, #2]
 8017b86:	fb1e fe02 	smulbb	lr, lr, r2
 8017b8a:	fb03 ee00 	mla	lr, r3, r0, lr
 8017b8e:	fa1f fe8e 	uxth.w	lr, lr
 8017b92:	f10e 0301 	add.w	r3, lr, #1
 8017b96:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8017b9a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017b9e:	f881 e002 	strb.w	lr, [r1, #2]
 8017ba2:	b003      	add	sp, #12
 8017ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba8:	0801e734 	.word	0x0801e734
 8017bac:	0801eb4a 	.word	0x0801eb4a
 8017bb0:	0801e701 	.word	0x0801e701

08017bb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb8:	ed2d 8b08 	vpush	{d8-d11}
 8017bbc:	b09d      	sub	sp, #116	; 0x74
 8017bbe:	eeb0 aa40 	vmov.f32	s20, s0
 8017bc2:	eef0 9a60 	vmov.f32	s19, s1
 8017bc6:	9219      	str	r2, [sp, #100]	; 0x64
 8017bc8:	eeb0 9a41 	vmov.f32	s18, s2
 8017bcc:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8017bce:	eeb0 8a62 	vmov.f32	s16, s5
 8017bd2:	9307      	str	r3, [sp, #28]
 8017bd4:	eef0 8a43 	vmov.f32	s17, s6
 8017bd8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8017bdc:	eef0 ba44 	vmov.f32	s23, s8
 8017be0:	901b      	str	r0, [sp, #108]	; 0x6c
 8017be2:	eeb0 ba64 	vmov.f32	s22, s9
 8017be6:	931a      	str	r3, [sp, #104]	; 0x68
 8017be8:	eef0 aa45 	vmov.f32	s21, s10
 8017bec:	6850      	ldr	r0, [r2, #4]
 8017bee:	9117      	str	r1, [sp, #92]	; 0x5c
 8017bf0:	6812      	ldr	r2, [r2, #0]
 8017bf2:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8017bf6:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8017bfa:	fb00 1303 	mla	r3, r0, r3, r1
 8017bfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c02:	18d3      	adds	r3, r2, r3
 8017c04:	930a      	str	r3, [sp, #40]	; 0x28
 8017c06:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8017c0c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8017c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	dc03      	bgt.n	8017c20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017c18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	f340 8368 	ble.w	80182f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8017c20:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017c22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017c26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017c2a:	1e48      	subs	r0, r1, #1
 8017c2c:	1e57      	subs	r7, r2, #1
 8017c2e:	9b07      	ldr	r3, [sp, #28]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	f340 8187 	ble.w	8017f44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8017c36:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8017c3a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017c3e:	d406      	bmi.n	8017c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8017c40:	4584      	cmp	ip, r0
 8017c42:	da04      	bge.n	8017c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	db02      	blt.n	8017c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8017c48:	42bb      	cmp	r3, r7
 8017c4a:	f2c0 817c 	blt.w	8017f46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8017c4e:	f11c 0c01 	adds.w	ip, ip, #1
 8017c52:	f100 816c 	bmi.w	8017f2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8017c56:	4561      	cmp	r1, ip
 8017c58:	f2c0 8169 	blt.w	8017f2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	f100 8166 	bmi.w	8017f2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8017c62:	429a      	cmp	r2, r3
 8017c64:	f2c0 8163 	blt.w	8017f2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8017c68:	9b07      	ldr	r3, [sp, #28]
 8017c6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017c6c:	9318      	str	r3, [sp, #96]	; 0x60
 8017c6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	f340 8186 	ble.w	8017f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8017c76:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017c78:	142a      	asrs	r2, r5, #16
 8017c7a:	ea4f 4026 	mov.w	r0, r6, asr #16
 8017c7e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017c82:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8017c86:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8017c8a:	f100 81cb 	bmi.w	8018024 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017c8e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8017c92:	4542      	cmp	r2, r8
 8017c94:	f280 81c6 	bge.w	8018024 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	f2c0 81c3 	blt.w	8018024 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8017ca2:	4540      	cmp	r0, r8
 8017ca4:	f280 81be 	bge.w	8018024 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017ca8:	fa0f f38e 	sxth.w	r3, lr
 8017cac:	fb00 2203 	mla	r2, r0, r3, r2
 8017cb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017cb2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8017cb6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8017cba:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8017cbe:	2900      	cmp	r1, #0
 8017cc0:	f000 81a6 	beq.w	8018010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8017cc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017cc8:	900c      	str	r0, [sp, #48]	; 0x30
 8017cca:	0e00      	lsrs	r0, r0, #24
 8017ccc:	9013      	str	r0, [sp, #76]	; 0x4c
 8017cce:	f1bc 0f00 	cmp.w	ip, #0
 8017cd2:	d00f      	beq.n	8017cf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8017cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017cd8:	3b01      	subs	r3, #1
 8017cda:	009b      	lsls	r3, r3, #2
 8017cdc:	3304      	adds	r3, #4
 8017cde:	eb08 0003 	add.w	r0, r8, r3
 8017ce2:	f858 3003 	ldr.w	r3, [r8, r3]
 8017ce6:	9308      	str	r3, [sp, #32]
 8017ce8:	0e1b      	lsrs	r3, r3, #24
 8017cea:	9311      	str	r3, [sp, #68]	; 0x44
 8017cec:	6843      	ldr	r3, [r0, #4]
 8017cee:	930d      	str	r3, [sp, #52]	; 0x34
 8017cf0:	0e1b      	lsrs	r3, r3, #24
 8017cf2:	9314      	str	r3, [sp, #80]	; 0x50
 8017cf4:	b289      	uxth	r1, r1
 8017cf6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017cf8:	fa1f fc8c 	uxth.w	ip, ip
 8017cfc:	0108      	lsls	r0, r1, #4
 8017cfe:	fb01 f90c 	mul.w	r9, r1, ip
 8017d02:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8017d06:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8017d0a:	eba0 0809 	sub.w	r8, r0, r9
 8017d0e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017d10:	fa1f f18c 	uxth.w	r1, ip
 8017d14:	fa1f f888 	uxth.w	r8, r8
 8017d18:	1a5b      	subs	r3, r3, r1
 8017d1a:	fb08 f000 	mul.w	r0, r8, r0
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	fb03 000e 	mla	r0, r3, lr, r0
 8017d24:	fb01 0004 	mla	r0, r1, r4, r0
 8017d28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017d2a:	fb09 0004 	mla	r0, r9, r4, r0
 8017d2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017d32:	2800      	cmp	r0, #0
 8017d34:	f000 80f2 	beq.w	8017f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8017d38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017d3c:	d01b      	beq.n	8017d76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8017d3e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8017d42:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017d46:	fb0e fa0a 	mul.w	sl, lr, sl
 8017d4a:	fb0e fe02 	mul.w	lr, lr, r2
 8017d4e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8017d52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017d56:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017d5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017d5e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017d62:	4452      	add	r2, sl
 8017d64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017d68:	0a12      	lsrs	r2, r2, #8
 8017d6a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017d6e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017d72:	ea42 020c 	orr.w	r2, r2, ip
 8017d76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017d78:	2cff      	cmp	r4, #255	; 0xff
 8017d7a:	d021      	beq.n	8017dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8017d7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017d7e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017d82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017d84:	fb04 fb0b 	mul.w	fp, r4, fp
 8017d88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017d8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017d8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017d90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017d94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017d98:	fb04 fa0a 	mul.w	sl, r4, sl
 8017d9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017da0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017da4:	44de      	add	lr, fp
 8017da6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017daa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017dae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017db2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017db6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017dba:	ea4e 040a 	orr.w	r4, lr, sl
 8017dbe:	940c      	str	r4, [sp, #48]	; 0x30
 8017dc0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017dc2:	2cff      	cmp	r4, #255	; 0xff
 8017dc4:	d021      	beq.n	8017e0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8017dc6:	9c08      	ldr	r4, [sp, #32]
 8017dc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017dcc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017dce:	fb04 fb0b 	mul.w	fp, r4, fp
 8017dd2:	9c08      	ldr	r4, [sp, #32]
 8017dd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017dd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017dda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017dde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017de2:	fb04 fa0a 	mul.w	sl, r4, sl
 8017de6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017dea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017dee:	44de      	add	lr, fp
 8017df0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017df4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017df8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017dfc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017e00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017e04:	ea4e 040a 	orr.w	r4, lr, sl
 8017e08:	9408      	str	r4, [sp, #32]
 8017e0a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017e0c:	2cff      	cmp	r4, #255	; 0xff
 8017e0e:	d021      	beq.n	8017e54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8017e10:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017e12:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017e16:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017e18:	fb04 fb0b 	mul.w	fp, r4, fp
 8017e1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017e1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017e22:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017e24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017e28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017e2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8017e30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017e34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017e38:	44de      	add	lr, fp
 8017e3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017e3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017e42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017e46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017e4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017e4e:	ea4e 040a 	orr.w	r4, lr, sl
 8017e52:	940d      	str	r4, [sp, #52]	; 0x34
 8017e54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017e56:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8017e5a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017e5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017e62:	9c08      	ldr	r4, [sp, #32]
 8017e64:	fb08 fc0c 	mul.w	ip, r8, ip
 8017e68:	fb03 cc0e 	mla	ip, r3, lr, ip
 8017e6c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017e70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017e72:	fb01 cc0e 	mla	ip, r1, lr, ip
 8017e76:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017e7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017e7c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017e80:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017e84:	fb08 f80e 	mul.w	r8, r8, lr
 8017e88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017e8c:	fb03 8202 	mla	r2, r3, r2, r8
 8017e90:	9b08      	ldr	r3, [sp, #32]
 8017e92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017e96:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8017e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e9c:	fb01 220a 	mla	r2, r1, sl, r2
 8017ea0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8017ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ea6:	fb09 2901 	mla	r9, r9, r1, r2
 8017eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017eac:	4343      	muls	r3, r0
 8017eae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017eb2:	1c58      	adds	r0, r3, #1
 8017eb4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017eb8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017ebc:	783b      	ldrb	r3, [r7, #0]
 8017ebe:	ea4c 0c09 	orr.w	ip, ip, r9
 8017ec2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8017ec6:	fa5f f28c 	uxtb.w	r2, ip
 8017eca:	b2c0      	uxtb	r0, r0
 8017ecc:	fb12 f201 	smulbb	r2, r2, r1
 8017ed0:	fb03 2300 	mla	r3, r3, r0, r2
 8017ed4:	b29b      	uxth	r3, r3
 8017ed6:	1c5a      	adds	r2, r3, #1
 8017ed8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017edc:	787a      	ldrb	r2, [r7, #1]
 8017ede:	fb12 f200 	smulbb	r2, r2, r0
 8017ee2:	121b      	asrs	r3, r3, #8
 8017ee4:	703b      	strb	r3, [r7, #0]
 8017ee6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017eea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017eee:	fb03 2301 	mla	r3, r3, r1, r2
 8017ef2:	b29b      	uxth	r3, r3
 8017ef4:	1c5a      	adds	r2, r3, #1
 8017ef6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017efa:	121b      	asrs	r3, r3, #8
 8017efc:	707b      	strb	r3, [r7, #1]
 8017efe:	78bb      	ldrb	r3, [r7, #2]
 8017f00:	fb13 f000 	smulbb	r0, r3, r0
 8017f04:	fb0c 0c01 	mla	ip, ip, r1, r0
 8017f08:	fa1f fc8c 	uxth.w	ip, ip
 8017f0c:	f10c 0301 	add.w	r3, ip, #1
 8017f10:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017f14:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017f18:	f887 c002 	strb.w	ip, [r7, #2]
 8017f1c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017f1e:	3703      	adds	r7, #3
 8017f20:	441d      	add	r5, r3
 8017f22:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017f24:	441e      	add	r6, r3
 8017f26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017f28:	3b01      	subs	r3, #1
 8017f2a:	9318      	str	r3, [sp, #96]	; 0x60
 8017f2c:	e69f      	b.n	8017c6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8017f2e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017f30:	441d      	add	r5, r3
 8017f32:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017f34:	441e      	add	r6, r3
 8017f36:	9b07      	ldr	r3, [sp, #28]
 8017f38:	3b01      	subs	r3, #1
 8017f3a:	9307      	str	r3, [sp, #28]
 8017f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f3e:	3303      	adds	r3, #3
 8017f40:	930a      	str	r3, [sp, #40]	; 0x28
 8017f42:	e674      	b.n	8017c2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017f44:	d025      	beq.n	8017f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8017f46:	9b07      	ldr	r3, [sp, #28]
 8017f48:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8017f4a:	3b01      	subs	r3, #1
 8017f4c:	fb00 5003 	mla	r0, r0, r3, r5
 8017f50:	1400      	asrs	r0, r0, #16
 8017f52:	f53f ae89 	bmi.w	8017c68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8017f56:	3901      	subs	r1, #1
 8017f58:	4288      	cmp	r0, r1
 8017f5a:	f6bf ae85 	bge.w	8017c68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8017f5e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8017f60:	fb01 6303 	mla	r3, r1, r3, r6
 8017f64:	141b      	asrs	r3, r3, #16
 8017f66:	f53f ae7f 	bmi.w	8017c68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8017f6a:	3a01      	subs	r2, #1
 8017f6c:	4293      	cmp	r3, r2
 8017f6e:	f6bf ae7b 	bge.w	8017c68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8017f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f74:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8017f78:	f103 0e03 	add.w	lr, r3, #3
 8017f7c:	f1bb 0f00 	cmp.w	fp, #0
 8017f80:	dc6e      	bgt.n	8018060 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8017f82:	9b07      	ldr	r3, [sp, #28]
 8017f84:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f8a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017f8e:	4423      	add	r3, r4
 8017f90:	930a      	str	r3, [sp, #40]	; 0x28
 8017f92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	f340 81ab 	ble.w	80182f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8017f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017f9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017fa0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017fa4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017fa8:	eef0 6a48 	vmov.f32	s13, s16
 8017fac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017fb0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017fb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017fb8:	ee16 5a90 	vmov	r5, s13
 8017fbc:	eef0 6a68 	vmov.f32	s13, s17
 8017fc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017fc4:	ee16 6a90 	vmov	r6, s13
 8017fc8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017fcc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017fd0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017fd4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017fd8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017fdc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017fe0:	ee18 2a10 	vmov	r2, s16
 8017fe4:	eeb0 8a47 	vmov.f32	s16, s14
 8017fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fec:	ee18 2a90 	vmov	r2, s17
 8017ff0:	9331      	str	r3, [sp, #196]	; 0xc4
 8017ff2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017ff4:	eef0 8a67 	vmov.f32	s17, s15
 8017ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ffc:	9332      	str	r3, [sp, #200]	; 0xc8
 8017ffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018002:	3b01      	subs	r3, #1
 8018004:	9317      	str	r3, [sp, #92]	; 0x5c
 8018006:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018008:	bf08      	it	eq
 801800a:	4613      	moveq	r3, r2
 801800c:	9307      	str	r3, [sp, #28]
 801800e:	e600      	b.n	8017c12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018010:	f1bc 0f00 	cmp.w	ip, #0
 8018014:	f43f ae6e 	beq.w	8017cf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8018018:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801801c:	9308      	str	r3, [sp, #32]
 801801e:	0e1b      	lsrs	r3, r3, #24
 8018020:	9311      	str	r3, [sp, #68]	; 0x44
 8018022:	e667      	b.n	8017cf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8018024:	f112 0801 	adds.w	r8, r2, #1
 8018028:	f53f af78 	bmi.w	8017f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801802c:	45c6      	cmp	lr, r8
 801802e:	f6ff af75 	blt.w	8017f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8018032:	f110 0801 	adds.w	r8, r0, #1
 8018036:	f53f af71 	bmi.w	8017f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801803a:	4543      	cmp	r3, r8
 801803c:	f6ff af6e 	blt.w	8017f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8018040:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8018042:	b21b      	sxth	r3, r3
 8018044:	9201      	str	r2, [sp, #4]
 8018046:	9300      	str	r3, [sp, #0]
 8018048:	fa0f f38e 	sxth.w	r3, lr
 801804c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801804e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018052:	e9cd c404 	strd	ip, r4, [sp, #16]
 8018056:	4639      	mov	r1, r7
 8018058:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801805a:	f7ff fc53 	bl	8017904 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801805e:	e75d      	b.n	8017f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8018060:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018062:	142f      	asrs	r7, r5, #16
 8018064:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018066:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801806a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801806e:	1433      	asrs	r3, r6, #16
 8018070:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8018074:	fb02 7303 	mla	r3, r2, r3, r7
 8018078:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801807c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018080:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018084:	2900      	cmp	r1, #0
 8018086:	f000 812a 	beq.w	80182de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801808a:	687c      	ldr	r4, [r7, #4]
 801808c:	940e      	str	r4, [sp, #56]	; 0x38
 801808e:	0e24      	lsrs	r4, r4, #24
 8018090:	9415      	str	r4, [sp, #84]	; 0x54
 8018092:	b178      	cbz	r0, 80180b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8018094:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8018098:	3a01      	subs	r2, #1
 801809a:	0092      	lsls	r2, r2, #2
 801809c:	3204      	adds	r2, #4
 801809e:	eb07 0802 	add.w	r8, r7, r2
 80180a2:	58ba      	ldr	r2, [r7, r2]
 80180a4:	9209      	str	r2, [sp, #36]	; 0x24
 80180a6:	0e12      	lsrs	r2, r2, #24
 80180a8:	9212      	str	r2, [sp, #72]	; 0x48
 80180aa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80180ae:	920f      	str	r2, [sp, #60]	; 0x3c
 80180b0:	0e12      	lsrs	r2, r2, #24
 80180b2:	9216      	str	r2, [sp, #88]	; 0x58
 80180b4:	b289      	uxth	r1, r1
 80180b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80180b8:	b280      	uxth	r0, r0
 80180ba:	fb01 f900 	mul.w	r9, r1, r0
 80180be:	0109      	lsls	r1, r1, #4
 80180c0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80180c4:	eba1 0809 	sub.w	r8, r1, r9
 80180c8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80180cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80180ce:	b280      	uxth	r0, r0
 80180d0:	fa1f f888 	uxth.w	r8, r8
 80180d4:	1a12      	subs	r2, r2, r0
 80180d6:	fb08 f101 	mul.w	r1, r8, r1
 80180da:	b292      	uxth	r2, r2
 80180dc:	fb02 110c 	mla	r1, r2, ip, r1
 80180e0:	fb00 1104 	mla	r1, r0, r4, r1
 80180e4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80180e6:	fb09 1104 	mla	r1, r9, r4, r1
 80180ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80180ee:	2900      	cmp	r1, #0
 80180f0:	f000 80ec 	beq.w	80182cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80180f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80180f8:	d019      	beq.n	801812e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80180fa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80180fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018102:	fb0c fa0a 	mul.w	sl, ip, sl
 8018106:	fb0c fc03 	mul.w	ip, ip, r3
 801810a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801810e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018112:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018116:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801811a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801811e:	4453      	add	r3, sl
 8018120:	0a3f      	lsrs	r7, r7, #8
 8018122:	0a1b      	lsrs	r3, r3, #8
 8018124:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8018128:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801812c:	433b      	orrs	r3, r7
 801812e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018130:	2cff      	cmp	r4, #255	; 0xff
 8018132:	d020      	beq.n	8018176 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8018134:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018136:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801813a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801813c:	4367      	muls	r7, r4
 801813e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018140:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018144:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018148:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801814a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801814e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018152:	fb04 fa0a 	mul.w	sl, r4, sl
 8018156:	44bc      	add	ip, r7
 8018158:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801815c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018160:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018164:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018168:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801816c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018170:	ea4c 040a 	orr.w	r4, ip, sl
 8018174:	940e      	str	r4, [sp, #56]	; 0x38
 8018176:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018178:	2cff      	cmp	r4, #255	; 0xff
 801817a:	d020      	beq.n	80181be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801817c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801817e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018182:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018184:	4367      	muls	r7, r4
 8018186:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018188:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801818c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018190:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018192:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018196:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801819a:	fb04 fa0a 	mul.w	sl, r4, sl
 801819e:	44bc      	add	ip, r7
 80181a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80181a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80181a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80181ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80181b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80181b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80181b8:	ea4c 040a 	orr.w	r4, ip, sl
 80181bc:	9409      	str	r4, [sp, #36]	; 0x24
 80181be:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80181c0:	2cff      	cmp	r4, #255	; 0xff
 80181c2:	d020      	beq.n	8018206 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 80181c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80181c6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80181ca:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80181cc:	4367      	muls	r7, r4
 80181ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80181d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80181d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80181d8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80181da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80181de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80181e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80181e6:	44bc      	add	ip, r7
 80181e8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80181ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80181f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80181f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80181f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80181fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018200:	ea4c 040a 	orr.w	r4, ip, sl
 8018204:	940f      	str	r4, [sp, #60]	; 0x3c
 8018206:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018208:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801820c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018210:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018214:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018216:	fb08 f707 	mul.w	r7, r8, r7
 801821a:	fb02 770c 	mla	r7, r2, ip, r7
 801821e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018222:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018224:	fb00 770c 	mla	r7, r0, ip, r7
 8018228:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801822c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801822e:	fb09 770c 	mla	r7, r9, ip, r7
 8018232:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8018236:	fb08 f80c 	mul.w	r8, r8, ip
 801823a:	0a3f      	lsrs	r7, r7, #8
 801823c:	fb02 8303 	mla	r3, r2, r3, r8
 8018240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018242:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018246:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801824a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801824c:	fb00 330a 	mla	r3, r0, sl, r3
 8018250:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018254:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018256:	fb09 3c0c 	mla	ip, r9, ip, r3
 801825a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801825c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018260:	434b      	muls	r3, r1
 8018262:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018266:	1c59      	adds	r1, r3, #1
 8018268:	ea47 070c 	orr.w	r7, r7, ip
 801826c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018270:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018274:	b2fa      	uxtb	r2, r7
 8018276:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801827a:	fb12 f200 	smulbb	r2, r2, r0
 801827e:	b2c9      	uxtb	r1, r1
 8018280:	fb03 2301 	mla	r3, r3, r1, r2
 8018284:	b29b      	uxth	r3, r3
 8018286:	1c5a      	adds	r2, r3, #1
 8018288:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801828c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8018290:	fb12 f201 	smulbb	r2, r2, r1
 8018294:	121b      	asrs	r3, r3, #8
 8018296:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801829a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801829e:	0c3f      	lsrs	r7, r7, #16
 80182a0:	fb03 2300 	mla	r3, r3, r0, r2
 80182a4:	b29b      	uxth	r3, r3
 80182a6:	1c5a      	adds	r2, r3, #1
 80182a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80182ac:	121b      	asrs	r3, r3, #8
 80182ae:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80182b2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80182b6:	fb13 f101 	smulbb	r1, r3, r1
 80182ba:	fb07 1700 	mla	r7, r7, r0, r1
 80182be:	b2bf      	uxth	r7, r7
 80182c0:	1c79      	adds	r1, r7, #1
 80182c2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80182c6:	123f      	asrs	r7, r7, #8
 80182c8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80182cc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80182ce:	f10e 0e03 	add.w	lr, lr, #3
 80182d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80182d6:	441d      	add	r5, r3
 80182d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80182da:	441e      	add	r6, r3
 80182dc:	e64e      	b.n	8017f7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 80182de:	2800      	cmp	r0, #0
 80182e0:	f43f aee8 	beq.w	80180b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80182e4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80182e8:	9209      	str	r2, [sp, #36]	; 0x24
 80182ea:	0e12      	lsrs	r2, r2, #24
 80182ec:	9212      	str	r2, [sp, #72]	; 0x48
 80182ee:	e6e1      	b.n	80180b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80182f0:	b01d      	add	sp, #116	; 0x74
 80182f2:	ecbd 8b08 	vpop	{d8-d11}
 80182f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080182fc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80182fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018300:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8018304:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8018308:	fb04 5603 	mla	r6, r4, r3, r5
 801830c:	2c00      	cmp	r4, #0
 801830e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8018312:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8018316:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801831a:	db36      	blt.n	801838a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801831c:	45a6      	cmp	lr, r4
 801831e:	dd34      	ble.n	801838a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8018320:	2d00      	cmp	r5, #0
 8018322:	db30      	blt.n	8018386 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8018324:	42ab      	cmp	r3, r5
 8018326:	dd2e      	ble.n	8018386 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8018328:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801832c:	1c6e      	adds	r6, r5, #1
 801832e:	d42f      	bmi.n	8018390 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8018330:	42b3      	cmp	r3, r6
 8018332:	dd2d      	ble.n	8018390 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8018334:	b370      	cbz	r0, 8018394 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8018336:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801833a:	3401      	adds	r4, #1
 801833c:	d42e      	bmi.n	801839c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801833e:	45a6      	cmp	lr, r4
 8018340:	dd2c      	ble.n	801839c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8018342:	b377      	cbz	r7, 80183a2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8018344:	2d00      	cmp	r5, #0
 8018346:	db27      	blt.n	8018398 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8018348:	42ab      	cmp	r3, r5
 801834a:	dd25      	ble.n	8018398 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801834c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8018350:	3501      	adds	r5, #1
 8018352:	d429      	bmi.n	80183a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8018354:	42ab      	cmp	r3, r5
 8018356:	dd27      	ble.n	80183a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8018358:	b340      	cbz	r0, 80183ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801835a:	3301      	adds	r3, #1
 801835c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8018360:	280f      	cmp	r0, #15
 8018362:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018366:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801836a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801836e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8018372:	d801      	bhi.n	8018378 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8018374:	2f0f      	cmp	r7, #15
 8018376:	d91b      	bls.n	80183b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8018378:	4b7e      	ldr	r3, [pc, #504]	; (8018574 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801837a:	f240 115b 	movw	r1, #347	; 0x15b
 801837e:	4a7e      	ldr	r2, [pc, #504]	; (8018578 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8018380:	487e      	ldr	r0, [pc, #504]	; (801857c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8018382:	f001 fc9f 	bl	8019cc4 <__assert_func>
 8018386:	2200      	movs	r2, #0
 8018388:	e7d0      	b.n	801832c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801838a:	2600      	movs	r6, #0
 801838c:	4632      	mov	r2, r6
 801838e:	e7d4      	b.n	801833a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8018390:	2600      	movs	r6, #0
 8018392:	e7d2      	b.n	801833a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8018394:	4606      	mov	r6, r0
 8018396:	e7d0      	b.n	801833a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8018398:	2400      	movs	r4, #0
 801839a:	e7d9      	b.n	8018350 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801839c:	2300      	movs	r3, #0
 801839e:	461c      	mov	r4, r3
 80183a0:	e7de      	b.n	8018360 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80183a2:	463b      	mov	r3, r7
 80183a4:	463c      	mov	r4, r7
 80183a6:	e7db      	b.n	8018360 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80183a8:	2300      	movs	r3, #0
 80183aa:	e7d9      	b.n	8018360 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80183ac:	4603      	mov	r3, r0
 80183ae:	e7d7      	b.n	8018360 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80183b0:	b280      	uxth	r0, r0
 80183b2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80183b6:	b2bf      	uxth	r7, r7
 80183b8:	fb00 fe07 	mul.w	lr, r0, r7
 80183bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80183c0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80183c4:	eba0 0c0e 	sub.w	ip, r0, lr
 80183c8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80183cc:	b2bf      	uxth	r7, r7
 80183ce:	fa1f fc8c 	uxth.w	ip, ip
 80183d2:	eba0 0507 	sub.w	r5, r0, r7
 80183d6:	fb0c f00a 	mul.w	r0, ip, sl
 80183da:	b2ad      	uxth	r5, r5
 80183dc:	fb05 000b 	mla	r0, r5, fp, r0
 80183e0:	fb07 0009 	mla	r0, r7, r9, r0
 80183e4:	fb0e 0008 	mla	r0, lr, r8, r0
 80183e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80183ec:	9001      	str	r0, [sp, #4]
 80183ee:	d018      	beq.n	8018422 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 80183f0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80183f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80183f8:	fb0b f000 	mul.w	r0, fp, r0
 80183fc:	fb0b fb02 	mul.w	fp, fp, r2
 8018400:	0a02      	lsrs	r2, r0, #8
 8018402:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8018406:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801840a:	4402      	add	r2, r0
 801840c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8018410:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8018414:	0a12      	lsrs	r2, r2, #8
 8018416:	0a00      	lsrs	r0, r0, #8
 8018418:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801841c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018420:	4302      	orrs	r2, r0
 8018422:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018426:	d01a      	beq.n	801845e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8018428:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801842c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018430:	fb0a f000 	mul.w	r0, sl, r0
 8018434:	fb0a fa06 	mul.w	sl, sl, r6
 8018438:	0a06      	lsrs	r6, r0, #8
 801843a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801843e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018442:	4406      	add	r6, r0
 8018444:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018448:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801844c:	0a36      	lsrs	r6, r6, #8
 801844e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018452:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018456:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801845a:	ea46 060a 	orr.w	r6, r6, sl
 801845e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018462:	d01b      	beq.n	801849c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8018464:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018468:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801846c:	fb09 fa0a 	mul.w	sl, r9, sl
 8018470:	fb09 f004 	mul.w	r0, r9, r4
 8018474:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018478:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801847c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8018480:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018484:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8018488:	4454      	add	r4, sl
 801848a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801848e:	0a24      	lsrs	r4, r4, #8
 8018490:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018494:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018498:	ea44 0409 	orr.w	r4, r4, r9
 801849c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80184a0:	d01b      	beq.n	80184da <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 80184a2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80184a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80184aa:	fb08 f909 	mul.w	r9, r8, r9
 80184ae:	fb08 f003 	mul.w	r0, r8, r3
 80184b2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80184b6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80184ba:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80184be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80184c2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80184c6:	444b      	add	r3, r9
 80184c8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80184cc:	0a1b      	lsrs	r3, r3, #8
 80184ce:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80184d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80184d6:	ea43 0308 	orr.w	r3, r3, r8
 80184da:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80184de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80184e2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80184e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80184ea:	fb0c f000 	mul.w	r0, ip, r0
 80184ee:	fb0c f606 	mul.w	r6, ip, r6
 80184f2:	fb05 0808 	mla	r8, r5, r8, r0
 80184f6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80184fa:	fb05 6502 	mla	r5, r5, r2, r6
 80184fe:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018502:	fb07 8800 	mla	r8, r7, r0, r8
 8018506:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801850a:	fb07 5704 	mla	r7, r7, r4, r5
 801850e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018512:	fb0e 8000 	mla	r0, lr, r0, r8
 8018516:	780a      	ldrb	r2, [r1, #0]
 8018518:	fb0e 7e03 	mla	lr, lr, r3, r7
 801851c:	9b01      	ldr	r3, [sp, #4]
 801851e:	0a00      	lsrs	r0, r0, #8
 8018520:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018524:	43db      	mvns	r3, r3
 8018526:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801852a:	b2db      	uxtb	r3, r3
 801852c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018530:	ea40 0e0e 	orr.w	lr, r0, lr
 8018534:	fb02 f003 	mul.w	r0, r2, r3
 8018538:	1c42      	adds	r2, r0, #1
 801853a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801853e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8018542:	700a      	strb	r2, [r1, #0]
 8018544:	784a      	ldrb	r2, [r1, #1]
 8018546:	435a      	muls	r2, r3
 8018548:	1c50      	adds	r0, r2, #1
 801854a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801854e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8018552:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8018556:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801855a:	704a      	strb	r2, [r1, #1]
 801855c:	788a      	ldrb	r2, [r1, #2]
 801855e:	4353      	muls	r3, r2
 8018560:	1c5a      	adds	r2, r3, #1
 8018562:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018566:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801856a:	f881 e002 	strb.w	lr, [r1, #2]
 801856e:	b003      	add	sp, #12
 8018570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018574:	0801e734 	.word	0x0801e734
 8018578:	0801eb4a 	.word	0x0801eb4a
 801857c:	0801e701 	.word	0x0801e701

08018580 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018584:	ed2d 8b08 	vpush	{d8-d11}
 8018588:	b099      	sub	sp, #100	; 0x64
 801858a:	eeb0 aa40 	vmov.f32	s20, s0
 801858e:	eef0 9a60 	vmov.f32	s19, s1
 8018592:	9017      	str	r0, [sp, #92]	; 0x5c
 8018594:	eeb0 9a41 	vmov.f32	s18, s2
 8018598:	9306      	str	r3, [sp, #24]
 801859a:	eeb0 8a62 	vmov.f32	s16, s5
 801859e:	eef0 8a43 	vmov.f32	s17, s6
 80185a2:	eef0 ba44 	vmov.f32	s23, s8
 80185a6:	eeb0 ba64 	vmov.f32	s22, s9
 80185aa:	eef0 aa45 	vmov.f32	s21, s10
 80185ae:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 80185b2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80185b4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80185b8:	6850      	ldr	r0, [r2, #4]
 80185ba:	6812      	ldr	r2, [r2, #0]
 80185bc:	fb00 1303 	mla	r3, r0, r3, r1
 80185c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185c4:	18d3      	adds	r3, r2, r3
 80185c6:	9309      	str	r3, [sp, #36]	; 0x24
 80185c8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80185ca:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	930e      	str	r3, [sp, #56]	; 0x38
 80185d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	dc03      	bgt.n	80185e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80185d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80185da:	2b00      	cmp	r3, #0
 80185dc:	f340 8360 	ble.w	8018ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80185e0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80185e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80185e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80185ea:	1e48      	subs	r0, r1, #1
 80185ec:	1e57      	subs	r7, r2, #1
 80185ee:	9b06      	ldr	r3, [sp, #24]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	f340 817b 	ble.w	80188ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80185f6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80185fa:	ea4f 4326 	mov.w	r3, r6, asr #16
 80185fe:	d406      	bmi.n	801860e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018600:	4584      	cmp	ip, r0
 8018602:	da04      	bge.n	801860e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018604:	2b00      	cmp	r3, #0
 8018606:	db02      	blt.n	801860e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018608:	42bb      	cmp	r3, r7
 801860a:	f2c0 8170 	blt.w	80188ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801860e:	f11c 0c01 	adds.w	ip, ip, #1
 8018612:	f100 8160 	bmi.w	80188d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8018616:	4561      	cmp	r1, ip
 8018618:	f2c0 815d 	blt.w	80188d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801861c:	3301      	adds	r3, #1
 801861e:	f100 815a 	bmi.w	80188d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8018622:	429a      	cmp	r2, r3
 8018624:	f2c0 8157 	blt.w	80188d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8018628:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801862c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801862e:	f1b8 0f00 	cmp.w	r8, #0
 8018632:	f340 8179 	ble.w	8018928 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8018636:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018638:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801863c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801863e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8018642:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8018646:	142a      	asrs	r2, r5, #16
 8018648:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801864c:	689b      	ldr	r3, [r3, #8]
 801864e:	f100 81be 	bmi.w	80189ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018652:	f103 39ff 	add.w	r9, r3, #4294967295
 8018656:	454a      	cmp	r2, r9
 8018658:	f280 81b9 	bge.w	80189ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801865c:	f1bc 0f00 	cmp.w	ip, #0
 8018660:	f2c0 81b5 	blt.w	80189ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018664:	f10e 39ff 	add.w	r9, lr, #4294967295
 8018668:	45cc      	cmp	ip, r9
 801866a:	f280 81b0 	bge.w	80189ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801866e:	b21b      	sxth	r3, r3
 8018670:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018672:	fb0c 2203 	mla	r2, ip, r3, r2
 8018676:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801867a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801867e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8018682:	2900      	cmp	r1, #0
 8018684:	f000 8197 	beq.w	80189b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8018688:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801868c:	940a      	str	r4, [sp, #40]	; 0x28
 801868e:	0e24      	lsrs	r4, r4, #24
 8018690:	9411      	str	r4, [sp, #68]	; 0x44
 8018692:	b180      	cbz	r0, 80186b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018694:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018698:	3b01      	subs	r3, #1
 801869a:	009b      	lsls	r3, r3, #2
 801869c:	3304      	adds	r3, #4
 801869e:	eb09 0c03 	add.w	ip, r9, r3
 80186a2:	f859 3003 	ldr.w	r3, [r9, r3]
 80186a6:	9307      	str	r3, [sp, #28]
 80186a8:	0e1b      	lsrs	r3, r3, #24
 80186aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80186ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80186b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80186b2:	0e1b      	lsrs	r3, r3, #24
 80186b4:	9312      	str	r3, [sp, #72]	; 0x48
 80186b6:	b289      	uxth	r1, r1
 80186b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80186ba:	b280      	uxth	r0, r0
 80186bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80186be:	fb01 fa00 	mul.w	sl, r1, r0
 80186c2:	0109      	lsls	r1, r1, #4
 80186c4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80186c8:	eba1 090a 	sub.w	r9, r1, sl
 80186cc:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80186d0:	b280      	uxth	r0, r0
 80186d2:	fa1f f989 	uxth.w	r9, r9
 80186d6:	1a09      	subs	r1, r1, r0
 80186d8:	fb09 f303 	mul.w	r3, r9, r3
 80186dc:	b289      	uxth	r1, r1
 80186de:	fb01 330e 	mla	r3, r1, lr, r3
 80186e2:	fb00 3304 	mla	r3, r0, r4, r3
 80186e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80186e8:	fb0a 3304 	mla	r3, sl, r4, r3
 80186ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	f000 80e8 	beq.w	80188c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80186f6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80186fa:	d01b      	beq.n	8018734 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80186fc:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8018700:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018704:	fb0e fb0b 	mul.w	fp, lr, fp
 8018708:	fb0e fe02 	mul.w	lr, lr, r2
 801870c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8018710:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018714:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018718:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801871c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018720:	445a      	add	r2, fp
 8018722:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018726:	0a12      	lsrs	r2, r2, #8
 8018728:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801872c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018730:	ea42 020c 	orr.w	r2, r2, ip
 8018734:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018736:	2cff      	cmp	r4, #255	; 0xff
 8018738:	d021      	beq.n	801877e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801873a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801873c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018740:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018742:	fb04 fc0c 	mul.w	ip, r4, ip
 8018746:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018748:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801874c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8018750:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018752:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018756:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801875a:	fb04 fb0b 	mul.w	fp, r4, fp
 801875e:	44e6      	add	lr, ip
 8018760:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8018764:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018768:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801876c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018770:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8018774:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8018778:	ea4e 040b 	orr.w	r4, lr, fp
 801877c:	940a      	str	r4, [sp, #40]	; 0x28
 801877e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018780:	2cff      	cmp	r4, #255	; 0xff
 8018782:	d021      	beq.n	80187c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018784:	9c07      	ldr	r4, [sp, #28]
 8018786:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801878a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801878c:	fb04 fc0c 	mul.w	ip, r4, ip
 8018790:	9c07      	ldr	r4, [sp, #28]
 8018792:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8018796:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801879a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801879c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80187a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80187a4:	fb04 fb0b 	mul.w	fp, r4, fp
 80187a8:	44e6      	add	lr, ip
 80187aa:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80187ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80187b2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80187b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80187ba:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80187be:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80187c2:	ea4e 040b 	orr.w	r4, lr, fp
 80187c6:	9407      	str	r4, [sp, #28]
 80187c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80187ca:	2cff      	cmp	r4, #255	; 0xff
 80187cc:	d021      	beq.n	8018812 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80187ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80187d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80187d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80187d6:	fb04 fc0c 	mul.w	ip, r4, ip
 80187da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80187dc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80187e0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80187e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80187e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80187ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80187ee:	fb04 fb0b 	mul.w	fp, r4, fp
 80187f2:	44e6      	add	lr, ip
 80187f4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80187f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80187fc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8018800:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018804:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8018808:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801880c:	ea4e 040b 	orr.w	r4, lr, fp
 8018810:	940b      	str	r4, [sp, #44]	; 0x2c
 8018812:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018814:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8018818:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801881c:	2bff      	cmp	r3, #255	; 0xff
 801881e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018822:	9c07      	ldr	r4, [sp, #28]
 8018824:	fb09 fc0c 	mul.w	ip, r9, ip
 8018828:	fb01 cc0e 	mla	ip, r1, lr, ip
 801882c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018830:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018832:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018836:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801883a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801883c:	fb0a cc0e 	mla	ip, sl, lr, ip
 8018840:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018844:	fb09 f90e 	mul.w	r9, r9, lr
 8018848:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801884c:	fb01 9202 	mla	r2, r1, r2, r9
 8018850:	9907      	ldr	r1, [sp, #28]
 8018852:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018856:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801885a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801885c:	fb00 220b 	mla	r2, r0, fp, r2
 8018860:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8018864:	fb0a 2a00 	mla	sl, sl, r0, r2
 8018868:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801886c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018870:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018874:	fa5f f08c 	uxtb.w	r0, ip
 8018878:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801887c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018880:	f000 80a2 	beq.w	80189c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8018884:	43db      	mvns	r3, r3
 8018886:	783a      	ldrb	r2, [r7, #0]
 8018888:	f897 a002 	ldrb.w	sl, [r7, #2]
 801888c:	b2db      	uxtb	r3, r3
 801888e:	fb02 fe03 	mul.w	lr, r2, r3
 8018892:	fb0a fa03 	mul.w	sl, sl, r3
 8018896:	f10e 0201 	add.w	r2, lr, #1
 801889a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801889e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80188a2:	703a      	strb	r2, [r7, #0]
 80188a4:	787a      	ldrb	r2, [r7, #1]
 80188a6:	fb02 f003 	mul.w	r0, r2, r3
 80188aa:	f10a 0301 	add.w	r3, sl, #1
 80188ae:	1c42      	adds	r2, r0, #1
 80188b0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80188b4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80188b8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80188bc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80188c0:	707a      	strb	r2, [r7, #1]
 80188c2:	f887 c002 	strb.w	ip, [r7, #2]
 80188c6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80188c8:	3703      	adds	r7, #3
 80188ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80188ce:	441d      	add	r5, r3
 80188d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80188d2:	441e      	add	r6, r3
 80188d4:	e6ab      	b.n	801862e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80188d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80188d8:	441d      	add	r5, r3
 80188da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80188dc:	441e      	add	r6, r3
 80188de:	9b06      	ldr	r3, [sp, #24]
 80188e0:	3b01      	subs	r3, #1
 80188e2:	9306      	str	r3, [sp, #24]
 80188e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188e6:	3303      	adds	r3, #3
 80188e8:	9309      	str	r3, [sp, #36]	; 0x24
 80188ea:	e680      	b.n	80185ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80188ec:	d024      	beq.n	8018938 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 80188ee:	9b06      	ldr	r3, [sp, #24]
 80188f0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80188f2:	3b01      	subs	r3, #1
 80188f4:	fb00 5003 	mla	r0, r0, r3, r5
 80188f8:	1400      	asrs	r0, r0, #16
 80188fa:	f53f ae95 	bmi.w	8018628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80188fe:	3901      	subs	r1, #1
 8018900:	4288      	cmp	r0, r1
 8018902:	f6bf ae91 	bge.w	8018628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018906:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8018908:	fb01 6303 	mla	r3, r1, r3, r6
 801890c:	141b      	asrs	r3, r3, #16
 801890e:	f53f ae8b 	bmi.w	8018628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018912:	3a01      	subs	r2, #1
 8018914:	4293      	cmp	r3, r2
 8018916:	f6bf ae87 	bge.w	8018628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801891a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801891c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8018920:	1cdf      	adds	r7, r3, #3
 8018922:	f1bb 0f00 	cmp.w	fp, #0
 8018926:	dc6e      	bgt.n	8018a06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8018928:	9b06      	ldr	r3, [sp, #24]
 801892a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018930:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018934:	4423      	add	r3, r4
 8018936:	9309      	str	r3, [sp, #36]	; 0x24
 8018938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801893a:	2b00      	cmp	r3, #0
 801893c:	f340 81b0 	ble.w	8018ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8018940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018944:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018946:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801894a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801894e:	eef0 6a48 	vmov.f32	s13, s16
 8018952:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018956:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801895a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801895e:	ee16 5a90 	vmov	r5, s13
 8018962:	eef0 6a68 	vmov.f32	s13, s17
 8018966:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801896a:	ee16 6a90 	vmov	r6, s13
 801896e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018972:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018976:	ee37 8a48 	vsub.f32	s16, s14, s16
 801897a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801897e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018982:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018986:	ee18 2a10 	vmov	r2, s16
 801898a:	eeb0 8a47 	vmov.f32	s16, s14
 801898e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018992:	ee18 2a90 	vmov	r2, s17
 8018996:	932d      	str	r3, [sp, #180]	; 0xb4
 8018998:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801899a:	eef0 8a67 	vmov.f32	s17, s15
 801899e:	fb92 f3f3 	sdiv	r3, r2, r3
 80189a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80189a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80189a8:	3b01      	subs	r3, #1
 80189aa:	9315      	str	r3, [sp, #84]	; 0x54
 80189ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80189ae:	bf08      	it	eq
 80189b0:	4613      	moveq	r3, r2
 80189b2:	9306      	str	r3, [sp, #24]
 80189b4:	e60d      	b.n	80185d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80189b6:	2800      	cmp	r0, #0
 80189b8:	f43f ae7d 	beq.w	80186b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80189bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80189c0:	9307      	str	r3, [sp, #28]
 80189c2:	0e1b      	lsrs	r3, r3, #24
 80189c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80189c6:	e676      	b.n	80186b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80189c8:	7038      	strb	r0, [r7, #0]
 80189ca:	7079      	strb	r1, [r7, #1]
 80189cc:	e779      	b.n	80188c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80189ce:	f112 0901 	adds.w	r9, r2, #1
 80189d2:	f53f af78 	bmi.w	80188c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80189d6:	454b      	cmp	r3, r9
 80189d8:	f6ff af75 	blt.w	80188c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80189dc:	f11c 0901 	adds.w	r9, ip, #1
 80189e0:	f53f af71 	bmi.w	80188c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80189e4:	45ce      	cmp	lr, r9
 80189e6:	f6ff af6e 	blt.w	80188c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80189ea:	b21b      	sxth	r3, r3
 80189ec:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80189f0:	fa0f f28e 	sxth.w	r2, lr
 80189f4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80189f8:	9200      	str	r2, [sp, #0]
 80189fa:	4639      	mov	r1, r7
 80189fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80189fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018a00:	f7ff fc7c 	bl	80182fc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8018a04:	e75f      	b.n	80188c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8018a06:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018a08:	1429      	asrs	r1, r5, #16
 8018a0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018a0c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8018a10:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8018a14:	1433      	asrs	r3, r6, #16
 8018a16:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8018a1a:	fb0c 1303 	mla	r3, ip, r3, r1
 8018a1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018a20:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018a24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018a28:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018a2c:	2a00      	cmp	r2, #0
 8018a2e:	f000 8129 	beq.w	8018c84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8018a32:	684c      	ldr	r4, [r1, #4]
 8018a34:	940c      	str	r4, [sp, #48]	; 0x30
 8018a36:	0e24      	lsrs	r4, r4, #24
 8018a38:	9413      	str	r4, [sp, #76]	; 0x4c
 8018a3a:	b198      	cbz	r0, 8018a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8018a3c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8018a40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018a44:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8018a48:	f10c 0c04 	add.w	ip, ip, #4
 8018a4c:	eb01 080c 	add.w	r8, r1, ip
 8018a50:	f851 100c 	ldr.w	r1, [r1, ip]
 8018a54:	9108      	str	r1, [sp, #32]
 8018a56:	0e09      	lsrs	r1, r1, #24
 8018a58:	9110      	str	r1, [sp, #64]	; 0x40
 8018a5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018a5e:	910d      	str	r1, [sp, #52]	; 0x34
 8018a60:	0e09      	lsrs	r1, r1, #24
 8018a62:	9114      	str	r1, [sp, #80]	; 0x50
 8018a64:	b292      	uxth	r2, r2
 8018a66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018a68:	b280      	uxth	r0, r0
 8018a6a:	fb02 f900 	mul.w	r9, r2, r0
 8018a6e:	0112      	lsls	r2, r2, #4
 8018a70:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018a74:	eba2 0809 	sub.w	r8, r2, r9
 8018a78:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8018a7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018a7e:	b280      	uxth	r0, r0
 8018a80:	fa1f f888 	uxth.w	r8, r8
 8018a84:	1a09      	subs	r1, r1, r0
 8018a86:	fb08 f202 	mul.w	r2, r8, r2
 8018a8a:	b289      	uxth	r1, r1
 8018a8c:	fb01 220e 	mla	r2, r1, lr, r2
 8018a90:	fb00 2204 	mla	r2, r0, r4, r2
 8018a94:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018a96:	fb09 2204 	mla	r2, r9, r4, r2
 8018a9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018a9e:	2a00      	cmp	r2, #0
 8018aa0:	f000 80e8 	beq.w	8018c74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8018aa4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018aa8:	d01b      	beq.n	8018ae2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8018aaa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018aae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018ab2:	fb0e fa0a 	mul.w	sl, lr, sl
 8018ab6:	fb0e fe03 	mul.w	lr, lr, r3
 8018aba:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018abe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018ac2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018ac6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018aca:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018ace:	4453      	add	r3, sl
 8018ad0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018ad4:	0a1b      	lsrs	r3, r3, #8
 8018ad6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018ada:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018ade:	ea43 030c 	orr.w	r3, r3, ip
 8018ae2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018ae4:	2cff      	cmp	r4, #255	; 0xff
 8018ae6:	d021      	beq.n	8018b2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8018ae8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018aea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018aee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018af0:	fb04 fc0c 	mul.w	ip, r4, ip
 8018af4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018af6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8018afa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018afe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018b00:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018b04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018b08:	fb04 fa0a 	mul.w	sl, r4, sl
 8018b0c:	44e6      	add	lr, ip
 8018b0e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018b12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018b16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018b1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018b1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018b22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018b26:	ea4e 040a 	orr.w	r4, lr, sl
 8018b2a:	940c      	str	r4, [sp, #48]	; 0x30
 8018b2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018b2e:	2cff      	cmp	r4, #255	; 0xff
 8018b30:	d021      	beq.n	8018b76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8018b32:	9c08      	ldr	r4, [sp, #32]
 8018b34:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018b38:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018b3a:	fb04 fc0c 	mul.w	ip, r4, ip
 8018b3e:	9c08      	ldr	r4, [sp, #32]
 8018b40:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018b44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018b46:	fb04 fa0e 	mul.w	sl, r4, lr
 8018b4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8018b4e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018b52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018b56:	44e6      	add	lr, ip
 8018b58:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018b5c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018b60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018b64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018b68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018b6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018b70:	ea4e 040a 	orr.w	r4, lr, sl
 8018b74:	9408      	str	r4, [sp, #32]
 8018b76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018b78:	2cff      	cmp	r4, #255	; 0xff
 8018b7a:	d021      	beq.n	8018bc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8018b7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018b7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018b82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018b84:	fb04 fc0c 	mul.w	ip, r4, ip
 8018b88:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018b8a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8018b8e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018b92:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018b94:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018b98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018b9c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018ba0:	44e6      	add	lr, ip
 8018ba2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018ba6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018baa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018bae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018bb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018bb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018bba:	ea4e 040a 	orr.w	r4, lr, sl
 8018bbe:	940d      	str	r4, [sp, #52]	; 0x34
 8018bc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018bc2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018bca:	2aff      	cmp	r2, #255	; 0xff
 8018bcc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018bd0:	9c08      	ldr	r4, [sp, #32]
 8018bd2:	fb08 fc0c 	mul.w	ip, r8, ip
 8018bd6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8018bda:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018bde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018be0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018be4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018be8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018bea:	fb09 cc0e 	mla	ip, r9, lr, ip
 8018bee:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018bf2:	fb08 f80e 	mul.w	r8, r8, lr
 8018bf6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018bfa:	fb01 8303 	mla	r3, r1, r3, r8
 8018bfe:	9908      	ldr	r1, [sp, #32]
 8018c00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018c04:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8018c08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018c0a:	fb00 330a 	mla	r3, r0, sl, r3
 8018c0e:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8018c12:	fb09 3e0e 	mla	lr, r9, lr, r3
 8018c16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018c1a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018c1e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8018c22:	fa5f f08c 	uxtb.w	r0, ip
 8018c26:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8018c2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018c2e:	d032      	beq.n	8018c96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8018c30:	43d2      	mvns	r2, r2
 8018c32:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8018c36:	b2d2      	uxtb	r2, r2
 8018c38:	fb0e fe02 	mul.w	lr, lr, r2
 8018c3c:	f10e 0301 	add.w	r3, lr, #1
 8018c40:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8018c44:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8018c48:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8018c4c:	4350      	muls	r0, r2
 8018c4e:	f807 3c03 	strb.w	r3, [r7, #-3]
 8018c52:	1c43      	adds	r3, r0, #1
 8018c54:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8018c58:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018c5c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8018c60:	4353      	muls	r3, r2
 8018c62:	f807 1c02 	strb.w	r1, [r7, #-2]
 8018c66:	1c5a      	adds	r2, r3, #1
 8018c68:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018c6c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8018c70:	f807 cc01 	strb.w	ip, [r7, #-1]
 8018c74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018c76:	3703      	adds	r7, #3
 8018c78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018c7c:	441d      	add	r5, r3
 8018c7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018c80:	441e      	add	r6, r3
 8018c82:	e64e      	b.n	8018922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8018c84:	2800      	cmp	r0, #0
 8018c86:	f43f aeed 	beq.w	8018a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8018c8a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8018c8e:	9108      	str	r1, [sp, #32]
 8018c90:	0e09      	lsrs	r1, r1, #24
 8018c92:	9110      	str	r1, [sp, #64]	; 0x40
 8018c94:	e6e6      	b.n	8018a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8018c96:	f807 0c03 	strb.w	r0, [r7, #-3]
 8018c9a:	f807 1c02 	strb.w	r1, [r7, #-2]
 8018c9e:	e7e7      	b.n	8018c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8018ca0:	b019      	add	sp, #100	; 0x64
 8018ca2:	ecbd 8b08 	vpop	{d8-d11}
 8018ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018cac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8018cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cb0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8018cb4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8018cb8:	2800      	cmp	r0, #0
 8018cba:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8018cbe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8018cc2:	fb0c 0e03 	mla	lr, ip, r3, r0
 8018cc6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8018cca:	db6b      	blt.n	8018da4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8018ccc:	4580      	cmp	r8, r0
 8018cce:	dd69      	ble.n	8018da4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8018cd0:	f1bc 0f00 	cmp.w	ip, #0
 8018cd4:	db66      	blt.n	8018da4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8018cd6:	45e1      	cmp	r9, ip
 8018cd8:	dd64      	ble.n	8018da4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8018cda:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8018cde:	f01e 0f01 	tst.w	lr, #1
 8018ce2:	5d16      	ldrb	r6, [r2, r4]
 8018ce4:	bf0c      	ite	eq
 8018ce6:	f006 060f 	andeq.w	r6, r6, #15
 8018cea:	1136      	asrne	r6, r6, #4
 8018cec:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8018cf0:	b2f6      	uxtb	r6, r6
 8018cf2:	f110 0a01 	adds.w	sl, r0, #1
 8018cf6:	d457      	bmi.n	8018da8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8018cf8:	45d0      	cmp	r8, sl
 8018cfa:	dd55      	ble.n	8018da8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8018cfc:	f1bc 0f00 	cmp.w	ip, #0
 8018d00:	db52      	blt.n	8018da8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8018d02:	45e1      	cmp	r9, ip
 8018d04:	dd50      	ble.n	8018da8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8018d06:	2f00      	cmp	r7, #0
 8018d08:	f000 80ac 	beq.w	8018e64 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8018d0c:	f10e 0b01 	add.w	fp, lr, #1
 8018d10:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8018d14:	f01b 0f01 	tst.w	fp, #1
 8018d18:	5d14      	ldrb	r4, [r2, r4]
 8018d1a:	bf0c      	ite	eq
 8018d1c:	f004 040f 	andeq.w	r4, r4, #15
 8018d20:	1124      	asrne	r4, r4, #4
 8018d22:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8018d26:	b2e4      	uxtb	r4, r4
 8018d28:	2d00      	cmp	r5, #0
 8018d2a:	f000 8096 	beq.w	8018e5a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8018d2e:	2800      	cmp	r0, #0
 8018d30:	f10c 0c01 	add.w	ip, ip, #1
 8018d34:	db3c      	blt.n	8018db0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8018d36:	4580      	cmp	r8, r0
 8018d38:	dd3a      	ble.n	8018db0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8018d3a:	f1bc 0f00 	cmp.w	ip, #0
 8018d3e:	db37      	blt.n	8018db0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8018d40:	45e1      	cmp	r9, ip
 8018d42:	dd35      	ble.n	8018db0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8018d44:	eb03 0b0e 	add.w	fp, r3, lr
 8018d48:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8018d4c:	f01b 0f01 	tst.w	fp, #1
 8018d50:	5c10      	ldrb	r0, [r2, r0]
 8018d52:	bf0c      	ite	eq
 8018d54:	f000 000f 	andeq.w	r0, r0, #15
 8018d58:	1100      	asrne	r0, r0, #4
 8018d5a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018d5e:	b2c0      	uxtb	r0, r0
 8018d60:	f1ba 0f00 	cmp.w	sl, #0
 8018d64:	db26      	blt.n	8018db4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8018d66:	45d0      	cmp	r8, sl
 8018d68:	dd24      	ble.n	8018db4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8018d6a:	f1bc 0f00 	cmp.w	ip, #0
 8018d6e:	db21      	blt.n	8018db4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8018d70:	45e1      	cmp	r9, ip
 8018d72:	dd1f      	ble.n	8018db4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8018d74:	b307      	cbz	r7, 8018db8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8018d76:	3301      	adds	r3, #1
 8018d78:	449e      	add	lr, r3
 8018d7a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8018d7e:	f01e 0f01 	tst.w	lr, #1
 8018d82:	5cd3      	ldrb	r3, [r2, r3]
 8018d84:	bf0c      	ite	eq
 8018d86:	f003 030f 	andeq.w	r3, r3, #15
 8018d8a:	111b      	asrne	r3, r3, #4
 8018d8c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	2f0f      	cmp	r7, #15
 8018d94:	d911      	bls.n	8018dba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8018d96:	4b35      	ldr	r3, [pc, #212]	; (8018e6c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8018d98:	f240 115b 	movw	r1, #347	; 0x15b
 8018d9c:	4a34      	ldr	r2, [pc, #208]	; (8018e70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8018d9e:	4835      	ldr	r0, [pc, #212]	; (8018e74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8018da0:	f000 ff90 	bl	8019cc4 <__assert_func>
 8018da4:	2600      	movs	r6, #0
 8018da6:	e7a4      	b.n	8018cf2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8018da8:	2400      	movs	r4, #0
 8018daa:	e7bd      	b.n	8018d28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8018dac:	463c      	mov	r4, r7
 8018dae:	e7be      	b.n	8018d2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8018db0:	2000      	movs	r0, #0
 8018db2:	e7d5      	b.n	8018d60 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8018db4:	2300      	movs	r3, #0
 8018db6:	e7ec      	b.n	8018d92 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8018db8:	463b      	mov	r3, r7
 8018dba:	2d0f      	cmp	r5, #15
 8018dbc:	d8eb      	bhi.n	8018d96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8018dbe:	b2bf      	uxth	r7, r7
 8018dc0:	b2ad      	uxth	r5, r5
 8018dc2:	fb07 f205 	mul.w	r2, r7, r5
 8018dc6:	013f      	lsls	r7, r7, #4
 8018dc8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8018dcc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8018dd0:	1abf      	subs	r7, r7, r2
 8018dd2:	b2ad      	uxth	r5, r5
 8018dd4:	b2bf      	uxth	r7, r7
 8018dd6:	ebac 0c05 	sub.w	ip, ip, r5
 8018dda:	437c      	muls	r4, r7
 8018ddc:	fa1f fc8c 	uxth.w	ip, ip
 8018de0:	fb06 440c 	mla	r4, r6, ip, r4
 8018de4:	fb05 4400 	mla	r4, r5, r0, r4
 8018de8:	fb02 4203 	mla	r2, r2, r3, r4
 8018dec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018df0:	b38a      	cbz	r2, 8018e56 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8018df2:	4b21      	ldr	r3, [pc, #132]	; (8018e78 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8018df4:	681c      	ldr	r4, [r3, #0]
 8018df6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018dfa:	b2e5      	uxtb	r5, r4
 8018dfc:	4353      	muls	r3, r2
 8018dfe:	1c5a      	adds	r2, r3, #1
 8018e00:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018e04:	1212      	asrs	r2, r2, #8
 8018e06:	b290      	uxth	r0, r2
 8018e08:	43d2      	mvns	r2, r2
 8018e0a:	fb15 f500 	smulbb	r5, r5, r0
 8018e0e:	b2d3      	uxtb	r3, r2
 8018e10:	780a      	ldrb	r2, [r1, #0]
 8018e12:	fb02 5203 	mla	r2, r2, r3, r5
 8018e16:	b292      	uxth	r2, r2
 8018e18:	1c55      	adds	r5, r2, #1
 8018e1a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8018e1e:	784d      	ldrb	r5, [r1, #1]
 8018e20:	fb15 f503 	smulbb	r5, r5, r3
 8018e24:	1212      	asrs	r2, r2, #8
 8018e26:	700a      	strb	r2, [r1, #0]
 8018e28:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8018e2c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8018e30:	fb02 5200 	mla	r2, r2, r0, r5
 8018e34:	b292      	uxth	r2, r2
 8018e36:	1c55      	adds	r5, r2, #1
 8018e38:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8018e3c:	1212      	asrs	r2, r2, #8
 8018e3e:	704a      	strb	r2, [r1, #1]
 8018e40:	788a      	ldrb	r2, [r1, #2]
 8018e42:	fb12 f303 	smulbb	r3, r2, r3
 8018e46:	fb04 3300 	mla	r3, r4, r0, r3
 8018e4a:	b29b      	uxth	r3, r3
 8018e4c:	1c5a      	adds	r2, r3, #1
 8018e4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018e52:	121b      	asrs	r3, r3, #8
 8018e54:	708b      	strb	r3, [r1, #2]
 8018e56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e5a:	2f0f      	cmp	r7, #15
 8018e5c:	d89b      	bhi.n	8018d96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8018e5e:	462b      	mov	r3, r5
 8018e60:	4628      	mov	r0, r5
 8018e62:	e7ac      	b.n	8018dbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8018e64:	2d00      	cmp	r5, #0
 8018e66:	d1a1      	bne.n	8018dac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8018e68:	462c      	mov	r4, r5
 8018e6a:	e7f8      	b.n	8018e5e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8018e6c:	0801e734 	.word	0x0801e734
 8018e70:	0801eb4a 	.word	0x0801eb4a
 8018e74:	0801e701 	.word	0x0801e701
 8018e78:	24006af8 	.word	0x24006af8

08018e7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e80:	ed2d 8b08 	vpush	{d8-d11}
 8018e84:	b097      	sub	sp, #92	; 0x5c
 8018e86:	eeb0 aa40 	vmov.f32	s20, s0
 8018e8a:	eef0 9a60 	vmov.f32	s19, s1
 8018e8e:	9214      	str	r2, [sp, #80]	; 0x50
 8018e90:	eeb0 9a41 	vmov.f32	s18, s2
 8018e94:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018e96:	eeb0 8a62 	vmov.f32	s16, s5
 8018e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8018e9c:	eef0 8a43 	vmov.f32	s17, s6
 8018ea0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8018ea4:	eef0 ba44 	vmov.f32	s23, s8
 8018ea8:	9015      	str	r0, [sp, #84]	; 0x54
 8018eaa:	eeb0 ba64 	vmov.f32	s22, s9
 8018eae:	6850      	ldr	r0, [r2, #4]
 8018eb0:	eef0 aa45 	vmov.f32	s21, s10
 8018eb4:	910c      	str	r1, [sp, #48]	; 0x30
 8018eb6:	930e      	str	r3, [sp, #56]	; 0x38
 8018eb8:	6812      	ldr	r2, [r2, #0]
 8018eba:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8018ebe:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8018ec2:	fb00 1303 	mla	r3, r0, r3, r1
 8018ec6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018eca:	eb02 0a03 	add.w	sl, r2, r3
 8018ece:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018ed0:	689b      	ldr	r3, [r3, #8]
 8018ed2:	3301      	adds	r3, #1
 8018ed4:	f023 0301 	bic.w	r3, r3, #1
 8018ed8:	930f      	str	r3, [sp, #60]	; 0x3c
 8018eda:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018edc:	681f      	ldr	r7, [r3, #0]
 8018ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	dc03      	bgt.n	8018eec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	f340 8247 	ble.w	801937a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8018eec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018eee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018ef2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018ef6:	1e48      	subs	r0, r1, #1
 8018ef8:	f102 3cff 	add.w	ip, r2, #4294967295
 8018efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f340 80e5 	ble.w	80190ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8018f04:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8018f08:	ea4f 4326 	mov.w	r3, r6, asr #16
 8018f0c:	d406      	bmi.n	8018f1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018f0e:	4586      	cmp	lr, r0
 8018f10:	da04      	bge.n	8018f1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	db02      	blt.n	8018f1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018f16:	4563      	cmp	r3, ip
 8018f18:	f2c0 80da 	blt.w	80190d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018f1c:	f11e 0e01 	adds.w	lr, lr, #1
 8018f20:	f100 80cb 	bmi.w	80190ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8018f24:	4571      	cmp	r1, lr
 8018f26:	f2c0 80c8 	blt.w	80190ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8018f2a:	3301      	adds	r3, #1
 8018f2c:	f100 80c5 	bmi.w	80190ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8018f30:	429a      	cmp	r2, r3
 8018f32:	f2c0 80c2 	blt.w	80190ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8018f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f38:	46d0      	mov	r8, sl
 8018f3a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8018f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8018f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	f340 80e3 	ble.w	801910e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8018f48:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018f4a:	1430      	asrs	r0, r6, #16
 8018f4c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8018f50:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8018f54:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8018f58:	142b      	asrs	r3, r5, #16
 8018f5a:	f100 812e 	bmi.w	80191ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f5e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8018f62:	455b      	cmp	r3, fp
 8018f64:	f280 8129 	bge.w	80191ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f68:	2800      	cmp	r0, #0
 8018f6a:	f2c0 8126 	blt.w	80191ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f6e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8018f72:	4558      	cmp	r0, fp
 8018f74:	f280 8121 	bge.w	80191ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f78:	fb00 3309 	mla	r3, r0, r9, r3
 8018f7c:	0858      	lsrs	r0, r3, #1
 8018f7e:	07dc      	lsls	r4, r3, #31
 8018f80:	f817 c000 	ldrb.w	ip, [r7, r0]
 8018f84:	bf54      	ite	pl
 8018f86:	f00c 0c0f 	andpl.w	ip, ip, #15
 8018f8a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018f8e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018f92:	fa5f fc8c 	uxtb.w	ip, ip
 8018f96:	2a00      	cmp	r2, #0
 8018f98:	f000 80fe 	beq.w	8019198 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8018f9c:	1c58      	adds	r0, r3, #1
 8018f9e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8018fa2:	07c0      	lsls	r0, r0, #31
 8018fa4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8018fa8:	bf54      	ite	pl
 8018faa:	f00e 0e0f 	andpl.w	lr, lr, #15
 8018fae:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8018fb2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8018fb6:	fa5f f08e 	uxtb.w	r0, lr
 8018fba:	9010      	str	r0, [sp, #64]	; 0x40
 8018fbc:	b1d9      	cbz	r1, 8018ff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8018fbe:	444b      	add	r3, r9
 8018fc0:	0858      	lsrs	r0, r3, #1
 8018fc2:	07dc      	lsls	r4, r3, #31
 8018fc4:	f103 0301 	add.w	r3, r3, #1
 8018fc8:	5c38      	ldrb	r0, [r7, r0]
 8018fca:	bf54      	ite	pl
 8018fcc:	f000 000f 	andpl.w	r0, r0, #15
 8018fd0:	1100      	asrmi	r0, r0, #4
 8018fd2:	07dc      	lsls	r4, r3, #31
 8018fd4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018fd8:	b2c0      	uxtb	r0, r0
 8018fda:	900a      	str	r0, [sp, #40]	; 0x28
 8018fdc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018fe0:	f817 e000 	ldrb.w	lr, [r7, r0]
 8018fe4:	bf54      	ite	pl
 8018fe6:	f00e 030f 	andpl.w	r3, lr, #15
 8018fea:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8018fee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	9311      	str	r3, [sp, #68]	; 0x44
 8018ff6:	b292      	uxth	r2, r2
 8018ff8:	b289      	uxth	r1, r1
 8018ffa:	0113      	lsls	r3, r2, #4
 8018ffc:	fb02 f001 	mul.w	r0, r2, r1
 8019000:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019002:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8019006:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801900a:	1a1b      	subs	r3, r3, r0
 801900c:	b289      	uxth	r1, r1
 801900e:	b29b      	uxth	r3, r3
 8019010:	ebae 0e01 	sub.w	lr, lr, r1
 8019014:	4353      	muls	r3, r2
 8019016:	fa1f fe8e 	uxth.w	lr, lr
 801901a:	fb0c 320e 	mla	r2, ip, lr, r3
 801901e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019020:	fb01 2203 	mla	r2, r1, r3, r2
 8019024:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019026:	fb00 2203 	mla	r2, r0, r3, r2
 801902a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801902e:	2a00      	cmp	r2, #0
 8019030:	d039      	beq.n	80190a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019032:	4bc7      	ldr	r3, [pc, #796]	; (8019350 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8019034:	6819      	ldr	r1, [r3, #0]
 8019036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019038:	fa5f fc81 	uxtb.w	ip, r1
 801903c:	435a      	muls	r2, r3
 801903e:	1c53      	adds	r3, r2, #1
 8019040:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019044:	1212      	asrs	r2, r2, #8
 8019046:	b290      	uxth	r0, r2
 8019048:	43d2      	mvns	r2, r2
 801904a:	fb1c fc00 	smulbb	ip, ip, r0
 801904e:	b2d3      	uxtb	r3, r2
 8019050:	f898 2000 	ldrb.w	r2, [r8]
 8019054:	fb02 c203 	mla	r2, r2, r3, ip
 8019058:	b292      	uxth	r2, r2
 801905a:	f102 0c01 	add.w	ip, r2, #1
 801905e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019062:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019066:	fb1c fc03 	smulbb	ip, ip, r3
 801906a:	1212      	asrs	r2, r2, #8
 801906c:	f888 2000 	strb.w	r2, [r8]
 8019070:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8019074:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8019078:	fb02 c200 	mla	r2, r2, r0, ip
 801907c:	b292      	uxth	r2, r2
 801907e:	f102 0c01 	add.w	ip, r2, #1
 8019082:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019086:	1212      	asrs	r2, r2, #8
 8019088:	f888 2001 	strb.w	r2, [r8, #1]
 801908c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8019090:	fb12 f303 	smulbb	r3, r2, r3
 8019094:	fb01 3300 	mla	r3, r1, r0, r3
 8019098:	b29b      	uxth	r3, r3
 801909a:	1c5a      	adds	r2, r3, #1
 801909c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80190a0:	121b      	asrs	r3, r3, #8
 80190a2:	f888 3002 	strb.w	r3, [r8, #2]
 80190a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80190a8:	f108 0803 	add.w	r8, r8, #3
 80190ac:	441d      	add	r5, r3
 80190ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80190b0:	441e      	add	r6, r3
 80190b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190b4:	3b01      	subs	r3, #1
 80190b6:	930d      	str	r3, [sp, #52]	; 0x34
 80190b8:	e742      	b.n	8018f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80190ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80190bc:	f10a 0a03 	add.w	sl, sl, #3
 80190c0:	441d      	add	r5, r3
 80190c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80190c4:	441e      	add	r6, r3
 80190c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190c8:	3b01      	subs	r3, #1
 80190ca:	9309      	str	r3, [sp, #36]	; 0x24
 80190cc:	e716      	b.n	8018efc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80190ce:	d024      	beq.n	801911a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80190d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190d2:	982b      	ldr	r0, [sp, #172]	; 0xac
 80190d4:	3b01      	subs	r3, #1
 80190d6:	fb00 5003 	mla	r0, r0, r3, r5
 80190da:	1400      	asrs	r0, r0, #16
 80190dc:	f53f af2b 	bmi.w	8018f36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80190e0:	3901      	subs	r1, #1
 80190e2:	4288      	cmp	r0, r1
 80190e4:	f6bf af27 	bge.w	8018f36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80190e8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80190ea:	fb01 6303 	mla	r3, r1, r3, r6
 80190ee:	141b      	asrs	r3, r3, #16
 80190f0:	f53f af21 	bmi.w	8018f36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80190f4:	3a01      	subs	r2, #1
 80190f6:	4293      	cmp	r3, r2
 80190f8:	f6bf af1d 	bge.w	8018f36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80190fc:	f10a 0e03 	add.w	lr, sl, #3
 8019100:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8019104:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8019108:	f1b8 0f00 	cmp.w	r8, #0
 801910c:	dc76      	bgt.n	80191fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801910e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019110:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019114:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019118:	44a2      	add	sl, r4
 801911a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801911c:	2b00      	cmp	r3, #0
 801911e:	f340 812c 	ble.w	801937a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8019122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019128:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801912c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019130:	eef0 6a48 	vmov.f32	s13, s16
 8019134:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019138:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801913c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019140:	ee16 5a90 	vmov	r5, s13
 8019144:	eef0 6a68 	vmov.f32	s13, s17
 8019148:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801914c:	ee16 6a90 	vmov	r6, s13
 8019150:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019154:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019158:	ee37 8a48 	vsub.f32	s16, s14, s16
 801915c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019160:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019164:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019168:	ee18 2a10 	vmov	r2, s16
 801916c:	eeb0 8a47 	vmov.f32	s16, s14
 8019170:	fb92 f3f3 	sdiv	r3, r2, r3
 8019174:	ee18 2a90 	vmov	r2, s17
 8019178:	932b      	str	r3, [sp, #172]	; 0xac
 801917a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801917c:	eef0 8a67 	vmov.f32	s17, s15
 8019180:	fb92 f3f3 	sdiv	r3, r2, r3
 8019184:	932c      	str	r3, [sp, #176]	; 0xb0
 8019186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019188:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801918a:	3b01      	subs	r3, #1
 801918c:	930c      	str	r3, [sp, #48]	; 0x30
 801918e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019190:	bf08      	it	eq
 8019192:	4613      	moveq	r3, r2
 8019194:	9309      	str	r3, [sp, #36]	; 0x24
 8019196:	e6a2      	b.n	8018ede <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019198:	2900      	cmp	r1, #0
 801919a:	f43f af2c 	beq.w	8018ff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801919e:	eb09 0003 	add.w	r0, r9, r3
 80191a2:	0843      	lsrs	r3, r0, #1
 80191a4:	07c0      	lsls	r0, r0, #31
 80191a6:	5cfb      	ldrb	r3, [r7, r3]
 80191a8:	bf54      	ite	pl
 80191aa:	f003 030f 	andpl.w	r3, r3, #15
 80191ae:	111b      	asrmi	r3, r3, #4
 80191b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80191b4:	b2db      	uxtb	r3, r3
 80191b6:	930a      	str	r3, [sp, #40]	; 0x28
 80191b8:	e71d      	b.n	8018ff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80191ba:	f113 0b01 	adds.w	fp, r3, #1
 80191be:	f53f af72 	bmi.w	80190a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80191c2:	45dc      	cmp	ip, fp
 80191c4:	f6ff af6f 	blt.w	80190a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80191c8:	f110 0b01 	adds.w	fp, r0, #1
 80191cc:	f53f af6b 	bmi.w	80190a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80191d0:	45de      	cmp	lr, fp
 80191d2:	f6ff af68 	blt.w	80190a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80191d6:	9302      	str	r3, [sp, #8]
 80191d8:	fa0f f38e 	sxth.w	r3, lr
 80191dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80191de:	9301      	str	r3, [sp, #4]
 80191e0:	fa0f f38c 	sxth.w	r3, ip
 80191e4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80191e8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80191ec:	9300      	str	r3, [sp, #0]
 80191ee:	463a      	mov	r2, r7
 80191f0:	464b      	mov	r3, r9
 80191f2:	4641      	mov	r1, r8
 80191f4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80191f6:	f7ff fd59 	bl	8018cac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80191fa:	e754      	b.n	80190a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80191fc:	142a      	asrs	r2, r5, #16
 80191fe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019202:	1433      	asrs	r3, r6, #16
 8019204:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019208:	fb09 2303 	mla	r3, r9, r3, r2
 801920c:	085a      	lsrs	r2, r3, #1
 801920e:	07dc      	lsls	r4, r3, #31
 8019210:	5cba      	ldrb	r2, [r7, r2]
 8019212:	bf54      	ite	pl
 8019214:	f002 020f 	andpl.w	r2, r2, #15
 8019218:	1112      	asrmi	r2, r2, #4
 801921a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801921e:	b2d2      	uxtb	r2, r2
 8019220:	2900      	cmp	r1, #0
 8019222:	f000 8097 	beq.w	8019354 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8019226:	f103 0b01 	add.w	fp, r3, #1
 801922a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801922e:	f01b 0f01 	tst.w	fp, #1
 8019232:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8019236:	bf0c      	ite	eq
 8019238:	f00c 0c0f 	andeq.w	ip, ip, #15
 801923c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8019240:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8019244:	fa5f f48c 	uxtb.w	r4, ip
 8019248:	9412      	str	r4, [sp, #72]	; 0x48
 801924a:	b300      	cbz	r0, 801928e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801924c:	444b      	add	r3, r9
 801924e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8019252:	07dc      	lsls	r4, r3, #31
 8019254:	f103 0301 	add.w	r3, r3, #1
 8019258:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801925c:	bf54      	ite	pl
 801925e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8019262:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8019266:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801926a:	fa5f f48c 	uxtb.w	r4, ip
 801926e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8019272:	940b      	str	r4, [sp, #44]	; 0x2c
 8019274:	07dc      	lsls	r4, r3, #31
 8019276:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801927a:	bf54      	ite	pl
 801927c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8019280:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8019284:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8019288:	fa5f f38c 	uxtb.w	r3, ip
 801928c:	9313      	str	r3, [sp, #76]	; 0x4c
 801928e:	b289      	uxth	r1, r1
 8019290:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019292:	b280      	uxth	r0, r0
 8019294:	fb01 f300 	mul.w	r3, r1, r0
 8019298:	0109      	lsls	r1, r1, #4
 801929a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801929e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80192a2:	1ac9      	subs	r1, r1, r3
 80192a4:	b280      	uxth	r0, r0
 80192a6:	b289      	uxth	r1, r1
 80192a8:	ebac 0c00 	sub.w	ip, ip, r0
 80192ac:	4361      	muls	r1, r4
 80192ae:	fa1f fc8c 	uxth.w	ip, ip
 80192b2:	fb02 120c 	mla	r2, r2, ip, r1
 80192b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80192b8:	fb00 2001 	mla	r0, r0, r1, r2
 80192bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80192be:	fb03 0302 	mla	r3, r3, r2, r0
 80192c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d039      	beq.n	801933e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80192ca:	4a21      	ldr	r2, [pc, #132]	; (8019350 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80192cc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80192d0:	6810      	ldr	r0, [r2, #0]
 80192d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80192d4:	fa5f fc80 	uxtb.w	ip, r0
 80192d8:	4353      	muls	r3, r2
 80192da:	1c5a      	adds	r2, r3, #1
 80192dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80192e0:	121b      	asrs	r3, r3, #8
 80192e2:	b29a      	uxth	r2, r3
 80192e4:	43db      	mvns	r3, r3
 80192e6:	fb1c fc02 	smulbb	ip, ip, r2
 80192ea:	b2db      	uxtb	r3, r3
 80192ec:	fb01 c103 	mla	r1, r1, r3, ip
 80192f0:	b289      	uxth	r1, r1
 80192f2:	f101 0c01 	add.w	ip, r1, #1
 80192f6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80192fa:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80192fe:	fb1c fc03 	smulbb	ip, ip, r3
 8019302:	1209      	asrs	r1, r1, #8
 8019304:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8019308:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801930c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8019310:	fb01 c102 	mla	r1, r1, r2, ip
 8019314:	b289      	uxth	r1, r1
 8019316:	f101 0c01 	add.w	ip, r1, #1
 801931a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801931e:	1209      	asrs	r1, r1, #8
 8019320:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8019324:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8019328:	fb11 f303 	smulbb	r3, r1, r3
 801932c:	fb00 3002 	mla	r0, r0, r2, r3
 8019330:	b280      	uxth	r0, r0
 8019332:	1c42      	adds	r2, r0, #1
 8019334:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8019338:	1200      	asrs	r0, r0, #8
 801933a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801933e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019340:	f10e 0e03 	add.w	lr, lr, #3
 8019344:	f108 38ff 	add.w	r8, r8, #4294967295
 8019348:	441d      	add	r5, r3
 801934a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801934c:	441e      	add	r6, r3
 801934e:	e6db      	b.n	8019108 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019350:	24006af8 	.word	0x24006af8
 8019354:	2800      	cmp	r0, #0
 8019356:	d09a      	beq.n	801928e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8019358:	444b      	add	r3, r9
 801935a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801935e:	07db      	lsls	r3, r3, #31
 8019360:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8019364:	bf54      	ite	pl
 8019366:	f00c 0c0f 	andpl.w	ip, ip, #15
 801936a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801936e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8019372:	fa5f f38c 	uxtb.w	r3, ip
 8019376:	930b      	str	r3, [sp, #44]	; 0x2c
 8019378:	e789      	b.n	801928e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801937a:	b017      	add	sp, #92	; 0x5c
 801937c:	ecbd 8b08 	vpop	{d8-d11}
 8019380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019384 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8019384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019388:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801938c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8019390:	2800      	cmp	r0, #0
 8019392:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8019396:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801939a:	fb0c 0e03 	mla	lr, ip, r3, r0
 801939e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80193a2:	db6b      	blt.n	801947c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80193a4:	4580      	cmp	r8, r0
 80193a6:	dd69      	ble.n	801947c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80193a8:	f1bc 0f00 	cmp.w	ip, #0
 80193ac:	db66      	blt.n	801947c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80193ae:	45e1      	cmp	r9, ip
 80193b0:	dd64      	ble.n	801947c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80193b2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80193b6:	f01e 0f01 	tst.w	lr, #1
 80193ba:	5d16      	ldrb	r6, [r2, r4]
 80193bc:	bf0c      	ite	eq
 80193be:	f006 060f 	andeq.w	r6, r6, #15
 80193c2:	1136      	asrne	r6, r6, #4
 80193c4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80193c8:	b2f6      	uxtb	r6, r6
 80193ca:	f110 0a01 	adds.w	sl, r0, #1
 80193ce:	d457      	bmi.n	8019480 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80193d0:	45d0      	cmp	r8, sl
 80193d2:	dd55      	ble.n	8019480 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80193d4:	f1bc 0f00 	cmp.w	ip, #0
 80193d8:	db52      	blt.n	8019480 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80193da:	45e1      	cmp	r9, ip
 80193dc:	dd50      	ble.n	8019480 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80193de:	2f00      	cmp	r7, #0
 80193e0:	f000 80a5 	beq.w	801952e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80193e4:	f10e 0b01 	add.w	fp, lr, #1
 80193e8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80193ec:	f01b 0f01 	tst.w	fp, #1
 80193f0:	5d14      	ldrb	r4, [r2, r4]
 80193f2:	bf0c      	ite	eq
 80193f4:	f004 040f 	andeq.w	r4, r4, #15
 80193f8:	1124      	asrne	r4, r4, #4
 80193fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80193fe:	b2e4      	uxtb	r4, r4
 8019400:	2d00      	cmp	r5, #0
 8019402:	f000 808f 	beq.w	8019524 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8019406:	2800      	cmp	r0, #0
 8019408:	f10c 0c01 	add.w	ip, ip, #1
 801940c:	db3c      	blt.n	8019488 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801940e:	4580      	cmp	r8, r0
 8019410:	dd3a      	ble.n	8019488 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8019412:	f1bc 0f00 	cmp.w	ip, #0
 8019416:	db37      	blt.n	8019488 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8019418:	45e1      	cmp	r9, ip
 801941a:	dd35      	ble.n	8019488 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801941c:	eb03 0b0e 	add.w	fp, r3, lr
 8019420:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8019424:	f01b 0f01 	tst.w	fp, #1
 8019428:	5c10      	ldrb	r0, [r2, r0]
 801942a:	bf0c      	ite	eq
 801942c:	f000 000f 	andeq.w	r0, r0, #15
 8019430:	1100      	asrne	r0, r0, #4
 8019432:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8019436:	b2c0      	uxtb	r0, r0
 8019438:	f1ba 0f00 	cmp.w	sl, #0
 801943c:	db26      	blt.n	801948c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801943e:	45d0      	cmp	r8, sl
 8019440:	dd24      	ble.n	801948c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8019442:	f1bc 0f00 	cmp.w	ip, #0
 8019446:	db21      	blt.n	801948c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8019448:	45e1      	cmp	r9, ip
 801944a:	dd1f      	ble.n	801948c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801944c:	b307      	cbz	r7, 8019490 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801944e:	3301      	adds	r3, #1
 8019450:	449e      	add	lr, r3
 8019452:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8019456:	f01e 0f01 	tst.w	lr, #1
 801945a:	5cd3      	ldrb	r3, [r2, r3]
 801945c:	bf0c      	ite	eq
 801945e:	f003 030f 	andeq.w	r3, r3, #15
 8019462:	111b      	asrne	r3, r3, #4
 8019464:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8019468:	b2db      	uxtb	r3, r3
 801946a:	2f0f      	cmp	r7, #15
 801946c:	d911      	bls.n	8019492 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801946e:	4b32      	ldr	r3, [pc, #200]	; (8019538 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8019470:	f240 115b 	movw	r1, #347	; 0x15b
 8019474:	4a31      	ldr	r2, [pc, #196]	; (801953c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8019476:	4832      	ldr	r0, [pc, #200]	; (8019540 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8019478:	f000 fc24 	bl	8019cc4 <__assert_func>
 801947c:	2600      	movs	r6, #0
 801947e:	e7a4      	b.n	80193ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8019480:	2400      	movs	r4, #0
 8019482:	e7bd      	b.n	8019400 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8019484:	463c      	mov	r4, r7
 8019486:	e7be      	b.n	8019406 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8019488:	2000      	movs	r0, #0
 801948a:	e7d5      	b.n	8019438 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801948c:	2300      	movs	r3, #0
 801948e:	e7ec      	b.n	801946a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8019490:	463b      	mov	r3, r7
 8019492:	2d0f      	cmp	r5, #15
 8019494:	d8eb      	bhi.n	801946e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8019496:	b2bf      	uxth	r7, r7
 8019498:	b2ad      	uxth	r5, r5
 801949a:	fb07 f205 	mul.w	r2, r7, r5
 801949e:	013f      	lsls	r7, r7, #4
 80194a0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80194a4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80194a8:	1abf      	subs	r7, r7, r2
 80194aa:	b2ad      	uxth	r5, r5
 80194ac:	b2bf      	uxth	r7, r7
 80194ae:	ebac 0c05 	sub.w	ip, ip, r5
 80194b2:	437c      	muls	r4, r7
 80194b4:	fa1f fc8c 	uxth.w	ip, ip
 80194b8:	fb06 440c 	mla	r4, r6, ip, r4
 80194bc:	fb05 4400 	mla	r4, r5, r0, r4
 80194c0:	fb02 4303 	mla	r3, r2, r3, r4
 80194c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80194c8:	b353      	cbz	r3, 8019520 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80194ca:	4a1e      	ldr	r2, [pc, #120]	; (8019544 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80194cc:	7808      	ldrb	r0, [r1, #0]
 80194ce:	6814      	ldr	r4, [r2, #0]
 80194d0:	b29a      	uxth	r2, r3
 80194d2:	43db      	mvns	r3, r3
 80194d4:	b2e5      	uxtb	r5, r4
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	fb15 f502 	smulbb	r5, r5, r2
 80194dc:	fb00 5003 	mla	r0, r0, r3, r5
 80194e0:	b280      	uxth	r0, r0
 80194e2:	1c45      	adds	r5, r0, #1
 80194e4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80194e8:	784d      	ldrb	r5, [r1, #1]
 80194ea:	fb15 f503 	smulbb	r5, r5, r3
 80194ee:	1200      	asrs	r0, r0, #8
 80194f0:	7008      	strb	r0, [r1, #0]
 80194f2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80194f6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80194fa:	fb00 5002 	mla	r0, r0, r2, r5
 80194fe:	b280      	uxth	r0, r0
 8019500:	1c45      	adds	r5, r0, #1
 8019502:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8019506:	1200      	asrs	r0, r0, #8
 8019508:	7048      	strb	r0, [r1, #1]
 801950a:	7888      	ldrb	r0, [r1, #2]
 801950c:	fb10 f303 	smulbb	r3, r0, r3
 8019510:	fb04 3202 	mla	r2, r4, r2, r3
 8019514:	b292      	uxth	r2, r2
 8019516:	1c53      	adds	r3, r2, #1
 8019518:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801951c:	1212      	asrs	r2, r2, #8
 801951e:	708a      	strb	r2, [r1, #2]
 8019520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019524:	2f0f      	cmp	r7, #15
 8019526:	d8a2      	bhi.n	801946e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8019528:	462b      	mov	r3, r5
 801952a:	4628      	mov	r0, r5
 801952c:	e7b3      	b.n	8019496 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801952e:	2d00      	cmp	r5, #0
 8019530:	d1a8      	bne.n	8019484 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8019532:	462c      	mov	r4, r5
 8019534:	e7f8      	b.n	8019528 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8019536:	bf00      	nop
 8019538:	0801e734 	.word	0x0801e734
 801953c:	0801eb4a 	.word	0x0801eb4a
 8019540:	0801e701 	.word	0x0801e701
 8019544:	24006af8 	.word	0x24006af8

08019548 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801954c:	ed2d 8b08 	vpush	{d8-d11}
 8019550:	b093      	sub	sp, #76	; 0x4c
 8019552:	461c      	mov	r4, r3
 8019554:	eeb0 aa40 	vmov.f32	s20, s0
 8019558:	920c      	str	r2, [sp, #48]	; 0x30
 801955a:	eef0 9a60 	vmov.f32	s19, s1
 801955e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019560:	eeb0 9a41 	vmov.f32	s18, s2
 8019564:	9011      	str	r0, [sp, #68]	; 0x44
 8019566:	eeb0 8a62 	vmov.f32	s16, s5
 801956a:	6850      	ldr	r0, [r2, #4]
 801956c:	eef0 8a43 	vmov.f32	s17, s6
 8019570:	9107      	str	r1, [sp, #28]
 8019572:	eef0 ba44 	vmov.f32	s23, s8
 8019576:	6812      	ldr	r2, [r2, #0]
 8019578:	eeb0 ba64 	vmov.f32	s22, s9
 801957c:	eef0 aa45 	vmov.f32	s21, s10
 8019580:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8019584:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8019588:	fb00 1303 	mla	r3, r0, r3, r1
 801958c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019590:	eb02 0b03 	add.w	fp, r2, r3
 8019594:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019596:	689b      	ldr	r3, [r3, #8]
 8019598:	3301      	adds	r3, #1
 801959a:	f023 0301 	bic.w	r3, r3, #1
 801959e:	9309      	str	r3, [sp, #36]	; 0x24
 80195a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80195a2:	f8d3 8000 	ldr.w	r8, [r3]
 80195a6:	9b07      	ldr	r3, [sp, #28]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	dc03      	bgt.n	80195b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80195ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	f340 822b 	ble.w	8019a0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80195b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80195b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80195ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80195be:	1e48      	subs	r0, r1, #1
 80195c0:	1e57      	subs	r7, r2, #1
 80195c2:	2c00      	cmp	r4, #0
 80195c4:	f340 80d7 	ble.w	8019776 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80195c8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80195cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80195d0:	d406      	bmi.n	80195e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80195d2:	4584      	cmp	ip, r0
 80195d4:	da04      	bge.n	80195e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	db02      	blt.n	80195e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80195da:	42bb      	cmp	r3, r7
 80195dc:	f2c0 80cc 	blt.w	8019778 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80195e0:	f11c 0c01 	adds.w	ip, ip, #1
 80195e4:	f100 80bf 	bmi.w	8019766 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80195e8:	4561      	cmp	r1, ip
 80195ea:	f2c0 80bc 	blt.w	8019766 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80195ee:	3301      	adds	r3, #1
 80195f0:	f100 80b9 	bmi.w	8019766 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80195f4:	429a      	cmp	r2, r3
 80195f6:	f2c0 80b6 	blt.w	8019766 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80195fa:	46a2      	mov	sl, r4
 80195fc:	465f      	mov	r7, fp
 80195fe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8019602:	f1ba 0f00 	cmp.w	sl, #0
 8019606:	f340 80d4 	ble.w	80197b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801960a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801960e:	1430      	asrs	r0, r6, #16
 8019610:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8019614:	9308      	str	r3, [sp, #32]
 8019616:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019618:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801961c:	142b      	asrs	r3, r5, #16
 801961e:	f100 8124 	bmi.w	801986a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8019622:	f10c 32ff 	add.w	r2, ip, #4294967295
 8019626:	4293      	cmp	r3, r2
 8019628:	f280 811f 	bge.w	801986a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801962c:	2800      	cmp	r0, #0
 801962e:	f2c0 811c 	blt.w	801986a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8019632:	f10e 32ff 	add.w	r2, lr, #4294967295
 8019636:	4290      	cmp	r0, r2
 8019638:	f280 8117 	bge.w	801986a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801963c:	fb00 3309 	mla	r3, r0, r9, r3
 8019640:	0858      	lsrs	r0, r3, #1
 8019642:	07da      	lsls	r2, r3, #31
 8019644:	9a08      	ldr	r2, [sp, #32]
 8019646:	f818 c000 	ldrb.w	ip, [r8, r0]
 801964a:	bf54      	ite	pl
 801964c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8019650:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8019654:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8019658:	fa5f fc8c 	uxtb.w	ip, ip
 801965c:	2a00      	cmp	r2, #0
 801965e:	f000 80ed 	beq.w	801983c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8019662:	1c58      	adds	r0, r3, #1
 8019664:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8019668:	07c0      	lsls	r0, r0, #31
 801966a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801966e:	bf54      	ite	pl
 8019670:	f00e 0e0f 	andpl.w	lr, lr, #15
 8019674:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8019678:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801967c:	fa5f fe8e 	uxtb.w	lr, lr
 8019680:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8019684:	b1c9      	cbz	r1, 80196ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8019686:	444b      	add	r3, r9
 8019688:	0858      	lsrs	r0, r3, #1
 801968a:	07da      	lsls	r2, r3, #31
 801968c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019690:	bf54      	ite	pl
 8019692:	f000 000f 	andpl.w	r0, r0, #15
 8019696:	1100      	asrmi	r0, r0, #4
 8019698:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801969c:	b2c0      	uxtb	r0, r0
 801969e:	900a      	str	r0, [sp, #40]	; 0x28
 80196a0:	1c58      	adds	r0, r3, #1
 80196a2:	0843      	lsrs	r3, r0, #1
 80196a4:	07c2      	lsls	r2, r0, #31
 80196a6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80196aa:	bf54      	ite	pl
 80196ac:	f003 030f 	andpl.w	r3, r3, #15
 80196b0:	111b      	asrmi	r3, r3, #4
 80196b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80196b6:	b2db      	uxtb	r3, r3
 80196b8:	930e      	str	r3, [sp, #56]	; 0x38
 80196ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80196be:	b289      	uxth	r1, r1
 80196c0:	fb02 f301 	mul.w	r3, r2, r1
 80196c4:	0112      	lsls	r2, r2, #4
 80196c6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80196ca:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80196ce:	1ad2      	subs	r2, r2, r3
 80196d0:	b289      	uxth	r1, r1
 80196d2:	b292      	uxth	r2, r2
 80196d4:	1a40      	subs	r0, r0, r1
 80196d6:	fa1f fe80 	uxth.w	lr, r0
 80196da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80196dc:	4342      	muls	r2, r0
 80196de:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80196e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196e4:	fb01 c102 	mla	r1, r1, r2, ip
 80196e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196ea:	fb03 1302 	mla	r3, r3, r2, r1
 80196ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80196f2:	b383      	cbz	r3, 8019756 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80196f4:	4ac7      	ldr	r2, [pc, #796]	; (8019a14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 80196f6:	2bff      	cmp	r3, #255	; 0xff
 80196f8:	6812      	ldr	r2, [r2, #0]
 80196fa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80196fe:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8019702:	b2d2      	uxtb	r2, r2
 8019704:	f000 80ac 	beq.w	8019860 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8019708:	b299      	uxth	r1, r3
 801970a:	43db      	mvns	r3, r3
 801970c:	f897 c000 	ldrb.w	ip, [r7]
 8019710:	fb12 f201 	smulbb	r2, r2, r1
 8019714:	b2db      	uxtb	r3, r3
 8019716:	fb10 f001 	smulbb	r0, r0, r1
 801971a:	fb0c 2203 	mla	r2, ip, r3, r2
 801971e:	fb1e f101 	smulbb	r1, lr, r1
 8019722:	b292      	uxth	r2, r2
 8019724:	f102 0c01 	add.w	ip, r2, #1
 8019728:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801972c:	1212      	asrs	r2, r2, #8
 801972e:	703a      	strb	r2, [r7, #0]
 8019730:	787a      	ldrb	r2, [r7, #1]
 8019732:	fb02 0003 	mla	r0, r2, r3, r0
 8019736:	b280      	uxth	r0, r0
 8019738:	1c42      	adds	r2, r0, #1
 801973a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801973e:	78ba      	ldrb	r2, [r7, #2]
 8019740:	fb02 1303 	mla	r3, r2, r3, r1
 8019744:	1200      	asrs	r0, r0, #8
 8019746:	b29b      	uxth	r3, r3
 8019748:	7078      	strb	r0, [r7, #1]
 801974a:	f103 0e01 	add.w	lr, r3, #1
 801974e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8019752:	121b      	asrs	r3, r3, #8
 8019754:	70bb      	strb	r3, [r7, #2]
 8019756:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019758:	3703      	adds	r7, #3
 801975a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801975e:	441d      	add	r5, r3
 8019760:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019762:	441e      	add	r6, r3
 8019764:	e74d      	b.n	8019602 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8019766:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019768:	3c01      	subs	r4, #1
 801976a:	f10b 0b03 	add.w	fp, fp, #3
 801976e:	441d      	add	r5, r3
 8019770:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019772:	441e      	add	r6, r3
 8019774:	e725      	b.n	80195c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019776:	d021      	beq.n	80197bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8019778:	1e63      	subs	r3, r4, #1
 801977a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801977c:	fb00 5003 	mla	r0, r0, r3, r5
 8019780:	1400      	asrs	r0, r0, #16
 8019782:	f53f af3a 	bmi.w	80195fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8019786:	3901      	subs	r1, #1
 8019788:	4288      	cmp	r0, r1
 801978a:	f6bf af36 	bge.w	80195fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801978e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019790:	fb01 6303 	mla	r3, r1, r3, r6
 8019794:	141b      	asrs	r3, r3, #16
 8019796:	f53f af30 	bmi.w	80195fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801979a:	3a01      	subs	r2, #1
 801979c:	4293      	cmp	r3, r2
 801979e:	f6bf af2c 	bge.w	80195fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80197a2:	f10b 0c03 	add.w	ip, fp, #3
 80197a6:	46a6      	mov	lr, r4
 80197a8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80197ac:	f1be 0f00 	cmp.w	lr, #0
 80197b0:	dc79      	bgt.n	80198a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80197b2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80197b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80197ba:	44a3      	add	fp, r4
 80197bc:	9b07      	ldr	r3, [sp, #28]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	f340 8123 	ble.w	8019a0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80197c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80197c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80197ca:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80197ce:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80197d2:	eef0 6a48 	vmov.f32	s13, s16
 80197d6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80197da:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80197de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80197e2:	ee16 5a90 	vmov	r5, s13
 80197e6:	eef0 6a68 	vmov.f32	s13, s17
 80197ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80197ee:	ee16 6a90 	vmov	r6, s13
 80197f2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80197f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80197fa:	ee37 8a48 	vsub.f32	s16, s14, s16
 80197fe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019802:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019806:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801980a:	ee18 2a10 	vmov	r2, s16
 801980e:	eeb0 8a47 	vmov.f32	s16, s14
 8019812:	fb92 f3f3 	sdiv	r3, r2, r3
 8019816:	ee18 2a90 	vmov	r2, s17
 801981a:	9327      	str	r3, [sp, #156]	; 0x9c
 801981c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801981e:	eef0 8a67 	vmov.f32	s17, s15
 8019822:	fb92 f3f3 	sdiv	r3, r2, r3
 8019826:	9328      	str	r3, [sp, #160]	; 0xa0
 8019828:	9b07      	ldr	r3, [sp, #28]
 801982a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801982c:	3b01      	subs	r3, #1
 801982e:	9307      	str	r3, [sp, #28]
 8019830:	bf08      	it	eq
 8019832:	4614      	moveq	r4, r2
 8019834:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019836:	bf18      	it	ne
 8019838:	461c      	movne	r4, r3
 801983a:	e6b4      	b.n	80195a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801983c:	2900      	cmp	r1, #0
 801983e:	f43f af3c 	beq.w	80196ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8019842:	eb09 0003 	add.w	r0, r9, r3
 8019846:	0843      	lsrs	r3, r0, #1
 8019848:	07c0      	lsls	r0, r0, #31
 801984a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801984e:	bf54      	ite	pl
 8019850:	f003 030f 	andpl.w	r3, r3, #15
 8019854:	111b      	asrmi	r3, r3, #4
 8019856:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801985a:	b2db      	uxtb	r3, r3
 801985c:	930a      	str	r3, [sp, #40]	; 0x28
 801985e:	e72c      	b.n	80196ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8019860:	703a      	strb	r2, [r7, #0]
 8019862:	7078      	strb	r0, [r7, #1]
 8019864:	f887 e002 	strb.w	lr, [r7, #2]
 8019868:	e775      	b.n	8019756 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801986a:	1c5a      	adds	r2, r3, #1
 801986c:	f53f af73 	bmi.w	8019756 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8019870:	4594      	cmp	ip, r2
 8019872:	f6ff af70 	blt.w	8019756 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8019876:	1c42      	adds	r2, r0, #1
 8019878:	f53f af6d 	bmi.w	8019756 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801987c:	4596      	cmp	lr, r2
 801987e:	f6ff af6a 	blt.w	8019756 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8019882:	9302      	str	r3, [sp, #8]
 8019884:	fa0f f38e 	sxth.w	r3, lr
 8019888:	9a08      	ldr	r2, [sp, #32]
 801988a:	9301      	str	r3, [sp, #4]
 801988c:	fa0f f38c 	sxth.w	r3, ip
 8019890:	9105      	str	r1, [sp, #20]
 8019892:	4639      	mov	r1, r7
 8019894:	9300      	str	r3, [sp, #0]
 8019896:	464b      	mov	r3, r9
 8019898:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801989c:	4642      	mov	r2, r8
 801989e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80198a0:	f7ff fd70 	bl	8019384 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80198a4:	e757      	b.n	8019756 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80198a6:	142a      	asrs	r2, r5, #16
 80198a8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80198ac:	1433      	asrs	r3, r6, #16
 80198ae:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80198b2:	fb09 2303 	mla	r3, r9, r3, r2
 80198b6:	085a      	lsrs	r2, r3, #1
 80198b8:	07d9      	lsls	r1, r3, #31
 80198ba:	f818 2002 	ldrb.w	r2, [r8, r2]
 80198be:	bf54      	ite	pl
 80198c0:	f002 020f 	andpl.w	r2, r2, #15
 80198c4:	1112      	asrmi	r2, r2, #4
 80198c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80198ca:	b2d2      	uxtb	r2, r2
 80198cc:	2800      	cmp	r0, #0
 80198ce:	f000 8085 	beq.w	80199dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80198d2:	f103 0a01 	add.w	sl, r3, #1
 80198d6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80198da:	f01a 0f01 	tst.w	sl, #1
 80198de:	f818 1001 	ldrb.w	r1, [r8, r1]
 80198e2:	bf0c      	ite	eq
 80198e4:	f001 010f 	andeq.w	r1, r1, #15
 80198e8:	1109      	asrne	r1, r1, #4
 80198ea:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80198ee:	b2c9      	uxtb	r1, r1
 80198f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80198f2:	b1df      	cbz	r7, 801992c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80198f4:	444b      	add	r3, r9
 80198f6:	0859      	lsrs	r1, r3, #1
 80198f8:	f013 0f01 	tst.w	r3, #1
 80198fc:	f103 0301 	add.w	r3, r3, #1
 8019900:	f818 1001 	ldrb.w	r1, [r8, r1]
 8019904:	bf0c      	ite	eq
 8019906:	f001 010f 	andeq.w	r1, r1, #15
 801990a:	1109      	asrne	r1, r1, #4
 801990c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8019910:	b2c9      	uxtb	r1, r1
 8019912:	910b      	str	r1, [sp, #44]	; 0x2c
 8019914:	0859      	lsrs	r1, r3, #1
 8019916:	07db      	lsls	r3, r3, #31
 8019918:	f818 1001 	ldrb.w	r1, [r8, r1]
 801991c:	bf54      	ite	pl
 801991e:	f001 010f 	andpl.w	r1, r1, #15
 8019922:	1109      	asrmi	r1, r1, #4
 8019924:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8019928:	b2c9      	uxtb	r1, r1
 801992a:	9110      	str	r1, [sp, #64]	; 0x40
 801992c:	b280      	uxth	r0, r0
 801992e:	b2bf      	uxth	r7, r7
 8019930:	fb00 f307 	mul.w	r3, r0, r7
 8019934:	0100      	lsls	r0, r0, #4
 8019936:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801993a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801993e:	1ac0      	subs	r0, r0, r3
 8019940:	b2bf      	uxth	r7, r7
 8019942:	b280      	uxth	r0, r0
 8019944:	1bc9      	subs	r1, r1, r7
 8019946:	fa1f fa81 	uxth.w	sl, r1
 801994a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801994c:	4348      	muls	r0, r1
 801994e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019950:	fb02 020a 	mla	r2, r2, sl, r0
 8019954:	fb07 2701 	mla	r7, r7, r1, r2
 8019958:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801995a:	fb03 7302 	mla	r3, r3, r2, r7
 801995e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019962:	b393      	cbz	r3, 80199ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019964:	4a2b      	ldr	r2, [pc, #172]	; (8019a14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8019966:	2bff      	cmp	r3, #255	; 0xff
 8019968:	6811      	ldr	r1, [r2, #0]
 801996a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801996e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8019972:	b2c9      	uxtb	r1, r1
 8019974:	d042      	beq.n	80199fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8019976:	b298      	uxth	r0, r3
 8019978:	43db      	mvns	r3, r3
 801997a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801997e:	fb11 f100 	smulbb	r1, r1, r0
 8019982:	b2db      	uxtb	r3, r3
 8019984:	fb17 f700 	smulbb	r7, r7, r0
 8019988:	fb02 1103 	mla	r1, r2, r3, r1
 801998c:	fb1a f000 	smulbb	r0, sl, r0
 8019990:	b289      	uxth	r1, r1
 8019992:	1c4a      	adds	r2, r1, #1
 8019994:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8019998:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801999c:	fb02 7703 	mla	r7, r2, r3, r7
 80199a0:	1209      	asrs	r1, r1, #8
 80199a2:	b2bf      	uxth	r7, r7
 80199a4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80199a8:	1c7a      	adds	r2, r7, #1
 80199aa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80199ae:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80199b2:	fb02 0303 	mla	r3, r2, r3, r0
 80199b6:	123f      	asrs	r7, r7, #8
 80199b8:	b29b      	uxth	r3, r3
 80199ba:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80199be:	1c5a      	adds	r2, r3, #1
 80199c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80199c4:	121b      	asrs	r3, r3, #8
 80199c6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80199ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80199cc:	f10c 0c03 	add.w	ip, ip, #3
 80199d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80199d4:	441d      	add	r5, r3
 80199d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80199d8:	441e      	add	r6, r3
 80199da:	e6e7      	b.n	80197ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80199dc:	2f00      	cmp	r7, #0
 80199de:	d0a5      	beq.n	801992c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80199e0:	444b      	add	r3, r9
 80199e2:	0859      	lsrs	r1, r3, #1
 80199e4:	07db      	lsls	r3, r3, #31
 80199e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80199ea:	bf54      	ite	pl
 80199ec:	f001 010f 	andpl.w	r1, r1, #15
 80199f0:	1109      	asrmi	r1, r1, #4
 80199f2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80199f6:	b2c9      	uxtb	r1, r1
 80199f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80199fa:	e797      	b.n	801992c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80199fc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8019a00:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8019a04:	f80c ac01 	strb.w	sl, [ip, #-1]
 8019a08:	e7df      	b.n	80199ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019a0a:	b013      	add	sp, #76	; 0x4c
 8019a0c:	ecbd 8b08 	vpop	{d8-d11}
 8019a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a14:	24006af8 	.word	0x24006af8

08019a18 <CRC_Lock>:
 8019a18:	4a20      	ldr	r2, [pc, #128]	; (8019a9c <CRC_Lock+0x84>)
 8019a1a:	b530      	push	{r4, r5, lr}
 8019a1c:	6813      	ldr	r3, [r2, #0]
 8019a1e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8019a22:	f24c 2540 	movw	r5, #49728	; 0xc240
 8019a26:	f023 0301 	bic.w	r3, r3, #1
 8019a2a:	6013      	str	r3, [r2, #0]
 8019a2c:	4b1c      	ldr	r3, [pc, #112]	; (8019aa0 <CRC_Lock+0x88>)
 8019a2e:	681a      	ldr	r2, [r3, #0]
 8019a30:	4022      	ands	r2, r4
 8019a32:	42aa      	cmp	r2, r5
 8019a34:	d005      	beq.n	8019a42 <CRC_Lock+0x2a>
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	f24c 2270 	movw	r2, #49776	; 0xc270
 8019a3c:	4023      	ands	r3, r4
 8019a3e:	4293      	cmp	r3, r2
 8019a40:	d124      	bne.n	8019a8c <CRC_Lock+0x74>
 8019a42:	4b18      	ldr	r3, [pc, #96]	; (8019aa4 <CRC_Lock+0x8c>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	bb0b      	cbnz	r3, 8019a8c <CRC_Lock+0x74>
 8019a48:	4b17      	ldr	r3, [pc, #92]	; (8019aa8 <CRC_Lock+0x90>)
 8019a4a:	681a      	ldr	r2, [r3, #0]
 8019a4c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8019a50:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8019a54:	d00d      	beq.n	8019a72 <CRC_Lock+0x5a>
 8019a56:	681a      	ldr	r2, [r3, #0]
 8019a58:	f240 4483 	movw	r4, #1155	; 0x483
 8019a5c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8019a60:	42a2      	cmp	r2, r4
 8019a62:	d006      	beq.n	8019a72 <CRC_Lock+0x5a>
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	f240 4285 	movw	r2, #1157	; 0x485
 8019a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019a6e:	4293      	cmp	r3, r2
 8019a70:	d10c      	bne.n	8019a8c <CRC_Lock+0x74>
 8019a72:	4b0e      	ldr	r3, [pc, #56]	; (8019aac <CRC_Lock+0x94>)
 8019a74:	2201      	movs	r2, #1
 8019a76:	601a      	str	r2, [r3, #0]
 8019a78:	681a      	ldr	r2, [r3, #0]
 8019a7a:	2a00      	cmp	r2, #0
 8019a7c:	d1fc      	bne.n	8019a78 <CRC_Lock+0x60>
 8019a7e:	4b0c      	ldr	r3, [pc, #48]	; (8019ab0 <CRC_Lock+0x98>)
 8019a80:	6018      	str	r0, [r3, #0]
 8019a82:	6818      	ldr	r0, [r3, #0]
 8019a84:	1a43      	subs	r3, r0, r1
 8019a86:	4258      	negs	r0, r3
 8019a88:	4158      	adcs	r0, r3
 8019a8a:	bd30      	pop	{r4, r5, pc}
 8019a8c:	4b09      	ldr	r3, [pc, #36]	; (8019ab4 <CRC_Lock+0x9c>)
 8019a8e:	2201      	movs	r2, #1
 8019a90:	601a      	str	r2, [r3, #0]
 8019a92:	681a      	ldr	r2, [r3, #0]
 8019a94:	2a00      	cmp	r2, #0
 8019a96:	d1fc      	bne.n	8019a92 <CRC_Lock+0x7a>
 8019a98:	4b07      	ldr	r3, [pc, #28]	; (8019ab8 <CRC_Lock+0xa0>)
 8019a9a:	e7f1      	b.n	8019a80 <CRC_Lock+0x68>
 8019a9c:	e0002000 	.word	0xe0002000
 8019aa0:	e000ed00 	.word	0xe000ed00
 8019aa4:	e0042000 	.word	0xe0042000
 8019aa8:	5c001000 	.word	0x5c001000
 8019aac:	58024c08 	.word	0x58024c08
 8019ab0:	58024c00 	.word	0x58024c00
 8019ab4:	40023008 	.word	0x40023008
 8019ab8:	40023000 	.word	0x40023000

08019abc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8019abc:	6101      	str	r1, [r0, #16]
 8019abe:	4770      	bx	lr

08019ac0 <_ZN8touchgfx8Gestures4tickEv>:
 8019ac0:	7b83      	ldrb	r3, [r0, #14]
 8019ac2:	b14b      	cbz	r3, 8019ad8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8019ac4:	8903      	ldrh	r3, [r0, #8]
 8019ac6:	3301      	adds	r3, #1
 8019ac8:	b29b      	uxth	r3, r3
 8019aca:	2b07      	cmp	r3, #7
 8019acc:	8103      	strh	r3, [r0, #8]
 8019ace:	bf81      	itttt	hi
 8019ad0:	2300      	movhi	r3, #0
 8019ad2:	8143      	strhhi	r3, [r0, #10]
 8019ad4:	8183      	strhhi	r3, [r0, #12]
 8019ad6:	7383      	strbhi	r3, [r0, #14]
 8019ad8:	4770      	bx	lr
	...

08019adc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8019adc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019ae0:	4698      	mov	r8, r3
 8019ae2:	8883      	ldrh	r3, [r0, #4]
 8019ae4:	4604      	mov	r4, r0
 8019ae6:	4617      	mov	r7, r2
 8019ae8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019aec:	eba8 0303 	sub.w	r3, r8, r3
 8019af0:	4a19      	ldr	r2, [pc, #100]	; (8019b58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8019af2:	460e      	mov	r6, r1
 8019af4:	b21b      	sxth	r3, r3
 8019af6:	88c1      	ldrh	r1, [r0, #6]
 8019af8:	9200      	str	r2, [sp, #0]
 8019afa:	2000      	movs	r0, #0
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	8aa2      	ldrh	r2, [r4, #20]
 8019b00:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8019b04:	bfb8      	it	lt
 8019b06:	425b      	neglt	r3, r3
 8019b08:	f88d 0004 	strb.w	r0, [sp, #4]
 8019b0c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019b10:	b21b      	sxth	r3, r3
 8019b12:	f8ad 800a 	strh.w	r8, [sp, #10]
 8019b16:	f8ad 500c 	strh.w	r5, [sp, #12]
 8019b1a:	4293      	cmp	r3, r2
 8019b1c:	dc07      	bgt.n	8019b2e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8019b1e:	1a69      	subs	r1, r5, r1
 8019b20:	b209      	sxth	r1, r1
 8019b22:	2900      	cmp	r1, #0
 8019b24:	bfb8      	it	lt
 8019b26:	4249      	neglt	r1, r1
 8019b28:	b209      	sxth	r1, r1
 8019b2a:	428a      	cmp	r2, r1
 8019b2c:	da10      	bge.n	8019b50 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8019b2e:	6920      	ldr	r0, [r4, #16]
 8019b30:	4669      	mov	r1, sp
 8019b32:	eba8 0606 	sub.w	r6, r8, r6
 8019b36:	1bef      	subs	r7, r5, r7
 8019b38:	6803      	ldr	r3, [r0, #0]
 8019b3a:	685b      	ldr	r3, [r3, #4]
 8019b3c:	4798      	blx	r3
 8019b3e:	2300      	movs	r3, #0
 8019b40:	2001      	movs	r0, #1
 8019b42:	8166      	strh	r6, [r4, #10]
 8019b44:	8123      	strh	r3, [r4, #8]
 8019b46:	81a7      	strh	r7, [r4, #12]
 8019b48:	f8a4 8004 	strh.w	r8, [r4, #4]
 8019b4c:	80e5      	strh	r5, [r4, #6]
 8019b4e:	73a0      	strb	r0, [r4, #14]
 8019b50:	b004      	add	sp, #16
 8019b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b56:	bf00      	nop
 8019b58:	0801db44 	.word	0x0801db44

08019b5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8019b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b5e:	461e      	mov	r6, r3
 8019b60:	1e4b      	subs	r3, r1, #1
 8019b62:	b085      	sub	sp, #20
 8019b64:	4604      	mov	r4, r0
 8019b66:	2b01      	cmp	r3, #1
 8019b68:	460d      	mov	r5, r1
 8019b6a:	4617      	mov	r7, r2
 8019b6c:	d84b      	bhi.n	8019c06 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8019b6e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019b72:	1cd3      	adds	r3, r2, #3
 8019b74:	b29b      	uxth	r3, r3
 8019b76:	2b06      	cmp	r3, #6
 8019b78:	d916      	bls.n	8019ba8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8019b7a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8019c1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8019b7e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019b82:	f8cd c004 	str.w	ip, [sp, #4]
 8019b86:	f04f 0c00 	mov.w	ip, #0
 8019b8a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019b8e:	6900      	ldr	r0, [r0, #16]
 8019b90:	f8ad 100c 	strh.w	r1, [sp, #12]
 8019b94:	a901      	add	r1, sp, #4
 8019b96:	f88d c008 	strb.w	ip, [sp, #8]
 8019b9a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8019b9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019ba2:	6803      	ldr	r3, [r0, #0]
 8019ba4:	689b      	ldr	r3, [r3, #8]
 8019ba6:	4798      	blx	r3
 8019ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019bac:	1cd3      	adds	r3, r2, #3
 8019bae:	b29b      	uxth	r3, r3
 8019bb0:	2b06      	cmp	r3, #6
 8019bb2:	d916      	bls.n	8019be2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8019bb4:	f8df c064 	ldr.w	ip, [pc, #100]	; 8019c1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8019bb8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019bbc:	f8cd c004 	str.w	ip, [sp, #4]
 8019bc0:	f04f 0c01 	mov.w	ip, #1
 8019bc4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019bc8:	6920      	ldr	r0, [r4, #16]
 8019bca:	f8ad 100c 	strh.w	r1, [sp, #12]
 8019bce:	a901      	add	r1, sp, #4
 8019bd0:	f88d c008 	strb.w	ip, [sp, #8]
 8019bd4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8019bd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019bdc:	6803      	ldr	r3, [r0, #0]
 8019bde:	689b      	ldr	r3, [r3, #8]
 8019be0:	4798      	blx	r3
 8019be2:	4b0d      	ldr	r3, [pc, #52]	; (8019c18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8019be4:	a901      	add	r1, sp, #4
 8019be6:	6920      	ldr	r0, [r4, #16]
 8019be8:	9301      	str	r3, [sp, #4]
 8019bea:	2300      	movs	r3, #0
 8019bec:	f88d 5008 	strb.w	r5, [sp, #8]
 8019bf0:	f8ad 700a 	strh.w	r7, [sp, #10]
 8019bf4:	f8ad 600c 	strh.w	r6, [sp, #12]
 8019bf8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019bfc:	6803      	ldr	r3, [r0, #0]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	4798      	blx	r3
 8019c02:	b005      	add	sp, #20
 8019c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c06:	2900      	cmp	r1, #0
 8019c08:	d1eb      	bne.n	8019be2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8019c0a:	80a2      	strh	r2, [r4, #4]
 8019c0c:	80c6      	strh	r6, [r0, #6]
 8019c0e:	60a1      	str	r1, [r4, #8]
 8019c10:	81a1      	strh	r1, [r4, #12]
 8019c12:	73a1      	strb	r1, [r4, #14]
 8019c14:	e7e5      	b.n	8019be2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8019c16:	bf00      	nop
 8019c18:	0801db30 	.word	0x0801db30
 8019c1c:	0801db58 	.word	0x0801db58

08019c20 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8019c20:	790b      	ldrb	r3, [r1, #4]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	bf0c      	ite	eq
 8019c26:	2301      	moveq	r3, #1
 8019c28:	2300      	movne	r3, #0
 8019c2a:	b570      	push	{r4, r5, r6, lr}
 8019c2c:	4604      	mov	r4, r0
 8019c2e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019c32:	460e      	mov	r6, r1
 8019c34:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8019c38:	d109      	bne.n	8019c4e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8019c3a:	b14d      	cbz	r5, 8019c50 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8019c3c:	7933      	ldrb	r3, [r6, #4]
 8019c3e:	2b01      	cmp	r3, #1
 8019c40:	d10c      	bne.n	8019c5c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019c42:	6823      	ldr	r3, [r4, #0]
 8019c44:	4620      	mov	r0, r4
 8019c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c4c:	4718      	bx	r3
 8019c4e:	b12d      	cbz	r5, 8019c5c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019c50:	6823      	ldr	r3, [r4, #0]
 8019c52:	4620      	mov	r0, r4
 8019c54:	695b      	ldr	r3, [r3, #20]
 8019c56:	4798      	blx	r3
 8019c58:	2d00      	cmp	r5, #0
 8019c5a:	d1ef      	bne.n	8019c3c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019c5c:	bd70      	pop	{r4, r5, r6, pc}

08019c5e <__aeabi_atexit>:
 8019c5e:	460b      	mov	r3, r1
 8019c60:	4601      	mov	r1, r0
 8019c62:	4618      	mov	r0, r3
 8019c64:	f000 b852 	b.w	8019d0c <__cxa_atexit>

08019c68 <_ZdlPvj>:
 8019c68:	f000 b812 	b.w	8019c90 <_ZdlPv>

08019c6c <__cxa_guard_acquire>:
 8019c6c:	6803      	ldr	r3, [r0, #0]
 8019c6e:	07db      	lsls	r3, r3, #31
 8019c70:	d406      	bmi.n	8019c80 <__cxa_guard_acquire+0x14>
 8019c72:	7843      	ldrb	r3, [r0, #1]
 8019c74:	b103      	cbz	r3, 8019c78 <__cxa_guard_acquire+0xc>
 8019c76:	deff      	udf	#255	; 0xff
 8019c78:	2301      	movs	r3, #1
 8019c7a:	7043      	strb	r3, [r0, #1]
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	4770      	bx	lr
 8019c80:	2000      	movs	r0, #0
 8019c82:	4770      	bx	lr

08019c84 <__cxa_guard_release>:
 8019c84:	2301      	movs	r3, #1
 8019c86:	6003      	str	r3, [r0, #0]
 8019c88:	4770      	bx	lr

08019c8a <__cxa_pure_virtual>:
 8019c8a:	b508      	push	{r3, lr}
 8019c8c:	f000 f80e 	bl	8019cac <_ZSt9terminatev>

08019c90 <_ZdlPv>:
 8019c90:	f000 b88e 	b.w	8019db0 <free>

08019c94 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8019c94:	b508      	push	{r3, lr}
 8019c96:	4780      	blx	r0
 8019c98:	f000 f80d 	bl	8019cb6 <abort>

08019c9c <_ZSt13get_terminatev>:
 8019c9c:	4b02      	ldr	r3, [pc, #8]	; (8019ca8 <_ZSt13get_terminatev+0xc>)
 8019c9e:	6818      	ldr	r0, [r3, #0]
 8019ca0:	f3bf 8f5b 	dmb	ish
 8019ca4:	4770      	bx	lr
 8019ca6:	bf00      	nop
 8019ca8:	240000a4 	.word	0x240000a4

08019cac <_ZSt9terminatev>:
 8019cac:	b508      	push	{r3, lr}
 8019cae:	f7ff fff5 	bl	8019c9c <_ZSt13get_terminatev>
 8019cb2:	f7ff ffef 	bl	8019c94 <_ZN10__cxxabiv111__terminateEPFvvE>

08019cb6 <abort>:
 8019cb6:	b508      	push	{r3, lr}
 8019cb8:	2006      	movs	r0, #6
 8019cba:	f000 fc9d 	bl	801a5f8 <raise>
 8019cbe:	2001      	movs	r0, #1
 8019cc0:	f7e7 f9cc 	bl	800105c <_exit>

08019cc4 <__assert_func>:
 8019cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019cc6:	4614      	mov	r4, r2
 8019cc8:	461a      	mov	r2, r3
 8019cca:	4b09      	ldr	r3, [pc, #36]	; (8019cf0 <__assert_func+0x2c>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	4605      	mov	r5, r0
 8019cd0:	68d8      	ldr	r0, [r3, #12]
 8019cd2:	b14c      	cbz	r4, 8019ce8 <__assert_func+0x24>
 8019cd4:	4b07      	ldr	r3, [pc, #28]	; (8019cf4 <__assert_func+0x30>)
 8019cd6:	9100      	str	r1, [sp, #0]
 8019cd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019cdc:	4906      	ldr	r1, [pc, #24]	; (8019cf8 <__assert_func+0x34>)
 8019cde:	462b      	mov	r3, r5
 8019ce0:	f000 f828 	bl	8019d34 <fiprintf>
 8019ce4:	f7ff ffe7 	bl	8019cb6 <abort>
 8019ce8:	4b04      	ldr	r3, [pc, #16]	; (8019cfc <__assert_func+0x38>)
 8019cea:	461c      	mov	r4, r3
 8019cec:	e7f3      	b.n	8019cd6 <__assert_func+0x12>
 8019cee:	bf00      	nop
 8019cf0:	240000a8 	.word	0x240000a8
 8019cf4:	0801ee4d 	.word	0x0801ee4d
 8019cf8:	0801ee5a 	.word	0x0801ee5a
 8019cfc:	0801ee88 	.word	0x0801ee88

08019d00 <atexit>:
 8019d00:	2300      	movs	r3, #0
 8019d02:	4601      	mov	r1, r0
 8019d04:	461a      	mov	r2, r3
 8019d06:	4618      	mov	r0, r3
 8019d08:	f000 bd52 	b.w	801a7b0 <__register_exitproc>

08019d0c <__cxa_atexit>:
 8019d0c:	b510      	push	{r4, lr}
 8019d0e:	4c05      	ldr	r4, [pc, #20]	; (8019d24 <__cxa_atexit+0x18>)
 8019d10:	4613      	mov	r3, r2
 8019d12:	b12c      	cbz	r4, 8019d20 <__cxa_atexit+0x14>
 8019d14:	460a      	mov	r2, r1
 8019d16:	4601      	mov	r1, r0
 8019d18:	2002      	movs	r0, #2
 8019d1a:	f000 fd49 	bl	801a7b0 <__register_exitproc>
 8019d1e:	bd10      	pop	{r4, pc}
 8019d20:	4620      	mov	r0, r4
 8019d22:	e7fc      	b.n	8019d1e <__cxa_atexit+0x12>
 8019d24:	0801a7b1 	.word	0x0801a7b1

08019d28 <__errno>:
 8019d28:	4b01      	ldr	r3, [pc, #4]	; (8019d30 <__errno+0x8>)
 8019d2a:	6818      	ldr	r0, [r3, #0]
 8019d2c:	4770      	bx	lr
 8019d2e:	bf00      	nop
 8019d30:	240000a8 	.word	0x240000a8

08019d34 <fiprintf>:
 8019d34:	b40e      	push	{r1, r2, r3}
 8019d36:	b503      	push	{r0, r1, lr}
 8019d38:	4601      	mov	r1, r0
 8019d3a:	ab03      	add	r3, sp, #12
 8019d3c:	4805      	ldr	r0, [pc, #20]	; (8019d54 <fiprintf+0x20>)
 8019d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d42:	6800      	ldr	r0, [r0, #0]
 8019d44:	9301      	str	r3, [sp, #4]
 8019d46:	f000 f95b 	bl	801a000 <_vfiprintf_r>
 8019d4a:	b002      	add	sp, #8
 8019d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d50:	b003      	add	sp, #12
 8019d52:	4770      	bx	lr
 8019d54:	240000a8 	.word	0x240000a8

08019d58 <__libc_init_array>:
 8019d58:	b570      	push	{r4, r5, r6, lr}
 8019d5a:	4d0d      	ldr	r5, [pc, #52]	; (8019d90 <__libc_init_array+0x38>)
 8019d5c:	4c0d      	ldr	r4, [pc, #52]	; (8019d94 <__libc_init_array+0x3c>)
 8019d5e:	1b64      	subs	r4, r4, r5
 8019d60:	10a4      	asrs	r4, r4, #2
 8019d62:	2600      	movs	r6, #0
 8019d64:	42a6      	cmp	r6, r4
 8019d66:	d109      	bne.n	8019d7c <__libc_init_array+0x24>
 8019d68:	4d0b      	ldr	r5, [pc, #44]	; (8019d98 <__libc_init_array+0x40>)
 8019d6a:	4c0c      	ldr	r4, [pc, #48]	; (8019d9c <__libc_init_array+0x44>)
 8019d6c:	f001 f85a 	bl	801ae24 <_init>
 8019d70:	1b64      	subs	r4, r4, r5
 8019d72:	10a4      	asrs	r4, r4, #2
 8019d74:	2600      	movs	r6, #0
 8019d76:	42a6      	cmp	r6, r4
 8019d78:	d105      	bne.n	8019d86 <__libc_init_array+0x2e>
 8019d7a:	bd70      	pop	{r4, r5, r6, pc}
 8019d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d80:	4798      	blx	r3
 8019d82:	3601      	adds	r6, #1
 8019d84:	e7ee      	b.n	8019d64 <__libc_init_array+0xc>
 8019d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d8a:	4798      	blx	r3
 8019d8c:	3601      	adds	r6, #1
 8019d8e:	e7f2      	b.n	8019d76 <__libc_init_array+0x1e>
 8019d90:	0801f5f8 	.word	0x0801f5f8
 8019d94:	0801f5f8 	.word	0x0801f5f8
 8019d98:	0801f5f8 	.word	0x0801f5f8
 8019d9c:	0801f60c 	.word	0x0801f60c

08019da0 <malloc>:
 8019da0:	4b02      	ldr	r3, [pc, #8]	; (8019dac <malloc+0xc>)
 8019da2:	4601      	mov	r1, r0
 8019da4:	6818      	ldr	r0, [r3, #0]
 8019da6:	f000 b88d 	b.w	8019ec4 <_malloc_r>
 8019daa:	bf00      	nop
 8019dac:	240000a8 	.word	0x240000a8

08019db0 <free>:
 8019db0:	4b02      	ldr	r3, [pc, #8]	; (8019dbc <free+0xc>)
 8019db2:	4601      	mov	r1, r0
 8019db4:	6818      	ldr	r0, [r3, #0]
 8019db6:	f000 b819 	b.w	8019dec <_free_r>
 8019dba:	bf00      	nop
 8019dbc:	240000a8 	.word	0x240000a8

08019dc0 <memcpy>:
 8019dc0:	440a      	add	r2, r1
 8019dc2:	4291      	cmp	r1, r2
 8019dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8019dc8:	d100      	bne.n	8019dcc <memcpy+0xc>
 8019dca:	4770      	bx	lr
 8019dcc:	b510      	push	{r4, lr}
 8019dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019dd6:	4291      	cmp	r1, r2
 8019dd8:	d1f9      	bne.n	8019dce <memcpy+0xe>
 8019dda:	bd10      	pop	{r4, pc}

08019ddc <memset>:
 8019ddc:	4402      	add	r2, r0
 8019dde:	4603      	mov	r3, r0
 8019de0:	4293      	cmp	r3, r2
 8019de2:	d100      	bne.n	8019de6 <memset+0xa>
 8019de4:	4770      	bx	lr
 8019de6:	f803 1b01 	strb.w	r1, [r3], #1
 8019dea:	e7f9      	b.n	8019de0 <memset+0x4>

08019dec <_free_r>:
 8019dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019dee:	2900      	cmp	r1, #0
 8019df0:	d044      	beq.n	8019e7c <_free_r+0x90>
 8019df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019df6:	9001      	str	r0, [sp, #4]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8019dfe:	bfb8      	it	lt
 8019e00:	18e4      	addlt	r4, r4, r3
 8019e02:	f000 ff57 	bl	801acb4 <__malloc_lock>
 8019e06:	4a1e      	ldr	r2, [pc, #120]	; (8019e80 <_free_r+0x94>)
 8019e08:	9801      	ldr	r0, [sp, #4]
 8019e0a:	6813      	ldr	r3, [r2, #0]
 8019e0c:	b933      	cbnz	r3, 8019e1c <_free_r+0x30>
 8019e0e:	6063      	str	r3, [r4, #4]
 8019e10:	6014      	str	r4, [r2, #0]
 8019e12:	b003      	add	sp, #12
 8019e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e18:	f000 bf52 	b.w	801acc0 <__malloc_unlock>
 8019e1c:	42a3      	cmp	r3, r4
 8019e1e:	d908      	bls.n	8019e32 <_free_r+0x46>
 8019e20:	6825      	ldr	r5, [r4, #0]
 8019e22:	1961      	adds	r1, r4, r5
 8019e24:	428b      	cmp	r3, r1
 8019e26:	bf01      	itttt	eq
 8019e28:	6819      	ldreq	r1, [r3, #0]
 8019e2a:	685b      	ldreq	r3, [r3, #4]
 8019e2c:	1949      	addeq	r1, r1, r5
 8019e2e:	6021      	streq	r1, [r4, #0]
 8019e30:	e7ed      	b.n	8019e0e <_free_r+0x22>
 8019e32:	461a      	mov	r2, r3
 8019e34:	685b      	ldr	r3, [r3, #4]
 8019e36:	b10b      	cbz	r3, 8019e3c <_free_r+0x50>
 8019e38:	42a3      	cmp	r3, r4
 8019e3a:	d9fa      	bls.n	8019e32 <_free_r+0x46>
 8019e3c:	6811      	ldr	r1, [r2, #0]
 8019e3e:	1855      	adds	r5, r2, r1
 8019e40:	42a5      	cmp	r5, r4
 8019e42:	d10b      	bne.n	8019e5c <_free_r+0x70>
 8019e44:	6824      	ldr	r4, [r4, #0]
 8019e46:	4421      	add	r1, r4
 8019e48:	1854      	adds	r4, r2, r1
 8019e4a:	42a3      	cmp	r3, r4
 8019e4c:	6011      	str	r1, [r2, #0]
 8019e4e:	d1e0      	bne.n	8019e12 <_free_r+0x26>
 8019e50:	681c      	ldr	r4, [r3, #0]
 8019e52:	685b      	ldr	r3, [r3, #4]
 8019e54:	6053      	str	r3, [r2, #4]
 8019e56:	4421      	add	r1, r4
 8019e58:	6011      	str	r1, [r2, #0]
 8019e5a:	e7da      	b.n	8019e12 <_free_r+0x26>
 8019e5c:	d902      	bls.n	8019e64 <_free_r+0x78>
 8019e5e:	230c      	movs	r3, #12
 8019e60:	6003      	str	r3, [r0, #0]
 8019e62:	e7d6      	b.n	8019e12 <_free_r+0x26>
 8019e64:	6825      	ldr	r5, [r4, #0]
 8019e66:	1961      	adds	r1, r4, r5
 8019e68:	428b      	cmp	r3, r1
 8019e6a:	bf04      	itt	eq
 8019e6c:	6819      	ldreq	r1, [r3, #0]
 8019e6e:	685b      	ldreq	r3, [r3, #4]
 8019e70:	6063      	str	r3, [r4, #4]
 8019e72:	bf04      	itt	eq
 8019e74:	1949      	addeq	r1, r1, r5
 8019e76:	6021      	streq	r1, [r4, #0]
 8019e78:	6054      	str	r4, [r2, #4]
 8019e7a:	e7ca      	b.n	8019e12 <_free_r+0x26>
 8019e7c:	b003      	add	sp, #12
 8019e7e:	bd30      	pop	{r4, r5, pc}
 8019e80:	24006bcc 	.word	0x24006bcc

08019e84 <sbrk_aligned>:
 8019e84:	b570      	push	{r4, r5, r6, lr}
 8019e86:	4e0e      	ldr	r6, [pc, #56]	; (8019ec0 <sbrk_aligned+0x3c>)
 8019e88:	460c      	mov	r4, r1
 8019e8a:	6831      	ldr	r1, [r6, #0]
 8019e8c:	4605      	mov	r5, r0
 8019e8e:	b911      	cbnz	r1, 8019e96 <sbrk_aligned+0x12>
 8019e90:	f000 fb7a 	bl	801a588 <_sbrk_r>
 8019e94:	6030      	str	r0, [r6, #0]
 8019e96:	4621      	mov	r1, r4
 8019e98:	4628      	mov	r0, r5
 8019e9a:	f000 fb75 	bl	801a588 <_sbrk_r>
 8019e9e:	1c43      	adds	r3, r0, #1
 8019ea0:	d00a      	beq.n	8019eb8 <sbrk_aligned+0x34>
 8019ea2:	1cc4      	adds	r4, r0, #3
 8019ea4:	f024 0403 	bic.w	r4, r4, #3
 8019ea8:	42a0      	cmp	r0, r4
 8019eaa:	d007      	beq.n	8019ebc <sbrk_aligned+0x38>
 8019eac:	1a21      	subs	r1, r4, r0
 8019eae:	4628      	mov	r0, r5
 8019eb0:	f000 fb6a 	bl	801a588 <_sbrk_r>
 8019eb4:	3001      	adds	r0, #1
 8019eb6:	d101      	bne.n	8019ebc <sbrk_aligned+0x38>
 8019eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	bd70      	pop	{r4, r5, r6, pc}
 8019ec0:	24006bd0 	.word	0x24006bd0

08019ec4 <_malloc_r>:
 8019ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ec8:	1ccd      	adds	r5, r1, #3
 8019eca:	f025 0503 	bic.w	r5, r5, #3
 8019ece:	3508      	adds	r5, #8
 8019ed0:	2d0c      	cmp	r5, #12
 8019ed2:	bf38      	it	cc
 8019ed4:	250c      	movcc	r5, #12
 8019ed6:	2d00      	cmp	r5, #0
 8019ed8:	4607      	mov	r7, r0
 8019eda:	db01      	blt.n	8019ee0 <_malloc_r+0x1c>
 8019edc:	42a9      	cmp	r1, r5
 8019ede:	d905      	bls.n	8019eec <_malloc_r+0x28>
 8019ee0:	230c      	movs	r3, #12
 8019ee2:	603b      	str	r3, [r7, #0]
 8019ee4:	2600      	movs	r6, #0
 8019ee6:	4630      	mov	r0, r6
 8019ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019eec:	4e2e      	ldr	r6, [pc, #184]	; (8019fa8 <_malloc_r+0xe4>)
 8019eee:	f000 fee1 	bl	801acb4 <__malloc_lock>
 8019ef2:	6833      	ldr	r3, [r6, #0]
 8019ef4:	461c      	mov	r4, r3
 8019ef6:	bb34      	cbnz	r4, 8019f46 <_malloc_r+0x82>
 8019ef8:	4629      	mov	r1, r5
 8019efa:	4638      	mov	r0, r7
 8019efc:	f7ff ffc2 	bl	8019e84 <sbrk_aligned>
 8019f00:	1c43      	adds	r3, r0, #1
 8019f02:	4604      	mov	r4, r0
 8019f04:	d14d      	bne.n	8019fa2 <_malloc_r+0xde>
 8019f06:	6834      	ldr	r4, [r6, #0]
 8019f08:	4626      	mov	r6, r4
 8019f0a:	2e00      	cmp	r6, #0
 8019f0c:	d140      	bne.n	8019f90 <_malloc_r+0xcc>
 8019f0e:	6823      	ldr	r3, [r4, #0]
 8019f10:	4631      	mov	r1, r6
 8019f12:	4638      	mov	r0, r7
 8019f14:	eb04 0803 	add.w	r8, r4, r3
 8019f18:	f000 fb36 	bl	801a588 <_sbrk_r>
 8019f1c:	4580      	cmp	r8, r0
 8019f1e:	d13a      	bne.n	8019f96 <_malloc_r+0xd2>
 8019f20:	6821      	ldr	r1, [r4, #0]
 8019f22:	3503      	adds	r5, #3
 8019f24:	1a6d      	subs	r5, r5, r1
 8019f26:	f025 0503 	bic.w	r5, r5, #3
 8019f2a:	3508      	adds	r5, #8
 8019f2c:	2d0c      	cmp	r5, #12
 8019f2e:	bf38      	it	cc
 8019f30:	250c      	movcc	r5, #12
 8019f32:	4629      	mov	r1, r5
 8019f34:	4638      	mov	r0, r7
 8019f36:	f7ff ffa5 	bl	8019e84 <sbrk_aligned>
 8019f3a:	3001      	adds	r0, #1
 8019f3c:	d02b      	beq.n	8019f96 <_malloc_r+0xd2>
 8019f3e:	6823      	ldr	r3, [r4, #0]
 8019f40:	442b      	add	r3, r5
 8019f42:	6023      	str	r3, [r4, #0]
 8019f44:	e00e      	b.n	8019f64 <_malloc_r+0xa0>
 8019f46:	6822      	ldr	r2, [r4, #0]
 8019f48:	1b52      	subs	r2, r2, r5
 8019f4a:	d41e      	bmi.n	8019f8a <_malloc_r+0xc6>
 8019f4c:	2a0b      	cmp	r2, #11
 8019f4e:	d916      	bls.n	8019f7e <_malloc_r+0xba>
 8019f50:	1961      	adds	r1, r4, r5
 8019f52:	42a3      	cmp	r3, r4
 8019f54:	6025      	str	r5, [r4, #0]
 8019f56:	bf18      	it	ne
 8019f58:	6059      	strne	r1, [r3, #4]
 8019f5a:	6863      	ldr	r3, [r4, #4]
 8019f5c:	bf08      	it	eq
 8019f5e:	6031      	streq	r1, [r6, #0]
 8019f60:	5162      	str	r2, [r4, r5]
 8019f62:	604b      	str	r3, [r1, #4]
 8019f64:	4638      	mov	r0, r7
 8019f66:	f104 060b 	add.w	r6, r4, #11
 8019f6a:	f000 fea9 	bl	801acc0 <__malloc_unlock>
 8019f6e:	f026 0607 	bic.w	r6, r6, #7
 8019f72:	1d23      	adds	r3, r4, #4
 8019f74:	1af2      	subs	r2, r6, r3
 8019f76:	d0b6      	beq.n	8019ee6 <_malloc_r+0x22>
 8019f78:	1b9b      	subs	r3, r3, r6
 8019f7a:	50a3      	str	r3, [r4, r2]
 8019f7c:	e7b3      	b.n	8019ee6 <_malloc_r+0x22>
 8019f7e:	6862      	ldr	r2, [r4, #4]
 8019f80:	42a3      	cmp	r3, r4
 8019f82:	bf0c      	ite	eq
 8019f84:	6032      	streq	r2, [r6, #0]
 8019f86:	605a      	strne	r2, [r3, #4]
 8019f88:	e7ec      	b.n	8019f64 <_malloc_r+0xa0>
 8019f8a:	4623      	mov	r3, r4
 8019f8c:	6864      	ldr	r4, [r4, #4]
 8019f8e:	e7b2      	b.n	8019ef6 <_malloc_r+0x32>
 8019f90:	4634      	mov	r4, r6
 8019f92:	6876      	ldr	r6, [r6, #4]
 8019f94:	e7b9      	b.n	8019f0a <_malloc_r+0x46>
 8019f96:	230c      	movs	r3, #12
 8019f98:	603b      	str	r3, [r7, #0]
 8019f9a:	4638      	mov	r0, r7
 8019f9c:	f000 fe90 	bl	801acc0 <__malloc_unlock>
 8019fa0:	e7a1      	b.n	8019ee6 <_malloc_r+0x22>
 8019fa2:	6025      	str	r5, [r4, #0]
 8019fa4:	e7de      	b.n	8019f64 <_malloc_r+0xa0>
 8019fa6:	bf00      	nop
 8019fa8:	24006bcc 	.word	0x24006bcc

08019fac <__sfputc_r>:
 8019fac:	6893      	ldr	r3, [r2, #8]
 8019fae:	3b01      	subs	r3, #1
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	b410      	push	{r4}
 8019fb4:	6093      	str	r3, [r2, #8]
 8019fb6:	da08      	bge.n	8019fca <__sfputc_r+0x1e>
 8019fb8:	6994      	ldr	r4, [r2, #24]
 8019fba:	42a3      	cmp	r3, r4
 8019fbc:	db01      	blt.n	8019fc2 <__sfputc_r+0x16>
 8019fbe:	290a      	cmp	r1, #10
 8019fc0:	d103      	bne.n	8019fca <__sfputc_r+0x1e>
 8019fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fc6:	f000 bb33 	b.w	801a630 <__swbuf_r>
 8019fca:	6813      	ldr	r3, [r2, #0]
 8019fcc:	1c58      	adds	r0, r3, #1
 8019fce:	6010      	str	r0, [r2, #0]
 8019fd0:	7019      	strb	r1, [r3, #0]
 8019fd2:	4608      	mov	r0, r1
 8019fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fd8:	4770      	bx	lr

08019fda <__sfputs_r>:
 8019fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fdc:	4606      	mov	r6, r0
 8019fde:	460f      	mov	r7, r1
 8019fe0:	4614      	mov	r4, r2
 8019fe2:	18d5      	adds	r5, r2, r3
 8019fe4:	42ac      	cmp	r4, r5
 8019fe6:	d101      	bne.n	8019fec <__sfputs_r+0x12>
 8019fe8:	2000      	movs	r0, #0
 8019fea:	e007      	b.n	8019ffc <__sfputs_r+0x22>
 8019fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ff0:	463a      	mov	r2, r7
 8019ff2:	4630      	mov	r0, r6
 8019ff4:	f7ff ffda 	bl	8019fac <__sfputc_r>
 8019ff8:	1c43      	adds	r3, r0, #1
 8019ffa:	d1f3      	bne.n	8019fe4 <__sfputs_r+0xa>
 8019ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a000 <_vfiprintf_r>:
 801a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a004:	460d      	mov	r5, r1
 801a006:	b09d      	sub	sp, #116	; 0x74
 801a008:	4614      	mov	r4, r2
 801a00a:	4698      	mov	r8, r3
 801a00c:	4606      	mov	r6, r0
 801a00e:	b118      	cbz	r0, 801a018 <_vfiprintf_r+0x18>
 801a010:	6983      	ldr	r3, [r0, #24]
 801a012:	b90b      	cbnz	r3, 801a018 <_vfiprintf_r+0x18>
 801a014:	f000 fd48 	bl	801aaa8 <__sinit>
 801a018:	4b89      	ldr	r3, [pc, #548]	; (801a240 <_vfiprintf_r+0x240>)
 801a01a:	429d      	cmp	r5, r3
 801a01c:	d11b      	bne.n	801a056 <_vfiprintf_r+0x56>
 801a01e:	6875      	ldr	r5, [r6, #4]
 801a020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a022:	07d9      	lsls	r1, r3, #31
 801a024:	d405      	bmi.n	801a032 <_vfiprintf_r+0x32>
 801a026:	89ab      	ldrh	r3, [r5, #12]
 801a028:	059a      	lsls	r2, r3, #22
 801a02a:	d402      	bmi.n	801a032 <_vfiprintf_r+0x32>
 801a02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a02e:	f000 fdd9 	bl	801abe4 <__retarget_lock_acquire_recursive>
 801a032:	89ab      	ldrh	r3, [r5, #12]
 801a034:	071b      	lsls	r3, r3, #28
 801a036:	d501      	bpl.n	801a03c <_vfiprintf_r+0x3c>
 801a038:	692b      	ldr	r3, [r5, #16]
 801a03a:	b9eb      	cbnz	r3, 801a078 <_vfiprintf_r+0x78>
 801a03c:	4629      	mov	r1, r5
 801a03e:	4630      	mov	r0, r6
 801a040:	f000 fb48 	bl	801a6d4 <__swsetup_r>
 801a044:	b1c0      	cbz	r0, 801a078 <_vfiprintf_r+0x78>
 801a046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a048:	07dc      	lsls	r4, r3, #31
 801a04a:	d50e      	bpl.n	801a06a <_vfiprintf_r+0x6a>
 801a04c:	f04f 30ff 	mov.w	r0, #4294967295
 801a050:	b01d      	add	sp, #116	; 0x74
 801a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a056:	4b7b      	ldr	r3, [pc, #492]	; (801a244 <_vfiprintf_r+0x244>)
 801a058:	429d      	cmp	r5, r3
 801a05a:	d101      	bne.n	801a060 <_vfiprintf_r+0x60>
 801a05c:	68b5      	ldr	r5, [r6, #8]
 801a05e:	e7df      	b.n	801a020 <_vfiprintf_r+0x20>
 801a060:	4b79      	ldr	r3, [pc, #484]	; (801a248 <_vfiprintf_r+0x248>)
 801a062:	429d      	cmp	r5, r3
 801a064:	bf08      	it	eq
 801a066:	68f5      	ldreq	r5, [r6, #12]
 801a068:	e7da      	b.n	801a020 <_vfiprintf_r+0x20>
 801a06a:	89ab      	ldrh	r3, [r5, #12]
 801a06c:	0598      	lsls	r0, r3, #22
 801a06e:	d4ed      	bmi.n	801a04c <_vfiprintf_r+0x4c>
 801a070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a072:	f000 fdb9 	bl	801abe8 <__retarget_lock_release_recursive>
 801a076:	e7e9      	b.n	801a04c <_vfiprintf_r+0x4c>
 801a078:	2300      	movs	r3, #0
 801a07a:	9309      	str	r3, [sp, #36]	; 0x24
 801a07c:	2320      	movs	r3, #32
 801a07e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a082:	f8cd 800c 	str.w	r8, [sp, #12]
 801a086:	2330      	movs	r3, #48	; 0x30
 801a088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a24c <_vfiprintf_r+0x24c>
 801a08c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a090:	f04f 0901 	mov.w	r9, #1
 801a094:	4623      	mov	r3, r4
 801a096:	469a      	mov	sl, r3
 801a098:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a09c:	b10a      	cbz	r2, 801a0a2 <_vfiprintf_r+0xa2>
 801a09e:	2a25      	cmp	r2, #37	; 0x25
 801a0a0:	d1f9      	bne.n	801a096 <_vfiprintf_r+0x96>
 801a0a2:	ebba 0b04 	subs.w	fp, sl, r4
 801a0a6:	d00b      	beq.n	801a0c0 <_vfiprintf_r+0xc0>
 801a0a8:	465b      	mov	r3, fp
 801a0aa:	4622      	mov	r2, r4
 801a0ac:	4629      	mov	r1, r5
 801a0ae:	4630      	mov	r0, r6
 801a0b0:	f7ff ff93 	bl	8019fda <__sfputs_r>
 801a0b4:	3001      	adds	r0, #1
 801a0b6:	f000 80aa 	beq.w	801a20e <_vfiprintf_r+0x20e>
 801a0ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0bc:	445a      	add	r2, fp
 801a0be:	9209      	str	r2, [sp, #36]	; 0x24
 801a0c0:	f89a 3000 	ldrb.w	r3, [sl]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	f000 80a2 	beq.w	801a20e <_vfiprintf_r+0x20e>
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	f04f 32ff 	mov.w	r2, #4294967295
 801a0d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0d4:	f10a 0a01 	add.w	sl, sl, #1
 801a0d8:	9304      	str	r3, [sp, #16]
 801a0da:	9307      	str	r3, [sp, #28]
 801a0dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0e0:	931a      	str	r3, [sp, #104]	; 0x68
 801a0e2:	4654      	mov	r4, sl
 801a0e4:	2205      	movs	r2, #5
 801a0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0ea:	4858      	ldr	r0, [pc, #352]	; (801a24c <_vfiprintf_r+0x24c>)
 801a0ec:	f7e6 f910 	bl	8000310 <memchr>
 801a0f0:	9a04      	ldr	r2, [sp, #16]
 801a0f2:	b9d8      	cbnz	r0, 801a12c <_vfiprintf_r+0x12c>
 801a0f4:	06d1      	lsls	r1, r2, #27
 801a0f6:	bf44      	itt	mi
 801a0f8:	2320      	movmi	r3, #32
 801a0fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0fe:	0713      	lsls	r3, r2, #28
 801a100:	bf44      	itt	mi
 801a102:	232b      	movmi	r3, #43	; 0x2b
 801a104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a108:	f89a 3000 	ldrb.w	r3, [sl]
 801a10c:	2b2a      	cmp	r3, #42	; 0x2a
 801a10e:	d015      	beq.n	801a13c <_vfiprintf_r+0x13c>
 801a110:	9a07      	ldr	r2, [sp, #28]
 801a112:	4654      	mov	r4, sl
 801a114:	2000      	movs	r0, #0
 801a116:	f04f 0c0a 	mov.w	ip, #10
 801a11a:	4621      	mov	r1, r4
 801a11c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a120:	3b30      	subs	r3, #48	; 0x30
 801a122:	2b09      	cmp	r3, #9
 801a124:	d94e      	bls.n	801a1c4 <_vfiprintf_r+0x1c4>
 801a126:	b1b0      	cbz	r0, 801a156 <_vfiprintf_r+0x156>
 801a128:	9207      	str	r2, [sp, #28]
 801a12a:	e014      	b.n	801a156 <_vfiprintf_r+0x156>
 801a12c:	eba0 0308 	sub.w	r3, r0, r8
 801a130:	fa09 f303 	lsl.w	r3, r9, r3
 801a134:	4313      	orrs	r3, r2
 801a136:	9304      	str	r3, [sp, #16]
 801a138:	46a2      	mov	sl, r4
 801a13a:	e7d2      	b.n	801a0e2 <_vfiprintf_r+0xe2>
 801a13c:	9b03      	ldr	r3, [sp, #12]
 801a13e:	1d19      	adds	r1, r3, #4
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	9103      	str	r1, [sp, #12]
 801a144:	2b00      	cmp	r3, #0
 801a146:	bfbb      	ittet	lt
 801a148:	425b      	neglt	r3, r3
 801a14a:	f042 0202 	orrlt.w	r2, r2, #2
 801a14e:	9307      	strge	r3, [sp, #28]
 801a150:	9307      	strlt	r3, [sp, #28]
 801a152:	bfb8      	it	lt
 801a154:	9204      	strlt	r2, [sp, #16]
 801a156:	7823      	ldrb	r3, [r4, #0]
 801a158:	2b2e      	cmp	r3, #46	; 0x2e
 801a15a:	d10c      	bne.n	801a176 <_vfiprintf_r+0x176>
 801a15c:	7863      	ldrb	r3, [r4, #1]
 801a15e:	2b2a      	cmp	r3, #42	; 0x2a
 801a160:	d135      	bne.n	801a1ce <_vfiprintf_r+0x1ce>
 801a162:	9b03      	ldr	r3, [sp, #12]
 801a164:	1d1a      	adds	r2, r3, #4
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	9203      	str	r2, [sp, #12]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	bfb8      	it	lt
 801a16e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a172:	3402      	adds	r4, #2
 801a174:	9305      	str	r3, [sp, #20]
 801a176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a25c <_vfiprintf_r+0x25c>
 801a17a:	7821      	ldrb	r1, [r4, #0]
 801a17c:	2203      	movs	r2, #3
 801a17e:	4650      	mov	r0, sl
 801a180:	f7e6 f8c6 	bl	8000310 <memchr>
 801a184:	b140      	cbz	r0, 801a198 <_vfiprintf_r+0x198>
 801a186:	2340      	movs	r3, #64	; 0x40
 801a188:	eba0 000a 	sub.w	r0, r0, sl
 801a18c:	fa03 f000 	lsl.w	r0, r3, r0
 801a190:	9b04      	ldr	r3, [sp, #16]
 801a192:	4303      	orrs	r3, r0
 801a194:	3401      	adds	r4, #1
 801a196:	9304      	str	r3, [sp, #16]
 801a198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a19c:	482c      	ldr	r0, [pc, #176]	; (801a250 <_vfiprintf_r+0x250>)
 801a19e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1a2:	2206      	movs	r2, #6
 801a1a4:	f7e6 f8b4 	bl	8000310 <memchr>
 801a1a8:	2800      	cmp	r0, #0
 801a1aa:	d03f      	beq.n	801a22c <_vfiprintf_r+0x22c>
 801a1ac:	4b29      	ldr	r3, [pc, #164]	; (801a254 <_vfiprintf_r+0x254>)
 801a1ae:	bb1b      	cbnz	r3, 801a1f8 <_vfiprintf_r+0x1f8>
 801a1b0:	9b03      	ldr	r3, [sp, #12]
 801a1b2:	3307      	adds	r3, #7
 801a1b4:	f023 0307 	bic.w	r3, r3, #7
 801a1b8:	3308      	adds	r3, #8
 801a1ba:	9303      	str	r3, [sp, #12]
 801a1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1be:	443b      	add	r3, r7
 801a1c0:	9309      	str	r3, [sp, #36]	; 0x24
 801a1c2:	e767      	b.n	801a094 <_vfiprintf_r+0x94>
 801a1c4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1c8:	460c      	mov	r4, r1
 801a1ca:	2001      	movs	r0, #1
 801a1cc:	e7a5      	b.n	801a11a <_vfiprintf_r+0x11a>
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	3401      	adds	r4, #1
 801a1d2:	9305      	str	r3, [sp, #20]
 801a1d4:	4619      	mov	r1, r3
 801a1d6:	f04f 0c0a 	mov.w	ip, #10
 801a1da:	4620      	mov	r0, r4
 801a1dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1e0:	3a30      	subs	r2, #48	; 0x30
 801a1e2:	2a09      	cmp	r2, #9
 801a1e4:	d903      	bls.n	801a1ee <_vfiprintf_r+0x1ee>
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d0c5      	beq.n	801a176 <_vfiprintf_r+0x176>
 801a1ea:	9105      	str	r1, [sp, #20]
 801a1ec:	e7c3      	b.n	801a176 <_vfiprintf_r+0x176>
 801a1ee:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	e7f0      	b.n	801a1da <_vfiprintf_r+0x1da>
 801a1f8:	ab03      	add	r3, sp, #12
 801a1fa:	9300      	str	r3, [sp, #0]
 801a1fc:	462a      	mov	r2, r5
 801a1fe:	4b16      	ldr	r3, [pc, #88]	; (801a258 <_vfiprintf_r+0x258>)
 801a200:	a904      	add	r1, sp, #16
 801a202:	4630      	mov	r0, r6
 801a204:	f3af 8000 	nop.w
 801a208:	4607      	mov	r7, r0
 801a20a:	1c78      	adds	r0, r7, #1
 801a20c:	d1d6      	bne.n	801a1bc <_vfiprintf_r+0x1bc>
 801a20e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a210:	07d9      	lsls	r1, r3, #31
 801a212:	d405      	bmi.n	801a220 <_vfiprintf_r+0x220>
 801a214:	89ab      	ldrh	r3, [r5, #12]
 801a216:	059a      	lsls	r2, r3, #22
 801a218:	d402      	bmi.n	801a220 <_vfiprintf_r+0x220>
 801a21a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a21c:	f000 fce4 	bl	801abe8 <__retarget_lock_release_recursive>
 801a220:	89ab      	ldrh	r3, [r5, #12]
 801a222:	065b      	lsls	r3, r3, #25
 801a224:	f53f af12 	bmi.w	801a04c <_vfiprintf_r+0x4c>
 801a228:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a22a:	e711      	b.n	801a050 <_vfiprintf_r+0x50>
 801a22c:	ab03      	add	r3, sp, #12
 801a22e:	9300      	str	r3, [sp, #0]
 801a230:	462a      	mov	r2, r5
 801a232:	4b09      	ldr	r3, [pc, #36]	; (801a258 <_vfiprintf_r+0x258>)
 801a234:	a904      	add	r1, sp, #16
 801a236:	4630      	mov	r0, r6
 801a238:	f000 f880 	bl	801a33c <_printf_i>
 801a23c:	e7e4      	b.n	801a208 <_vfiprintf_r+0x208>
 801a23e:	bf00      	nop
 801a240:	0801eee8 	.word	0x0801eee8
 801a244:	0801ef08 	.word	0x0801ef08
 801a248:	0801eec8 	.word	0x0801eec8
 801a24c:	0801ee90 	.word	0x0801ee90
 801a250:	0801ee9a 	.word	0x0801ee9a
 801a254:	00000000 	.word	0x00000000
 801a258:	08019fdb 	.word	0x08019fdb
 801a25c:	0801ee96 	.word	0x0801ee96

0801a260 <_printf_common>:
 801a260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a264:	4616      	mov	r6, r2
 801a266:	4699      	mov	r9, r3
 801a268:	688a      	ldr	r2, [r1, #8]
 801a26a:	690b      	ldr	r3, [r1, #16]
 801a26c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a270:	4293      	cmp	r3, r2
 801a272:	bfb8      	it	lt
 801a274:	4613      	movlt	r3, r2
 801a276:	6033      	str	r3, [r6, #0]
 801a278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a27c:	4607      	mov	r7, r0
 801a27e:	460c      	mov	r4, r1
 801a280:	b10a      	cbz	r2, 801a286 <_printf_common+0x26>
 801a282:	3301      	adds	r3, #1
 801a284:	6033      	str	r3, [r6, #0]
 801a286:	6823      	ldr	r3, [r4, #0]
 801a288:	0699      	lsls	r1, r3, #26
 801a28a:	bf42      	ittt	mi
 801a28c:	6833      	ldrmi	r3, [r6, #0]
 801a28e:	3302      	addmi	r3, #2
 801a290:	6033      	strmi	r3, [r6, #0]
 801a292:	6825      	ldr	r5, [r4, #0]
 801a294:	f015 0506 	ands.w	r5, r5, #6
 801a298:	d106      	bne.n	801a2a8 <_printf_common+0x48>
 801a29a:	f104 0a19 	add.w	sl, r4, #25
 801a29e:	68e3      	ldr	r3, [r4, #12]
 801a2a0:	6832      	ldr	r2, [r6, #0]
 801a2a2:	1a9b      	subs	r3, r3, r2
 801a2a4:	42ab      	cmp	r3, r5
 801a2a6:	dc26      	bgt.n	801a2f6 <_printf_common+0x96>
 801a2a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a2ac:	1e13      	subs	r3, r2, #0
 801a2ae:	6822      	ldr	r2, [r4, #0]
 801a2b0:	bf18      	it	ne
 801a2b2:	2301      	movne	r3, #1
 801a2b4:	0692      	lsls	r2, r2, #26
 801a2b6:	d42b      	bmi.n	801a310 <_printf_common+0xb0>
 801a2b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a2bc:	4649      	mov	r1, r9
 801a2be:	4638      	mov	r0, r7
 801a2c0:	47c0      	blx	r8
 801a2c2:	3001      	adds	r0, #1
 801a2c4:	d01e      	beq.n	801a304 <_printf_common+0xa4>
 801a2c6:	6823      	ldr	r3, [r4, #0]
 801a2c8:	68e5      	ldr	r5, [r4, #12]
 801a2ca:	6832      	ldr	r2, [r6, #0]
 801a2cc:	f003 0306 	and.w	r3, r3, #6
 801a2d0:	2b04      	cmp	r3, #4
 801a2d2:	bf08      	it	eq
 801a2d4:	1aad      	subeq	r5, r5, r2
 801a2d6:	68a3      	ldr	r3, [r4, #8]
 801a2d8:	6922      	ldr	r2, [r4, #16]
 801a2da:	bf0c      	ite	eq
 801a2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a2e0:	2500      	movne	r5, #0
 801a2e2:	4293      	cmp	r3, r2
 801a2e4:	bfc4      	itt	gt
 801a2e6:	1a9b      	subgt	r3, r3, r2
 801a2e8:	18ed      	addgt	r5, r5, r3
 801a2ea:	2600      	movs	r6, #0
 801a2ec:	341a      	adds	r4, #26
 801a2ee:	42b5      	cmp	r5, r6
 801a2f0:	d11a      	bne.n	801a328 <_printf_common+0xc8>
 801a2f2:	2000      	movs	r0, #0
 801a2f4:	e008      	b.n	801a308 <_printf_common+0xa8>
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	4652      	mov	r2, sl
 801a2fa:	4649      	mov	r1, r9
 801a2fc:	4638      	mov	r0, r7
 801a2fe:	47c0      	blx	r8
 801a300:	3001      	adds	r0, #1
 801a302:	d103      	bne.n	801a30c <_printf_common+0xac>
 801a304:	f04f 30ff 	mov.w	r0, #4294967295
 801a308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a30c:	3501      	adds	r5, #1
 801a30e:	e7c6      	b.n	801a29e <_printf_common+0x3e>
 801a310:	18e1      	adds	r1, r4, r3
 801a312:	1c5a      	adds	r2, r3, #1
 801a314:	2030      	movs	r0, #48	; 0x30
 801a316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a31a:	4422      	add	r2, r4
 801a31c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a324:	3302      	adds	r3, #2
 801a326:	e7c7      	b.n	801a2b8 <_printf_common+0x58>
 801a328:	2301      	movs	r3, #1
 801a32a:	4622      	mov	r2, r4
 801a32c:	4649      	mov	r1, r9
 801a32e:	4638      	mov	r0, r7
 801a330:	47c0      	blx	r8
 801a332:	3001      	adds	r0, #1
 801a334:	d0e6      	beq.n	801a304 <_printf_common+0xa4>
 801a336:	3601      	adds	r6, #1
 801a338:	e7d9      	b.n	801a2ee <_printf_common+0x8e>
	...

0801a33c <_printf_i>:
 801a33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a340:	7e0f      	ldrb	r7, [r1, #24]
 801a342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a344:	2f78      	cmp	r7, #120	; 0x78
 801a346:	4691      	mov	r9, r2
 801a348:	4680      	mov	r8, r0
 801a34a:	460c      	mov	r4, r1
 801a34c:	469a      	mov	sl, r3
 801a34e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a352:	d807      	bhi.n	801a364 <_printf_i+0x28>
 801a354:	2f62      	cmp	r7, #98	; 0x62
 801a356:	d80a      	bhi.n	801a36e <_printf_i+0x32>
 801a358:	2f00      	cmp	r7, #0
 801a35a:	f000 80d8 	beq.w	801a50e <_printf_i+0x1d2>
 801a35e:	2f58      	cmp	r7, #88	; 0x58
 801a360:	f000 80a3 	beq.w	801a4aa <_printf_i+0x16e>
 801a364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a36c:	e03a      	b.n	801a3e4 <_printf_i+0xa8>
 801a36e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a372:	2b15      	cmp	r3, #21
 801a374:	d8f6      	bhi.n	801a364 <_printf_i+0x28>
 801a376:	a101      	add	r1, pc, #4	; (adr r1, 801a37c <_printf_i+0x40>)
 801a378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a37c:	0801a3d5 	.word	0x0801a3d5
 801a380:	0801a3e9 	.word	0x0801a3e9
 801a384:	0801a365 	.word	0x0801a365
 801a388:	0801a365 	.word	0x0801a365
 801a38c:	0801a365 	.word	0x0801a365
 801a390:	0801a365 	.word	0x0801a365
 801a394:	0801a3e9 	.word	0x0801a3e9
 801a398:	0801a365 	.word	0x0801a365
 801a39c:	0801a365 	.word	0x0801a365
 801a3a0:	0801a365 	.word	0x0801a365
 801a3a4:	0801a365 	.word	0x0801a365
 801a3a8:	0801a4f5 	.word	0x0801a4f5
 801a3ac:	0801a419 	.word	0x0801a419
 801a3b0:	0801a4d7 	.word	0x0801a4d7
 801a3b4:	0801a365 	.word	0x0801a365
 801a3b8:	0801a365 	.word	0x0801a365
 801a3bc:	0801a517 	.word	0x0801a517
 801a3c0:	0801a365 	.word	0x0801a365
 801a3c4:	0801a419 	.word	0x0801a419
 801a3c8:	0801a365 	.word	0x0801a365
 801a3cc:	0801a365 	.word	0x0801a365
 801a3d0:	0801a4df 	.word	0x0801a4df
 801a3d4:	682b      	ldr	r3, [r5, #0]
 801a3d6:	1d1a      	adds	r2, r3, #4
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	602a      	str	r2, [r5, #0]
 801a3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a3e4:	2301      	movs	r3, #1
 801a3e6:	e0a3      	b.n	801a530 <_printf_i+0x1f4>
 801a3e8:	6820      	ldr	r0, [r4, #0]
 801a3ea:	6829      	ldr	r1, [r5, #0]
 801a3ec:	0606      	lsls	r6, r0, #24
 801a3ee:	f101 0304 	add.w	r3, r1, #4
 801a3f2:	d50a      	bpl.n	801a40a <_printf_i+0xce>
 801a3f4:	680e      	ldr	r6, [r1, #0]
 801a3f6:	602b      	str	r3, [r5, #0]
 801a3f8:	2e00      	cmp	r6, #0
 801a3fa:	da03      	bge.n	801a404 <_printf_i+0xc8>
 801a3fc:	232d      	movs	r3, #45	; 0x2d
 801a3fe:	4276      	negs	r6, r6
 801a400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a404:	485e      	ldr	r0, [pc, #376]	; (801a580 <_printf_i+0x244>)
 801a406:	230a      	movs	r3, #10
 801a408:	e019      	b.n	801a43e <_printf_i+0x102>
 801a40a:	680e      	ldr	r6, [r1, #0]
 801a40c:	602b      	str	r3, [r5, #0]
 801a40e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a412:	bf18      	it	ne
 801a414:	b236      	sxthne	r6, r6
 801a416:	e7ef      	b.n	801a3f8 <_printf_i+0xbc>
 801a418:	682b      	ldr	r3, [r5, #0]
 801a41a:	6820      	ldr	r0, [r4, #0]
 801a41c:	1d19      	adds	r1, r3, #4
 801a41e:	6029      	str	r1, [r5, #0]
 801a420:	0601      	lsls	r1, r0, #24
 801a422:	d501      	bpl.n	801a428 <_printf_i+0xec>
 801a424:	681e      	ldr	r6, [r3, #0]
 801a426:	e002      	b.n	801a42e <_printf_i+0xf2>
 801a428:	0646      	lsls	r6, r0, #25
 801a42a:	d5fb      	bpl.n	801a424 <_printf_i+0xe8>
 801a42c:	881e      	ldrh	r6, [r3, #0]
 801a42e:	4854      	ldr	r0, [pc, #336]	; (801a580 <_printf_i+0x244>)
 801a430:	2f6f      	cmp	r7, #111	; 0x6f
 801a432:	bf0c      	ite	eq
 801a434:	2308      	moveq	r3, #8
 801a436:	230a      	movne	r3, #10
 801a438:	2100      	movs	r1, #0
 801a43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a43e:	6865      	ldr	r5, [r4, #4]
 801a440:	60a5      	str	r5, [r4, #8]
 801a442:	2d00      	cmp	r5, #0
 801a444:	bfa2      	ittt	ge
 801a446:	6821      	ldrge	r1, [r4, #0]
 801a448:	f021 0104 	bicge.w	r1, r1, #4
 801a44c:	6021      	strge	r1, [r4, #0]
 801a44e:	b90e      	cbnz	r6, 801a454 <_printf_i+0x118>
 801a450:	2d00      	cmp	r5, #0
 801a452:	d04d      	beq.n	801a4f0 <_printf_i+0x1b4>
 801a454:	4615      	mov	r5, r2
 801a456:	fbb6 f1f3 	udiv	r1, r6, r3
 801a45a:	fb03 6711 	mls	r7, r3, r1, r6
 801a45e:	5dc7      	ldrb	r7, [r0, r7]
 801a460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a464:	4637      	mov	r7, r6
 801a466:	42bb      	cmp	r3, r7
 801a468:	460e      	mov	r6, r1
 801a46a:	d9f4      	bls.n	801a456 <_printf_i+0x11a>
 801a46c:	2b08      	cmp	r3, #8
 801a46e:	d10b      	bne.n	801a488 <_printf_i+0x14c>
 801a470:	6823      	ldr	r3, [r4, #0]
 801a472:	07de      	lsls	r6, r3, #31
 801a474:	d508      	bpl.n	801a488 <_printf_i+0x14c>
 801a476:	6923      	ldr	r3, [r4, #16]
 801a478:	6861      	ldr	r1, [r4, #4]
 801a47a:	4299      	cmp	r1, r3
 801a47c:	bfde      	ittt	le
 801a47e:	2330      	movle	r3, #48	; 0x30
 801a480:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a484:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a488:	1b52      	subs	r2, r2, r5
 801a48a:	6122      	str	r2, [r4, #16]
 801a48c:	f8cd a000 	str.w	sl, [sp]
 801a490:	464b      	mov	r3, r9
 801a492:	aa03      	add	r2, sp, #12
 801a494:	4621      	mov	r1, r4
 801a496:	4640      	mov	r0, r8
 801a498:	f7ff fee2 	bl	801a260 <_printf_common>
 801a49c:	3001      	adds	r0, #1
 801a49e:	d14c      	bne.n	801a53a <_printf_i+0x1fe>
 801a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 801a4a4:	b004      	add	sp, #16
 801a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4aa:	4835      	ldr	r0, [pc, #212]	; (801a580 <_printf_i+0x244>)
 801a4ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a4b0:	6829      	ldr	r1, [r5, #0]
 801a4b2:	6823      	ldr	r3, [r4, #0]
 801a4b4:	f851 6b04 	ldr.w	r6, [r1], #4
 801a4b8:	6029      	str	r1, [r5, #0]
 801a4ba:	061d      	lsls	r5, r3, #24
 801a4bc:	d514      	bpl.n	801a4e8 <_printf_i+0x1ac>
 801a4be:	07df      	lsls	r7, r3, #31
 801a4c0:	bf44      	itt	mi
 801a4c2:	f043 0320 	orrmi.w	r3, r3, #32
 801a4c6:	6023      	strmi	r3, [r4, #0]
 801a4c8:	b91e      	cbnz	r6, 801a4d2 <_printf_i+0x196>
 801a4ca:	6823      	ldr	r3, [r4, #0]
 801a4cc:	f023 0320 	bic.w	r3, r3, #32
 801a4d0:	6023      	str	r3, [r4, #0]
 801a4d2:	2310      	movs	r3, #16
 801a4d4:	e7b0      	b.n	801a438 <_printf_i+0xfc>
 801a4d6:	6823      	ldr	r3, [r4, #0]
 801a4d8:	f043 0320 	orr.w	r3, r3, #32
 801a4dc:	6023      	str	r3, [r4, #0]
 801a4de:	2378      	movs	r3, #120	; 0x78
 801a4e0:	4828      	ldr	r0, [pc, #160]	; (801a584 <_printf_i+0x248>)
 801a4e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a4e6:	e7e3      	b.n	801a4b0 <_printf_i+0x174>
 801a4e8:	0659      	lsls	r1, r3, #25
 801a4ea:	bf48      	it	mi
 801a4ec:	b2b6      	uxthmi	r6, r6
 801a4ee:	e7e6      	b.n	801a4be <_printf_i+0x182>
 801a4f0:	4615      	mov	r5, r2
 801a4f2:	e7bb      	b.n	801a46c <_printf_i+0x130>
 801a4f4:	682b      	ldr	r3, [r5, #0]
 801a4f6:	6826      	ldr	r6, [r4, #0]
 801a4f8:	6961      	ldr	r1, [r4, #20]
 801a4fa:	1d18      	adds	r0, r3, #4
 801a4fc:	6028      	str	r0, [r5, #0]
 801a4fe:	0635      	lsls	r5, r6, #24
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	d501      	bpl.n	801a508 <_printf_i+0x1cc>
 801a504:	6019      	str	r1, [r3, #0]
 801a506:	e002      	b.n	801a50e <_printf_i+0x1d2>
 801a508:	0670      	lsls	r0, r6, #25
 801a50a:	d5fb      	bpl.n	801a504 <_printf_i+0x1c8>
 801a50c:	8019      	strh	r1, [r3, #0]
 801a50e:	2300      	movs	r3, #0
 801a510:	6123      	str	r3, [r4, #16]
 801a512:	4615      	mov	r5, r2
 801a514:	e7ba      	b.n	801a48c <_printf_i+0x150>
 801a516:	682b      	ldr	r3, [r5, #0]
 801a518:	1d1a      	adds	r2, r3, #4
 801a51a:	602a      	str	r2, [r5, #0]
 801a51c:	681d      	ldr	r5, [r3, #0]
 801a51e:	6862      	ldr	r2, [r4, #4]
 801a520:	2100      	movs	r1, #0
 801a522:	4628      	mov	r0, r5
 801a524:	f7e5 fef4 	bl	8000310 <memchr>
 801a528:	b108      	cbz	r0, 801a52e <_printf_i+0x1f2>
 801a52a:	1b40      	subs	r0, r0, r5
 801a52c:	6060      	str	r0, [r4, #4]
 801a52e:	6863      	ldr	r3, [r4, #4]
 801a530:	6123      	str	r3, [r4, #16]
 801a532:	2300      	movs	r3, #0
 801a534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a538:	e7a8      	b.n	801a48c <_printf_i+0x150>
 801a53a:	6923      	ldr	r3, [r4, #16]
 801a53c:	462a      	mov	r2, r5
 801a53e:	4649      	mov	r1, r9
 801a540:	4640      	mov	r0, r8
 801a542:	47d0      	blx	sl
 801a544:	3001      	adds	r0, #1
 801a546:	d0ab      	beq.n	801a4a0 <_printf_i+0x164>
 801a548:	6823      	ldr	r3, [r4, #0]
 801a54a:	079b      	lsls	r3, r3, #30
 801a54c:	d413      	bmi.n	801a576 <_printf_i+0x23a>
 801a54e:	68e0      	ldr	r0, [r4, #12]
 801a550:	9b03      	ldr	r3, [sp, #12]
 801a552:	4298      	cmp	r0, r3
 801a554:	bfb8      	it	lt
 801a556:	4618      	movlt	r0, r3
 801a558:	e7a4      	b.n	801a4a4 <_printf_i+0x168>
 801a55a:	2301      	movs	r3, #1
 801a55c:	4632      	mov	r2, r6
 801a55e:	4649      	mov	r1, r9
 801a560:	4640      	mov	r0, r8
 801a562:	47d0      	blx	sl
 801a564:	3001      	adds	r0, #1
 801a566:	d09b      	beq.n	801a4a0 <_printf_i+0x164>
 801a568:	3501      	adds	r5, #1
 801a56a:	68e3      	ldr	r3, [r4, #12]
 801a56c:	9903      	ldr	r1, [sp, #12]
 801a56e:	1a5b      	subs	r3, r3, r1
 801a570:	42ab      	cmp	r3, r5
 801a572:	dcf2      	bgt.n	801a55a <_printf_i+0x21e>
 801a574:	e7eb      	b.n	801a54e <_printf_i+0x212>
 801a576:	2500      	movs	r5, #0
 801a578:	f104 0619 	add.w	r6, r4, #25
 801a57c:	e7f5      	b.n	801a56a <_printf_i+0x22e>
 801a57e:	bf00      	nop
 801a580:	0801eea1 	.word	0x0801eea1
 801a584:	0801eeb2 	.word	0x0801eeb2

0801a588 <_sbrk_r>:
 801a588:	b538      	push	{r3, r4, r5, lr}
 801a58a:	4d06      	ldr	r5, [pc, #24]	; (801a5a4 <_sbrk_r+0x1c>)
 801a58c:	2300      	movs	r3, #0
 801a58e:	4604      	mov	r4, r0
 801a590:	4608      	mov	r0, r1
 801a592:	602b      	str	r3, [r5, #0]
 801a594:	f7e6 fd90 	bl	80010b8 <_sbrk>
 801a598:	1c43      	adds	r3, r0, #1
 801a59a:	d102      	bne.n	801a5a2 <_sbrk_r+0x1a>
 801a59c:	682b      	ldr	r3, [r5, #0]
 801a59e:	b103      	cbz	r3, 801a5a2 <_sbrk_r+0x1a>
 801a5a0:	6023      	str	r3, [r4, #0]
 801a5a2:	bd38      	pop	{r3, r4, r5, pc}
 801a5a4:	24006d70 	.word	0x24006d70

0801a5a8 <_raise_r>:
 801a5a8:	291f      	cmp	r1, #31
 801a5aa:	b538      	push	{r3, r4, r5, lr}
 801a5ac:	4604      	mov	r4, r0
 801a5ae:	460d      	mov	r5, r1
 801a5b0:	d904      	bls.n	801a5bc <_raise_r+0x14>
 801a5b2:	2316      	movs	r3, #22
 801a5b4:	6003      	str	r3, [r0, #0]
 801a5b6:	f04f 30ff 	mov.w	r0, #4294967295
 801a5ba:	bd38      	pop	{r3, r4, r5, pc}
 801a5bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a5be:	b112      	cbz	r2, 801a5c6 <_raise_r+0x1e>
 801a5c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a5c4:	b94b      	cbnz	r3, 801a5da <_raise_r+0x32>
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	f000 f830 	bl	801a62c <_getpid_r>
 801a5cc:	462a      	mov	r2, r5
 801a5ce:	4601      	mov	r1, r0
 801a5d0:	4620      	mov	r0, r4
 801a5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a5d6:	f000 b817 	b.w	801a608 <_kill_r>
 801a5da:	2b01      	cmp	r3, #1
 801a5dc:	d00a      	beq.n	801a5f4 <_raise_r+0x4c>
 801a5de:	1c59      	adds	r1, r3, #1
 801a5e0:	d103      	bne.n	801a5ea <_raise_r+0x42>
 801a5e2:	2316      	movs	r3, #22
 801a5e4:	6003      	str	r3, [r0, #0]
 801a5e6:	2001      	movs	r0, #1
 801a5e8:	e7e7      	b.n	801a5ba <_raise_r+0x12>
 801a5ea:	2400      	movs	r4, #0
 801a5ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a5f0:	4628      	mov	r0, r5
 801a5f2:	4798      	blx	r3
 801a5f4:	2000      	movs	r0, #0
 801a5f6:	e7e0      	b.n	801a5ba <_raise_r+0x12>

0801a5f8 <raise>:
 801a5f8:	4b02      	ldr	r3, [pc, #8]	; (801a604 <raise+0xc>)
 801a5fa:	4601      	mov	r1, r0
 801a5fc:	6818      	ldr	r0, [r3, #0]
 801a5fe:	f7ff bfd3 	b.w	801a5a8 <_raise_r>
 801a602:	bf00      	nop
 801a604:	240000a8 	.word	0x240000a8

0801a608 <_kill_r>:
 801a608:	b538      	push	{r3, r4, r5, lr}
 801a60a:	4d07      	ldr	r5, [pc, #28]	; (801a628 <_kill_r+0x20>)
 801a60c:	2300      	movs	r3, #0
 801a60e:	4604      	mov	r4, r0
 801a610:	4608      	mov	r0, r1
 801a612:	4611      	mov	r1, r2
 801a614:	602b      	str	r3, [r5, #0]
 801a616:	f7e6 fd19 	bl	800104c <_kill>
 801a61a:	1c43      	adds	r3, r0, #1
 801a61c:	d102      	bne.n	801a624 <_kill_r+0x1c>
 801a61e:	682b      	ldr	r3, [r5, #0]
 801a620:	b103      	cbz	r3, 801a624 <_kill_r+0x1c>
 801a622:	6023      	str	r3, [r4, #0]
 801a624:	bd38      	pop	{r3, r4, r5, pc}
 801a626:	bf00      	nop
 801a628:	24006d70 	.word	0x24006d70

0801a62c <_getpid_r>:
 801a62c:	f7e6 bd0c 	b.w	8001048 <_getpid>

0801a630 <__swbuf_r>:
 801a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a632:	460e      	mov	r6, r1
 801a634:	4614      	mov	r4, r2
 801a636:	4605      	mov	r5, r0
 801a638:	b118      	cbz	r0, 801a642 <__swbuf_r+0x12>
 801a63a:	6983      	ldr	r3, [r0, #24]
 801a63c:	b90b      	cbnz	r3, 801a642 <__swbuf_r+0x12>
 801a63e:	f000 fa33 	bl	801aaa8 <__sinit>
 801a642:	4b21      	ldr	r3, [pc, #132]	; (801a6c8 <__swbuf_r+0x98>)
 801a644:	429c      	cmp	r4, r3
 801a646:	d12b      	bne.n	801a6a0 <__swbuf_r+0x70>
 801a648:	686c      	ldr	r4, [r5, #4]
 801a64a:	69a3      	ldr	r3, [r4, #24]
 801a64c:	60a3      	str	r3, [r4, #8]
 801a64e:	89a3      	ldrh	r3, [r4, #12]
 801a650:	071a      	lsls	r2, r3, #28
 801a652:	d52f      	bpl.n	801a6b4 <__swbuf_r+0x84>
 801a654:	6923      	ldr	r3, [r4, #16]
 801a656:	b36b      	cbz	r3, 801a6b4 <__swbuf_r+0x84>
 801a658:	6923      	ldr	r3, [r4, #16]
 801a65a:	6820      	ldr	r0, [r4, #0]
 801a65c:	1ac0      	subs	r0, r0, r3
 801a65e:	6963      	ldr	r3, [r4, #20]
 801a660:	b2f6      	uxtb	r6, r6
 801a662:	4283      	cmp	r3, r0
 801a664:	4637      	mov	r7, r6
 801a666:	dc04      	bgt.n	801a672 <__swbuf_r+0x42>
 801a668:	4621      	mov	r1, r4
 801a66a:	4628      	mov	r0, r5
 801a66c:	f000 f988 	bl	801a980 <_fflush_r>
 801a670:	bb30      	cbnz	r0, 801a6c0 <__swbuf_r+0x90>
 801a672:	68a3      	ldr	r3, [r4, #8]
 801a674:	3b01      	subs	r3, #1
 801a676:	60a3      	str	r3, [r4, #8]
 801a678:	6823      	ldr	r3, [r4, #0]
 801a67a:	1c5a      	adds	r2, r3, #1
 801a67c:	6022      	str	r2, [r4, #0]
 801a67e:	701e      	strb	r6, [r3, #0]
 801a680:	6963      	ldr	r3, [r4, #20]
 801a682:	3001      	adds	r0, #1
 801a684:	4283      	cmp	r3, r0
 801a686:	d004      	beq.n	801a692 <__swbuf_r+0x62>
 801a688:	89a3      	ldrh	r3, [r4, #12]
 801a68a:	07db      	lsls	r3, r3, #31
 801a68c:	d506      	bpl.n	801a69c <__swbuf_r+0x6c>
 801a68e:	2e0a      	cmp	r6, #10
 801a690:	d104      	bne.n	801a69c <__swbuf_r+0x6c>
 801a692:	4621      	mov	r1, r4
 801a694:	4628      	mov	r0, r5
 801a696:	f000 f973 	bl	801a980 <_fflush_r>
 801a69a:	b988      	cbnz	r0, 801a6c0 <__swbuf_r+0x90>
 801a69c:	4638      	mov	r0, r7
 801a69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6a0:	4b0a      	ldr	r3, [pc, #40]	; (801a6cc <__swbuf_r+0x9c>)
 801a6a2:	429c      	cmp	r4, r3
 801a6a4:	d101      	bne.n	801a6aa <__swbuf_r+0x7a>
 801a6a6:	68ac      	ldr	r4, [r5, #8]
 801a6a8:	e7cf      	b.n	801a64a <__swbuf_r+0x1a>
 801a6aa:	4b09      	ldr	r3, [pc, #36]	; (801a6d0 <__swbuf_r+0xa0>)
 801a6ac:	429c      	cmp	r4, r3
 801a6ae:	bf08      	it	eq
 801a6b0:	68ec      	ldreq	r4, [r5, #12]
 801a6b2:	e7ca      	b.n	801a64a <__swbuf_r+0x1a>
 801a6b4:	4621      	mov	r1, r4
 801a6b6:	4628      	mov	r0, r5
 801a6b8:	f000 f80c 	bl	801a6d4 <__swsetup_r>
 801a6bc:	2800      	cmp	r0, #0
 801a6be:	d0cb      	beq.n	801a658 <__swbuf_r+0x28>
 801a6c0:	f04f 37ff 	mov.w	r7, #4294967295
 801a6c4:	e7ea      	b.n	801a69c <__swbuf_r+0x6c>
 801a6c6:	bf00      	nop
 801a6c8:	0801eee8 	.word	0x0801eee8
 801a6cc:	0801ef08 	.word	0x0801ef08
 801a6d0:	0801eec8 	.word	0x0801eec8

0801a6d4 <__swsetup_r>:
 801a6d4:	4b32      	ldr	r3, [pc, #200]	; (801a7a0 <__swsetup_r+0xcc>)
 801a6d6:	b570      	push	{r4, r5, r6, lr}
 801a6d8:	681d      	ldr	r5, [r3, #0]
 801a6da:	4606      	mov	r6, r0
 801a6dc:	460c      	mov	r4, r1
 801a6de:	b125      	cbz	r5, 801a6ea <__swsetup_r+0x16>
 801a6e0:	69ab      	ldr	r3, [r5, #24]
 801a6e2:	b913      	cbnz	r3, 801a6ea <__swsetup_r+0x16>
 801a6e4:	4628      	mov	r0, r5
 801a6e6:	f000 f9df 	bl	801aaa8 <__sinit>
 801a6ea:	4b2e      	ldr	r3, [pc, #184]	; (801a7a4 <__swsetup_r+0xd0>)
 801a6ec:	429c      	cmp	r4, r3
 801a6ee:	d10f      	bne.n	801a710 <__swsetup_r+0x3c>
 801a6f0:	686c      	ldr	r4, [r5, #4]
 801a6f2:	89a3      	ldrh	r3, [r4, #12]
 801a6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a6f8:	0719      	lsls	r1, r3, #28
 801a6fa:	d42c      	bmi.n	801a756 <__swsetup_r+0x82>
 801a6fc:	06dd      	lsls	r5, r3, #27
 801a6fe:	d411      	bmi.n	801a724 <__swsetup_r+0x50>
 801a700:	2309      	movs	r3, #9
 801a702:	6033      	str	r3, [r6, #0]
 801a704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a708:	81a3      	strh	r3, [r4, #12]
 801a70a:	f04f 30ff 	mov.w	r0, #4294967295
 801a70e:	e03e      	b.n	801a78e <__swsetup_r+0xba>
 801a710:	4b25      	ldr	r3, [pc, #148]	; (801a7a8 <__swsetup_r+0xd4>)
 801a712:	429c      	cmp	r4, r3
 801a714:	d101      	bne.n	801a71a <__swsetup_r+0x46>
 801a716:	68ac      	ldr	r4, [r5, #8]
 801a718:	e7eb      	b.n	801a6f2 <__swsetup_r+0x1e>
 801a71a:	4b24      	ldr	r3, [pc, #144]	; (801a7ac <__swsetup_r+0xd8>)
 801a71c:	429c      	cmp	r4, r3
 801a71e:	bf08      	it	eq
 801a720:	68ec      	ldreq	r4, [r5, #12]
 801a722:	e7e6      	b.n	801a6f2 <__swsetup_r+0x1e>
 801a724:	0758      	lsls	r0, r3, #29
 801a726:	d512      	bpl.n	801a74e <__swsetup_r+0x7a>
 801a728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a72a:	b141      	cbz	r1, 801a73e <__swsetup_r+0x6a>
 801a72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a730:	4299      	cmp	r1, r3
 801a732:	d002      	beq.n	801a73a <__swsetup_r+0x66>
 801a734:	4630      	mov	r0, r6
 801a736:	f7ff fb59 	bl	8019dec <_free_r>
 801a73a:	2300      	movs	r3, #0
 801a73c:	6363      	str	r3, [r4, #52]	; 0x34
 801a73e:	89a3      	ldrh	r3, [r4, #12]
 801a740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a744:	81a3      	strh	r3, [r4, #12]
 801a746:	2300      	movs	r3, #0
 801a748:	6063      	str	r3, [r4, #4]
 801a74a:	6923      	ldr	r3, [r4, #16]
 801a74c:	6023      	str	r3, [r4, #0]
 801a74e:	89a3      	ldrh	r3, [r4, #12]
 801a750:	f043 0308 	orr.w	r3, r3, #8
 801a754:	81a3      	strh	r3, [r4, #12]
 801a756:	6923      	ldr	r3, [r4, #16]
 801a758:	b94b      	cbnz	r3, 801a76e <__swsetup_r+0x9a>
 801a75a:	89a3      	ldrh	r3, [r4, #12]
 801a75c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a764:	d003      	beq.n	801a76e <__swsetup_r+0x9a>
 801a766:	4621      	mov	r1, r4
 801a768:	4630      	mov	r0, r6
 801a76a:	f000 fa63 	bl	801ac34 <__smakebuf_r>
 801a76e:	89a0      	ldrh	r0, [r4, #12]
 801a770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a774:	f010 0301 	ands.w	r3, r0, #1
 801a778:	d00a      	beq.n	801a790 <__swsetup_r+0xbc>
 801a77a:	2300      	movs	r3, #0
 801a77c:	60a3      	str	r3, [r4, #8]
 801a77e:	6963      	ldr	r3, [r4, #20]
 801a780:	425b      	negs	r3, r3
 801a782:	61a3      	str	r3, [r4, #24]
 801a784:	6923      	ldr	r3, [r4, #16]
 801a786:	b943      	cbnz	r3, 801a79a <__swsetup_r+0xc6>
 801a788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a78c:	d1ba      	bne.n	801a704 <__swsetup_r+0x30>
 801a78e:	bd70      	pop	{r4, r5, r6, pc}
 801a790:	0781      	lsls	r1, r0, #30
 801a792:	bf58      	it	pl
 801a794:	6963      	ldrpl	r3, [r4, #20]
 801a796:	60a3      	str	r3, [r4, #8]
 801a798:	e7f4      	b.n	801a784 <__swsetup_r+0xb0>
 801a79a:	2000      	movs	r0, #0
 801a79c:	e7f7      	b.n	801a78e <__swsetup_r+0xba>
 801a79e:	bf00      	nop
 801a7a0:	240000a8 	.word	0x240000a8
 801a7a4:	0801eee8 	.word	0x0801eee8
 801a7a8:	0801ef08 	.word	0x0801ef08
 801a7ac:	0801eec8 	.word	0x0801eec8

0801a7b0 <__register_exitproc>:
 801a7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a7b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801a870 <__register_exitproc+0xc0>
 801a7b8:	4606      	mov	r6, r0
 801a7ba:	f8d8 0000 	ldr.w	r0, [r8]
 801a7be:	461f      	mov	r7, r3
 801a7c0:	460d      	mov	r5, r1
 801a7c2:	4691      	mov	r9, r2
 801a7c4:	f000 fa0e 	bl	801abe4 <__retarget_lock_acquire_recursive>
 801a7c8:	4b25      	ldr	r3, [pc, #148]	; (801a860 <__register_exitproc+0xb0>)
 801a7ca:	681c      	ldr	r4, [r3, #0]
 801a7cc:	b934      	cbnz	r4, 801a7dc <__register_exitproc+0x2c>
 801a7ce:	4c25      	ldr	r4, [pc, #148]	; (801a864 <__register_exitproc+0xb4>)
 801a7d0:	601c      	str	r4, [r3, #0]
 801a7d2:	4b25      	ldr	r3, [pc, #148]	; (801a868 <__register_exitproc+0xb8>)
 801a7d4:	b113      	cbz	r3, 801a7dc <__register_exitproc+0x2c>
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801a7dc:	6863      	ldr	r3, [r4, #4]
 801a7de:	2b1f      	cmp	r3, #31
 801a7e0:	dd07      	ble.n	801a7f2 <__register_exitproc+0x42>
 801a7e2:	f8d8 0000 	ldr.w	r0, [r8]
 801a7e6:	f000 f9ff 	bl	801abe8 <__retarget_lock_release_recursive>
 801a7ea:	f04f 30ff 	mov.w	r0, #4294967295
 801a7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7f2:	b34e      	cbz	r6, 801a848 <__register_exitproc+0x98>
 801a7f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801a7f8:	b988      	cbnz	r0, 801a81e <__register_exitproc+0x6e>
 801a7fa:	4b1c      	ldr	r3, [pc, #112]	; (801a86c <__register_exitproc+0xbc>)
 801a7fc:	b923      	cbnz	r3, 801a808 <__register_exitproc+0x58>
 801a7fe:	f8d8 0000 	ldr.w	r0, [r8]
 801a802:	f000 f9f0 	bl	801abe6 <__retarget_lock_release>
 801a806:	e7f0      	b.n	801a7ea <__register_exitproc+0x3a>
 801a808:	f44f 7084 	mov.w	r0, #264	; 0x108
 801a80c:	f7ff fac8 	bl	8019da0 <malloc>
 801a810:	2800      	cmp	r0, #0
 801a812:	d0f4      	beq.n	801a7fe <__register_exitproc+0x4e>
 801a814:	2300      	movs	r3, #0
 801a816:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801a81a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801a81e:	6863      	ldr	r3, [r4, #4]
 801a820:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801a824:	2201      	movs	r2, #1
 801a826:	409a      	lsls	r2, r3
 801a828:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801a82c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801a830:	4313      	orrs	r3, r2
 801a832:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801a836:	2e02      	cmp	r6, #2
 801a838:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801a83c:	bf02      	ittt	eq
 801a83e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801a842:	4313      	orreq	r3, r2
 801a844:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801a848:	6863      	ldr	r3, [r4, #4]
 801a84a:	f8d8 0000 	ldr.w	r0, [r8]
 801a84e:	1c5a      	adds	r2, r3, #1
 801a850:	3302      	adds	r3, #2
 801a852:	6062      	str	r2, [r4, #4]
 801a854:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801a858:	f000 f9c6 	bl	801abe8 <__retarget_lock_release_recursive>
 801a85c:	2000      	movs	r0, #0
 801a85e:	e7c6      	b.n	801a7ee <__register_exitproc+0x3e>
 801a860:	24006d68 	.word	0x24006d68
 801a864:	24006cdc 	.word	0x24006cdc
 801a868:	0801eec4 	.word	0x0801eec4
 801a86c:	08019da1 	.word	0x08019da1
 801a870:	2400010c 	.word	0x2400010c

0801a874 <__sflush_r>:
 801a874:	898a      	ldrh	r2, [r1, #12]
 801a876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a87a:	4605      	mov	r5, r0
 801a87c:	0710      	lsls	r0, r2, #28
 801a87e:	460c      	mov	r4, r1
 801a880:	d458      	bmi.n	801a934 <__sflush_r+0xc0>
 801a882:	684b      	ldr	r3, [r1, #4]
 801a884:	2b00      	cmp	r3, #0
 801a886:	dc05      	bgt.n	801a894 <__sflush_r+0x20>
 801a888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	dc02      	bgt.n	801a894 <__sflush_r+0x20>
 801a88e:	2000      	movs	r0, #0
 801a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a896:	2e00      	cmp	r6, #0
 801a898:	d0f9      	beq.n	801a88e <__sflush_r+0x1a>
 801a89a:	2300      	movs	r3, #0
 801a89c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a8a0:	682f      	ldr	r7, [r5, #0]
 801a8a2:	602b      	str	r3, [r5, #0]
 801a8a4:	d032      	beq.n	801a90c <__sflush_r+0x98>
 801a8a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a8a8:	89a3      	ldrh	r3, [r4, #12]
 801a8aa:	075a      	lsls	r2, r3, #29
 801a8ac:	d505      	bpl.n	801a8ba <__sflush_r+0x46>
 801a8ae:	6863      	ldr	r3, [r4, #4]
 801a8b0:	1ac0      	subs	r0, r0, r3
 801a8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a8b4:	b10b      	cbz	r3, 801a8ba <__sflush_r+0x46>
 801a8b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a8b8:	1ac0      	subs	r0, r0, r3
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	4602      	mov	r2, r0
 801a8be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a8c0:	6a21      	ldr	r1, [r4, #32]
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	47b0      	blx	r6
 801a8c6:	1c43      	adds	r3, r0, #1
 801a8c8:	89a3      	ldrh	r3, [r4, #12]
 801a8ca:	d106      	bne.n	801a8da <__sflush_r+0x66>
 801a8cc:	6829      	ldr	r1, [r5, #0]
 801a8ce:	291d      	cmp	r1, #29
 801a8d0:	d82c      	bhi.n	801a92c <__sflush_r+0xb8>
 801a8d2:	4a2a      	ldr	r2, [pc, #168]	; (801a97c <__sflush_r+0x108>)
 801a8d4:	40ca      	lsrs	r2, r1
 801a8d6:	07d6      	lsls	r6, r2, #31
 801a8d8:	d528      	bpl.n	801a92c <__sflush_r+0xb8>
 801a8da:	2200      	movs	r2, #0
 801a8dc:	6062      	str	r2, [r4, #4]
 801a8de:	04d9      	lsls	r1, r3, #19
 801a8e0:	6922      	ldr	r2, [r4, #16]
 801a8e2:	6022      	str	r2, [r4, #0]
 801a8e4:	d504      	bpl.n	801a8f0 <__sflush_r+0x7c>
 801a8e6:	1c42      	adds	r2, r0, #1
 801a8e8:	d101      	bne.n	801a8ee <__sflush_r+0x7a>
 801a8ea:	682b      	ldr	r3, [r5, #0]
 801a8ec:	b903      	cbnz	r3, 801a8f0 <__sflush_r+0x7c>
 801a8ee:	6560      	str	r0, [r4, #84]	; 0x54
 801a8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a8f2:	602f      	str	r7, [r5, #0]
 801a8f4:	2900      	cmp	r1, #0
 801a8f6:	d0ca      	beq.n	801a88e <__sflush_r+0x1a>
 801a8f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a8fc:	4299      	cmp	r1, r3
 801a8fe:	d002      	beq.n	801a906 <__sflush_r+0x92>
 801a900:	4628      	mov	r0, r5
 801a902:	f7ff fa73 	bl	8019dec <_free_r>
 801a906:	2000      	movs	r0, #0
 801a908:	6360      	str	r0, [r4, #52]	; 0x34
 801a90a:	e7c1      	b.n	801a890 <__sflush_r+0x1c>
 801a90c:	6a21      	ldr	r1, [r4, #32]
 801a90e:	2301      	movs	r3, #1
 801a910:	4628      	mov	r0, r5
 801a912:	47b0      	blx	r6
 801a914:	1c41      	adds	r1, r0, #1
 801a916:	d1c7      	bne.n	801a8a8 <__sflush_r+0x34>
 801a918:	682b      	ldr	r3, [r5, #0]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d0c4      	beq.n	801a8a8 <__sflush_r+0x34>
 801a91e:	2b1d      	cmp	r3, #29
 801a920:	d001      	beq.n	801a926 <__sflush_r+0xb2>
 801a922:	2b16      	cmp	r3, #22
 801a924:	d101      	bne.n	801a92a <__sflush_r+0xb6>
 801a926:	602f      	str	r7, [r5, #0]
 801a928:	e7b1      	b.n	801a88e <__sflush_r+0x1a>
 801a92a:	89a3      	ldrh	r3, [r4, #12]
 801a92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a930:	81a3      	strh	r3, [r4, #12]
 801a932:	e7ad      	b.n	801a890 <__sflush_r+0x1c>
 801a934:	690f      	ldr	r7, [r1, #16]
 801a936:	2f00      	cmp	r7, #0
 801a938:	d0a9      	beq.n	801a88e <__sflush_r+0x1a>
 801a93a:	0793      	lsls	r3, r2, #30
 801a93c:	680e      	ldr	r6, [r1, #0]
 801a93e:	bf08      	it	eq
 801a940:	694b      	ldreq	r3, [r1, #20]
 801a942:	600f      	str	r7, [r1, #0]
 801a944:	bf18      	it	ne
 801a946:	2300      	movne	r3, #0
 801a948:	eba6 0807 	sub.w	r8, r6, r7
 801a94c:	608b      	str	r3, [r1, #8]
 801a94e:	f1b8 0f00 	cmp.w	r8, #0
 801a952:	dd9c      	ble.n	801a88e <__sflush_r+0x1a>
 801a954:	6a21      	ldr	r1, [r4, #32]
 801a956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a958:	4643      	mov	r3, r8
 801a95a:	463a      	mov	r2, r7
 801a95c:	4628      	mov	r0, r5
 801a95e:	47b0      	blx	r6
 801a960:	2800      	cmp	r0, #0
 801a962:	dc06      	bgt.n	801a972 <__sflush_r+0xfe>
 801a964:	89a3      	ldrh	r3, [r4, #12]
 801a966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a96a:	81a3      	strh	r3, [r4, #12]
 801a96c:	f04f 30ff 	mov.w	r0, #4294967295
 801a970:	e78e      	b.n	801a890 <__sflush_r+0x1c>
 801a972:	4407      	add	r7, r0
 801a974:	eba8 0800 	sub.w	r8, r8, r0
 801a978:	e7e9      	b.n	801a94e <__sflush_r+0xda>
 801a97a:	bf00      	nop
 801a97c:	20400001 	.word	0x20400001

0801a980 <_fflush_r>:
 801a980:	b538      	push	{r3, r4, r5, lr}
 801a982:	690b      	ldr	r3, [r1, #16]
 801a984:	4605      	mov	r5, r0
 801a986:	460c      	mov	r4, r1
 801a988:	b913      	cbnz	r3, 801a990 <_fflush_r+0x10>
 801a98a:	2500      	movs	r5, #0
 801a98c:	4628      	mov	r0, r5
 801a98e:	bd38      	pop	{r3, r4, r5, pc}
 801a990:	b118      	cbz	r0, 801a99a <_fflush_r+0x1a>
 801a992:	6983      	ldr	r3, [r0, #24]
 801a994:	b90b      	cbnz	r3, 801a99a <_fflush_r+0x1a>
 801a996:	f000 f887 	bl	801aaa8 <__sinit>
 801a99a:	4b14      	ldr	r3, [pc, #80]	; (801a9ec <_fflush_r+0x6c>)
 801a99c:	429c      	cmp	r4, r3
 801a99e:	d11b      	bne.n	801a9d8 <_fflush_r+0x58>
 801a9a0:	686c      	ldr	r4, [r5, #4]
 801a9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d0ef      	beq.n	801a98a <_fflush_r+0xa>
 801a9aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a9ac:	07d0      	lsls	r0, r2, #31
 801a9ae:	d404      	bmi.n	801a9ba <_fflush_r+0x3a>
 801a9b0:	0599      	lsls	r1, r3, #22
 801a9b2:	d402      	bmi.n	801a9ba <_fflush_r+0x3a>
 801a9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a9b6:	f000 f915 	bl	801abe4 <__retarget_lock_acquire_recursive>
 801a9ba:	4628      	mov	r0, r5
 801a9bc:	4621      	mov	r1, r4
 801a9be:	f7ff ff59 	bl	801a874 <__sflush_r>
 801a9c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a9c4:	07da      	lsls	r2, r3, #31
 801a9c6:	4605      	mov	r5, r0
 801a9c8:	d4e0      	bmi.n	801a98c <_fflush_r+0xc>
 801a9ca:	89a3      	ldrh	r3, [r4, #12]
 801a9cc:	059b      	lsls	r3, r3, #22
 801a9ce:	d4dd      	bmi.n	801a98c <_fflush_r+0xc>
 801a9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a9d2:	f000 f909 	bl	801abe8 <__retarget_lock_release_recursive>
 801a9d6:	e7d9      	b.n	801a98c <_fflush_r+0xc>
 801a9d8:	4b05      	ldr	r3, [pc, #20]	; (801a9f0 <_fflush_r+0x70>)
 801a9da:	429c      	cmp	r4, r3
 801a9dc:	d101      	bne.n	801a9e2 <_fflush_r+0x62>
 801a9de:	68ac      	ldr	r4, [r5, #8]
 801a9e0:	e7df      	b.n	801a9a2 <_fflush_r+0x22>
 801a9e2:	4b04      	ldr	r3, [pc, #16]	; (801a9f4 <_fflush_r+0x74>)
 801a9e4:	429c      	cmp	r4, r3
 801a9e6:	bf08      	it	eq
 801a9e8:	68ec      	ldreq	r4, [r5, #12]
 801a9ea:	e7da      	b.n	801a9a2 <_fflush_r+0x22>
 801a9ec:	0801eee8 	.word	0x0801eee8
 801a9f0:	0801ef08 	.word	0x0801ef08
 801a9f4:	0801eec8 	.word	0x0801eec8

0801a9f8 <std>:
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	b510      	push	{r4, lr}
 801a9fc:	4604      	mov	r4, r0
 801a9fe:	e9c0 3300 	strd	r3, r3, [r0]
 801aa02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aa06:	6083      	str	r3, [r0, #8]
 801aa08:	8181      	strh	r1, [r0, #12]
 801aa0a:	6643      	str	r3, [r0, #100]	; 0x64
 801aa0c:	81c2      	strh	r2, [r0, #14]
 801aa0e:	6183      	str	r3, [r0, #24]
 801aa10:	4619      	mov	r1, r3
 801aa12:	2208      	movs	r2, #8
 801aa14:	305c      	adds	r0, #92	; 0x5c
 801aa16:	f7ff f9e1 	bl	8019ddc <memset>
 801aa1a:	4b05      	ldr	r3, [pc, #20]	; (801aa30 <std+0x38>)
 801aa1c:	6263      	str	r3, [r4, #36]	; 0x24
 801aa1e:	4b05      	ldr	r3, [pc, #20]	; (801aa34 <std+0x3c>)
 801aa20:	62a3      	str	r3, [r4, #40]	; 0x28
 801aa22:	4b05      	ldr	r3, [pc, #20]	; (801aa38 <std+0x40>)
 801aa24:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aa26:	4b05      	ldr	r3, [pc, #20]	; (801aa3c <std+0x44>)
 801aa28:	6224      	str	r4, [r4, #32]
 801aa2a:	6323      	str	r3, [r4, #48]	; 0x30
 801aa2c:	bd10      	pop	{r4, pc}
 801aa2e:	bf00      	nop
 801aa30:	0801accd 	.word	0x0801accd
 801aa34:	0801acef 	.word	0x0801acef
 801aa38:	0801ad27 	.word	0x0801ad27
 801aa3c:	0801ad4b 	.word	0x0801ad4b

0801aa40 <_cleanup_r>:
 801aa40:	4901      	ldr	r1, [pc, #4]	; (801aa48 <_cleanup_r+0x8>)
 801aa42:	f000 b8af 	b.w	801aba4 <_fwalk_reent>
 801aa46:	bf00      	nop
 801aa48:	0801a981 	.word	0x0801a981

0801aa4c <__sfmoreglue>:
 801aa4c:	b570      	push	{r4, r5, r6, lr}
 801aa4e:	2268      	movs	r2, #104	; 0x68
 801aa50:	1e4d      	subs	r5, r1, #1
 801aa52:	4355      	muls	r5, r2
 801aa54:	460e      	mov	r6, r1
 801aa56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aa5a:	f7ff fa33 	bl	8019ec4 <_malloc_r>
 801aa5e:	4604      	mov	r4, r0
 801aa60:	b140      	cbz	r0, 801aa74 <__sfmoreglue+0x28>
 801aa62:	2100      	movs	r1, #0
 801aa64:	e9c0 1600 	strd	r1, r6, [r0]
 801aa68:	300c      	adds	r0, #12
 801aa6a:	60a0      	str	r0, [r4, #8]
 801aa6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aa70:	f7ff f9b4 	bl	8019ddc <memset>
 801aa74:	4620      	mov	r0, r4
 801aa76:	bd70      	pop	{r4, r5, r6, pc}

0801aa78 <__sfp_lock_acquire>:
 801aa78:	4801      	ldr	r0, [pc, #4]	; (801aa80 <__sfp_lock_acquire+0x8>)
 801aa7a:	f000 b8b3 	b.w	801abe4 <__retarget_lock_acquire_recursive>
 801aa7e:	bf00      	nop
 801aa80:	24006d6e 	.word	0x24006d6e

0801aa84 <__sfp_lock_release>:
 801aa84:	4801      	ldr	r0, [pc, #4]	; (801aa8c <__sfp_lock_release+0x8>)
 801aa86:	f000 b8af 	b.w	801abe8 <__retarget_lock_release_recursive>
 801aa8a:	bf00      	nop
 801aa8c:	24006d6e 	.word	0x24006d6e

0801aa90 <__sinit_lock_acquire>:
 801aa90:	4801      	ldr	r0, [pc, #4]	; (801aa98 <__sinit_lock_acquire+0x8>)
 801aa92:	f000 b8a7 	b.w	801abe4 <__retarget_lock_acquire_recursive>
 801aa96:	bf00      	nop
 801aa98:	24006d6f 	.word	0x24006d6f

0801aa9c <__sinit_lock_release>:
 801aa9c:	4801      	ldr	r0, [pc, #4]	; (801aaa4 <__sinit_lock_release+0x8>)
 801aa9e:	f000 b8a3 	b.w	801abe8 <__retarget_lock_release_recursive>
 801aaa2:	bf00      	nop
 801aaa4:	24006d6f 	.word	0x24006d6f

0801aaa8 <__sinit>:
 801aaa8:	b510      	push	{r4, lr}
 801aaaa:	4604      	mov	r4, r0
 801aaac:	f7ff fff0 	bl	801aa90 <__sinit_lock_acquire>
 801aab0:	69a3      	ldr	r3, [r4, #24]
 801aab2:	b11b      	cbz	r3, 801aabc <__sinit+0x14>
 801aab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aab8:	f7ff bff0 	b.w	801aa9c <__sinit_lock_release>
 801aabc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aac0:	6523      	str	r3, [r4, #80]	; 0x50
 801aac2:	4b13      	ldr	r3, [pc, #76]	; (801ab10 <__sinit+0x68>)
 801aac4:	4a13      	ldr	r2, [pc, #76]	; (801ab14 <__sinit+0x6c>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	62a2      	str	r2, [r4, #40]	; 0x28
 801aaca:	42a3      	cmp	r3, r4
 801aacc:	bf04      	itt	eq
 801aace:	2301      	moveq	r3, #1
 801aad0:	61a3      	streq	r3, [r4, #24]
 801aad2:	4620      	mov	r0, r4
 801aad4:	f000 f820 	bl	801ab18 <__sfp>
 801aad8:	6060      	str	r0, [r4, #4]
 801aada:	4620      	mov	r0, r4
 801aadc:	f000 f81c 	bl	801ab18 <__sfp>
 801aae0:	60a0      	str	r0, [r4, #8]
 801aae2:	4620      	mov	r0, r4
 801aae4:	f000 f818 	bl	801ab18 <__sfp>
 801aae8:	2200      	movs	r2, #0
 801aaea:	60e0      	str	r0, [r4, #12]
 801aaec:	2104      	movs	r1, #4
 801aaee:	6860      	ldr	r0, [r4, #4]
 801aaf0:	f7ff ff82 	bl	801a9f8 <std>
 801aaf4:	68a0      	ldr	r0, [r4, #8]
 801aaf6:	2201      	movs	r2, #1
 801aaf8:	2109      	movs	r1, #9
 801aafa:	f7ff ff7d 	bl	801a9f8 <std>
 801aafe:	68e0      	ldr	r0, [r4, #12]
 801ab00:	2202      	movs	r2, #2
 801ab02:	2112      	movs	r1, #18
 801ab04:	f7ff ff78 	bl	801a9f8 <std>
 801ab08:	2301      	movs	r3, #1
 801ab0a:	61a3      	str	r3, [r4, #24]
 801ab0c:	e7d2      	b.n	801aab4 <__sinit+0xc>
 801ab0e:	bf00      	nop
 801ab10:	0801ee8c 	.word	0x0801ee8c
 801ab14:	0801aa41 	.word	0x0801aa41

0801ab18 <__sfp>:
 801ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab1a:	4607      	mov	r7, r0
 801ab1c:	f7ff ffac 	bl	801aa78 <__sfp_lock_acquire>
 801ab20:	4b1e      	ldr	r3, [pc, #120]	; (801ab9c <__sfp+0x84>)
 801ab22:	681e      	ldr	r6, [r3, #0]
 801ab24:	69b3      	ldr	r3, [r6, #24]
 801ab26:	b913      	cbnz	r3, 801ab2e <__sfp+0x16>
 801ab28:	4630      	mov	r0, r6
 801ab2a:	f7ff ffbd 	bl	801aaa8 <__sinit>
 801ab2e:	3648      	adds	r6, #72	; 0x48
 801ab30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ab34:	3b01      	subs	r3, #1
 801ab36:	d503      	bpl.n	801ab40 <__sfp+0x28>
 801ab38:	6833      	ldr	r3, [r6, #0]
 801ab3a:	b30b      	cbz	r3, 801ab80 <__sfp+0x68>
 801ab3c:	6836      	ldr	r6, [r6, #0]
 801ab3e:	e7f7      	b.n	801ab30 <__sfp+0x18>
 801ab40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ab44:	b9d5      	cbnz	r5, 801ab7c <__sfp+0x64>
 801ab46:	4b16      	ldr	r3, [pc, #88]	; (801aba0 <__sfp+0x88>)
 801ab48:	60e3      	str	r3, [r4, #12]
 801ab4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab4e:	6665      	str	r5, [r4, #100]	; 0x64
 801ab50:	f000 f847 	bl	801abe2 <__retarget_lock_init_recursive>
 801ab54:	f7ff ff96 	bl	801aa84 <__sfp_lock_release>
 801ab58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ab5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ab60:	6025      	str	r5, [r4, #0]
 801ab62:	61a5      	str	r5, [r4, #24]
 801ab64:	2208      	movs	r2, #8
 801ab66:	4629      	mov	r1, r5
 801ab68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ab6c:	f7ff f936 	bl	8019ddc <memset>
 801ab70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ab74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ab78:	4620      	mov	r0, r4
 801ab7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab7c:	3468      	adds	r4, #104	; 0x68
 801ab7e:	e7d9      	b.n	801ab34 <__sfp+0x1c>
 801ab80:	2104      	movs	r1, #4
 801ab82:	4638      	mov	r0, r7
 801ab84:	f7ff ff62 	bl	801aa4c <__sfmoreglue>
 801ab88:	4604      	mov	r4, r0
 801ab8a:	6030      	str	r0, [r6, #0]
 801ab8c:	2800      	cmp	r0, #0
 801ab8e:	d1d5      	bne.n	801ab3c <__sfp+0x24>
 801ab90:	f7ff ff78 	bl	801aa84 <__sfp_lock_release>
 801ab94:	230c      	movs	r3, #12
 801ab96:	603b      	str	r3, [r7, #0]
 801ab98:	e7ee      	b.n	801ab78 <__sfp+0x60>
 801ab9a:	bf00      	nop
 801ab9c:	0801ee8c 	.word	0x0801ee8c
 801aba0:	ffff0001 	.word	0xffff0001

0801aba4 <_fwalk_reent>:
 801aba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aba8:	4606      	mov	r6, r0
 801abaa:	4688      	mov	r8, r1
 801abac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801abb0:	2700      	movs	r7, #0
 801abb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801abb6:	f1b9 0901 	subs.w	r9, r9, #1
 801abba:	d505      	bpl.n	801abc8 <_fwalk_reent+0x24>
 801abbc:	6824      	ldr	r4, [r4, #0]
 801abbe:	2c00      	cmp	r4, #0
 801abc0:	d1f7      	bne.n	801abb2 <_fwalk_reent+0xe>
 801abc2:	4638      	mov	r0, r7
 801abc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abc8:	89ab      	ldrh	r3, [r5, #12]
 801abca:	2b01      	cmp	r3, #1
 801abcc:	d907      	bls.n	801abde <_fwalk_reent+0x3a>
 801abce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801abd2:	3301      	adds	r3, #1
 801abd4:	d003      	beq.n	801abde <_fwalk_reent+0x3a>
 801abd6:	4629      	mov	r1, r5
 801abd8:	4630      	mov	r0, r6
 801abda:	47c0      	blx	r8
 801abdc:	4307      	orrs	r7, r0
 801abde:	3568      	adds	r5, #104	; 0x68
 801abe0:	e7e9      	b.n	801abb6 <_fwalk_reent+0x12>

0801abe2 <__retarget_lock_init_recursive>:
 801abe2:	4770      	bx	lr

0801abe4 <__retarget_lock_acquire_recursive>:
 801abe4:	4770      	bx	lr

0801abe6 <__retarget_lock_release>:
 801abe6:	4770      	bx	lr

0801abe8 <__retarget_lock_release_recursive>:
 801abe8:	4770      	bx	lr

0801abea <__swhatbuf_r>:
 801abea:	b570      	push	{r4, r5, r6, lr}
 801abec:	460e      	mov	r6, r1
 801abee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abf2:	2900      	cmp	r1, #0
 801abf4:	b096      	sub	sp, #88	; 0x58
 801abf6:	4614      	mov	r4, r2
 801abf8:	461d      	mov	r5, r3
 801abfa:	da08      	bge.n	801ac0e <__swhatbuf_r+0x24>
 801abfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ac00:	2200      	movs	r2, #0
 801ac02:	602a      	str	r2, [r5, #0]
 801ac04:	061a      	lsls	r2, r3, #24
 801ac06:	d410      	bmi.n	801ac2a <__swhatbuf_r+0x40>
 801ac08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ac0c:	e00e      	b.n	801ac2c <__swhatbuf_r+0x42>
 801ac0e:	466a      	mov	r2, sp
 801ac10:	f000 f8c2 	bl	801ad98 <_fstat_r>
 801ac14:	2800      	cmp	r0, #0
 801ac16:	dbf1      	blt.n	801abfc <__swhatbuf_r+0x12>
 801ac18:	9a01      	ldr	r2, [sp, #4]
 801ac1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ac1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ac22:	425a      	negs	r2, r3
 801ac24:	415a      	adcs	r2, r3
 801ac26:	602a      	str	r2, [r5, #0]
 801ac28:	e7ee      	b.n	801ac08 <__swhatbuf_r+0x1e>
 801ac2a:	2340      	movs	r3, #64	; 0x40
 801ac2c:	2000      	movs	r0, #0
 801ac2e:	6023      	str	r3, [r4, #0]
 801ac30:	b016      	add	sp, #88	; 0x58
 801ac32:	bd70      	pop	{r4, r5, r6, pc}

0801ac34 <__smakebuf_r>:
 801ac34:	898b      	ldrh	r3, [r1, #12]
 801ac36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ac38:	079d      	lsls	r5, r3, #30
 801ac3a:	4606      	mov	r6, r0
 801ac3c:	460c      	mov	r4, r1
 801ac3e:	d507      	bpl.n	801ac50 <__smakebuf_r+0x1c>
 801ac40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ac44:	6023      	str	r3, [r4, #0]
 801ac46:	6123      	str	r3, [r4, #16]
 801ac48:	2301      	movs	r3, #1
 801ac4a:	6163      	str	r3, [r4, #20]
 801ac4c:	b002      	add	sp, #8
 801ac4e:	bd70      	pop	{r4, r5, r6, pc}
 801ac50:	ab01      	add	r3, sp, #4
 801ac52:	466a      	mov	r2, sp
 801ac54:	f7ff ffc9 	bl	801abea <__swhatbuf_r>
 801ac58:	9900      	ldr	r1, [sp, #0]
 801ac5a:	4605      	mov	r5, r0
 801ac5c:	4630      	mov	r0, r6
 801ac5e:	f7ff f931 	bl	8019ec4 <_malloc_r>
 801ac62:	b948      	cbnz	r0, 801ac78 <__smakebuf_r+0x44>
 801ac64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ac68:	059a      	lsls	r2, r3, #22
 801ac6a:	d4ef      	bmi.n	801ac4c <__smakebuf_r+0x18>
 801ac6c:	f023 0303 	bic.w	r3, r3, #3
 801ac70:	f043 0302 	orr.w	r3, r3, #2
 801ac74:	81a3      	strh	r3, [r4, #12]
 801ac76:	e7e3      	b.n	801ac40 <__smakebuf_r+0xc>
 801ac78:	4b0d      	ldr	r3, [pc, #52]	; (801acb0 <__smakebuf_r+0x7c>)
 801ac7a:	62b3      	str	r3, [r6, #40]	; 0x28
 801ac7c:	89a3      	ldrh	r3, [r4, #12]
 801ac7e:	6020      	str	r0, [r4, #0]
 801ac80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac84:	81a3      	strh	r3, [r4, #12]
 801ac86:	9b00      	ldr	r3, [sp, #0]
 801ac88:	6163      	str	r3, [r4, #20]
 801ac8a:	9b01      	ldr	r3, [sp, #4]
 801ac8c:	6120      	str	r0, [r4, #16]
 801ac8e:	b15b      	cbz	r3, 801aca8 <__smakebuf_r+0x74>
 801ac90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac94:	4630      	mov	r0, r6
 801ac96:	f000 f891 	bl	801adbc <_isatty_r>
 801ac9a:	b128      	cbz	r0, 801aca8 <__smakebuf_r+0x74>
 801ac9c:	89a3      	ldrh	r3, [r4, #12]
 801ac9e:	f023 0303 	bic.w	r3, r3, #3
 801aca2:	f043 0301 	orr.w	r3, r3, #1
 801aca6:	81a3      	strh	r3, [r4, #12]
 801aca8:	89a0      	ldrh	r0, [r4, #12]
 801acaa:	4305      	orrs	r5, r0
 801acac:	81a5      	strh	r5, [r4, #12]
 801acae:	e7cd      	b.n	801ac4c <__smakebuf_r+0x18>
 801acb0:	0801aa41 	.word	0x0801aa41

0801acb4 <__malloc_lock>:
 801acb4:	4801      	ldr	r0, [pc, #4]	; (801acbc <__malloc_lock+0x8>)
 801acb6:	f7ff bf95 	b.w	801abe4 <__retarget_lock_acquire_recursive>
 801acba:	bf00      	nop
 801acbc:	24006d6d 	.word	0x24006d6d

0801acc0 <__malloc_unlock>:
 801acc0:	4801      	ldr	r0, [pc, #4]	; (801acc8 <__malloc_unlock+0x8>)
 801acc2:	f7ff bf91 	b.w	801abe8 <__retarget_lock_release_recursive>
 801acc6:	bf00      	nop
 801acc8:	24006d6d 	.word	0x24006d6d

0801accc <__sread>:
 801accc:	b510      	push	{r4, lr}
 801acce:	460c      	mov	r4, r1
 801acd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acd4:	f000 f894 	bl	801ae00 <_read_r>
 801acd8:	2800      	cmp	r0, #0
 801acda:	bfab      	itete	ge
 801acdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801acde:	89a3      	ldrhlt	r3, [r4, #12]
 801ace0:	181b      	addge	r3, r3, r0
 801ace2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ace6:	bfac      	ite	ge
 801ace8:	6563      	strge	r3, [r4, #84]	; 0x54
 801acea:	81a3      	strhlt	r3, [r4, #12]
 801acec:	bd10      	pop	{r4, pc}

0801acee <__swrite>:
 801acee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acf2:	461f      	mov	r7, r3
 801acf4:	898b      	ldrh	r3, [r1, #12]
 801acf6:	05db      	lsls	r3, r3, #23
 801acf8:	4605      	mov	r5, r0
 801acfa:	460c      	mov	r4, r1
 801acfc:	4616      	mov	r6, r2
 801acfe:	d505      	bpl.n	801ad0c <__swrite+0x1e>
 801ad00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad04:	2302      	movs	r3, #2
 801ad06:	2200      	movs	r2, #0
 801ad08:	f000 f868 	bl	801addc <_lseek_r>
 801ad0c:	89a3      	ldrh	r3, [r4, #12]
 801ad0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad16:	81a3      	strh	r3, [r4, #12]
 801ad18:	4632      	mov	r2, r6
 801ad1a:	463b      	mov	r3, r7
 801ad1c:	4628      	mov	r0, r5
 801ad1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad22:	f000 b817 	b.w	801ad54 <_write_r>

0801ad26 <__sseek>:
 801ad26:	b510      	push	{r4, lr}
 801ad28:	460c      	mov	r4, r1
 801ad2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad2e:	f000 f855 	bl	801addc <_lseek_r>
 801ad32:	1c43      	adds	r3, r0, #1
 801ad34:	89a3      	ldrh	r3, [r4, #12]
 801ad36:	bf15      	itete	ne
 801ad38:	6560      	strne	r0, [r4, #84]	; 0x54
 801ad3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ad3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ad42:	81a3      	strheq	r3, [r4, #12]
 801ad44:	bf18      	it	ne
 801ad46:	81a3      	strhne	r3, [r4, #12]
 801ad48:	bd10      	pop	{r4, pc}

0801ad4a <__sclose>:
 801ad4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad4e:	f000 b813 	b.w	801ad78 <_close_r>
	...

0801ad54 <_write_r>:
 801ad54:	b538      	push	{r3, r4, r5, lr}
 801ad56:	4d07      	ldr	r5, [pc, #28]	; (801ad74 <_write_r+0x20>)
 801ad58:	4604      	mov	r4, r0
 801ad5a:	4608      	mov	r0, r1
 801ad5c:	4611      	mov	r1, r2
 801ad5e:	2200      	movs	r2, #0
 801ad60:	602a      	str	r2, [r5, #0]
 801ad62:	461a      	mov	r2, r3
 801ad64:	f7e6 f98e 	bl	8001084 <_write>
 801ad68:	1c43      	adds	r3, r0, #1
 801ad6a:	d102      	bne.n	801ad72 <_write_r+0x1e>
 801ad6c:	682b      	ldr	r3, [r5, #0]
 801ad6e:	b103      	cbz	r3, 801ad72 <_write_r+0x1e>
 801ad70:	6023      	str	r3, [r4, #0]
 801ad72:	bd38      	pop	{r3, r4, r5, pc}
 801ad74:	24006d70 	.word	0x24006d70

0801ad78 <_close_r>:
 801ad78:	b538      	push	{r3, r4, r5, lr}
 801ad7a:	4d06      	ldr	r5, [pc, #24]	; (801ad94 <_close_r+0x1c>)
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	4604      	mov	r4, r0
 801ad80:	4608      	mov	r0, r1
 801ad82:	602b      	str	r3, [r5, #0]
 801ad84:	f7e6 f98c 	bl	80010a0 <_close>
 801ad88:	1c43      	adds	r3, r0, #1
 801ad8a:	d102      	bne.n	801ad92 <_close_r+0x1a>
 801ad8c:	682b      	ldr	r3, [r5, #0]
 801ad8e:	b103      	cbz	r3, 801ad92 <_close_r+0x1a>
 801ad90:	6023      	str	r3, [r4, #0]
 801ad92:	bd38      	pop	{r3, r4, r5, pc}
 801ad94:	24006d70 	.word	0x24006d70

0801ad98 <_fstat_r>:
 801ad98:	b538      	push	{r3, r4, r5, lr}
 801ad9a:	4d07      	ldr	r5, [pc, #28]	; (801adb8 <_fstat_r+0x20>)
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	4604      	mov	r4, r0
 801ada0:	4608      	mov	r0, r1
 801ada2:	4611      	mov	r1, r2
 801ada4:	602b      	str	r3, [r5, #0]
 801ada6:	f7e6 f97e 	bl	80010a6 <_fstat>
 801adaa:	1c43      	adds	r3, r0, #1
 801adac:	d102      	bne.n	801adb4 <_fstat_r+0x1c>
 801adae:	682b      	ldr	r3, [r5, #0]
 801adb0:	b103      	cbz	r3, 801adb4 <_fstat_r+0x1c>
 801adb2:	6023      	str	r3, [r4, #0]
 801adb4:	bd38      	pop	{r3, r4, r5, pc}
 801adb6:	bf00      	nop
 801adb8:	24006d70 	.word	0x24006d70

0801adbc <_isatty_r>:
 801adbc:	b538      	push	{r3, r4, r5, lr}
 801adbe:	4d06      	ldr	r5, [pc, #24]	; (801add8 <_isatty_r+0x1c>)
 801adc0:	2300      	movs	r3, #0
 801adc2:	4604      	mov	r4, r0
 801adc4:	4608      	mov	r0, r1
 801adc6:	602b      	str	r3, [r5, #0]
 801adc8:	f7e6 f972 	bl	80010b0 <_isatty>
 801adcc:	1c43      	adds	r3, r0, #1
 801adce:	d102      	bne.n	801add6 <_isatty_r+0x1a>
 801add0:	682b      	ldr	r3, [r5, #0]
 801add2:	b103      	cbz	r3, 801add6 <_isatty_r+0x1a>
 801add4:	6023      	str	r3, [r4, #0]
 801add6:	bd38      	pop	{r3, r4, r5, pc}
 801add8:	24006d70 	.word	0x24006d70

0801addc <_lseek_r>:
 801addc:	b538      	push	{r3, r4, r5, lr}
 801adde:	4d07      	ldr	r5, [pc, #28]	; (801adfc <_lseek_r+0x20>)
 801ade0:	4604      	mov	r4, r0
 801ade2:	4608      	mov	r0, r1
 801ade4:	4611      	mov	r1, r2
 801ade6:	2200      	movs	r2, #0
 801ade8:	602a      	str	r2, [r5, #0]
 801adea:	461a      	mov	r2, r3
 801adec:	f7e6 f962 	bl	80010b4 <_lseek>
 801adf0:	1c43      	adds	r3, r0, #1
 801adf2:	d102      	bne.n	801adfa <_lseek_r+0x1e>
 801adf4:	682b      	ldr	r3, [r5, #0]
 801adf6:	b103      	cbz	r3, 801adfa <_lseek_r+0x1e>
 801adf8:	6023      	str	r3, [r4, #0]
 801adfa:	bd38      	pop	{r3, r4, r5, pc}
 801adfc:	24006d70 	.word	0x24006d70

0801ae00 <_read_r>:
 801ae00:	b538      	push	{r3, r4, r5, lr}
 801ae02:	4d07      	ldr	r5, [pc, #28]	; (801ae20 <_read_r+0x20>)
 801ae04:	4604      	mov	r4, r0
 801ae06:	4608      	mov	r0, r1
 801ae08:	4611      	mov	r1, r2
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	602a      	str	r2, [r5, #0]
 801ae0e:	461a      	mov	r2, r3
 801ae10:	f7e6 f92a 	bl	8001068 <_read>
 801ae14:	1c43      	adds	r3, r0, #1
 801ae16:	d102      	bne.n	801ae1e <_read_r+0x1e>
 801ae18:	682b      	ldr	r3, [r5, #0]
 801ae1a:	b103      	cbz	r3, 801ae1e <_read_r+0x1e>
 801ae1c:	6023      	str	r3, [r4, #0]
 801ae1e:	bd38      	pop	{r3, r4, r5, pc}
 801ae20:	24006d70 	.word	0x24006d70

0801ae24 <_init>:
 801ae24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae26:	bf00      	nop
 801ae28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae2a:	bc08      	pop	{r3}
 801ae2c:	469e      	mov	lr, r3
 801ae2e:	4770      	bx	lr

0801ae30 <_fini>:
 801ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae32:	bf00      	nop
 801ae34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae36:	bc08      	pop	{r3}
 801ae38:	469e      	mov	lr, r3
 801ae3a:	4770      	bx	lr
